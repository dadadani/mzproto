const base = @import("base.zig");
const TLID = enum(u32) {
    ProtoResPQ = 85337187,
    ProtoPQInnerDataDc = 2851430293,
    ProtoPQInnerDataTempDc = 1459478408,
    ProtoServerDHParamsOk = 3504867164,
    ProtoServerDHInnerData = 3045658042,
    ProtoClientDHInnerData = 1715713620,
    ProtoDhGenOk = 1003222836,
    ProtoDhGenRetry = 1188831161,
    ProtoDhGenFail = 2795351554,
    ProtoBindAuthKeyInner = 1973679973,
    ProtoRpcError = 558156313,
    ProtoRpcAnswerUnknown = 1579864942,
    ProtoRpcAnswerDroppedRunning = 3447252358,
    ProtoRpcAnswerDropped = 2755319991,
    ProtoFutureSalt = 155834844,
    ProtoPong = 880243653,
    ProtoDestroySessionOk = 3793765884,
    ProtoDestroySessionNone = 1658015945,
    ProtoNewSessionCreated = 2663516424,
    ProtoGzipPacked = 812830625,
    ProtoMsgsAck = 1658238041,
    ProtoBadMsgNotification = 2817521681,
    ProtoBadServerSalt = 3987424379,
    ProtoMsgResendReq = 2105940488,
    ProtoMsgsStateReq = 3664378706,
    ProtoMsgsStateInfo = 81704317,
    ProtoMsgsAllInfo = 2361446705,
    ProtoMsgDetailedInfo = 661470918,
    ProtoMsgNewDetailedInfo = 2157819615,
    ProtoDestroyAuthKeyOk = 4133544404,
    ProtoDestroyAuthKeyNone = 178201177,
    ProtoDestroyAuthKeyFail = 3926956819,
    ProtoHttpWait = 2459514271,
    ProtoReqDHParams = 3608339646,
    ProtoSetClientDHParams = 4110704415,
    ProtoRpcDropAnswer = 1491380032,
    ProtoGetFutureSalts = 3105996036,
    ProtoPing = 2059302892,
    ProtoPingDelayDisconnect = 4081220492,
    ProtoDestroySession = 3880853798,
    ProtoDestroyAuthKey = 3510849888,
    InputPeerEmpty = 2134579434,
    InputPeerSelf = 2107670217,
    InputPeerChat = 900291769,
    InputPeerUser = 3723011404,
    InputPeerChannel = 666680316,
    InputPeerUserFromMessage = 2826635804,
    InputPeerChannelFromMessage = 3173648448,
    InputUserEmpty = 3112732367,
    InputUserSelf = 4156666175,
    InputUser = 4061223110,
    InputUserFromMessage = 497305826,
    InputPhoneContact = 4086478836,
    InputFile = 4113560191,
    InputFileBig = 4199484341,
    InputFileStoryDocument = 1658620744,
    InputMediaEmpty = 2523198847,
    InputMediaUploadedPhoto = 505969924,
    InputMediaPhoto = 3015312949,
    InputMediaGeoPoint = 4190388548,
    InputMediaContact = 4171988475,
    InputMediaUploadedDocument = 1530447553,
    InputMediaDocument = 860303448,
    InputMediaVenue = 3242007569,
    InputMediaPhotoExternal = 3854302746,
    InputMediaDocumentExternal = 4216511641,
    InputMediaGame = 3544138739,
    InputMediaInvoice = 1080028941,
    InputMediaGeoLive = 2535434307,
    InputMediaPoll = 261416433,
    InputMediaDice = 3866083195,
    InputMediaStory = 2315114360,
    InputMediaWebPage = 3256584265,
    InputMediaPaidMedia = 3289396102,
    InputChatPhotoEmpty = 480546647,
    InputChatUploadedPhoto = 3184373440,
    InputChatPhoto = 2303962423,
    InputGeoPointEmpty = 3837862870,
    InputGeoPoint = 1210199983,
    InputPhotoEmpty = 483901197,
    InputPhoto = 1001634122,
    InputFileLocation = 3755650017,
    InputEncryptedFileLocation = 4112735573,
    InputDocumentFileLocation = 3134223748,
    InputSecureFileLocation = 3418877480,
    InputTakeoutFileLocation = 700340377,
    InputPhotoFileLocation = 1075322878,
    InputPhotoLegacyFileLocation = 3627312883,
    InputPeerPhotoFileLocation = 925204121,
    InputStickerSetThumb = 2642736091,
    InputGroupCallStream = 93890858,
    PeerUser = 1498486562,
    PeerChat = 918946202,
    PeerChannel = 2728736542,
    StorageFileUnknown = 2861972229,
    StorageFilePartial = 1086091090,
    StorageFileJpeg = 8322574,
    StorageFileGif = 3403786975,
    StorageFilePng = 172975040,
    StorageFilePdf = 2921222285,
    StorageFileMp3 = 1384777335,
    StorageFileMov = 1258941372,
    StorageFileMp4 = 3016663268,
    StorageFileWebp = 276907596,
    UserEmpty = 3552332666,
    User = 2201046986,
    UserProfilePhotoEmpty = 1326562017,
    UserProfilePhoto = 2194798342,
    UserStatusEmpty = 164646985,
    UserStatusOnline = 3988339017,
    UserStatusOffline = 9203775,
    UserStatusRecently = 2065268168,
    UserStatusLastWeek = 1410997530,
    UserStatusLastMonth = 1703516023,
    ChatEmpty = 693512293,
    Chat = 1103884886,
    ChatForbidden = 1704108455,
    Channel = 4265900221,
    ChannelForbidden = 399807445,
    ChatFull = 640893467,
    ChannelFull = 3148559501,
    ChatParticipant = 3224190983,
    ChatParticipantCreator = 3832270564,
    ChatParticipantAdmin = 2694004571,
    ChatParticipantsForbidden = 2271466465,
    ChatParticipants = 1018991608,
    ChatPhotoEmpty = 935395612,
    ChatPhoto = 476978193,
    MessageEmpty = 2426849924,
    Message = 2486456898,
    MessageService = 721967202,
    MessageMediaEmpty = 1038967584,
    MessageMediaPhoto = 1766936791,
    MessageMediaGeo = 1457575028,
    MessageMediaContact = 1882335561,
    MessageMediaUnsupported = 2676290718,
    MessageMediaDocument = 3713469397,
    MessageMediaWebPage = 3723562043,
    MessageMediaVenue = 784356159,
    MessageMediaGame = 4256272392,
    MessageMediaInvoice = 4138027219,
    MessageMediaGeoLive = 3108030054,
    MessageMediaPoll = 1272375192,
    MessageMediaDice = 1065280907,
    MessageMediaStory = 1758159491,
    MessageMediaGiveaway = 2852600811,
    MessageMediaGiveawayResults = 3467263649,
    MessageMediaPaidMedia = 2827297937,
    MessageActionEmpty = 3064919984,
    MessageActionChatCreate = 3175599021,
    MessageActionChatEditTitle = 3047280218,
    MessageActionChatEditPhoto = 2144015272,
    MessageActionChatDeletePhoto = 2514746351,
    MessageActionChatAddUser = 365886720,
    MessageActionChatDeleteUser = 2755604684,
    MessageActionChatJoinedByLink = 51520707,
    MessageActionChannelCreate = 2513611922,
    MessageActionChatMigrateTo = 3775102866,
    MessageActionChannelMigrateFrom = 3929622761,
    MessageActionPinMessage = 2495428845,
    MessageActionHistoryClear = 2679813636,
    MessageActionGameScore = 2460428406,
    MessageActionPaymentSentMe = 2402399015,
    MessageActionPaymentSent = 2518040406,
    MessageActionPhoneCall = 2162236031,
    MessageActionScreenshotTaken = 1200788123,
    MessageActionCustomAction = 4209418070,
    MessageActionBotAllowed = 3306608249,
    MessageActionSecureValuesSentMe = 455635795,
    MessageActionSecureValuesSent = 3646710100,
    MessageActionContactSignUp = 4092747638,
    MessageActionGeoProximityReached = 2564871831,
    MessageActionGroupCall = 2047704898,
    MessageActionInviteToGroupCall = 1345295095,
    MessageActionSetMessagesTTL = 1007897979,
    MessageActionGroupCallScheduled = 3013637729,
    MessageActionSetChatTheme = 2860016453,
    MessageActionChatJoinedByRequest = 3955008459,
    MessageActionWebViewDataSentMe = 1205698681,
    MessageActionWebViewDataSent = 3032714421,
    MessageActionGiftPremium = 3359468268,
    MessageActionTopicCreate = 228168278,
    MessageActionTopicEdit = 3230943264,
    MessageActionSuggestProfilePhoto = 1474192222,
    MessageActionRequestedPeer = 827428507,
    MessageActionSetChatWallPaper = 1348510708,
    MessageActionGiftCode = 1737240073,
    MessageActionGiveawayLaunch = 2819576292,
    MessageActionGiveawayResults = 2279797077,
    MessageActionBoostApply = 3422726765,
    MessageActionRequestedPeerSentMe = 2477987912,
    MessageActionPaymentRefunded = 1102307842,
    MessageActionGiftStars = 1171632161,
    MessageActionPrizeStars = 2953594786,
    MessageActionStarGift = 2612260676,
    Dialog = 3582593222,
    DialogFolder = 1908216652,
    PhotoEmpty = 590459437,
    Photo = 4212750949,
    PhotoSizeEmpty = 236446268,
    PhotoSize = 1976012384,
    PhotoCachedSize = 35527382,
    PhotoStrippedSize = 3769678894,
    PhotoSizeProgressive = 4198431637,
    PhotoPathSize = 3626061121,
    GeoPointEmpty = 286776671,
    GeoPoint = 2997024355,
    AuthSentCode = 1577067778,
    AuthSentCodeSuccess = 596704836,
    AuthAuthorization = 782418132,
    AuthAuthorizationSignUpRequired = 1148485274,
    AuthExportedAuthorization = 3023364792,
    InputNotifyPeer = 3099351820,
    InputNotifyUsers = 423314455,
    InputNotifyChats = 1251338318,
    InputNotifyBroadcasts = 2983951486,
    InputNotifyForumTopic = 1548122514,
    InputPeerNotifySettings = 3402328802,
    PeerNotifySettings = 2573347852,
    PeerSettings = 2899733598,
    WallPaper = 2755118061,
    WallPaperNoFile = 3766501654,
    InputReportReasonSpam = 1490799288,
    InputReportReasonViolence = 505595789,
    InputReportReasonPornography = 777640226,
    InputReportReasonChildAbuse = 2918469347,
    InputReportReasonOther = 3252986545,
    InputReportReasonCopyright = 2609510714,
    InputReportReasonGeoIrrelevant = 3688169197,
    InputReportReasonFake = 4124956391,
    InputReportReasonIllegalDrugs = 177124030,
    InputReportReasonPersonalDetails = 2663876157,
    UserFull = 525919081,
    Contact = 341499403,
    ImportedContact = 3242081360,
    ContactStatus = 383348795,
    ContactsContactsNotModified = 3075189202,
    ContactsContacts = 3941105218,
    ContactsImportedContacts = 2010127419,
    ContactsBlocked = 182326673,
    ContactsBlockedSlice = 3781575060,
    MessagesDialogs = 364538944,
    MessagesDialogsSlice = 1910543603,
    MessagesDialogsNotModified = 4041467286,
    MessagesMessages = 2356252295,
    MessagesMessagesSlice = 978610270,
    MessagesChannelMessages = 3346446926,
    MessagesMessagesNotModified = 1951620897,
    MessagesChats = 1694474197,
    MessagesChatsSlice = 2631405892,
    MessagesChatFull = 3856126364,
    MessagesAffectedHistory = 3025955281,
    InputMessagesFilterEmpty = 1474492012,
    InputMessagesFilterPhotos = 2517214492,
    InputMessagesFilterVideo = 2680163941,
    InputMessagesFilterPhotoVideo = 1458172132,
    InputMessagesFilterDocument = 2665345416,
    InputMessagesFilterUrl = 2129714567,
    InputMessagesFilterGif = 4291323271,
    InputMessagesFilterVoice = 1358283666,
    InputMessagesFilterMusic = 928101534,
    InputMessagesFilterChatPhotos = 975236280,
    InputMessagesFilterPhoneCalls = 2160695144,
    InputMessagesFilterRoundVoice = 2054952868,
    InputMessagesFilterRoundVideo = 3041516115,
    InputMessagesFilterMyMentions = 3254314650,
    InputMessagesFilterGeo = 3875695885,
    InputMessagesFilterContacts = 3764575107,
    InputMessagesFilterPinned = 464520273,
    UpdateNewMessage = 522914557,
    UpdateMessageID = 1318109142,
    UpdateDeleteMessages = 2718806245,
    UpdateUserTyping = 3223225727,
    UpdateChatUserTyping = 2202565360,
    UpdateChatParticipants = 125178264,
    UpdateUserStatus = 3854432478,
    UpdateUserName = 2810480932,
    UpdateNewAuthorization = 2303831023,
    UpdateNewEncryptedMessage = 314359194,
    UpdateEncryptedChatTyping = 386986326,
    UpdateEncryption = 3030575245,
    UpdateEncryptedMessagesRead = 956179895,
    UpdateChatParticipantAdd = 1037718609,
    UpdateChatParticipantDelete = 3811523959,
    UpdateDcOptions = 2388564083,
    UpdateNotifySettings = 3200411887,
    UpdateServiceNotification = 3957614617,
    UpdatePrivacy = 3996854058,
    UpdateUserPhone = 88680979,
    UpdateReadHistoryInbox = 2627162079,
    UpdateReadHistoryOutbox = 791617983,
    UpdateWebPage = 2139689491,
    UpdateReadMessagesContents = 4163006849,
    UpdateChannelTooLong = 277713951,
    UpdateChannel = 1666927625,
    UpdateNewChannelMessage = 1656358105,
    UpdateReadChannelInbox = 2452516368,
    UpdateDeleteChannelMessages = 3274529554,
    UpdateChannelMessageViews = 4062620680,
    UpdateChatParticipantAdmin = 3620364706,
    UpdateNewStickerSet = 1753886890,
    UpdateStickerSetsOrder = 196268545,
    UpdateStickerSets = 834816008,
    UpdateSavedGifs = 2473931806,
    UpdateBotInlineQuery = 1232025500,
    UpdateBotInlineSend = 317794823,
    UpdateEditChannelMessage = 457133559,
    UpdateBotCallbackQuery = 3117401229,
    UpdateEditMessage = 3825430691,
    UpdateInlineBotCallbackQuery = 1763610706,
    UpdateReadChannelOutbox = 3076495785,
    UpdateDraftMessage = 457829485,
    UpdateReadFeaturedStickers = 1461528386,
    UpdateRecentStickers = 2588027936,
    UpdateConfig = 2720652550,
    UpdatePtsChanged = 861169551,
    UpdateChannelWebPage = 791390623,
    UpdateDialogPinned = 1852826908,
    UpdatePinnedDialogs = 4195302562,
    UpdateBotWebhookJSON = 2199371971,
    UpdateBotWebhookJSONQuery = 2610053286,
    UpdateBotShippingQuery = 3048144253,
    UpdateBotPrecheckoutQuery = 2359990934,
    UpdatePhoneCall = 2869914398,
    UpdateLangPackTooLong = 1180041828,
    UpdateLangPack = 1442983757,
    UpdateFavedStickers = 3843135853,
    UpdateChannelReadMessagesContents = 3928556893,
    UpdateContactsReset = 1887741886,
    UpdateChannelAvailableMessages = 2990524056,
    UpdateDialogUnreadMark = 3781450179,
    UpdateMessagePoll = 2896258427,
    UpdateChatDefaultBannedRights = 1421875280,
    UpdateFolderPeers = 422972864,
    UpdatePeerSettings = 1786671974,
    UpdatePeerLocated = 3031420848,
    UpdateNewScheduledMessage = 967122427,
    UpdateDeleteScheduledMessages = 2424728814,
    UpdateTheme = 2182544291,
    UpdateGeoLiveViewed = 2267003193,
    UpdateLoginToken = 1448076945,
    UpdateMessagePollVote = 619974263,
    UpdateDialogFilter = 654302845,
    UpdateDialogFilterOrder = 2782339333,
    UpdateDialogFilters = 889491791,
    UpdatePhoneCallSignalingData = 643940105,
    UpdateChannelMessageForwards = 3533318132,
    UpdateReadChannelDiscussionInbox = 3601962310,
    UpdateReadChannelDiscussionOutbox = 1767677564,
    UpdatePeerBlocked = 3957356370,
    UpdateChannelUserTyping = 2357774627,
    UpdatePinnedMessages = 3984976565,
    UpdatePinnedChannelMessages = 1538885128,
    UpdateChat = 4170869326,
    UpdateGroupCallParticipants = 4075543374,
    UpdateGroupCall = 347227392,
    UpdatePeerHistoryTTL = 3147544997,
    UpdateChatParticipant = 3498534458,
    UpdateChannelParticipant = 2556246715,
    UpdateBotStopped = 3297184329,
    UpdateGroupCallConnection = 192428418,
    UpdateBotCommands = 1299263278,
    UpdatePendingJoinRequests = 1885586395,
    UpdateBotChatInviteRequester = 299870598,
    UpdateMessageReactions = 1578843320,
    UpdateAttachMenuBots = 397910539,
    UpdateWebViewResultSent = 361936797,
    UpdateBotMenuButton = 347625491,
    UpdateSavedRingtones = 1960361625,
    UpdateTranscribedAudio = 8703322,
    UpdateReadFeaturedEmojiStickers = 4216080748,
    UpdateUserEmojiStatus = 674706841,
    UpdateRecentEmojiStatuses = 821314523,
    UpdateRecentReactions = 1870160884,
    UpdateMoveStickerSetToTop = 2264715141,
    UpdateMessageExtendedMedia = 3584300836,
    UpdateChannelPinnedTopic = 422509539,
    UpdateChannelPinnedTopics = 4263085570,
    UpdateUser = 542282808,
    UpdateAutoSaveSettings = 3959795863,
    UpdateStory = 1974712216,
    UpdateReadStories = 4149121835,
    UpdateStoryID = 468923833,
    UpdateStoriesStealthMode = 738741697,
    UpdateSentStoryReaction = 2103604867,
    UpdateBotChatBoost = 2421019804,
    UpdateChannelViewForumAsMessages = 129403168,
    UpdatePeerWallpaper = 2923368477,
    UpdateBotMessageReaction = 2887898062,
    UpdateBotMessageReactions = 164329305,
    UpdateSavedDialogPinned = 2930744948,
    UpdatePinnedSavedDialogs = 1751942566,
    UpdateSavedReactionTags = 969307186,
    UpdateSmsJob = 4049758676,
    UpdateQuickReplies = 4182182578,
    UpdateNewQuickReply = 4114458391,
    UpdateDeleteQuickReply = 1407644140,
    UpdateQuickReplyMessage = 1040518415,
    UpdateDeleteQuickReplyMessages = 1450174413,
    UpdateBotBusinessConnect = 2330315130,
    UpdateBotNewBusinessMessage = 2648388732,
    UpdateBotEditBusinessMessage = 132077692,
    UpdateBotDeleteBusinessMessage = 2687146030,
    UpdateNewStoryReaction = 405070859,
    UpdateBroadcastRevenueTransactions = 3755565557,
    UpdateStarsBalance = 263737752,
    UpdateBusinessBotCallbackQuery = 513998247,
    UpdateStarsRevenueStatus = 2776936473,
    UpdateBotPurchasedPaidMedia = 675009298,
    UpdatePaidReactionPrivacy = 1372224236,
    UpdatesState = 2775329342,
    UpdatesDifferenceEmpty = 1567990072,
    UpdatesDifference = 16030880,
    UpdatesDifferenceSlice = 2835028353,
    UpdatesDifferenceTooLong = 1258196845,
    UpdatesTooLong = 3809980286,
    UpdateShortMessage = 826001400,
    UpdateShortChatMessage = 1299050149,
    UpdateShort = 2027216577,
    UpdatesCombined = 1918567619,
    Updates = 1957577280,
    UpdateShortSentMessage = 2417352961,
    PhotosPhotos = 2378853029,
    PhotosPhotosSlice = 352657236,
    PhotosPhoto = 539045032,
    UploadFile = 157948117,
    UploadFileCdnRedirect = 4052539972,
    DcOption = 414687501,
    Config = 3424265246,
    NearestDc = 2384074613,
    HelpAppUpdate = 3434860080,
    HelpNoAppUpdate = 3294258486,
    HelpInviteText = 415997816,
    EncryptedChatEmpty = 2877210784,
    EncryptedChatWaiting = 1722964307,
    EncryptedChatRequested = 1223809356,
    EncryptedChat = 1643173063,
    EncryptedChatDiscarded = 505183301,
    InputEncryptedChat = 4047615457,
    EncryptedFileEmpty = 3256830334,
    EncryptedFile = 2818608344,
    InputEncryptedFileEmpty = 406307684,
    InputEncryptedFileUploaded = 1690108678,
    InputEncryptedFile = 1511503333,
    InputEncryptedFileBigUploaded = 767652808,
    EncryptedMessage = 3977822488,
    EncryptedMessageService = 594758406,
    MessagesDhConfigNotModified = 3236054581,
    MessagesDhConfig = 740433629,
    MessagesSentEncryptedMessage = 1443858741,
    MessagesSentEncryptedFile = 2492727090,
    InputDocumentEmpty = 1928391342,
    InputDocument = 448771445,
    DocumentEmpty = 922273905,
    Document = 2413085912,
    HelpSupport = 398898678,
    NotifyPeer = 2681474008,
    NotifyUsers = 3033021260,
    NotifyChats = 3221737155,
    NotifyBroadcasts = 3591563503,
    NotifyForumTopic = 577659656,
    SendMessageTypingAction = 381645902,
    SendMessageCancelAction = 4250847477,
    SendMessageRecordVideoAction = 2710034031,
    SendMessageUploadVideoAction = 3916839660,
    SendMessageRecordAudioAction = 3576656887,
    SendMessageUploadAudioAction = 4082227115,
    SendMessageUploadPhotoAction = 3520285222,
    SendMessageUploadDocumentAction = 2852968932,
    SendMessageGeoLocationAction = 393186209,
    SendMessageChooseContactAction = 1653390447,
    SendMessageGamePlayAction = 3714748232,
    SendMessageRecordRoundAction = 2297593788,
    SendMessageUploadRoundAction = 608050278,
    SpeakingInGroupCallAction = 3643548293,
    SendMessageHistoryImportAction = 3688534598,
    SendMessageChooseStickerAction = 2958739121,
    SendMessageEmojiInteraction = 630664139,
    SendMessageEmojiInteractionSeen = 3060109358,
    ContactsFound = 3004386717,
    InputPrivacyKeyStatusTimestamp = 1335282456,
    InputPrivacyKeyChatInvite = 3187344422,
    InputPrivacyKeyPhoneCall = 4206550111,
    InputPrivacyKeyPhoneP2P = 3684593874,
    InputPrivacyKeyForwards = 2765966344,
    InputPrivacyKeyProfilePhoto = 1461304012,
    InputPrivacyKeyPhoneNumber = 55761658,
    InputPrivacyKeyAddedByPhone = 3508640733,
    InputPrivacyKeyVoiceMessages = 2934349160,
    InputPrivacyKeyAbout = 941870144,
    InputPrivacyKeyBirthday = 3596227020,
    PrivacyKeyStatusTimestamp = 3157175088,
    PrivacyKeyChatInvite = 1343122938,
    PrivacyKeyPhoneCall = 1030105979,
    PrivacyKeyPhoneP2P = 961092808,
    PrivacyKeyForwards = 1777096355,
    PrivacyKeyProfilePhoto = 2517966829,
    PrivacyKeyPhoneNumber = 3516589165,
    PrivacyKeyAddedByPhone = 1124062251,
    PrivacyKeyVoiceMessages = 110621716,
    PrivacyKeyAbout = 2760292193,
    PrivacyKeyBirthday = 536913176,
    InputPrivacyValueAllowContacts = 218751099,
    InputPrivacyValueAllowAll = 407582158,
    InputPrivacyValueAllowUsers = 320652927,
    InputPrivacyValueDisallowContacts = 195371015,
    InputPrivacyValueDisallowAll = 3597362889,
    InputPrivacyValueDisallowUsers = 2417034343,
    InputPrivacyValueAllowChatParticipants = 2215004623,
    InputPrivacyValueDisallowChatParticipants = 3914272646,
    InputPrivacyValueAllowCloseFriends = 793067081,
    InputPrivacyValueAllowPremium = 2009975281,
    PrivacyValueAllowContacts = 4294843308,
    PrivacyValueAllowAll = 1698855810,
    PrivacyValueAllowUsers = 3096469426,
    PrivacyValueDisallowContacts = 4169726490,
    PrivacyValueDisallowAll = 2339628899,
    PrivacyValueDisallowUsers = 3831632193,
    PrivacyValueAllowChatParticipants = 1796427406,
    PrivacyValueDisallowChatParticipants = 1103656293,
    PrivacyValueAllowCloseFriends = 4159232155,
    PrivacyValueAllowPremium = 3974725963,
    AccountPrivacyRules = 1352683077,
    AccountDaysTTL = 3100684255,
    DocumentAttributeImageSize = 1815593308,
    DocumentAttributeAnimated = 297109817,
    DocumentAttributeSticker = 1662637586,
    DocumentAttributeVideo = 1137015880,
    DocumentAttributeAudio = 2555574726,
    DocumentAttributeFilename = 358154344,
    DocumentAttributeHasStickers = 2550256375,
    DocumentAttributeCustomEmoji = 4245985433,
    MessagesStickersNotModified = 4050950690,
    MessagesStickers = 816245886,
    StickerPack = 313694676,
    MessagesAllStickersNotModified = 3898999491,
    MessagesAllStickers = 3451637435,
    MessagesAffectedMessages = 2228326789,
    WebPageEmpty = 555358088,
    WebPagePending = 2966502983,
    WebPage = 3902555570,
    WebPageNotModified = 1930545681,
    Authorization = 2902578717,
    AccountAuthorizations = 1275039392,
    AccountPassword = 2507886843,
    AccountPasswordSettings = 2589733861,
    AccountPasswordInputSettings = 3258394569,
    AuthPasswordRecovery = 326715557,
    ReceivedNotifyMessage = 2743383929,
    ChatInviteExported = 2720841110,
    ChatInvitePublicJoinRequests = 3977280183,
    ChatInviteAlready = 1516793212,
    ChatInvite = 4268046493,
    ChatInvitePeek = 1634294960,
    InputStickerSetEmpty = 4290128789,
    InputStickerSetID = 2649203305,
    InputStickerSetShortName = 2250033312,
    InputStickerSetAnimatedEmoji = 42402760,
    InputStickerSetDice = 3867103758,
    InputStickerSetAnimatedEmojiAnimations = 215889721,
    InputStickerSetPremiumGifts = 3364567810,
    InputStickerSetEmojiGenericAnimations = 80008398,
    InputStickerSetEmojiDefaultStatuses = 701560302,
    InputStickerSetEmojiDefaultTopicIcons = 1153562857,
    InputStickerSetEmojiChannelDefaultStatuses = 1232373075,
    StickerSet = 768691932,
    MessagesStickerSet = 1846886166,
    MessagesStickerSetNotModified = 3556320491,
    BotCommand = 3262826695,
    BotInfo = 2185461364,
    KeyboardButton = 2734311552,
    KeyboardButtonUrl = 629866245,
    KeyboardButtonCallback = 901503851,
    KeyboardButtonRequestPhone = 2976541737,
    KeyboardButtonRequestGeoLocation = 4235815743,
    KeyboardButtonSwitchInline = 2478439349,
    KeyboardButtonGame = 1358175439,
    KeyboardButtonBuy = 2950250427,
    KeyboardButtonUrlAuth = 280464681,
    InputKeyboardButtonUrlAuth = 3492708308,
    KeyboardButtonRequestPoll = 3150401885,
    InputKeyboardButtonUserProfile = 3918005115,
    KeyboardButtonUserProfile = 814112961,
    KeyboardButtonWebView = 326529584,
    KeyboardButtonSimpleWebView = 2696958044,
    KeyboardButtonRequestPeer = 1406648280,
    InputKeyboardButtonRequestPeer = 3378916613,
    KeyboardButtonCopy = 1976723854,
    KeyboardButtonRow = 2002815875,
    ReplyKeyboardHide = 2688441221,
    ReplyKeyboardForceReply = 2259946248,
    ReplyKeyboardMarkup = 2245892561,
    ReplyInlineMarkup = 1218642516,
    MessageEntityUnknown = 3146955413,
    MessageEntityMention = 4194588573,
    MessageEntityHashtag = 1868782349,
    MessageEntityBotCommand = 1827637959,
    MessageEntityUrl = 1859134776,
    MessageEntityEmail = 1692693954,
    MessageEntityBold = 3177253833,
    MessageEntityItalic = 2188348256,
    MessageEntityCode = 681706865,
    MessageEntityPre = 1938967520,
    MessageEntityTextUrl = 1990644519,
    MessageEntityMentionName = 3699052864,
    InputMessageEntityMentionName = 546203849,
    MessageEntityPhone = 2607407947,
    MessageEntityCashtag = 1280209983,
    MessageEntityUnderline = 2622389899,
    MessageEntityStrike = 3204879316,
    MessageEntityBankCard = 1981704948,
    MessageEntitySpoiler = 852137487,
    MessageEntityCustomEmoji = 3369010680,
    MessageEntityBlockquote = 4056722092,
    InputChannelEmpty = 4002160262,
    InputChannel = 4082822184,
    InputChannelFromMessage = 1536380829,
    ContactsResolvedPeer = 2131196633,
    MessageRange = 182649427,
    UpdatesChannelDifferenceEmpty = 1041346555,
    UpdatesChannelDifferenceTooLong = 2763835134,
    UpdatesChannelDifference = 543450958,
    ChannelMessagesFilterEmpty = 2496933607,
    ChannelMessagesFilter = 3447183703,
    ChannelParticipant = 3409540633,
    ChannelParticipantSelf = 1331723247,
    ChannelParticipantCreator = 803602899,
    ChannelParticipantAdmin = 885242707,
    ChannelParticipantBanned = 1844969806,
    ChannelParticipantLeft = 453242886,
    ChannelParticipantsRecent = 3728686201,
    ChannelParticipantsAdmins = 3026225513,
    ChannelParticipantsKicked = 2746567045,
    ChannelParticipantsBots = 2966521435,
    ChannelParticipantsBanned = 338142689,
    ChannelParticipantsSearch = 106343499,
    ChannelParticipantsContacts = 3144345741,
    ChannelParticipantsMentions = 3763035371,
    ChannelsChannelParticipants = 2595290799,
    ChannelsChannelParticipantsNotModified = 4028055529,
    ChannelsChannelParticipant = 3753378583,
    HelpTermsOfService = 2013922064,
    MessagesSavedGifsNotModified = 3892468898,
    MessagesSavedGifs = 2225089037,
    InputBotInlineMessageMediaAuto = 864077702,
    InputBotInlineMessageText = 1036876423,
    InputBotInlineMessageMediaGeo = 2526190213,
    InputBotInlineMessageMediaVenue = 1098628881,
    InputBotInlineMessageMediaContact = 2800599037,
    InputBotInlineMessageGame = 1262639204,
    InputBotInlineMessageMediaInvoice = 3622273573,
    InputBotInlineMessageMediaWebPage = 3185362192,
    InputBotInlineResult = 2294256409,
    InputBotInlineResultPhoto = 2832753831,
    InputBotInlineResultDocument = 4294507972,
    InputBotInlineResultGame = 1336154098,
    BotInlineMessageMediaAuto = 1984755728,
    BotInlineMessageText = 2357159394,
    BotInlineMessageMediaGeo = 85477117,
    BotInlineMessageMediaVenue = 2324063644,
    BotInlineMessageMediaContact = 416402882,
    BotInlineMessageMediaInvoice = 894081801,
    BotInlineMessageMediaWebPage = 2157631910,
    BotInlineResult = 295067450,
    BotInlineMediaResult = 400266251,
    MessagesBotResults = 3760321270,
    ExportedMessageLink = 1571494644,
    MessageFwdHeader = 1313731771,
    AuthCodeTypeSms = 1923290508,
    AuthCodeTypeCall = 1948046307,
    AuthCodeTypeFlashCall = 577556219,
    AuthCodeTypeMissedCall = 3592083182,
    AuthCodeTypeFragmentSms = 116234636,
    AuthSentCodeTypeApp = 1035688326,
    AuthSentCodeTypeSms = 3221273506,
    AuthSentCodeTypeCall = 1398007207,
    AuthSentCodeTypeFlashCall = 2869151449,
    AuthSentCodeTypeMissedCall = 2181063812,
    AuthSentCodeTypeEmailCode = 4098946459,
    AuthSentCodeTypeSetUpEmailRequired = 2773032426,
    AuthSentCodeTypeFragmentSms = 3646315577,
    AuthSentCodeTypeFirebaseSms = 10475318,
    AuthSentCodeTypeSmsWord = 2752949377,
    AuthSentCodeTypeSmsPhrase = 3010958511,
    MessagesBotCallbackAnswer = 911761060,
    MessagesMessageEditData = 649453030,
    InputBotInlineMessageID = 2299280777,
    InputBotInlineMessageID64 = 3067680215,
    InlineBotSwitchPM = 1008755359,
    MessagesPeerDialogs = 863093588,
    TopPeer = 3989684315,
    TopPeerCategoryBotsPM = 2875595611,
    TopPeerCategoryBotsInline = 344356834,
    TopPeerCategoryCorrespondents = 104314861,
    TopPeerCategoryGroups = 3172442442,
    TopPeerCategoryChannels = 371037736,
    TopPeerCategoryPhoneCalls = 511092620,
    TopPeerCategoryForwardUsers = 2822794409,
    TopPeerCategoryForwardChats = 4226728176,
    TopPeerCategoryBotsApp = 4255022060,
    TopPeerCategoryPeers = 4219683473,
    ContactsTopPeersNotModified = 3727060725,
    ContactsTopPeers = 1891070632,
    ContactsTopPeersDisabled = 3039597469,
    DraftMessageEmpty = 453805082,
    DraftMessage = 761606687,
    MessagesFeaturedStickersNotModified = 3336309862,
    MessagesFeaturedStickers = 3191351558,
    MessagesRecentStickersNotModified = 186120336,
    MessagesRecentStickers = 2295561302,
    MessagesArchivedStickers = 1338747336,
    MessagesStickerSetInstallResultSuccess = 946083368,
    MessagesStickerSetInstallResultArchive = 904138920,
    StickerSetCovered = 1678812626,
    StickerSetMultiCovered = 872932635,
    StickerSetFullCovered = 1087454222,
    StickerSetNoCovered = 2008112412,
    MaskCoords = 2933316530,
    InputStickeredMediaPhoto = 1251549527,
    InputStickeredMediaDocument = 70813275,
    Game = 3187238203,
    InputGameID = 53231223,
    InputGameShortName = 3274827786,
    HighScore = 1940093419,
    MessagesHighScores = 2587622809,
    TextEmpty = 3695018575,
    TextPlain = 1950782688,
    TextBold = 1730456516,
    TextItalic = 3641877916,
    TextUnderline = 3240501956,
    TextStrike = 2616769429,
    TextFixed = 1816074681,
    TextUrl = 1009288385,
    TextEmail = 3730443734,
    TextConcat = 2120376535,
    TextSubscript = 3983181060,
    TextSuperscript = 3355139585,
    TextMarked = 55281185,
    TextPhone = 483104362,
    TextImage = 136105807,
    TextAnchor = 894777186,
    PageBlockUnsupported = 324435594,
    PageBlockTitle = 1890305021,
    PageBlockSubtitle = 2415565343,
    PageBlockAuthorDate = 3132089824,
    PageBlockHeader = 3218105580,
    PageBlockSubheader = 4046173921,
    PageBlockParagraph = 1182402406,
    PageBlockPreformatted = 3228621118,
    PageBlockFooter = 1216809369,
    PageBlockDivider = 3676352904,
    PageBlockAnchor = 3456972720,
    PageBlockList = 3840442385,
    PageBlockBlockquote = 641563686,
    PageBlockPullquote = 1329878739,
    PageBlockPhoto = 391759200,
    PageBlockVideo = 2089805750,
    PageBlockCover = 972174080,
    PageBlockEmbed = 2826014149,
    PageBlockEmbedPost = 4065961995,
    PageBlockCollage = 1705048653,
    PageBlockSlideshow = 52401552,
    PageBlockChannel = 4011282869,
    PageBlockAudio = 2151899626,
    PageBlockKicker = 504660880,
    PageBlockTable = 3209554562,
    PageBlockOrderedList = 2592793057,
    PageBlockDetails = 1987480557,
    PageBlockRelatedArticles = 370236054,
    PageBlockMap = 2756656886,
    PhoneCallDiscardReasonMissed = 2246320897,
    PhoneCallDiscardReasonDisconnect = 3767910816,
    PhoneCallDiscardReasonHangup = 1471006352,
    PhoneCallDiscardReasonBusy = 4210550985,
    DataJSON = 2104790276,
    LabeledPrice = 3408489464,
    Invoice = 1572428309,
    PaymentCharge = 3926049406,
    PostAddress = 512535275,
    PaymentRequestedInfo = 2426158996,
    PaymentSavedCredentialsCard = 3452074527,
    WebDocument = 475467473,
    WebDocumentNoProxy = 4190682310,
    InputWebDocument = 2616017741,
    InputWebFileLocation = 3258570374,
    InputWebFileGeoPointLocation = 2669814217,
    InputWebFileAudioAlbumThumbLocation = 4100974884,
    UploadWebFile = 568808380,
    PaymentsPaymentForm = 2684716881,
    PaymentsPaymentFormStars = 2079764828,
    PaymentsPaymentFormStarGift = 3022376929,
    PaymentsValidatedRequestedInfo = 3510966403,
    PaymentsPaymentResult = 1314881805,
    PaymentsPaymentVerificationNeeded = 3628142905,
    PaymentsPaymentReceipt = 1891958275,
    PaymentsPaymentReceiptStars = 3669751866,
    PaymentsSavedInfo = 4220511292,
    InputPaymentCredentialsSaved = 3238965967,
    InputPaymentCredentials = 873977640,
    InputPaymentCredentialsApplePay = 178373535,
    InputPaymentCredentialsGooglePay = 2328045569,
    AccountTmpPassword = 3680828724,
    ShippingOption = 3055631583,
    InputStickerSetItem = 853188252,
    InputPhoneCall = 506920429,
    PhoneCallEmpty = 1399245077,
    PhoneCallWaiting = 3307368215,
    PhoneCallRequested = 347139340,
    PhoneCallAccepted = 912311057,
    PhoneCall = 810769141,
    PhoneCallDiscarded = 1355435489,
    PhoneConnection = 2629903303,
    PhoneConnectionWebrtc = 1667228533,
    PhoneCallProtocol = 4236742600,
    PhonePhoneCall = 3968000320,
    UploadCdnFileReuploadNeeded = 4004045934,
    UploadCdnFile = 2845821519,
    CdnPublicKey = 3380800186,
    CdnConfig = 1462101002,
    LangPackString = 3402727926,
    LangPackStringPluralized = 1816636575,
    LangPackStringDeleted = 695856818,
    LangPackDifference = 4085629430,
    LangPackLanguage = 4006239459,
    ChannelAdminLogEventActionChangeTitle = 3873421349,
    ChannelAdminLogEventActionChangeAbout = 1427671598,
    ChannelAdminLogEventActionChangeUsername = 1783299128,
    ChannelAdminLogEventActionChangePhoto = 1129042607,
    ChannelAdminLogEventActionToggleInvites = 460916654,
    ChannelAdminLogEventActionToggleSignatures = 648939889,
    ChannelAdminLogEventActionUpdatePinned = 3924306968,
    ChannelAdminLogEventActionEditMessage = 1889215493,
    ChannelAdminLogEventActionDeleteMessage = 1121994683,
    ChannelAdminLogEventActionParticipantJoin = 405815507,
    ChannelAdminLogEventActionParticipantLeave = 4170676210,
    ChannelAdminLogEventActionParticipantInvite = 3810276568,
    ChannelAdminLogEventActionParticipantToggleBan = 3872931198,
    ChannelAdminLogEventActionParticipantToggleAdmin = 3580323600,
    ChannelAdminLogEventActionChangeStickerSet = 2982398631,
    ChannelAdminLogEventActionTogglePreHistoryHidden = 1599903217,
    ChannelAdminLogEventActionDefaultBannedRights = 771095562,
    ChannelAdminLogEventActionStopPoll = 2399639107,
    ChannelAdminLogEventActionChangeLinkedChat = 84703944,
    ChannelAdminLogEventActionChangeLocation = 241923758,
    ChannelAdminLogEventActionToggleSlowMode = 1401984889,
    ChannelAdminLogEventActionStartGroupCall = 589338437,
    ChannelAdminLogEventActionDiscardGroupCall = 3684667712,
    ChannelAdminLogEventActionParticipantMute = 4179895506,
    ChannelAdminLogEventActionParticipantUnmute = 3863226816,
    ChannelAdminLogEventActionToggleGroupCallSetting = 1456906823,
    ChannelAdminLogEventActionParticipantJoinByInvite = 4271882584,
    ChannelAdminLogEventActionExportedInviteDelete = 1515256996,
    ChannelAdminLogEventActionExportedInviteRevoke = 1091179342,
    ChannelAdminLogEventActionExportedInviteEdit = 3910056793,
    ChannelAdminLogEventActionParticipantVolume = 1048537159,
    ChannelAdminLogEventActionChangeHistoryTTL = 1855199800,
    ChannelAdminLogEventActionParticipantJoinByRequest = 2947945546,
    ChannelAdminLogEventActionToggleNoForwards = 3408578406,
    ChannelAdminLogEventActionSendMessage = 663693416,
    ChannelAdminLogEventActionChangeAvailableReactions = 3192786680,
    ChannelAdminLogEventActionChangeUsernames = 4031755177,
    ChannelAdminLogEventActionToggleForum = 46949251,
    ChannelAdminLogEventActionCreateTopic = 1483767080,
    ChannelAdminLogEventActionEditTopic = 4033864200,
    ChannelAdminLogEventActionDeleteTopic = 2920712457,
    ChannelAdminLogEventActionPinTopic = 1569535291,
    ChannelAdminLogEventActionToggleAntiSpam = 1693675004,
    ChannelAdminLogEventActionChangePeerColor = 1469507456,
    ChannelAdminLogEventActionChangeProfilePeerColor = 1581742885,
    ChannelAdminLogEventActionChangeWallpaper = 834362706,
    ChannelAdminLogEventActionChangeEmojiStatus = 1051328177,
    ChannelAdminLogEventActionChangeEmojiStickerSet = 1188577451,
    ChannelAdminLogEventActionToggleSignatureProfiles = 1621597305,
    ChannelAdminLogEventActionParticipantSubExtend = 1684286899,
    ChannelAdminLogEvent = 531458253,
    ChannelsAdminLogResults = 3985307469,
    ChannelAdminLogEventsFilter = 3926948580,
    PopularContact = 1558266229,
    MessagesFavedStickersNotModified = 2660214483,
    MessagesFavedStickers = 750063767,
    RecentMeUrlUnknown = 1189204285,
    RecentMeUrlUser = 3106671074,
    RecentMeUrlChat = 3000660434,
    RecentMeUrlChatInvite = 3947431965,
    RecentMeUrlStickerSet = 3154794460,
    HelpRecentMeUrls = 235081943,
    InputSingleMedia = 482797855,
    WebAuthorization = 2801333330,
    AccountWebAuthorizations = 3981887996,
    InputMessageID = 2792792866,
    InputMessageReplyTo = 3134751637,
    InputMessagePinned = 2257003832,
    InputMessageCallbackQuery = 2902071934,
    InputDialogPeer = 4239064759,
    InputDialogPeerFolder = 1684014375,
    DialogPeer = 3849174789,
    DialogPeerFolder = 1363483106,
    MessagesFoundStickerSetsNotModified = 223655517,
    MessagesFoundStickerSets = 2331024850,
    FileHash = 4087022428,
    InputClientProxy = 1968737087,
    HelpTermsOfServiceUpdateEmpty = 3811614591,
    HelpTermsOfServiceUpdate = 686618977,
    InputSecureFileUploaded = 859091184,
    InputSecureFile = 1399317950,
    SecureFileEmpty = 1679398724,
    SecureFile = 2097791614,
    SecureData = 2330640067,
    SecurePlainPhone = 2103482845,
    SecurePlainEmail = 569137759,
    SecureValueTypePersonalDetails = 2636808675,
    SecureValueTypePassport = 1034709504,
    SecureValueTypeDriverLicense = 115615172,
    SecureValueTypeIdentityCard = 2698015819,
    SecureValueTypeInternalPassport = 2577698595,
    SecureValueTypeAddress = 3420659238,
    SecureValueTypeUtilityBill = 4231435598,
    SecureValueTypeBankStatement = 2299755533,
    SecureValueTypeRentalAgreement = 2340959368,
    SecureValueTypePassportRegistration = 2581823594,
    SecureValueTypeTemporaryRegistration = 3926060083,
    SecureValueTypePhone = 3005262555,
    SecureValueTypeEmail = 2386339822,
    SecureValue = 411017418,
    InputSecureValue = 3676426407,
    SecureValueHash = 3978218928,
    SecureValueErrorData = 3903065049,
    SecureValueErrorFrontSide = 12467706,
    SecureValueErrorReverseSide = 2257201829,
    SecureValueErrorSelfie = 3845639894,
    SecureValueErrorFile = 2054162547,
    SecureValueErrorFiles = 1717706985,
    SecureValueError = 2258466191,
    SecureValueErrorTranslationFile = 2702460784,
    SecureValueErrorTranslationFiles = 878931416,
    SecureCredentialsEncrypted = 871426631,
    AccountAuthorizationForm = 2905480408,
    AccountSentEmailCode = 2166326607,
    HelpDeepLinkInfoEmpty = 1722786150,
    HelpDeepLinkInfo = 1783556146,
    SavedPhoneContact = 289586518,
    AccountTakeout = 1304052993,
    PasswordKdfAlgoUnknown = 3562713238,
    PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow = 982592842,
    SecurePasswordKdfAlgoUnknown = 4883767,
    SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000 = 3153255840,
    SecurePasswordKdfAlgoSHA512 = 2252807570,
    SecureSecretSettings = 354925740,
    InputCheckPasswordEmpty = 2558588504,
    InputCheckPasswordSRP = 3531600002,
    SecureRequiredType = 2191366618,
    SecureRequiredTypeOneOf = 41187252,
    HelpPassportConfigNotModified = 3216634967,
    HelpPassportConfig = 2694370991,
    InputAppEvent = 488313413,
    JsonObjectValue = 3235781593,
    JsonNull = 1064139624,
    JsonBool = 3342098026,
    JsonNumber = 736157604,
    JsonString = 3072226938,
    JsonArray = 4148447075,
    JsonObject = 2579616925,
    PageTableCell = 878078826,
    PageTableRow = 3770729957,
    PageCaption = 1869903447,
    PageListItemText = 3106911949,
    PageListItemBlocks = 635466748,
    PageListOrderedItemText = 1577484359,
    PageListOrderedItemBlocks = 2564655414,
    PageRelatedArticle = 3012615176,
    Page = 2556788493,
    HelpSupportName = 2349199817,
    HelpUserInfoEmpty = 4088278765,
    HelpUserInfo = 32192344,
    PollAnswer = 4279689930,
    Poll = 1484026161,
    PollAnswerVoters = 997055186,
    PollResults = 2061444128,
    ChatOnlines = 4030849616,
    StatsURL = 1202287072,
    ChatAdminRights = 1605510357,
    ChatBannedRights = 2668758040,
    InputWallPaper = 3861952889,
    InputWallPaperSlug = 1913199744,
    InputWallPaperNoFile = 2524595758,
    AccountWallPapersNotModified = 471437699,
    AccountWallPapers = 3452142988,
    CodeSettings = 2904898936,
    WallPaperSettings = 925826256,
    AutoDownloadSettings = 3131405864,
    AccountAutoDownloadSettings = 1674235686,
    EmojiKeyword = 3585325561,
    EmojiKeywordDeleted = 594408994,
    EmojiKeywordsDifference = 1556570557,
    EmojiURL = 2775937949,
    EmojiLanguage = 3019592545,
    Folder = 4283715173,
    InputFolderPeer = 4224893590,
    FolderPeer = 3921323624,
    MessagesSearchCounter = 3896830975,
    UrlAuthResultRequest = 2463316494,
    UrlAuthResultAccepted = 2408320590,
    UrlAuthResultDefault = 2849430303,
    ChannelLocationEmpty = 3216354699,
    ChannelLocation = 547062491,
    PeerLocated = 3393592157,
    PeerSelfLocated = 4176226379,
    RestrictionReason = 3497176244,
    InputTheme = 1012306921,
    InputThemeSlug = 4119399921,
    Theme = 2685298646,
    AccountThemesNotModified = 4095653410,
    AccountThemes = 2587724909,
    AuthLoginToken = 1654593920,
    AuthLoginTokenMigrateTo = 110008598,
    AuthLoginTokenSuccess = 957176926,
    AccountContentSettings = 1474462241,
    MessagesInactiveChats = 2837970629,
    BaseThemeClassic = 3282117730,
    BaseThemeDay = 4225242760,
    BaseThemeNight = 3081969320,
    BaseThemeTinted = 1834973166,
    BaseThemeArctic = 1527845466,
    InputThemeSettings = 2413711439,
    ThemeSettings = 4200117972,
    WebPageAttributeTheme = 1421174295,
    WebPageAttributeStory = 781501415,
    WebPageAttributeStickerSet = 1355547603,
    MessagesVotesList = 1218005070,
    BankCardOpenUrl = 4117234314,
    PaymentsBankCardData = 1042605427,
    DialogFilter = 1605718587,
    DialogFilterDefault = 909284270,
    DialogFilterChatlist = 2682424996,
    DialogFilterSuggested = 2004110666,
    StatsDateRangeDays = 3057118639,
    StatsAbsValueAndPrev = 3410210014,
    StatsPercentValue = 3419287520,
    StatsGraphAsync = 1244130093,
    StatsGraphError = 3202127906,
    StatsGraph = 2393138358,
    StatsBroadcastStats = 963421692,
    HelpPromoDataEmpty = 2566302837,
    HelpPromoData = 2352576831,
    VideoSize = 3727929492,
    VideoSizeEmojiMarkup = 4166795580,
    VideoSizeStickerMarkup = 228623102,
    StatsGroupTopPoster = 2634330011,
    StatsGroupTopAdmin = 3612888199,
    StatsGroupTopInviter = 1398765469,
    StatsMegagroupStats = 4018141462,
    GlobalPrivacySettings = 1934380235,
    HelpCountryCode = 1107543535,
    HelpCountry = 3280440867,
    HelpCountriesListNotModified = 2479628082,
    HelpCountriesList = 2278585758,
    MessageViews = 1163625789,
    MessagesMessageViews = 3066361155,
    MessagesDiscussionMessage = 2788431746,
    MessageReplyHeader = 2948336091,
    MessageReplyStoryHeader = 240843065,
    MessageReplies = 2211844034,
    PeerBlocked = 3908927508,
    StatsMessageStats = 2145983508,
    GroupCallDiscarded = 2004925620,
    GroupCall = 3583468812,
    InputGroupCall = 3635053583,
    GroupCallParticipant = 3953538814,
    PhoneGroupCall = 2658302637,
    PhoneGroupParticipants = 4101460406,
    InlineQueryPeerTypeSameBotPM = 813821341,
    InlineQueryPeerTypePM = 2201751468,
    InlineQueryPeerTypeChat = 3613836554,
    InlineQueryPeerTypeMegagroup = 1589952067,
    InlineQueryPeerTypeBroadcast = 1664413338,
    InlineQueryPeerTypeBotPM = 238759180,
    MessagesHistoryImport = 375566091,
    MessagesHistoryImportParsed = 1578088377,
    MessagesAffectedFoundMessages = 4019011180,
    ChatInviteImporter = 2354765785,
    MessagesExportedChatInvites = 3183881676,
    MessagesExportedChatInvite = 410107472,
    MessagesExportedChatInviteReplaced = 572915951,
    MessagesChatInviteImporters = 2176233482,
    ChatAdminWithInvites = 4075613987,
    MessagesChatAdminsWithInvites = 3063640791,
    MessagesCheckedHistoryImportPeer = 2723014423,
    PhoneJoinAsPeers = 2951045695,
    PhoneExportedGroupCallInvite = 541839704,
    GroupCallParticipantVideoSourceGroup = 3702593719,
    GroupCallParticipantVideo = 1735736008,
    StickersSuggestedShortName = 2248056895,
    BotCommandScopeDefault = 795652779,
    BotCommandScopeUsers = 1011811544,
    BotCommandScopeChats = 1877059713,
    BotCommandScopeChatAdmins = 3114950762,
    BotCommandScopePeer = 3684534653,
    BotCommandScopePeerAdmins = 1071145937,
    BotCommandScopePeerUser = 169026035,
    AccountResetPasswordFailedWait = 3816265825,
    AccountResetPasswordRequestedWait = 3924819069,
    AccountResetPasswordOk = 3911636542,
    SponsoredMessage = 1301522832,
    MessagesSponsoredMessages = 3387825543,
    MessagesSponsoredMessagesEmpty = 406407439,
    SearchResultsCalendarPeriod = 3383776159,
    MessagesSearchResultsCalendar = 343859772,
    SearchResultPosition = 2137295719,
    MessagesSearchResultsPositions = 1404185519,
    ChannelsSendAsPeers = 4103516358,
    UsersUserFull = 997004590,
    MessagesPeerSettings = 1753266509,
    AuthLoggedOut = 3282207583,
    ReactionCount = 2748435328,
    MessageReactions = 171155211,
    MessagesMessageReactionsList = 834488621,
    AvailableReaction = 3229084673,
    MessagesAvailableReactionsNotModified = 2668042583,
    MessagesAvailableReactions = 1989032621,
    MessagePeerReaction = 2356786748,
    GroupCallStreamChannel = 2162903215,
    PhoneGroupCallStreamChannels = 3504636594,
    PhoneGroupCallStreamRtmpUrl = 767505458,
    AttachMenuBotIconColor = 1165423600,
    AttachMenuBotIcon = 2997303403,
    AttachMenuBot = 3641544190,
    AttachMenuBotsNotModified = 4057500252,
    AttachMenuBots = 1011024320,
    AttachMenuBotsBot = 2478794367,
    WebViewResultUrl = 1294139288,
    WebViewMessageSent = 211046684,
    BotMenuButtonDefault = 1966318984,
    BotMenuButtonCommands = 1113113093,
    BotMenuButton = 3350559974,
    AccountSavedRingtonesNotModified = 4227262641,
    AccountSavedRingtones = 3253284037,
    NotificationSoundDefault = 2548612798,
    NotificationSoundNone = 1863070943,
    NotificationSoundLocal = 2198575844,
    NotificationSoundRingtone = 4285300809,
    AccountSavedRingtone = 3072737133,
    AccountSavedRingtoneConverted = 523271863,
    AttachMenuPeerTypeSameBotPM = 2104224014,
    AttachMenuPeerTypeBotPM = 3274439194,
    AttachMenuPeerTypePM = 4047950623,
    AttachMenuPeerTypeChat = 84480319,
    AttachMenuPeerTypeBroadcast = 2080104188,
    InputInvoiceMessage = 3317000281,
    InputInvoiceSlug = 3274099439,
    InputInvoicePremiumGiftCode = 2560125965,
    InputInvoiceStars = 1710230755,
    InputInvoiceChatInviteSubscription = 887591921,
    InputInvoiceStarGift = 634962392,
    PaymentsExportedInvoice = 2932919257,
    MessagesTranscribedAudio = 3485063511,
    HelpPremiumPromo = 1395946908,
    InputStorePaymentPremiumSubscription = 2792693350,
    InputStorePaymentGiftPremium = 1634697192,
    InputStorePaymentPremiumGiftCode = 2743099199,
    InputStorePaymentPremiumGiveaway = 369444042,
    InputStorePaymentStarsTopup = 3722252118,
    InputStorePaymentStarsGift = 494149367,
    InputStorePaymentStarsGiveaway = 1964968186,
    PremiumGiftOption = 1958953753,
    PaymentFormMethod = 2298016283,
    EmojiStatusEmpty = 769727150,
    EmojiStatus = 2459656605,
    EmojiStatusUntil = 4197492935,
    AccountEmojiStatusesNotModified = 3498894917,
    AccountEmojiStatuses = 2428790737,
    ReactionEmpty = 2046153753,
    ReactionEmoji = 455247544,
    ReactionCustomEmoji = 2302016627,
    ReactionPaid = 1379771627,
    ChatReactionsNone = 3942396604,
    ChatReactionsAll = 1385335754,
    ChatReactionsSome = 1713193015,
    MessagesReactionsNotModified = 2960120799,
    MessagesReactions = 3942512406,
    EmailVerifyPurposeLoginSetup = 1128644211,
    EmailVerifyPurposeLoginChange = 1383932651,
    EmailVerifyPurposePassport = 3153401477,
    EmailVerificationCode = 2452510121,
    EmailVerificationGoogle = 3683688130,
    EmailVerificationApple = 2530243837,
    AccountEmailVerified = 731303195,
    AccountEmailVerifiedLogin = 3787132257,
    PremiumSubscriptionOption = 1596792306,
    SendAsPeer = 3088871476,
    MessageExtendedMediaPreview = 2908916936,
    MessageExtendedMedia = 3997670500,
    StickerKeyword = 4244550300,
    Username = 3020371527,
    ForumTopicDeleted = 37687451,
    ForumTopic = 1903173033,
    MessagesForumTopics = 913709011,
    DefaultHistoryTTL = 1135897376,
    ExportedContactToken = 1103040667,
    RequestPeerTypeUser = 1597737472,
    RequestPeerTypeChat = 3387977243,
    RequestPeerTypeBroadcast = 865857388,
    EmojiListNotModified = 1209970170,
    EmojiList = 2048790993,
    EmojiGroup = 2056961449,
    EmojiGroupGreeting = 2161274055,
    EmojiGroupPremium = 154914612,
    MessagesEmojiGroupsNotModified = 1874111879,
    MessagesEmojiGroups = 2283780427,
    TextWithEntities = 1964978502,
    MessagesTranslateResult = 870003448,
    AutoSaveSettings = 3360175310,
    AutoSaveException = 2170563911,
    AccountAutoSaveSettings = 1279133341,
    HelpAppConfigNotModified = 2094949405,
    HelpAppConfig = 3709368366,
    InputBotAppID = 2837495162,
    InputBotAppShortName = 2425095175,
    BotAppNotModified = 1571189943,
    BotApp = 2516373974,
    MessagesBotApp = 3947933173,
    InlineBotWebView = 3044185557,
    ReadParticipantDate = 1246753138,
    InputChatlistDialogFilter = 4091599411,
    ExportedChatlistInvite = 206668204,
    ChatlistsExportedChatlistInvite = 283567014,
    ChatlistsExportedInvites = 279670215,
    ChatlistsChatlistInviteAlready = 4203214425,
    ChatlistsChatlistInvite = 500007837,
    ChatlistsChatlistUpdates = 2478671757,
    BotsBotInfo = 3903288752,
    MessagePeerVote = 3066834268,
    MessagePeerVoteInputOption = 1959634180,
    MessagePeerVoteMultiple = 1177089766,
    StoryViews = 2371443926,
    StoryItemDeleted = 1374088783,
    StoryItemSkipped = 4289579283,
    StoryItem = 2041735716,
    StoriesAllStoriesNotModified = 291044926,
    StoriesAllStories = 1862033025,
    StoriesStories = 1673780490,
    StoryView = 2965236421,
    StoryViewPublicForward = 2424530699,
    StoryViewPublicRepost = 3178549065,
    StoriesStoryViewsList = 1507299269,
    StoriesStoryViews = 3734957341,
    InputReplyToMessage = 583071445,
    InputReplyToStory = 1484862010,
    ExportedStoryLink = 1070138683,
    StoriesStealthMode = 1898850301,
    MediaAreaCoordinates = 3486113794,
    MediaAreaVenue = 3196246940,
    InputMediaAreaVenue = 2994872703,
    MediaAreaGeoPoint = 3402974509,
    MediaAreaSuggestedReaction = 340088945,
    MediaAreaChannelPost = 1996756655,
    InputMediaAreaChannelPost = 577893055,
    MediaAreaUrl = 926421125,
    MediaAreaWeather = 1235637404,
    PeerStories = 2587224473,
    StoriesPeerStories = 3404105576,
    MessagesWebPage = 4250800829,
    PremiumGiftCodeOption = 629052971,
    PaymentsCheckedGiftCode = 675942550,
    PaymentsGiveawayInfo = 1130879648,
    PaymentsGiveawayInfoResults = 3782600303,
    PrepaidGiveaway = 2991824212,
    PrepaidStarsGiveaway = 2594011104,
    Boost = 1262359766,
    PremiumBoostsList = 2264424764,
    MyBoost = 3293069660,
    PremiumMyBoosts = 2598512866,
    PremiumBoostsStatus = 1230586490,
    StoryFwdHeader = 3089555792,
    PostInteractionCountersMessage = 3875901055,
    PostInteractionCountersStory = 2319978023,
    StatsStoryStats = 1355613820,
    PublicForwardMessage = 32685898,
    PublicForwardStory = 3992169936,
    StatsPublicForwards = 2466479648,
    PeerColor = 3041614543,
    HelpPeerColorSet = 639736408,
    HelpPeerColorProfileSet = 1987928555,
    HelpPeerColorOption = 2917953214,
    HelpPeerColorsNotModified = 732034510,
    HelpPeerColors = 16313608,
    StoryReaction = 1620104917,
    StoryReactionPublicForward = 3148555843,
    StoryReactionPublicRepost = 3486322451,
    StoriesStoryReactionsList = 2858383516,
    SavedDialog = 3179793260,
    MessagesSavedDialogs = 4164608545,
    MessagesSavedDialogsSlice = 1153080793,
    MessagesSavedDialogsNotModified = 3223285736,
    SavedReactionTag = 3413112872,
    MessagesSavedReactionTagsNotModified = 2291882479,
    MessagesSavedReactionTags = 844731658,
    OutboxReadDate = 1001931436,
    SmsjobsEligibleToJoin = 3700114639,
    SmsjobsStatus = 720277905,
    SmsJob = 3869372088,
    BusinessWeeklyOpen = 302717625,
    BusinessWorkHours = 2358423704,
    BusinessLocation = 2891717367,
    InputBusinessRecipients = 1871393450,
    BusinessRecipients = 554733559,
    BusinessAwayMessageScheduleAlways = 3384402617,
    BusinessAwayMessageScheduleOutsideWorkHours = 3287479553,
    BusinessAwayMessageScheduleCustom = 3427638988,
    InputBusinessGreetingMessage = 26528571,
    BusinessGreetingMessage = 3843664811,
    InputBusinessAwayMessage = 2200008160,
    BusinessAwayMessage = 4011158108,
    Timezone = 4287793653,
    HelpTimezonesListNotModified = 2533820620,
    HelpTimezonesList = 2071260529,
    QuickReply = 110563371,
    InputQuickReplyShortcut = 609840449,
    InputQuickReplyShortcutId = 18418929,
    MessagesQuickReplies = 3331155605,
    MessagesQuickRepliesNotModified = 1603398491,
    ConnectedBot = 3171321345,
    AccountConnectedBots = 400029819,
    MessagesDialogFilters = 718878489,
    Birthday = 1821253126,
    BotBusinessConnection = 2305045428,
    InputBusinessIntro = 163867085,
    BusinessIntro = 1510606445,
    MessagesMyStickers = 4211040925,
    InputCollectibleUsername = 3818152105,
    InputCollectiblePhone = 2732725412,
    FragmentCollectibleInfo = 1857945489,
    InputBusinessBotRecipients = 3303379486,
    BusinessBotRecipients = 3096245107,
    ContactBirthday = 496600883,
    ContactsContactBirthdays = 290452237,
    MissingInvitee = 1653379620,
    MessagesInvitedUsers = 2136862630,
    InputBusinessChatLink = 292003751,
    BusinessChatLink = 3031328367,
    AccountBusinessChatLinks = 3963855569,
    AccountResolvedBusinessChatLinks = 2586029857,
    RequestedPeerUser = 3593466986,
    RequestedPeerChat = 1929860175,
    RequestedPeerChannel = 2342781924,
    SponsoredMessageReportOption = 1124938064,
    ChannelsSponsoredMessageReportResultChooseOption = 2221907522,
    ChannelsSponsoredMessageReportResultAdsHidden = 1044107055,
    ChannelsSponsoredMessageReportResultReported = 2910423113,
    StatsBroadcastRevenueStats = 1409802903,
    StatsBroadcastRevenueWithdrawalUrl = 3966080823,
    BroadcastRevenueTransactionProceeds = 1434332356,
    BroadcastRevenueTransactionWithdrawal = 1515784568,
    BroadcastRevenueTransactionRefund = 1121127726,
    StatsBroadcastRevenueTransactions = 2266334310,
    ReactionNotificationsFromContacts = 3133384218,
    ReactionNotificationsFromAll = 1268654752,
    ReactionsNotifySettings = 1457736048,
    BroadcastRevenueBalances = 3288297959,
    AvailableEffect = 2479088254,
    MessagesAvailableEffectsNotModified = 3522009691,
    MessagesAvailableEffects = 3185271150,
    FactCheck = 3097230543,
    StarsTransactionPeerUnsupported = 2515714020,
    StarsTransactionPeerAppStore = 3025646453,
    StarsTransactionPeerPlayMarket = 2069236235,
    StarsTransactionPeerPremiumBot = 621656824,
    StarsTransactionPeerFragment = 3912227074,
    StarsTransactionPeer = 3624771933,
    StarsTransactionPeerAds = 1617438738,
    StarsTopupOption = 198776256,
    StarsTransaction = 178185410,
    PaymentsStarsStatus = 3153736044,
    FoundStory = 3900361664,
    StoriesFoundStories = 3806230327,
    GeoPointAddress = 3729546643,
    StarsRevenueStatus = 2033461574,
    PaymentsStarsRevenueStats = 3375085371,
    PaymentsStarsRevenueWithdrawalUrl = 497778871,
    PaymentsStarsRevenueAdsAccountUrl = 961445665,
    InputStarsTransaction = 543876817,
    StarsGiftOption = 1577421297,
    BotsPopularAppBots = 428978491,
    BotPreviewMedia = 602479523,
    BotsPreviewInfo = 212278628,
    StarsSubscriptionPricing = 88173912,
    StarsSubscription = 1401868056,
    MessageReactor = 1269016922,
    StarsGiveawayOption = 2496562474,
    StarsGiveawayWinnersOption = 1411605001,
    StarGift = 2929816814,
    PaymentsStarGiftsNotModified = 2743640936,
    PaymentsStarGifts = 2417396202,
    UserStarGift = 4003764846,
    PaymentsUserStarGifts = 1801827607,
    MessageReportOption = 2030298073,
    ReportResultChooseOption = 4041531574,
    ReportResultAddComment = 1862904881,
    ReportResultReported = 2377333835,
    InvokeAfterMsgs = 1036301552,
    InitConnection = 3251461801,
    InvokeWithLayer = 3667594509,
    InvokeWithoutUpdates = 3214170551,
    InvokeWithMessagesRange = 911373810,
    InvokeWithTakeout = 2896821550,
    InvokeWithBusinessConnection = 3710427022,
    InvokeWithGooglePlayIntegrity = 502868356,
    InvokeWithApnsSecret = 229528824,
    AuthSendCode = 2792825935,
    AuthSignUp = 2865215255,
    AuthSignIn = 2371004753,
    AuthLogOut = 1047706137,
    AuthResetAuthorizations = 2678787354,
    AuthExportAuthorization = 3854565325,
    AuthImportAuthorization = 2776268205,
    AuthBindTempAuthKey = 3453233669,
    AuthImportBotAuthorization = 1738800940,
    AuthCheckPassword = 3515567382,
    AuthRequestPasswordRecovery = 3633822822,
    AuthRecoverPassword = 923364464,
    AuthResendCode = 3403969827,
    AuthCancelCode = 520357240,
    AuthDropTempAuthKeys = 2387124616,
    AuthExportLoginToken = 3084944894,
    AuthImportLoginToken = 2511101156,
    AuthAcceptLoginToken = 3902057805,
    AuthCheckRecoveryPassword = 221691769,
    AuthImportWebTokenAuthorization = 767062953,
    AuthRequestFirebaseSms = 2386109982,
    AuthResetLoginEmail = 2123760019,
    AuthReportMissingCode = 3416125430,
    AccountRegisterDevice = 3968205178,
    AccountUnregisterDevice = 1779249670,
    AccountUpdateNotifySettings = 2227067795,
    AccountGetNotifySettings = 313765169,
    AccountResetNotifySettings = 3682473799,
    AccountUpdateProfile = 2018596725,
    AccountUpdateStatus = 1713919532,
    AccountGetWallPapers = 127302966,
    AccountReportPeer = 3317316998,
    AccountCheckUsername = 655677548,
    AccountUpdateUsername = 1040964988,
    AccountGetPrivacy = 3671837008,
    AccountSetPrivacy = 3388480744,
    AccountDeleteAccount = 2730545012,
    AccountGetAccountTTL = 150761757,
    AccountSetAccountTTL = 608323678,
    AccountSendChangePhoneCode = 2186758885,
    AccountChangePhone = 1891839707,
    AccountUpdateDeviceLocked = 954152242,
    AccountGetAuthorizations = 3810574680,
    AccountResetAuthorization = 3749180348,
    AccountGetPassword = 1418342645,
    AccountGetPasswordSettings = 2631199481,
    AccountUpdatePasswordSettings = 2778402863,
    AccountSendConfirmPhoneCode = 457157256,
    AccountConfirmPhone = 1596029123,
    AccountGetTmpPassword = 1151208273,
    AccountGetWebAuthorizations = 405695855,
    AccountResetWebAuthorization = 755087855,
    AccountResetWebAuthorizations = 1747789204,
    AccountGetAllSecureValues = 2995305597,
    AccountGetSecureValue = 1936088002,
    AccountSaveSecureValue = 2308956957,
    AccountDeleteSecureValue = 3095444555,
    AccountGetAuthorizationForm = 2838059386,
    AccountAcceptAuthorization = 4092415091,
    AccountSendVerifyPhoneCode = 2778945273,
    AccountVerifyPhone = 1305716726,
    AccountSendVerifyEmailCode = 2564831163,
    AccountVerifyEmail = 53322959,
    AccountInitTakeoutSession = 2398350000,
    AccountFinishTakeoutSession = 489050862,
    AccountConfirmPasswordEmail = 2413762848,
    AccountResendPasswordEmail = 2055154197,
    AccountCancelPasswordEmail = 3251361206,
    AccountGetContactSignUpNotification = 2668087080,
    AccountSetContactSignUpNotification = 3488890721,
    AccountGetNotifyExceptions = 1398240377,
    AccountGetWallPaper = 4237155306,
    AccountUploadWallPaper = 3818557187,
    AccountSaveWallPaper = 1817860919,
    AccountInstallWallPaper = 4276967273,
    AccountResetWallPapers = 3141244932,
    AccountGetAutoDownloadSettings = 1457130303,
    AccountSaveAutoDownloadSettings = 1995661875,
    AccountUploadTheme = 473805619,
    AccountCreateTheme = 1697530880,
    AccountUpdateTheme = 737414348,
    AccountSaveTheme = 4065792108,
    AccountInstallTheme = 3341269819,
    AccountGetTheme = 978872812,
    AccountGetThemes = 1913054296,
    AccountSetContentSettings = 3044323691,
    AccountGetContentSettings = 2342210990,
    AccountGetMultiWallPapers = 1705865692,
    AccountGetGlobalPrivacySettings = 3945483510,
    AccountSetGlobalPrivacySettings = 517647042,
    AccountReportProfilePhoto = 4203529973,
    AccountResetPassword = 2466827803,
    AccountDeclinePasswordReset = 1284770294,
    AccountGetChatThemes = 3594051209,
    AccountSetAuthorizationTTL = 3213466272,
    AccountChangeAuthorizationSettings = 1089766498,
    AccountGetSavedRingtones = 3784319624,
    AccountSaveRingtone = 1038768899,
    AccountUploadRingtone = 2199552930,
    AccountUpdateEmojiStatus = 4224966251,
    AccountGetDefaultEmojiStatuses = 3598005126,
    AccountGetRecentEmojiStatuses = 257392901,
    AccountClearRecentEmojiStatuses = 404757166,
    AccountReorderUsernames = 4015001259,
    AccountToggleUsername = 1490465654,
    AccountGetDefaultProfilePhotoEmojis = 3799319336,
    AccountGetDefaultGroupPhotoEmojis = 2438488238,
    AccountGetAutoSaveSettings = 2915810522,
    AccountSaveAutoSaveSettings = 3600515937,
    AccountDeleteAutoSaveExceptions = 1404829728,
    AccountInvalidateSignInCodes = 3398101178,
    AccountUpdateColor = 2096079197,
    AccountGetDefaultBackgroundEmojis = 2785720782,
    AccountGetChannelDefaultEmojiStatuses = 1999087573,
    AccountGetChannelRestrictedStatusEmojis = 900325589,
    AccountUpdateBusinessWorkHours = 1258348646,
    AccountUpdateBusinessLocation = 2657817370,
    AccountUpdateBusinessGreetingMessage = 1724755908,
    AccountUpdateBusinessAwayMessage = 2724888485,
    AccountUpdateConnectedBot = 1138250269,
    AccountGetConnectedBots = 1319421967,
    AccountGetBotBusinessConnection = 1990746736,
    AccountUpdateBusinessIntro = 2786381876,
    AccountToggleConnectedBotPaused = 1684934807,
    AccountDisablePeerConnectedBot = 1581481689,
    AccountUpdateBirthday = 3429764113,
    AccountCreateBusinessChatLink = 2287068814,
    AccountEditBusinessChatLink = 2352222383,
    AccountDeleteBusinessChatLink = 1611085428,
    AccountGetBusinessChatLinks = 1869667809,
    AccountResolveBusinessChatLink = 1418913262,
    AccountUpdatePersonalChannel = 3645048288,
    AccountToggleSponsoredMessages = 3118048141,
    AccountGetReactionsNotifySettings = 115172684,
    AccountSetReactionsNotifySettings = 829220168,
    UsersGetUsers = 227648840,
    UsersGetFullUser = 3054459160,
    UsersSetSecureValueErrors = 2429064373,
    UsersGetIsPremiumRequiredToContact = 2787289616,
    ContactsGetContactIDs = 2061264541,
    ContactsGetStatuses = 3299038190,
    ContactsGetContacts = 1574346258,
    ContactsImportContacts = 746589157,
    ContactsDeleteContacts = 157945344,
    ContactsDeleteByPhones = 269745566,
    ContactsBlock = 774801204,
    ContactsUnblock = 3041973032,
    ContactsGetBlocked = 2592509824,
    ContactsSearch = 301470424,
    ContactsResolveUsername = 4181511075,
    ContactsGetTopPeers = 2536798390,
    ContactsResetTopPeerRating = 451113900,
    ContactsResetSaved = 2274703345,
    ContactsGetSaved = 2196890527,
    ContactsToggleTopPeers = 2232729050,
    ContactsAddContact = 3908330448,
    ContactsAcceptContact = 4164002319,
    ContactsGetLocated = 3544759364,
    ContactsBlockFromReplies = 698914348,
    ContactsResolvePhone = 2331591492,
    ContactsExportContactToken = 4167385127,
    ContactsImportContactToken = 318789512,
    ContactsEditCloseFriends = 3127313904,
    ContactsSetBlocked = 2496027766,
    ContactsGetBirthdays = 3673008228,
    MessagesGetMessages = 1673946374,
    MessagesGetDialogs = 2700397391,
    MessagesGetHistory = 1143203525,
    MessagesSearch = 703497338,
    MessagesReadHistory = 238054714,
    MessagesDeleteHistory = 2962199082,
    MessagesDeleteMessages = 3851326930,
    MessagesReceivedMessages = 94983360,
    MessagesSetTyping = 1486110434,
    MessagesSendMessage = 2554304325,
    MessagesSendMedia = 2018673486,
    MessagesForwardMessages = 3573781000,
    MessagesReportSpam = 3474297563,
    MessagesGetPeerSettings = 4024018594,
    MessagesReport = 4235767707,
    MessagesGetChats = 1240027791,
    MessagesGetFullChat = 2930772788,
    MessagesEditChatTitle = 1937260541,
    MessagesEditChatPhoto = 903730804,
    MessagesAddChatUser = 3418804487,
    MessagesDeleteChatUser = 2719505579,
    MessagesCreateChat = 2463030740,
    MessagesGetDhConfig = 651135312,
    MessagesRequestEncryption = 4132286275,
    MessagesAcceptEncryption = 1035731989,
    MessagesDiscardEncryption = 4086541984,
    MessagesSetEncryptedTyping = 2031374829,
    MessagesReadEncryptedHistory = 2135648522,
    MessagesSendEncrypted = 1157265941,
    MessagesSendEncryptedFile = 1431914525,
    MessagesSendEncryptedService = 852769188,
    MessagesReceivedQueue = 1436924774,
    MessagesReportEncryptedSpam = 1259113487,
    MessagesReadMessageContents = 916930423,
    MessagesGetStickers = 3584414625,
    MessagesGetAllStickers = 3097534888,
    MessagesGetWebPagePreview = 2338894028,
    MessagesExportChatInvite = 2757090960,
    MessagesCheckChatInvite = 1051570619,
    MessagesImportChatInvite = 1817183516,
    MessagesGetStickerSet = 3365989492,
    MessagesInstallStickerSet = 3348096096,
    MessagesUninstallStickerSet = 4184757726,
    MessagesStartBot = 3873403768,
    MessagesGetMessagesViews = 1468322785,
    MessagesEditChatAdmin = 2824589762,
    MessagesMigrateChat = 2726777625,
    MessagesSearchGlobal = 1271290010,
    MessagesReorderStickerSets = 2016638777,
    MessagesGetDocumentByHash = 2985428511,
    MessagesGetSavedGifs = 1559270965,
    MessagesSaveGif = 846868683,
    MessagesGetInlineBotResults = 1364105629,
    MessagesSetInlineBotResults = 3138561049,
    MessagesSendInlineBotResult = 1052698730,
    MessagesGetMessageEditData = 4255550774,
    MessagesEditMessage = 3755032581,
    MessagesEditInlineBotMessage = 2203418042,
    MessagesGetBotCallbackAnswer = 2470627847,
    MessagesSetBotCallbackAnswer = 3582923530,
    MessagesGetPeerDialogs = 3832593661,
    MessagesSaveDraft = 3547514318,
    MessagesGetAllDrafts = 1782549861,
    MessagesGetFeaturedStickers = 1685588756,
    MessagesReadFeaturedStickers = 1527873830,
    MessagesGetRecentStickers = 2645114939,
    MessagesSaveRecentSticker = 958863608,
    MessagesClearRecentStickers = 2308530221,
    MessagesGetArchivedStickers = 1475442322,
    MessagesGetMaskStickers = 1678738104,
    MessagesGetAttachedStickers = 3428542412,
    MessagesSetGameScore = 2398678208,
    MessagesSetInlineGameScore = 363700068,
    MessagesGetGameHighScores = 3894568093,
    MessagesGetInlineGameHighScores = 258170395,
    MessagesGetCommonChats = 3826032900,
    MessagesGetWebPage = 2375455395,
    MessagesToggleDialogPin = 2805064279,
    MessagesReorderPinnedDialogs = 991616823,
    MessagesGetPinnedDialogs = 3602468338,
    MessagesSetBotShippingResults = 3858133754,
    MessagesSetBotPrecheckoutResults = 163765653,
    MessagesUploadMedia = 345405816,
    MessagesSendScreenshotNotification = 2705348631,
    MessagesGetFavedStickers = 82946729,
    MessagesFaveSticker = 3120547163,
    MessagesGetUnreadMentions = 4043827088,
    MessagesReadMentions = 921026381,
    MessagesGetRecentLocations = 1881817312,
    MessagesSendMultiMedia = 934757205,
    MessagesUploadEncryptedFile = 1347929239,
    MessagesSearchStickerSets = 896555914,
    MessagesGetSplitRanges = 486505992,
    MessagesMarkDialogUnread = 3263617423,
    MessagesGetDialogUnreadMarks = 585256482,
    MessagesClearAllDrafts = 2119757468,
    MessagesUpdatePinnedMessage = 3534419948,
    MessagesSendVote = 283795844,
    MessagesGetPollResults = 1941660731,
    MessagesGetOnlines = 1848369232,
    MessagesEditChatAbout = 3740665751,
    MessagesEditChatDefaultBannedRights = 2777049921,
    MessagesGetEmojiKeywords = 899735650,
    MessagesGetEmojiKeywordsDifference = 352892591,
    MessagesGetEmojiKeywordsLanguages = 1318675378,
    MessagesGetEmojiURL = 3585149990,
    MessagesGetSearchCounters = 465367808,
    MessagesRequestUrlAuth = 428848198,
    MessagesAcceptUrlAuth = 2972479781,
    MessagesHidePeerSettingsBar = 1336717624,
    MessagesGetScheduledHistory = 4111889931,
    MessagesGetScheduledMessages = 3183150180,
    MessagesSendScheduledMessages = 3174597898,
    MessagesDeleteScheduledMessages = 1504586518,
    MessagesGetPollVotes = 3094231054,
    MessagesToggleStickerSets = 3037016042,
    MessagesGetDialogFilters = 4023684233,
    MessagesGetSuggestedDialogFilters = 2728186924,
    MessagesUpdateDialogFilter = 450142282,
    MessagesUpdateDialogFiltersOrder = 3311649252,
    MessagesGetOldFeaturedStickers = 2127598753,
    MessagesGetReplies = 584962828,
    MessagesGetDiscussionMessage = 1147761405,
    MessagesReadDiscussion = 4147227124,
    MessagesUnpinAllMessages = 3995253160,
    MessagesDeleteChat = 1540419152,
    MessagesDeletePhoneCallHistory = 4190888969,
    MessagesCheckHistoryImport = 1140726259,
    MessagesInitHistoryImport = 873008187,
    MessagesUploadImportedMedia = 713433234,
    MessagesStartHistoryImport = 3023958852,
    MessagesGetExportedChatInvites = 2729812982,
    MessagesGetExportedChatInvite = 1937010524,
    MessagesEditExportedChatInvite = 3184144245,
    MessagesDeleteRevokedExportedChatInvites = 1452833749,
    MessagesDeleteExportedChatInvite = 3563365419,
    MessagesGetAdminsWithInvites = 958457583,
    MessagesGetChatInviteImporters = 3741637966,
    MessagesSetHistoryTTL = 3087949796,
    MessagesCheckHistoryImportPeer = 1573261059,
    MessagesSetChatTheme = 3862683967,
    MessagesGetMessageReadParticipants = 834782287,
    MessagesGetSearchResultsCalendar = 1789130429,
    MessagesGetSearchResultsPositions = 2625580816,
    MessagesHideChatJoinRequest = 2145904661,
    MessagesHideAllChatJoinRequests = 3766875370,
    MessagesToggleNoForwards = 2971578274,
    MessagesSaveDefaultSendAs = 3439189910,
    MessagesSendReaction = 3540875476,
    MessagesGetMessagesReactions = 2344259814,
    MessagesGetMessageReactionsList = 1176190792,
    MessagesSetChatAvailableReactions = 2253071745,
    MessagesGetAvailableReactions = 417243308,
    MessagesSetDefaultReaction = 1330094102,
    MessagesTranslateText = 1662529584,
    MessagesGetUnreadReactions = 841173339,
    MessagesReadReactions = 1420459918,
    MessagesSearchSentMedia = 276705696,
    MessagesGetAttachMenuBots = 385663691,
    MessagesGetAttachMenuBot = 1998676370,
    MessagesToggleBotInAttachMenu = 1777704297,
    MessagesRequestWebView = 647873217,
    MessagesProlongWebView = 2966952579,
    MessagesRequestSimpleWebView = 1094336115,
    MessagesSendWebViewResultMessage = 172168437,
    MessagesSendWebViewData = 3691135688,
    MessagesTranscribeAudio = 647928393,
    MessagesRateTranscribedAudio = 2132608815,
    MessagesGetCustomEmojiDocuments = 3651866452,
    MessagesGetEmojiStickers = 4227637647,
    MessagesGetFeaturedEmojiStickers = 248473398,
    MessagesReportReaction = 1063567478,
    MessagesGetTopReactions = 3145803194,
    MessagesGetRecentReactions = 960896434,
    MessagesClearRecentReactions = 2650730420,
    MessagesGetExtendedMedia = 2230847508,
    MessagesSetDefaultHistoryTTL = 2662667333,
    MessagesGetDefaultHistoryTTL = 1703637384,
    MessagesSendBotRequestedPeer = 2444415072,
    MessagesGetEmojiGroups = 1955122779,
    MessagesGetEmojiStatusGroups = 785209037,
    MessagesGetEmojiProfilePhotoGroups = 564480243,
    MessagesSearchCustomEmoji = 739360983,
    MessagesTogglePeerTranslations = 3833378169,
    MessagesGetBotApp = 889046467,
    MessagesRequestAppWebView = 1398901710,
    MessagesSetChatWallPaper = 2415577825,
    MessagesSearchEmojiStickerSets = 2461288780,
    MessagesGetSavedDialogs = 1401016858,
    MessagesGetSavedHistory = 1033519437,
    MessagesDeleteSavedHistory = 1855459371,
    MessagesGetPinnedSavedDialogs = 3594360032,
    MessagesToggleSavedDialogPin = 2894183390,
    MessagesReorderPinnedSavedDialogs = 2339464583,
    MessagesGetSavedReactionTags = 909631579,
    MessagesUpdateSavedReactionTag = 1613331948,
    MessagesGetDefaultTagReactions = 3187225640,
    MessagesGetOutboxReadDate = 2353790557,
    MessagesGetQuickReplies = 3565417128,
    MessagesReorderQuickReplies = 1613961479,
    MessagesCheckQuickReplyShortcut = 4057005011,
    MessagesEditQuickReplyShortcut = 1543519471,
    MessagesDeleteQuickReplyShortcut = 1019234112,
    MessagesGetQuickReplyMessages = 2493814211,
    MessagesSendQuickReplyMessages = 1819610593,
    MessagesDeleteQuickReplyMessages = 3775260944,
    MessagesToggleDialogFilterTags = 4247640649,
    MessagesGetMyStickers = 3501580796,
    MessagesGetEmojiStickerGroups = 500711669,
    MessagesGetAvailableEffects = 3735161401,
    MessagesEditFactCheck = 92925557,
    MessagesDeleteFactCheck = 3520762892,
    MessagesGetFactCheck = 3117270510,
    MessagesRequestMainWebView = 3386908283,
    MessagesSendPaidReaction = 2648090235,
    MessagesTogglePaidReactionPrivacy = 2224739223,
    MessagesGetPaidReactionPrivacy = 1193563562,
    UpdatesGetState = 3990128682,
    UpdatesGetDifference = 432207715,
    UpdatesGetChannelDifference = 51854712,
    PhotosUpdateProfilePhoto = 166207545,
    PhotosUploadProfilePhoto = 59286453,
    PhotosDeletePhotos = 2278522671,
    PhotosGetUserPhotos = 2446144168,
    PhotosUploadContactProfilePhoto = 3779873393,
    UploadSaveFilePart = 3003426337,
    UploadGetFile = 3193124286,
    UploadSaveBigFilePart = 3732629309,
    UploadGetWebFile = 619086221,
    UploadGetCdnFile = 962554330,
    UploadReuploadCdnFile = 2603046056,
    UploadGetCdnFileHashes = 2447130417,
    UploadGetFileHashes = 2438371370,
    HelpGetConfig = 3304659051,
    HelpGetNearestDc = 531836966,
    HelpGetAppUpdate = 1378703997,
    HelpGetInviteText = 1295590211,
    HelpGetSupport = 2631862477,
    HelpSetBotUpdatesStatus = 3961704397,
    HelpGetCdnConfig = 1375900482,
    HelpGetRecentMeUrls = 1036054804,
    HelpGetTermsOfServiceUpdate = 749019089,
    HelpAcceptTermsOfService = 4000511898,
    HelpGetDeepLinkInfo = 1072547679,
    HelpGetAppConfig = 1642330196,
    HelpSaveAppLog = 1862465352,
    HelpGetPassportConfig = 3328290056,
    HelpGetSupportName = 3546343212,
    HelpGetUserInfo = 59377875,
    HelpEditUserInfo = 1723407216,
    HelpGetPromoData = 3231151137,
    HelpHidePromoData = 505748629,
    HelpDismissSuggestion = 4111317665,
    HelpGetCountriesList = 1935116200,
    HelpGetPremiumPromo = 3088815060,
    HelpGetPeerColors = 3665884207,
    HelpGetPeerProfileColors = 2882513405,
    HelpGetTimezonesList = 1236468288,
    ChannelsReadHistory = 3423619383,
    ChannelsDeleteMessages = 2227305806,
    ChannelsReportSpam = 4098523925,
    ChannelsGetMessages = 2911672867,
    ChannelsGetParticipants = 2010044880,
    ChannelsGetParticipant = 2695589062,
    ChannelsGetChannels = 176122811,
    ChannelsGetFullChannel = 141781513,
    ChannelsCreateChannel = 2432722695,
    ChannelsEditAdmin = 3543959810,
    ChannelsEditTitle = 1450044624,
    ChannelsEditPhoto = 4046346185,
    ChannelsCheckUsername = 283557164,
    ChannelsUpdateUsername = 890549214,
    ChannelsJoinChannel = 615851205,
    ChannelsLeaveChannel = 4164332181,
    ChannelsInviteToChannel = 3387112788,
    ChannelsDeleteChannel = 3222347747,
    ChannelsExportMessageLink = 3862932971,
    ChannelsToggleSignatures = 1099781276,
    ChannelsGetAdminedPublicChannels = 4172297903,
    ChannelsEditBanned = 2531708289,
    ChannelsGetAdminLog = 870184064,
    ChannelsSetStickers = 3935085817,
    ChannelsReadMessageContents = 3937786936,
    ChannelsDeleteHistory = 2611648071,
    ChannelsTogglePreHistoryHidden = 3938171212,
    ChannelsGetLeftChannels = 2202135744,
    ChannelsGetGroupsForDiscussion = 4124758904,
    ChannelsSetDiscussionGroup = 1079520178,
    ChannelsEditCreator = 2402864415,
    ChannelsEditLocation = 1491484525,
    ChannelsToggleSlowMode = 3990134512,
    ChannelsGetInactiveChannels = 300429806,
    ChannelsConvertToGigagroup = 187239529,
    ChannelsViewSponsoredMessage = 3199130516,
    ChannelsGetSponsoredMessages = 3961589695,
    ChannelsGetSendAs = 231174382,
    ChannelsDeleteParticipantHistory = 913655003,
    ChannelsToggleJoinToSend = 3838547328,
    ChannelsToggleJoinRequest = 1277789622,
    ChannelsReorderUsernames = 3025988893,
    ChannelsToggleUsername = 1358053637,
    ChannelsDeactivateAllUsernames = 170155475,
    ChannelsToggleForum = 2754186025,
    ChannelsCreateForumTopic = 4094427684,
    ChannelsGetForumTopics = 233136337,
    ChannelsGetForumTopicsByID = 2961383097,
    ChannelsEditForumTopic = 4108296581,
    ChannelsUpdatePinnedForumTopic = 1814925350,
    ChannelsDeleteTopicHistory = 876830509,
    ChannelsReorderPinnedForumTopics = 693150095,
    ChannelsToggleAntiSpam = 1760814315,
    ChannelsReportAntiSpamFalsePositive = 2823857811,
    ChannelsToggleParticipantsHidden = 1785624660,
    ChannelsClickSponsoredMessage = 21257589,
    ChannelsUpdateColor = 3635033713,
    ChannelsToggleViewForumAsMessages = 2537077525,
    ChannelsGetChannelRecommendations = 631707458,
    ChannelsUpdateEmojiStatus = 4040418984,
    ChannelsSetBoostsToUnblockRestrictions = 2906234094,
    ChannelsSetEmojiStickers = 1020866743,
    ChannelsReportSponsoredMessage = 2945447609,
    ChannelsRestrictSponsoredMessages = 2598966553,
    ChannelsSearchPosts = 3516897403,
    BotsSendCustomRequest = 2854709741,
    BotsAnswerWebhookJSONQuery = 3860938573,
    BotsSetBotCommands = 85399130,
    BotsResetBotCommands = 1032708345,
    BotsGetBotCommands = 3813412310,
    BotsSetBotMenuButton = 1157944655,
    BotsGetBotMenuButton = 2623597352,
    BotsSetBotBroadcastDefaultAdminRights = 2021942497,
    BotsSetBotGroupDefaultAdminRights = 2455685610,
    BotsSetBotInfo = 282013987,
    BotsGetBotInfo = 3705214205,
    BotsReorderUsernames = 2533994946,
    BotsToggleUsername = 87861619,
    BotsCanSendMessage = 324662502,
    BotsAllowSendMessage = 4046644207,
    BotsInvokeWebViewCustomMethod = 142591463,
    BotsGetPopularAppBots = 3260088722,
    BotsAddPreviewMedia = 397326170,
    BotsEditPreviewMedia = 2233819247,
    BotsDeletePreviewMedia = 755054003,
    BotsReorderPreviewMedias = 3056071594,
    BotsGetPreviewInfo = 1111143341,
    BotsGetPreviewMedias = 2728745293,
    PaymentsGetPaymentForm = 924093883,
    PaymentsGetPaymentReceipt = 611897804,
    PaymentsValidateRequestedInfo = 3066622251,
    PaymentsSendPaymentForm = 755192367,
    PaymentsGetSavedInfo = 578650699,
    PaymentsClearSavedInfo = 3627905217,
    PaymentsGetBankCardData = 779736953,
    PaymentsExportInvoice = 261206117,
    PaymentsAssignAppStoreTransaction = 2163045501,
    PaymentsAssignPlayMarketTransaction = 3757920467,
    PaymentsCanPurchasePremium = 2680266422,
    PaymentsGetPremiumGiftCodeOptions = 660060756,
    PaymentsCheckGiftCode = 2387719361,
    PaymentsApplyGiftCode = 4142032980,
    PaymentsGetGiveawayInfo = 4095972389,
    PaymentsLaunchPrepaidGiveaway = 1609928480,
    PaymentsGetStarsTopupOptions = 3222194131,
    PaymentsGetStarsStatus = 273665959,
    PaymentsGetStarsTransactions = 1775912279,
    PaymentsSendStarsForm = 2040056084,
    PaymentsRefundStarsCharge = 632196938,
    PaymentsGetStarsRevenueStats = 3642751702,
    PaymentsGetStarsRevenueWithdrawalUrl = 331081907,
    PaymentsGetStarsRevenueAdsAccountUrl = 3520589765,
    PaymentsGetStarsTransactionsByID = 662973742,
    PaymentsGetStarsGiftOptions = 3553192904,
    PaymentsGetStarsSubscriptions = 52761285,
    PaymentsChangeStarsSubscription = 3346466936,
    PaymentsFulfillStarsSubscription = 3428576179,
    PaymentsGetStarsGiveawayOptions = 3172924734,
    PaymentsGetStarGifts = 3293984144,
    PaymentsGetUserStarGifts = 1584580577,
    PaymentsSaveStarGift = 2276257934,
    PaymentsConvertStarGift = 69328935,
    StickersCreateStickerSet = 2418125671,
    StickersRemoveStickerFromSet = 4151709521,
    StickersChangeStickerPosition = 4290172106,
    StickersAddStickerToSet = 2253651646,
    StickersSetStickerSetThumb = 2808763282,
    StickersCheckShortName = 676017721,
    StickersSuggestShortName = 1303364867,
    StickersChangeSticker = 4115889852,
    StickersRenameStickerSet = 306912256,
    StickersDeleteStickerSet = 2272281492,
    StickersReplaceSticker = 1184253338,
    PhoneGetCallConfig = 1430593449,
    PhoneRequestCall = 1124046573,
    PhoneAcceptCall = 1003664544,
    PhoneConfirmCall = 788404002,
    PhoneReceivedCall = 399855457,
    PhoneDiscardCall = 2999697856,
    PhoneSetCallRating = 1508562471,
    PhoneSaveCallDebug = 662363518,
    PhoneSendSignalingData = 4286223235,
    PhoneCreateGroupCall = 1221445336,
    PhoneJoinGroupCall = 2972909435,
    PhoneLeaveGroupCall = 1342404601,
    PhoneInviteToGroupCall = 2067345760,
    PhoneDiscardGroupCall = 2054648117,
    PhoneToggleGroupCallSettings = 1958458429,
    PhoneGetGroupCall = 68699611,
    PhoneGetGroupParticipants = 3310934187,
    PhoneCheckGroupCall = 3046963575,
    PhoneToggleGroupCallRecord = 4045981448,
    PhoneEditGroupCallParticipant = 2770811583,
    PhoneEditGroupCallTitle = 480685066,
    PhoneGetGroupCallJoinAs = 4017889594,
    PhoneExportGroupCallInvite = 3869926527,
    PhoneToggleGroupCallStartSubscription = 563885286,
    PhoneStartScheduledGroupCall = 1451287362,
    PhoneSaveDefaultGroupCallJoinAs = 1465786252,
    PhoneJoinGroupCallPresentation = 3421137860,
    PhoneLeaveGroupCallPresentation = 475058500,
    PhoneGetGroupCallStreamChannels = 447879488,
    PhoneGetGroupCallStreamRtmpUrl = 3736316863,
    PhoneSaveCallLog = 1092913030,
    LangpackGetLangPack = 4075959050,
    LangpackGetStrings = 4025104387,
    LangpackGetDifference = 3449309861,
    LangpackGetLanguages = 1120311183,
    LangpackGetLanguage = 1784243458,
    FoldersEditPeerFolders = 1749536939,
    StatsGetBroadcastStats = 2873246746,
    StatsLoadAsyncGraph = 1646092192,
    StatsGetMegagroupStats = 3705636359,
    StatsGetMessagePublicForwards = 1595212100,
    StatsGetMessageStats = 3068175349,
    StatsGetStoryStats = 927985472,
    StatsGetStoryPublicForwards = 2789441270,
    StatsGetBroadcastRevenueStats = 1977595505,
    StatsGetBroadcastRevenueWithdrawalUrl = 711323507,
    StatsGetBroadcastRevenueTransactions = 6891535,
    ChatlistsExportChatlistInvite = 2222081934,
    ChatlistsDeleteExportedInvite = 1906072670,
    ChatlistsEditExportedInvite = 1698543165,
    ChatlistsGetExportedInvites = 3456359043,
    ChatlistsCheckChatlistInvite = 1103171583,
    ChatlistsJoinChatlistInvite = 2796675994,
    ChatlistsGetChatlistUpdates = 2302776609,
    ChatlistsJoinChatlistUpdates = 3767138549,
    ChatlistsHideChatlistUpdates = 1726252795,
    ChatlistsGetLeaveChatlistSuggestions = 4257011476,
    ChatlistsLeaveChatlist = 1962598714,
    StoriesCanSendStory = 3353337821,
    StoriesSendStory = 3840305483,
    StoriesEditStory = 3045308998,
    StoriesDeleteStories = 2925124447,
    StoriesTogglePinned = 2591400431,
    StoriesGetAllStories = 4004566565,
    StoriesGetPinnedStories = 1478600156,
    StoriesGetStoriesArchive = 3023380502,
    StoriesGetStoriesByID = 1467271796,
    StoriesToggleAllStoriesHidden = 2082822084,
    StoriesReadStories = 2773932744,
    StoriesIncrementStoryViews = 2986511099,
    StoriesGetStoryViewsList = 2127707223,
    StoriesGetStoriesViews = 685862088,
    StoriesExportStoryLink = 2072899360,
    StoriesReport = 433646405,
    StoriesActivateStealthMode = 1471926630,
    StoriesSendReaction = 2144810674,
    StoriesGetPeerStories = 743103056,
    StoriesGetAllReadPeerStories = 2606426105,
    StoriesGetPeerMaxIDs = 1398375363,
    StoriesGetChatsToSend = 2775223136,
    StoriesTogglePeerStoriesHidden = 3171161540,
    StoriesGetStoryReactionsList = 3115485215,
    StoriesTogglePinnedToTop = 187268763,
    StoriesSearchPosts = 1827279210,
    PremiumGetBoostsList = 1626764896,
    PremiumGetMyBoosts = 199719754,
    PremiumApplyBoost = 1803396934,
    PremiumGetBoostsStatus = 70197089,
    PremiumGetUserBoosts = 965037343,
    SmsjobsIsEligibleToJoin = 249313744,
    SmsjobsJoin = 2806959661,
    SmsjobsLeave = 2560142707,
    SmsjobsUpdateSettings = 155164863,
    SmsjobsGetStatus = 279353576,
    SmsjobsGetSmsJob = 2005766191,
    SmsjobsFinishJob = 1327415076,
    FragmentGetCollectibleInfo = 3189671354,
};
const ProtoResPQ= struct {
    nonce: i128,
    server_nonce: i128,
    pq: []const u8,
    server_public_key_fingerprints: []const i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // nonce
        const paramnonce = self.nonce;
        result += @sizeOf(@TypeOf(paramnonce));
        // server_nonce
        const paramserver_nonce = self.server_nonce;
        result += @sizeOf(@TypeOf(paramserver_nonce));
        // pq
        const parampq = self.pq;
        result += base.strEncodedSize(parampq);
        // server_public_key_fingerprints
        const paramserver_public_key_fingerprints = self.server_public_key_fingerprints;
        result += 4; // vector id
        result += 4; // vector size
        for (paramserver_public_key_fingerprints) |paramserver_public_key_fingerprintsitem| {
        result += @sizeOf(@TypeOf(paramserver_public_key_fingerprintsitem));        }

        return result;
    }
    pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ProtoPQInnerDataDc= struct {
    pq: []const u8,
    p: []const u8,
    q: []const u8,
    nonce: i128,
    server_nonce: i128,
    new_nonce: i256,
    dc: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // pq
        const parampq = self.pq;
        result += base.strEncodedSize(parampq);
        // p
        const paramp = self.p;
        result += base.strEncodedSize(paramp);
        // q
        const paramq = self.q;
        result += base.strEncodedSize(paramq);
        // nonce
        const paramnonce = self.nonce;
        result += @sizeOf(@TypeOf(paramnonce));
        // server_nonce
        const paramserver_nonce = self.server_nonce;
        result += @sizeOf(@TypeOf(paramserver_nonce));
        // new_nonce
        const paramnew_nonce = self.new_nonce;
        result += @sizeOf(@TypeOf(paramnew_nonce));
        // dc
        const paramdc = self.dc;
        result += @sizeOf(@TypeOf(paramdc));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ProtoPQInnerDataTempDc= struct {
    pq: []const u8,
    p: []const u8,
    q: []const u8,
    nonce: i128,
    server_nonce: i128,
    new_nonce: i256,
    dc: i32,
    expires_in: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // pq
        const parampq = self.pq;
        result += base.strEncodedSize(parampq);
        // p
        const paramp = self.p;
        result += base.strEncodedSize(paramp);
        // q
        const paramq = self.q;
        result += base.strEncodedSize(paramq);
        // nonce
        const paramnonce = self.nonce;
        result += @sizeOf(@TypeOf(paramnonce));
        // server_nonce
        const paramserver_nonce = self.server_nonce;
        result += @sizeOf(@TypeOf(paramserver_nonce));
        // new_nonce
        const paramnew_nonce = self.new_nonce;
        result += @sizeOf(@TypeOf(paramnew_nonce));
        // dc
        const paramdc = self.dc;
        result += @sizeOf(@TypeOf(paramdc));
        // expires_in
        const paramexpires_in = self.expires_in;
        result += @sizeOf(@TypeOf(paramexpires_in));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ProtoServerDHParamsOk= struct {
    nonce: i128,
    server_nonce: i128,
    encrypted_answer: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // nonce
        const paramnonce = self.nonce;
        result += @sizeOf(@TypeOf(paramnonce));
        // server_nonce
        const paramserver_nonce = self.server_nonce;
        result += @sizeOf(@TypeOf(paramserver_nonce));
        // encrypted_answer
        const paramencrypted_answer = self.encrypted_answer;
        result += base.strEncodedSize(paramencrypted_answer);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ProtoServerDHInnerData= struct {
    nonce: i128,
    server_nonce: i128,
    g: i32,
    dh_prime: []const u8,
    g_a: []const u8,
    server_time: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // nonce
        const paramnonce = self.nonce;
        result += @sizeOf(@TypeOf(paramnonce));
        // server_nonce
        const paramserver_nonce = self.server_nonce;
        result += @sizeOf(@TypeOf(paramserver_nonce));
        // g
        const paramg = self.g;
        result += @sizeOf(@TypeOf(paramg));
        // dh_prime
        const paramdh_prime = self.dh_prime;
        result += base.strEncodedSize(paramdh_prime);
        // g_a
        const paramg_a = self.g_a;
        result += base.strEncodedSize(paramg_a);
        // server_time
        const paramserver_time = self.server_time;
        result += @sizeOf(@TypeOf(paramserver_time));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ProtoClientDHInnerData= struct {
    nonce: i128,
    server_nonce: i128,
    retry_id: i64,
    g_b: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // nonce
        const paramnonce = self.nonce;
        result += @sizeOf(@TypeOf(paramnonce));
        // server_nonce
        const paramserver_nonce = self.server_nonce;
        result += @sizeOf(@TypeOf(paramserver_nonce));
        // retry_id
        const paramretry_id = self.retry_id;
        result += @sizeOf(@TypeOf(paramretry_id));
        // g_b
        const paramg_b = self.g_b;
        result += base.strEncodedSize(paramg_b);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ProtoDhGenOk= struct {
    nonce: i128,
    server_nonce: i128,
    new_nonce_hash1: i128,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // nonce
        const paramnonce = self.nonce;
        result += @sizeOf(@TypeOf(paramnonce));
        // server_nonce
        const paramserver_nonce = self.server_nonce;
        result += @sizeOf(@TypeOf(paramserver_nonce));
        // new_nonce_hash1
        const paramnew_nonce_hash1 = self.new_nonce_hash1;
        result += @sizeOf(@TypeOf(paramnew_nonce_hash1));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ProtoDhGenRetry= struct {
    nonce: i128,
    server_nonce: i128,
    new_nonce_hash2: i128,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // nonce
        const paramnonce = self.nonce;
        result += @sizeOf(@TypeOf(paramnonce));
        // server_nonce
        const paramserver_nonce = self.server_nonce;
        result += @sizeOf(@TypeOf(paramserver_nonce));
        // new_nonce_hash2
        const paramnew_nonce_hash2 = self.new_nonce_hash2;
        result += @sizeOf(@TypeOf(paramnew_nonce_hash2));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ProtoDhGenFail= struct {
    nonce: i128,
    server_nonce: i128,
    new_nonce_hash3: i128,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // nonce
        const paramnonce = self.nonce;
        result += @sizeOf(@TypeOf(paramnonce));
        // server_nonce
        const paramserver_nonce = self.server_nonce;
        result += @sizeOf(@TypeOf(paramserver_nonce));
        // new_nonce_hash3
        const paramnew_nonce_hash3 = self.new_nonce_hash3;
        result += @sizeOf(@TypeOf(paramnew_nonce_hash3));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ProtoBindAuthKeyInner= struct {
    nonce: i64,
    temp_auth_key_id: i64,
    perm_auth_key_id: i64,
    temp_session_id: i64,
    expires_at: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // nonce
        const paramnonce = self.nonce;
        result += @sizeOf(@TypeOf(paramnonce));
        // temp_auth_key_id
        const paramtemp_auth_key_id = self.temp_auth_key_id;
        result += @sizeOf(@TypeOf(paramtemp_auth_key_id));
        // perm_auth_key_id
        const paramperm_auth_key_id = self.perm_auth_key_id;
        result += @sizeOf(@TypeOf(paramperm_auth_key_id));
        // temp_session_id
        const paramtemp_session_id = self.temp_session_id;
        result += @sizeOf(@TypeOf(paramtemp_session_id));
        // expires_at
        const paramexpires_at = self.expires_at;
        result += @sizeOf(@TypeOf(paramexpires_at));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ProtoRpcError= struct {
    error_code: i32,
    error_message: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // error_code
        const paramerror_code = self.error_code;
        result += @sizeOf(@TypeOf(paramerror_code));
        // error_message
        const paramerror_message = self.error_message;
        result += base.strEncodedSize(paramerror_message);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ProtoRpcAnswerUnknown= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const ProtoRpcAnswerDroppedRunning= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const ProtoRpcAnswerDropped= struct {
    msg_id: i64,
    seq_no: i32,
    bytes: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // msg_id
        const parammsg_id = self.msg_id;
        result += @sizeOf(@TypeOf(parammsg_id));
        // seq_no
        const paramseq_no = self.seq_no;
        result += @sizeOf(@TypeOf(paramseq_no));
        // bytes
        const parambytes = self.bytes;
        result += @sizeOf(@TypeOf(parambytes));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ProtoFutureSalt= struct {
    valid_since: i32,
    valid_until: i32,
    salt: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // valid_since
        const paramvalid_since = self.valid_since;
        result += @sizeOf(@TypeOf(paramvalid_since));
        // valid_until
        const paramvalid_until = self.valid_until;
        result += @sizeOf(@TypeOf(paramvalid_until));
        // salt
        const paramsalt = self.salt;
        result += @sizeOf(@TypeOf(paramsalt));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ProtoPong= struct {
    msg_id: i64,
    ping_id: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // msg_id
        const parammsg_id = self.msg_id;
        result += @sizeOf(@TypeOf(parammsg_id));
        // ping_id
        const paramping_id = self.ping_id;
        result += @sizeOf(@TypeOf(paramping_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ProtoDestroySessionOk= struct {
    session_id: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // session_id
        const paramsession_id = self.session_id;
        result += @sizeOf(@TypeOf(paramsession_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const ProtoDestroySessionNone= struct {
    session_id: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // session_id
        const paramsession_id = self.session_id;
        result += @sizeOf(@TypeOf(paramsession_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const ProtoNewSessionCreated= struct {
    first_msg_id: i64,
    unique_id: i64,
    server_salt: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // first_msg_id
        const paramfirst_msg_id = self.first_msg_id;
        result += @sizeOf(@TypeOf(paramfirst_msg_id));
        // unique_id
        const paramunique_id = self.unique_id;
        result += @sizeOf(@TypeOf(paramunique_id));
        // server_salt
        const paramserver_salt = self.server_salt;
        result += @sizeOf(@TypeOf(paramserver_salt));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ProtoGzipPacked= struct {
    packed_data: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // packed_data
        const parampacked_data = self.packed_data;
        result += base.strEncodedSize(parampacked_data);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const ProtoMsgsAck= struct {
    msg_ids: []const i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // msg_ids
        const parammsg_ids = self.msg_ids;
        result += 4; // vector id
        result += 4; // vector size
        for (parammsg_ids) |parammsg_idsitem| {
        result += @sizeOf(@TypeOf(parammsg_idsitem));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const ProtoBadMsgNotification= struct {
    bad_msg_id: i64,
    bad_msg_seqno: i32,
    error_code: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // bad_msg_id
        const parambad_msg_id = self.bad_msg_id;
        result += @sizeOf(@TypeOf(parambad_msg_id));
        // bad_msg_seqno
        const parambad_msg_seqno = self.bad_msg_seqno;
        result += @sizeOf(@TypeOf(parambad_msg_seqno));
        // error_code
        const paramerror_code = self.error_code;
        result += @sizeOf(@TypeOf(paramerror_code));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ProtoBadServerSalt= struct {
    bad_msg_id: i64,
    bad_msg_seqno: i32,
    error_code: i32,
    new_server_salt: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // bad_msg_id
        const parambad_msg_id = self.bad_msg_id;
        result += @sizeOf(@TypeOf(parambad_msg_id));
        // bad_msg_seqno
        const parambad_msg_seqno = self.bad_msg_seqno;
        result += @sizeOf(@TypeOf(parambad_msg_seqno));
        // error_code
        const paramerror_code = self.error_code;
        result += @sizeOf(@TypeOf(paramerror_code));
        // new_server_salt
        const paramnew_server_salt = self.new_server_salt;
        result += @sizeOf(@TypeOf(paramnew_server_salt));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ProtoMsgResendReq= struct {
    msg_ids: []const i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // msg_ids
        const parammsg_ids = self.msg_ids;
        result += 4; // vector id
        result += 4; // vector size
        for (parammsg_ids) |parammsg_idsitem| {
        result += @sizeOf(@TypeOf(parammsg_idsitem));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const ProtoMsgsStateReq= struct {
    msg_ids: []const i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // msg_ids
        const parammsg_ids = self.msg_ids;
        result += 4; // vector id
        result += 4; // vector size
        for (parammsg_ids) |parammsg_idsitem| {
        result += @sizeOf(@TypeOf(parammsg_idsitem));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const ProtoMsgsStateInfo= struct {
    req_msg_id: i64,
    info: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // req_msg_id
        const paramreq_msg_id = self.req_msg_id;
        result += @sizeOf(@TypeOf(paramreq_msg_id));
        // info
        const paraminfo = self.info;
        result += base.strEncodedSize(paraminfo);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ProtoMsgsAllInfo= struct {
    msg_ids: []const i64,
    info: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // msg_ids
        const parammsg_ids = self.msg_ids;
        result += 4; // vector id
        result += 4; // vector size
        for (parammsg_ids) |parammsg_idsitem| {
        result += @sizeOf(@TypeOf(parammsg_idsitem));        }

        // info
        const paraminfo = self.info;
        result += base.strEncodedSize(paraminfo);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ProtoMsgDetailedInfo= struct {
    msg_id: i64,
    answer_msg_id: i64,
    bytes: i32,
    status: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // msg_id
        const parammsg_id = self.msg_id;
        result += @sizeOf(@TypeOf(parammsg_id));
        // answer_msg_id
        const paramanswer_msg_id = self.answer_msg_id;
        result += @sizeOf(@TypeOf(paramanswer_msg_id));
        // bytes
        const parambytes = self.bytes;
        result += @sizeOf(@TypeOf(parambytes));
        // status
        const paramstatus = self.status;
        result += @sizeOf(@TypeOf(paramstatus));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ProtoMsgNewDetailedInfo= struct {
    answer_msg_id: i64,
    bytes: i32,
    status: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // answer_msg_id
        const paramanswer_msg_id = self.answer_msg_id;
        result += @sizeOf(@TypeOf(paramanswer_msg_id));
        // bytes
        const parambytes = self.bytes;
        result += @sizeOf(@TypeOf(parambytes));
        // status
        const paramstatus = self.status;
        result += @sizeOf(@TypeOf(paramstatus));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ProtoDestroyAuthKeyOk= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const ProtoDestroyAuthKeyNone= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const ProtoDestroyAuthKeyFail= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const ProtoHttpWait= struct {
    max_delay: i32,
    wait_after: i32,
    max_wait: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // max_delay
        const parammax_delay = self.max_delay;
        result += @sizeOf(@TypeOf(parammax_delay));
        // wait_after
        const paramwait_after = self.wait_after;
        result += @sizeOf(@TypeOf(paramwait_after));
        // max_wait
        const parammax_wait = self.max_wait;
        result += @sizeOf(@TypeOf(parammax_wait));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ProtoReqDHParams= struct {
    nonce: i128,
    server_nonce: i128,
    p: []const u8,
    q: []const u8,
    public_key_fingerprint: i64,
    encrypted_data: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // nonce
        const paramnonce = self.nonce;
        result += @sizeOf(@TypeOf(paramnonce));
        // server_nonce
        const paramserver_nonce = self.server_nonce;
        result += @sizeOf(@TypeOf(paramserver_nonce));
        // p
        const paramp = self.p;
        result += base.strEncodedSize(paramp);
        // q
        const paramq = self.q;
        result += base.strEncodedSize(paramq);
        // public_key_fingerprint
        const parampublic_key_fingerprint = self.public_key_fingerprint;
        result += @sizeOf(@TypeOf(parampublic_key_fingerprint));
        // encrypted_data
        const paramencrypted_data = self.encrypted_data;
        result += base.strEncodedSize(paramencrypted_data);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ProtoSetClientDHParams= struct {
    nonce: i128,
    server_nonce: i128,
    encrypted_data: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // nonce
        const paramnonce = self.nonce;
        result += @sizeOf(@TypeOf(paramnonce));
        // server_nonce
        const paramserver_nonce = self.server_nonce;
        result += @sizeOf(@TypeOf(paramserver_nonce));
        // encrypted_data
        const paramencrypted_data = self.encrypted_data;
        result += base.strEncodedSize(paramencrypted_data);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ProtoRpcDropAnswer= struct {
    req_msg_id: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // req_msg_id
        const paramreq_msg_id = self.req_msg_id;
        result += @sizeOf(@TypeOf(paramreq_msg_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const ProtoGetFutureSalts= struct {
    num: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // num
        const paramnum = self.num;
        result += @sizeOf(@TypeOf(paramnum));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const ProtoPing= struct {
    ping_id: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // ping_id
        const paramping_id = self.ping_id;
        result += @sizeOf(@TypeOf(paramping_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const ProtoPingDelayDisconnect= struct {
    ping_id: i64,
    disconnect_delay: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // ping_id
        const paramping_id = self.ping_id;
        result += @sizeOf(@TypeOf(paramping_id));
        // disconnect_delay
        const paramdisconnect_delay = self.disconnect_delay;
        result += @sizeOf(@TypeOf(paramdisconnect_delay));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ProtoDestroySession= struct {
    session_id: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // session_id
        const paramsession_id = self.session_id;
        result += @sizeOf(@TypeOf(paramsession_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const ProtoDestroyAuthKey= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const InputPeerEmpty= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const InputPeerSelf= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const InputPeerChat= struct {
    chat_id: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // chat_id
        const paramchat_id = self.chat_id;
        result += @sizeOf(@TypeOf(paramchat_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const InputPeerUser= struct {
    user_id: i64,
    access_hash: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // user_id
        const paramuser_id = self.user_id;
        result += @sizeOf(@TypeOf(paramuser_id));
        // access_hash
        const paramaccess_hash = self.access_hash;
        result += @sizeOf(@TypeOf(paramaccess_hash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputPeerChannel= struct {
    channel_id: i64,
    access_hash: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // channel_id
        const paramchannel_id = self.channel_id;
        result += @sizeOf(@TypeOf(paramchannel_id));
        // access_hash
        const paramaccess_hash = self.access_hash;
        result += @sizeOf(@TypeOf(paramaccess_hash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputPeerUserFromMessage= struct {
    peer: IInputPeer,
    msg_id: i32,
    user_id: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // msg_id
        const parammsg_id = self.msg_id;
        result += @sizeOf(@TypeOf(parammsg_id));
        // user_id
        const paramuser_id = self.user_id;
        result += @sizeOf(@TypeOf(paramuser_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputPeerChannelFromMessage= struct {
    peer: IInputPeer,
    msg_id: i32,
    channel_id: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // msg_id
        const parammsg_id = self.msg_id;
        result += @sizeOf(@TypeOf(parammsg_id));
        // channel_id
        const paramchannel_id = self.channel_id;
        result += @sizeOf(@TypeOf(paramchannel_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputUserEmpty= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const InputUserSelf= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const InputUser= struct {
    user_id: i64,
    access_hash: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // user_id
        const paramuser_id = self.user_id;
        result += @sizeOf(@TypeOf(paramuser_id));
        // access_hash
        const paramaccess_hash = self.access_hash;
        result += @sizeOf(@TypeOf(paramaccess_hash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputUserFromMessage= struct {
    peer: IInputPeer,
    msg_id: i32,
    user_id: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // msg_id
        const parammsg_id = self.msg_id;
        result += @sizeOf(@TypeOf(parammsg_id));
        // user_id
        const paramuser_id = self.user_id;
        result += @sizeOf(@TypeOf(paramuser_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputPhoneContact= struct {
    client_id: i64,
    phone: []const u8,
    first_name: []const u8,
    last_name: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // client_id
        const paramclient_id = self.client_id;
        result += @sizeOf(@TypeOf(paramclient_id));
        // phone
        const paramphone = self.phone;
        result += base.strEncodedSize(paramphone);
        // first_name
        const paramfirst_name = self.first_name;
        result += base.strEncodedSize(paramfirst_name);
        // last_name
        const paramlast_name = self.last_name;
        result += base.strEncodedSize(paramlast_name);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputFile= struct {
    id: i64,
    parts: i32,
    name: []const u8,
    md5_checksum: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // parts
        const paramparts = self.parts;
        result += @sizeOf(@TypeOf(paramparts));
        // name
        const paramname = self.name;
        result += base.strEncodedSize(paramname);
        // md5_checksum
        const parammd5_checksum = self.md5_checksum;
        result += base.strEncodedSize(parammd5_checksum);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputFileBig= struct {
    id: i64,
    parts: i32,
    name: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // parts
        const paramparts = self.parts;
        result += @sizeOf(@TypeOf(paramparts));
        // name
        const paramname = self.name;
        result += base.strEncodedSize(paramname);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputFileStoryDocument= struct {
    id: IInputDocument,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += paramid.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const InputMediaEmpty= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const InputMediaUploadedPhoto= struct {
    spoiler: ?bool,
    file: IInputFile,
    stickers: ?[]const IInputDocument,
    ttl_seconds: ?i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // spoiler
        // true flag

        // file
        const paramfile = self.file;
        result += paramfile.size();

        // stickers
        const paramstickers = self.stickers;
        if (paramstickers) |paramstickersflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramstickersflag) |paramstickersflagitem| {
        result += paramstickersflagitem.size();
        }
        }

        // ttl_seconds
        const paramttl_seconds = self.ttl_seconds;
        if (paramttl_seconds) |paramttl_secondsflag| {
        result += @sizeOf(@TypeOf(paramttl_secondsflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputMediaPhoto= struct {
    spoiler: ?bool,
    id: IInputPhoto,
    ttl_seconds: ?i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // spoiler
        // true flag

        // id
        const paramid = self.id;
        result += paramid.size();

        // ttl_seconds
        const paramttl_seconds = self.ttl_seconds;
        if (paramttl_seconds) |paramttl_secondsflag| {
        result += @sizeOf(@TypeOf(paramttl_secondsflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputMediaGeoPoint= struct {
    geo_point: IInputGeoPoint,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // geo_point
        const paramgeo_point = self.geo_point;
        result += paramgeo_point.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const InputMediaContact= struct {
    phone_number: []const u8,
    first_name: []const u8,
    last_name: []const u8,
    vcard: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // phone_number
        const paramphone_number = self.phone_number;
        result += base.strEncodedSize(paramphone_number);
        // first_name
        const paramfirst_name = self.first_name;
        result += base.strEncodedSize(paramfirst_name);
        // last_name
        const paramlast_name = self.last_name;
        result += base.strEncodedSize(paramlast_name);
        // vcard
        const paramvcard = self.vcard;
        result += base.strEncodedSize(paramvcard);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputMediaUploadedDocument= struct {
    nosound_video: ?bool,
    force_file: ?bool,
    spoiler: ?bool,
    file: IInputFile,
    thumb: ?IInputFile,
    mime_type: []const u8,
    attributes: []const IDocumentAttribute,
    stickers: ?[]const IInputDocument,
    ttl_seconds: ?i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // nosound_video
        // true flag

        // force_file
        // true flag

        // spoiler
        // true flag

        // file
        const paramfile = self.file;
        result += paramfile.size();

        // thumb
        const paramthumb = self.thumb;
        if (paramthumb) |paramthumbflag| {
        result += paramthumbflag.size();
        }

        // mime_type
        const parammime_type = self.mime_type;
        result += base.strEncodedSize(parammime_type);
        // attributes
        const paramattributes = self.attributes;
        result += 4; // vector id
        result += 4; // vector size
        for (paramattributes) |paramattributesitem| {
        result += paramattributesitem.size();
        }

        // stickers
        const paramstickers = self.stickers;
        if (paramstickers) |paramstickersflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramstickersflag) |paramstickersflagitem| {
        result += paramstickersflagitem.size();
        }
        }

        // ttl_seconds
        const paramttl_seconds = self.ttl_seconds;
        if (paramttl_seconds) |paramttl_secondsflag| {
        result += @sizeOf(@TypeOf(paramttl_secondsflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputMediaDocument= struct {
    spoiler: ?bool,
    id: IInputDocument,
    ttl_seconds: ?i32,
    query: ?[]const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // spoiler
        // true flag

        // id
        const paramid = self.id;
        result += paramid.size();

        // ttl_seconds
        const paramttl_seconds = self.ttl_seconds;
        if (paramttl_seconds) |paramttl_secondsflag| {
        result += @sizeOf(@TypeOf(paramttl_secondsflag));        }

        // query
        const paramquery = self.query;
        if (paramquery) |paramqueryflag| {
        result += base.strEncodedSize(paramqueryflag);        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputMediaVenue= struct {
    geo_point: IInputGeoPoint,
    title: []const u8,
    address: []const u8,
    provider: []const u8,
    venue_id: []const u8,
    venue_type: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // geo_point
        const paramgeo_point = self.geo_point;
        result += paramgeo_point.size();

        // title
        const paramtitle = self.title;
        result += base.strEncodedSize(paramtitle);
        // address
        const paramaddress = self.address;
        result += base.strEncodedSize(paramaddress);
        // provider
        const paramprovider = self.provider;
        result += base.strEncodedSize(paramprovider);
        // venue_id
        const paramvenue_id = self.venue_id;
        result += base.strEncodedSize(paramvenue_id);
        // venue_type
        const paramvenue_type = self.venue_type;
        result += base.strEncodedSize(paramvenue_type);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputMediaPhotoExternal= struct {
    spoiler: ?bool,
    url: []const u8,
    ttl_seconds: ?i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // spoiler
        // true flag

        // url
        const paramurl = self.url;
        result += base.strEncodedSize(paramurl);
        // ttl_seconds
        const paramttl_seconds = self.ttl_seconds;
        if (paramttl_seconds) |paramttl_secondsflag| {
        result += @sizeOf(@TypeOf(paramttl_secondsflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputMediaDocumentExternal= struct {
    spoiler: ?bool,
    url: []const u8,
    ttl_seconds: ?i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // spoiler
        // true flag

        // url
        const paramurl = self.url;
        result += base.strEncodedSize(paramurl);
        // ttl_seconds
        const paramttl_seconds = self.ttl_seconds;
        if (paramttl_seconds) |paramttl_secondsflag| {
        result += @sizeOf(@TypeOf(paramttl_secondsflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputMediaGame= struct {
    id: IInputGame,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += paramid.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const InputMediaInvoice= struct {
    title: []const u8,
    description: []const u8,
    photo: ?IInputWebDocument,
    invoice: IInvoice,
    payload: []const u8,
    provider: ?[]const u8,
    provider_data: IDataJSON,
    start_param: ?[]const u8,
    extended_media: ?IInputMedia,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // title
        const paramtitle = self.title;
        result += base.strEncodedSize(paramtitle);
        // description
        const paramdescription = self.description;
        result += base.strEncodedSize(paramdescription);
        // photo
        const paramphoto = self.photo;
        if (paramphoto) |paramphotoflag| {
        result += paramphotoflag.size();
        }

        // invoice
        const paraminvoice = self.invoice;
        result += paraminvoice.size();

        // payload
        const parampayload = self.payload;
        result += base.strEncodedSize(parampayload);
        // provider
        const paramprovider = self.provider;
        if (paramprovider) |paramproviderflag| {
        result += base.strEncodedSize(paramproviderflag);        }

        // provider_data
        const paramprovider_data = self.provider_data;
        result += paramprovider_data.size();

        // start_param
        const paramstart_param = self.start_param;
        if (paramstart_param) |paramstart_paramflag| {
        result += base.strEncodedSize(paramstart_paramflag);        }

        // extended_media
        const paramextended_media = self.extended_media;
        if (paramextended_media) |paramextended_mediaflag| {
        result += paramextended_mediaflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputMediaGeoLive= struct {
    stopped: ?bool,
    geo_point: IInputGeoPoint,
    heading: ?i32,
    period: ?i32,
    proximity_notification_radius: ?i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // stopped
        // true flag

        // geo_point
        const paramgeo_point = self.geo_point;
        result += paramgeo_point.size();

        // heading
        const paramheading = self.heading;
        if (paramheading) |paramheadingflag| {
        result += @sizeOf(@TypeOf(paramheadingflag));        }

        // period
        const paramperiod = self.period;
        if (paramperiod) |paramperiodflag| {
        result += @sizeOf(@TypeOf(paramperiodflag));        }

        // proximity_notification_radius
        const paramproximity_notification_radius = self.proximity_notification_radius;
        if (paramproximity_notification_radius) |paramproximity_notification_radiusflag| {
        result += @sizeOf(@TypeOf(paramproximity_notification_radiusflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputMediaPoll= struct {
    poll: IPoll,
    correct_answers: ?[]const []const u8,
    solution: ?[]const u8,
    solution_entities: ?[]const IMessageEntity,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // poll
        const parampoll = self.poll;
        result += parampoll.size();

        // correct_answers
        const paramcorrect_answers = self.correct_answers;
        if (paramcorrect_answers) |paramcorrect_answersflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramcorrect_answersflag) |paramcorrect_answersflagitem| {
        result += base.strEncodedSize(paramcorrect_answersflagitem);        }
        }

        // solution
        const paramsolution = self.solution;
        if (paramsolution) |paramsolutionflag| {
        result += base.strEncodedSize(paramsolutionflag);        }

        // solution_entities
        const paramsolution_entities = self.solution_entities;
        if (paramsolution_entities) |paramsolution_entitiesflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramsolution_entitiesflag) |paramsolution_entitiesflagitem| {
        result += paramsolution_entitiesflagitem.size();
        }
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputMediaDice= struct {
    emoticon: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // emoticon
        const paramemoticon = self.emoticon;
        result += base.strEncodedSize(paramemoticon);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const InputMediaStory= struct {
    peer: IInputPeer,
    id: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputMediaWebPage= struct {
    force_large_media: ?bool,
    force_small_media: ?bool,
    optional: ?bool,
    url: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // force_large_media
        // true flag

        // force_small_media
        // true flag

        // optional
        // true flag

        // url
        const paramurl = self.url;
        result += base.strEncodedSize(paramurl);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputMediaPaidMedia= struct {
    stars_amount: i64,
    extended_media: []const IInputMedia,
    payload: ?[]const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // stars_amount
        const paramstars_amount = self.stars_amount;
        result += @sizeOf(@TypeOf(paramstars_amount));
        // extended_media
        const paramextended_media = self.extended_media;
        result += 4; // vector id
        result += 4; // vector size
        for (paramextended_media) |paramextended_mediaitem| {
        result += paramextended_mediaitem.size();
        }

        // payload
        const parampayload = self.payload;
        if (parampayload) |parampayloadflag| {
        result += base.strEncodedSize(parampayloadflag);        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputChatPhotoEmpty= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const InputChatUploadedPhoto= struct {
    file: ?IInputFile,
    video: ?IInputFile,
    video_start_ts: ?f64,
    video_emoji_markup: ?IVideoSize,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // file
        const paramfile = self.file;
        if (paramfile) |paramfileflag| {
        result += paramfileflag.size();
        }

        // video
        const paramvideo = self.video;
        if (paramvideo) |paramvideoflag| {
        result += paramvideoflag.size();
        }

        // video_start_ts
        const paramvideo_start_ts = self.video_start_ts;
        if (paramvideo_start_ts) |paramvideo_start_tsflag| {
        result += @sizeOf(@TypeOf(paramvideo_start_tsflag));        }

        // video_emoji_markup
        const paramvideo_emoji_markup = self.video_emoji_markup;
        if (paramvideo_emoji_markup) |paramvideo_emoji_markupflag| {
        result += paramvideo_emoji_markupflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputChatPhoto= struct {
    id: IInputPhoto,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += paramid.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const InputGeoPointEmpty= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const InputGeoPoint= struct {
    lat: f64,
    long: f64,
    accuracy_radius: ?i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // lat
        const paramlat = self.lat;
        result += @sizeOf(@TypeOf(paramlat));
        // long
        const paramlong = self.long;
        result += @sizeOf(@TypeOf(paramlong));
        // accuracy_radius
        const paramaccuracy_radius = self.accuracy_radius;
        if (paramaccuracy_radius) |paramaccuracy_radiusflag| {
        result += @sizeOf(@TypeOf(paramaccuracy_radiusflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputPhotoEmpty= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const InputPhoto= struct {
    id: i64,
    access_hash: i64,
    file_reference: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // access_hash
        const paramaccess_hash = self.access_hash;
        result += @sizeOf(@TypeOf(paramaccess_hash));
        // file_reference
        const paramfile_reference = self.file_reference;
        result += base.strEncodedSize(paramfile_reference);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputFileLocation= struct {
    volume_id: i64,
    local_id: i32,
    secret: i64,
    file_reference: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // volume_id
        const paramvolume_id = self.volume_id;
        result += @sizeOf(@TypeOf(paramvolume_id));
        // local_id
        const paramlocal_id = self.local_id;
        result += @sizeOf(@TypeOf(paramlocal_id));
        // secret
        const paramsecret = self.secret;
        result += @sizeOf(@TypeOf(paramsecret));
        // file_reference
        const paramfile_reference = self.file_reference;
        result += base.strEncodedSize(paramfile_reference);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputEncryptedFileLocation= struct {
    id: i64,
    access_hash: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // access_hash
        const paramaccess_hash = self.access_hash;
        result += @sizeOf(@TypeOf(paramaccess_hash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputDocumentFileLocation= struct {
    id: i64,
    access_hash: i64,
    file_reference: []const u8,
    thumb_size: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // access_hash
        const paramaccess_hash = self.access_hash;
        result += @sizeOf(@TypeOf(paramaccess_hash));
        // file_reference
        const paramfile_reference = self.file_reference;
        result += base.strEncodedSize(paramfile_reference);
        // thumb_size
        const paramthumb_size = self.thumb_size;
        result += base.strEncodedSize(paramthumb_size);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputSecureFileLocation= struct {
    id: i64,
    access_hash: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // access_hash
        const paramaccess_hash = self.access_hash;
        result += @sizeOf(@TypeOf(paramaccess_hash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputTakeoutFileLocation= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const InputPhotoFileLocation= struct {
    id: i64,
    access_hash: i64,
    file_reference: []const u8,
    thumb_size: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // access_hash
        const paramaccess_hash = self.access_hash;
        result += @sizeOf(@TypeOf(paramaccess_hash));
        // file_reference
        const paramfile_reference = self.file_reference;
        result += base.strEncodedSize(paramfile_reference);
        // thumb_size
        const paramthumb_size = self.thumb_size;
        result += base.strEncodedSize(paramthumb_size);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputPhotoLegacyFileLocation= struct {
    id: i64,
    access_hash: i64,
    file_reference: []const u8,
    volume_id: i64,
    local_id: i32,
    secret: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // access_hash
        const paramaccess_hash = self.access_hash;
        result += @sizeOf(@TypeOf(paramaccess_hash));
        // file_reference
        const paramfile_reference = self.file_reference;
        result += base.strEncodedSize(paramfile_reference);
        // volume_id
        const paramvolume_id = self.volume_id;
        result += @sizeOf(@TypeOf(paramvolume_id));
        // local_id
        const paramlocal_id = self.local_id;
        result += @sizeOf(@TypeOf(paramlocal_id));
        // secret
        const paramsecret = self.secret;
        result += @sizeOf(@TypeOf(paramsecret));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputPeerPhotoFileLocation= struct {
    big: ?bool,
    peer: IInputPeer,
    photo_id: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // big
        // true flag

        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // photo_id
        const paramphoto_id = self.photo_id;
        result += @sizeOf(@TypeOf(paramphoto_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputStickerSetThumb= struct {
    stickerset: IInputStickerSet,
    thumb_version: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // stickerset
        const paramstickerset = self.stickerset;
        result += paramstickerset.size();

        // thumb_version
        const paramthumb_version = self.thumb_version;
        result += @sizeOf(@TypeOf(paramthumb_version));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputGroupCallStream= struct {
    call: IInputGroupCall,
    time_ms: i64,
    scale: i32,
    video_channel: ?i32,
    video_quality: ?i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // call
        const paramcall = self.call;
        result += paramcall.size();

        // time_ms
        const paramtime_ms = self.time_ms;
        result += @sizeOf(@TypeOf(paramtime_ms));
        // scale
        const paramscale = self.scale;
        result += @sizeOf(@TypeOf(paramscale));
        // video_channel
        const paramvideo_channel = self.video_channel;
        if (paramvideo_channel) |paramvideo_channelflag| {
        result += @sizeOf(@TypeOf(paramvideo_channelflag));        }

        // video_quality
        const paramvideo_quality = self.video_quality;
        if (paramvideo_quality) |paramvideo_qualityflag| {
        result += @sizeOf(@TypeOf(paramvideo_qualityflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PeerUser= struct {
    user_id: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // user_id
        const paramuser_id = self.user_id;
        result += @sizeOf(@TypeOf(paramuser_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const PeerChat= struct {
    chat_id: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // chat_id
        const paramchat_id = self.chat_id;
        result += @sizeOf(@TypeOf(paramchat_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const PeerChannel= struct {
    channel_id: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // channel_id
        const paramchannel_id = self.channel_id;
        result += @sizeOf(@TypeOf(paramchannel_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const StorageFileUnknown= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const StorageFilePartial= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const StorageFileJpeg= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const StorageFileGif= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const StorageFilePng= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const StorageFilePdf= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const StorageFileMp3= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const StorageFileMov= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const StorageFileMp4= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const StorageFileWebp= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const UserEmpty= struct {
    id: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const User= struct {
    self: ?bool,
    contact: ?bool,
    mutual_contact: ?bool,
    deleted: ?bool,
    bot: ?bool,
    bot_chat_history: ?bool,
    bot_nochats: ?bool,
    verified: ?bool,
    restricted: ?bool,
    min: ?bool,
    bot_inline_geo: ?bool,
    support: ?bool,
    scam: ?bool,
    apply_min_photo: ?bool,
    fake: ?bool,
    bot_attach_menu: ?bool,
    premium: ?bool,
    attach_menu_enabled: ?bool,
    bot_can_edit: ?bool,
    close_friend: ?bool,
    stories_hidden: ?bool,
    stories_unavailable: ?bool,
    contact_require_premium: ?bool,
    bot_business: ?bool,
    bot_has_main_app: ?bool,
    id: i64,
    access_hash: ?i64,
    first_name: ?[]const u8,
    last_name: ?[]const u8,
    username: ?[]const u8,
    phone: ?[]const u8,
    photo: ?IUserProfilePhoto,
    status: ?IUserStatus,
    bot_info_version: ?i32,
    restriction_reason: ?[]const IRestrictionReason,
    bot_inline_placeholder: ?[]const u8,
    lang_code: ?[]const u8,
    emoji_status: ?IEmojiStatus,
    usernames: ?[]const IUsername,
    stories_max_id: ?i32,
    color: ?IPeerColor,
    profile_color: ?IPeerColor,
    bot_active_users: ?i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // self
        // true flag

        // contact
        // true flag

        // mutual_contact
        // true flag

        // deleted
        // true flag

        // bot
        // true flag

        // bot_chat_history
        // true flag

        // bot_nochats
        // true flag

        // verified
        // true flag

        // restricted
        // true flag

        // min
        // true flag

        // bot_inline_geo
        // true flag

        // support
        // true flag

        // scam
        // true flag

        // apply_min_photo
        // true flag

        // fake
        // true flag

        // bot_attach_menu
        // true flag

        // premium
        // true flag

        // attach_menu_enabled
        // true flag

        // flags2
        result += 4; // flags2
        // bot_can_edit
        // true flag

        // close_friend
        // true flag

        // stories_hidden
        // true flag

        // stories_unavailable
        // true flag

        // contact_require_premium
        // true flag

        // bot_business
        // true flag

        // bot_has_main_app
        // true flag

        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // access_hash
        const paramaccess_hash = self.access_hash;
        if (paramaccess_hash) |paramaccess_hashflag| {
        result += @sizeOf(@TypeOf(paramaccess_hashflag));        }

        // first_name
        const paramfirst_name = self.first_name;
        if (paramfirst_name) |paramfirst_nameflag| {
        result += base.strEncodedSize(paramfirst_nameflag);        }

        // last_name
        const paramlast_name = self.last_name;
        if (paramlast_name) |paramlast_nameflag| {
        result += base.strEncodedSize(paramlast_nameflag);        }

        // username
        const paramusername = self.username;
        if (paramusername) |paramusernameflag| {
        result += base.strEncodedSize(paramusernameflag);        }

        // phone
        const paramphone = self.phone;
        if (paramphone) |paramphoneflag| {
        result += base.strEncodedSize(paramphoneflag);        }

        // photo
        const paramphoto = self.photo;
        if (paramphoto) |paramphotoflag| {
        result += paramphotoflag.size();
        }

        // status
        const paramstatus = self.status;
        if (paramstatus) |paramstatusflag| {
        result += paramstatusflag.size();
        }

        // bot_info_version
        const parambot_info_version = self.bot_info_version;
        if (parambot_info_version) |parambot_info_versionflag| {
        result += @sizeOf(@TypeOf(parambot_info_versionflag));        }

        // restriction_reason
        const paramrestriction_reason = self.restriction_reason;
        if (paramrestriction_reason) |paramrestriction_reasonflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramrestriction_reasonflag) |paramrestriction_reasonflagitem| {
        result += paramrestriction_reasonflagitem.size();
        }
        }

        // bot_inline_placeholder
        const parambot_inline_placeholder = self.bot_inline_placeholder;
        if (parambot_inline_placeholder) |parambot_inline_placeholderflag| {
        result += base.strEncodedSize(parambot_inline_placeholderflag);        }

        // lang_code
        const paramlang_code = self.lang_code;
        if (paramlang_code) |paramlang_codeflag| {
        result += base.strEncodedSize(paramlang_codeflag);        }

        // emoji_status
        const paramemoji_status = self.emoji_status;
        if (paramemoji_status) |paramemoji_statusflag| {
        result += paramemoji_statusflag.size();
        }

        // usernames
        const paramusernames = self.usernames;
        if (paramusernames) |paramusernamesflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramusernamesflag) |paramusernamesflagitem| {
        result += paramusernamesflagitem.size();
        }
        }

        // stories_max_id
        const paramstories_max_id = self.stories_max_id;
        if (paramstories_max_id) |paramstories_max_idflag| {
        result += @sizeOf(@TypeOf(paramstories_max_idflag));        }

        // color
        const paramcolor = self.color;
        if (paramcolor) |paramcolorflag| {
        result += paramcolorflag.size();
        }

        // profile_color
        const paramprofile_color = self.profile_color;
        if (paramprofile_color) |paramprofile_colorflag| {
        result += paramprofile_colorflag.size();
        }

        // bot_active_users
        const parambot_active_users = self.bot_active_users;
        if (parambot_active_users) |parambot_active_usersflag| {
        result += @sizeOf(@TypeOf(parambot_active_usersflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 10;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 11;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 12;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 13;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 14;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 15;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 16;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 17;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 18;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 20;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 21;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 23;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 24;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 25;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 26;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 27;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 28;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 29;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 6;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 14;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 18;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 19;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 22;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 30;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        var flag_flags2: usize = 0;
        if (self.flags2) {
             flag_flags2 = flag_flags2 | 1 << 1;
        }
        if (self.flags2) {
             flag_flags2 = flag_flags2 | 1 << 2;
        }
        if (self.flags2) {
             flag_flags2 = flag_flags2 | 1 << 3;
        }
        if (self.flags2) {
             flag_flags2 = flag_flags2 | 1 << 4;
        }
        if (self.flags2) {
             flag_flags2 = flag_flags2 | 1 << 10;
        }
        if (self.flags2) {
             flag_flags2 = flag_flags2 | 1 << 11;
        }
        if (self.flags2) {
             flag_flags2 = flag_flags2 | 1 << 13;
        }
        if (self.flags2) {
             flag_flags2 = flag_flags2 | 1 << 0;
        }
        if (self.flags2) {
             flag_flags2 = flag_flags2 | 1 << 5;
        }
        if (self.flags2) {
             flag_flags2 = flag_flags2 | 1 << 8;
        }
        if (self.flags2) {
             flag_flags2 = flag_flags2 | 1 << 9;
        }
        if (self.flags2) {
             flag_flags2 = flag_flags2 | 1 << 12;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UserProfilePhotoEmpty= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const UserProfilePhoto= struct {
    has_video: ?bool,
    personal: ?bool,
    photo_id: i64,
    stripped_thumb: ?[]const u8,
    dc_id: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // has_video
        // true flag

        // personal
        // true flag

        // photo_id
        const paramphoto_id = self.photo_id;
        result += @sizeOf(@TypeOf(paramphoto_id));
        // stripped_thumb
        const paramstripped_thumb = self.stripped_thumb;
        if (paramstripped_thumb) |paramstripped_thumbflag| {
        result += base.strEncodedSize(paramstripped_thumbflag);        }

        // dc_id
        const paramdc_id = self.dc_id;
        result += @sizeOf(@TypeOf(paramdc_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UserStatusEmpty= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const UserStatusOnline= struct {
    expires: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // expires
        const paramexpires = self.expires;
        result += @sizeOf(@TypeOf(paramexpires));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const UserStatusOffline= struct {
    was_online: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // was_online
        const paramwas_online = self.was_online;
        result += @sizeOf(@TypeOf(paramwas_online));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const UserStatusRecently= struct {
    by_me: ?bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // by_me
        // true flag


        _ = self;
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        }
};
const UserStatusLastWeek= struct {
    by_me: ?bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // by_me
        // true flag


        _ = self;
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        }
};
const UserStatusLastMonth= struct {
    by_me: ?bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // by_me
        // true flag


        _ = self;
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        }
};
const ChatEmpty= struct {
    id: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const Chat= struct {
    creator: ?bool,
    left: ?bool,
    deactivated: ?bool,
    call_active: ?bool,
    call_not_empty: ?bool,
    noforwards: ?bool,
    id: i64,
    title: []const u8,
    photo: IChatPhoto,
    participants_count: i32,
    date: i32,
    version: i32,
    migrated_to: ?IInputChannel,
    admin_rights: ?IChatAdminRights,
    default_banned_rights: ?IChatBannedRights,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // creator
        // true flag

        // left
        // true flag

        // deactivated
        // true flag

        // call_active
        // true flag

        // call_not_empty
        // true flag

        // noforwards
        // true flag

        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // title
        const paramtitle = self.title;
        result += base.strEncodedSize(paramtitle);
        // photo
        const paramphoto = self.photo;
        result += paramphoto.size();

        // participants_count
        const paramparticipants_count = self.participants_count;
        result += @sizeOf(@TypeOf(paramparticipants_count));
        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        // version
        const paramversion = self.version;
        result += @sizeOf(@TypeOf(paramversion));
        // migrated_to
        const parammigrated_to = self.migrated_to;
        if (parammigrated_to) |parammigrated_toflag| {
        result += parammigrated_toflag.size();
        }

        // admin_rights
        const paramadmin_rights = self.admin_rights;
        if (paramadmin_rights) |paramadmin_rightsflag| {
        result += paramadmin_rightsflag.size();
        }

        // default_banned_rights
        const paramdefault_banned_rights = self.default_banned_rights;
        if (paramdefault_banned_rights) |paramdefault_banned_rightsflag| {
        result += paramdefault_banned_rightsflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 23;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 24;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 25;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 6;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 14;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 18;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChatForbidden= struct {
    id: i64,
    title: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // title
        const paramtitle = self.title;
        result += base.strEncodedSize(paramtitle);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const Channel= struct {
    creator: ?bool,
    left: ?bool,
    broadcast: ?bool,
    verified: ?bool,
    megagroup: ?bool,
    restricted: ?bool,
    signatures: ?bool,
    min: ?bool,
    scam: ?bool,
    has_link: ?bool,
    has_geo: ?bool,
    slowmode_enabled: ?bool,
    call_active: ?bool,
    call_not_empty: ?bool,
    fake: ?bool,
    gigagroup: ?bool,
    noforwards: ?bool,
    join_to_send: ?bool,
    join_request: ?bool,
    forum: ?bool,
    stories_hidden: ?bool,
    stories_hidden_min: ?bool,
    stories_unavailable: ?bool,
    signature_profiles: ?bool,
    id: i64,
    access_hash: ?i64,
    title: []const u8,
    username: ?[]const u8,
    photo: IChatPhoto,
    date: i32,
    restriction_reason: ?[]const IRestrictionReason,
    admin_rights: ?IChatAdminRights,
    banned_rights: ?IChatBannedRights,
    default_banned_rights: ?IChatBannedRights,
    participants_count: ?i32,
    usernames: ?[]const IUsername,
    stories_max_id: ?i32,
    color: ?IPeerColor,
    profile_color: ?IPeerColor,
    emoji_status: ?IEmojiStatus,
    level: ?i32,
    subscription_until_date: ?i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // creator
        // true flag

        // left
        // true flag

        // broadcast
        // true flag

        // verified
        // true flag

        // megagroup
        // true flag

        // restricted
        // true flag

        // signatures
        // true flag

        // min
        // true flag

        // scam
        // true flag

        // has_link
        // true flag

        // has_geo
        // true flag

        // slowmode_enabled
        // true flag

        // call_active
        // true flag

        // call_not_empty
        // true flag

        // fake
        // true flag

        // gigagroup
        // true flag

        // noforwards
        // true flag

        // join_to_send
        // true flag

        // join_request
        // true flag

        // forum
        // true flag

        // flags2
        result += 4; // flags2
        // stories_hidden
        // true flag

        // stories_hidden_min
        // true flag

        // stories_unavailable
        // true flag

        // signature_profiles
        // true flag

        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // access_hash
        const paramaccess_hash = self.access_hash;
        if (paramaccess_hash) |paramaccess_hashflag| {
        result += @sizeOf(@TypeOf(paramaccess_hashflag));        }

        // title
        const paramtitle = self.title;
        result += base.strEncodedSize(paramtitle);
        // username
        const paramusername = self.username;
        if (paramusername) |paramusernameflag| {
        result += base.strEncodedSize(paramusernameflag);        }

        // photo
        const paramphoto = self.photo;
        result += paramphoto.size();

        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        // restriction_reason
        const paramrestriction_reason = self.restriction_reason;
        if (paramrestriction_reason) |paramrestriction_reasonflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramrestriction_reasonflag) |paramrestriction_reasonflagitem| {
        result += paramrestriction_reasonflagitem.size();
        }
        }

        // admin_rights
        const paramadmin_rights = self.admin_rights;
        if (paramadmin_rights) |paramadmin_rightsflag| {
        result += paramadmin_rightsflag.size();
        }

        // banned_rights
        const parambanned_rights = self.banned_rights;
        if (parambanned_rights) |parambanned_rightsflag| {
        result += parambanned_rightsflag.size();
        }

        // default_banned_rights
        const paramdefault_banned_rights = self.default_banned_rights;
        if (paramdefault_banned_rights) |paramdefault_banned_rightsflag| {
        result += paramdefault_banned_rightsflag.size();
        }

        // participants_count
        const paramparticipants_count = self.participants_count;
        if (paramparticipants_count) |paramparticipants_countflag| {
        result += @sizeOf(@TypeOf(paramparticipants_countflag));        }

        // usernames
        const paramusernames = self.usernames;
        if (paramusernames) |paramusernamesflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramusernamesflag) |paramusernamesflagitem| {
        result += paramusernamesflagitem.size();
        }
        }

        // stories_max_id
        const paramstories_max_id = self.stories_max_id;
        if (paramstories_max_id) |paramstories_max_idflag| {
        result += @sizeOf(@TypeOf(paramstories_max_idflag));        }

        // color
        const paramcolor = self.color;
        if (paramcolor) |paramcolorflag| {
        result += paramcolorflag.size();
        }

        // profile_color
        const paramprofile_color = self.profile_color;
        if (paramprofile_color) |paramprofile_colorflag| {
        result += paramprofile_colorflag.size();
        }

        // emoji_status
        const paramemoji_status = self.emoji_status;
        if (paramemoji_status) |paramemoji_statusflag| {
        result += paramemoji_statusflag.size();
        }

        // level
        const paramlevel = self.level;
        if (paramlevel) |paramlevelflag| {
        result += @sizeOf(@TypeOf(paramlevelflag));        }

        // subscription_until_date
        const paramsubscription_until_date = self.subscription_until_date;
        if (paramsubscription_until_date) |paramsubscription_until_dateflag| {
        result += @sizeOf(@TypeOf(paramsubscription_until_dateflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 7;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 8;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 9;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 11;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 12;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 19;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 20;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 21;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 22;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 23;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 24;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 25;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 26;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 27;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 28;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 29;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 30;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 13;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 6;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 9;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 14;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 15;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 18;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 17;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        var flag_flags2: usize = 0;
        if (self.flags2) {
             flag_flags2 = flag_flags2 | 1 << 1;
        }
        if (self.flags2) {
             flag_flags2 = flag_flags2 | 1 << 2;
        }
        if (self.flags2) {
             flag_flags2 = flag_flags2 | 1 << 3;
        }
        if (self.flags2) {
             flag_flags2 = flag_flags2 | 1 << 12;
        }
        if (self.flags2) {
             flag_flags2 = flag_flags2 | 1 << 0;
        }
        if (self.flags2) {
             flag_flags2 = flag_flags2 | 1 << 4;
        }
        if (self.flags2) {
             flag_flags2 = flag_flags2 | 1 << 7;
        }
        if (self.flags2) {
             flag_flags2 = flag_flags2 | 1 << 8;
        }
        if (self.flags2) {
             flag_flags2 = flag_flags2 | 1 << 9;
        }
        if (self.flags2) {
             flag_flags2 = flag_flags2 | 1 << 10;
        }
        if (self.flags2) {
             flag_flags2 = flag_flags2 | 1 << 11;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelForbidden= struct {
    broadcast: ?bool,
    megagroup: ?bool,
    id: i64,
    access_hash: i64,
    title: []const u8,
    until_date: ?i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // broadcast
        // true flag

        // megagroup
        // true flag

        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // access_hash
        const paramaccess_hash = self.access_hash;
        result += @sizeOf(@TypeOf(paramaccess_hash));
        // title
        const paramtitle = self.title;
        result += base.strEncodedSize(paramtitle);
        // until_date
        const paramuntil_date = self.until_date;
        if (paramuntil_date) |paramuntil_dateflag| {
        result += @sizeOf(@TypeOf(paramuntil_dateflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 8;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 16;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChatFull= struct {
    can_set_username: ?bool,
    has_scheduled: ?bool,
    translations_disabled: ?bool,
    id: i64,
    about: []const u8,
    participants: IChatParticipants,
    chat_photo: ?IPhoto,
    notify_settings: IPeerNotifySettings,
    exported_invite: ?IExportedChatInvite,
    bot_info: ?[]const IBotInfo,
    pinned_msg_id: ?i32,
    folder_id: ?i32,
    call: ?IInputGroupCall,
    ttl_period: ?i32,
    groupcall_default_join_as: ?IPeer,
    theme_emoticon: ?[]const u8,
    requests_pending: ?i32,
    recent_requesters: ?[]const i64,
    available_reactions: ?IChatReactions,
    reactions_limit: ?i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // can_set_username
        // true flag

        // has_scheduled
        // true flag

        // translations_disabled
        // true flag

        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // about
        const paramabout = self.about;
        result += base.strEncodedSize(paramabout);
        // participants
        const paramparticipants = self.participants;
        result += paramparticipants.size();

        // chat_photo
        const paramchat_photo = self.chat_photo;
        if (paramchat_photo) |paramchat_photoflag| {
        result += paramchat_photoflag.size();
        }

        // notify_settings
        const paramnotify_settings = self.notify_settings;
        result += paramnotify_settings.size();

        // exported_invite
        const paramexported_invite = self.exported_invite;
        if (paramexported_invite) |paramexported_inviteflag| {
        result += paramexported_inviteflag.size();
        }

        // bot_info
        const parambot_info = self.bot_info;
        if (parambot_info) |parambot_infoflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (parambot_infoflag) |parambot_infoflagitem| {
        result += parambot_infoflagitem.size();
        }
        }

        // pinned_msg_id
        const parampinned_msg_id = self.pinned_msg_id;
        if (parampinned_msg_id) |parampinned_msg_idflag| {
        result += @sizeOf(@TypeOf(parampinned_msg_idflag));        }

        // folder_id
        const paramfolder_id = self.folder_id;
        if (paramfolder_id) |paramfolder_idflag| {
        result += @sizeOf(@TypeOf(paramfolder_idflag));        }

        // call
        const paramcall = self.call;
        if (paramcall) |paramcallflag| {
        result += paramcallflag.size();
        }

        // ttl_period
        const paramttl_period = self.ttl_period;
        if (paramttl_period) |paramttl_periodflag| {
        result += @sizeOf(@TypeOf(paramttl_periodflag));        }

        // groupcall_default_join_as
        const paramgroupcall_default_join_as = self.groupcall_default_join_as;
        if (paramgroupcall_default_join_as) |paramgroupcall_default_join_asflag| {
        result += paramgroupcall_default_join_asflag.size();
        }

        // theme_emoticon
        const paramtheme_emoticon = self.theme_emoticon;
        if (paramtheme_emoticon) |paramtheme_emoticonflag| {
        result += base.strEncodedSize(paramtheme_emoticonflag);        }

        // requests_pending
        const paramrequests_pending = self.requests_pending;
        if (paramrequests_pending) |paramrequests_pendingflag| {
        result += @sizeOf(@TypeOf(paramrequests_pendingflag));        }

        // recent_requesters
        const paramrecent_requesters = self.recent_requesters;
        if (paramrecent_requesters) |paramrecent_requestersflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramrecent_requestersflag) |paramrecent_requestersflagitem| {
        result += @sizeOf(@TypeOf(paramrecent_requestersflagitem));        }
        }

        // available_reactions
        const paramavailable_reactions = self.available_reactions;
        if (paramavailable_reactions) |paramavailable_reactionsflag| {
        result += paramavailable_reactionsflag.size();
        }

        // reactions_limit
        const paramreactions_limit = self.reactions_limit;
        if (paramreactions_limit) |paramreactions_limitflag| {
        result += @sizeOf(@TypeOf(paramreactions_limitflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 7;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 8;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 19;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 13;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 6;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 11;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 12;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 14;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 15;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 16;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 17;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 17;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 18;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 20;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelFull= struct {
    can_view_participants: ?bool,
    can_set_username: ?bool,
    can_set_stickers: ?bool,
    hidden_prehistory: ?bool,
    can_set_location: ?bool,
    has_scheduled: ?bool,
    can_view_stats: ?bool,
    blocked: ?bool,
    can_delete_channel: ?bool,
    antispam: ?bool,
    participants_hidden: ?bool,
    translations_disabled: ?bool,
    stories_pinned_available: ?bool,
    view_forum_as_messages: ?bool,
    restricted_sponsored: ?bool,
    can_view_revenue: ?bool,
    paid_media_allowed: ?bool,
    can_view_stars_revenue: ?bool,
    paid_reactions_available: ?bool,
    id: i64,
    about: []const u8,
    participants_count: ?i32,
    admins_count: ?i32,
    kicked_count: ?i32,
    banned_count: ?i32,
    online_count: ?i32,
    read_inbox_max_id: i32,
    read_outbox_max_id: i32,
    unread_count: i32,
    chat_photo: IPhoto,
    notify_settings: IPeerNotifySettings,
    exported_invite: ?IExportedChatInvite,
    bot_info: []const IBotInfo,
    migrated_from_chat_id: ?i64,
    migrated_from_max_id: ?i32,
    pinned_msg_id: ?i32,
    stickerset: ?IStickerSet,
    available_min_id: ?i32,
    folder_id: ?i32,
    linked_chat_id: ?i64,
    location: ?IChannelLocation,
    slowmode_seconds: ?i32,
    slowmode_next_send_date: ?i32,
    stats_dc: ?i32,
    pts: i32,
    call: ?IInputGroupCall,
    ttl_period: ?i32,
    pending_suggestions: ?[]const []const u8,
    groupcall_default_join_as: ?IPeer,
    theme_emoticon: ?[]const u8,
    requests_pending: ?i32,
    recent_requesters: ?[]const i64,
    default_send_as: ?IPeer,
    available_reactions: ?IChatReactions,
    reactions_limit: ?i32,
    stories: ?IPeerStories,
    wallpaper: ?IWallPaper,
    boosts_applied: ?i32,
    boosts_unrestrict: ?i32,
    emojiset: ?IStickerSet,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // can_view_participants
        // true flag

        // can_set_username
        // true flag

        // can_set_stickers
        // true flag

        // hidden_prehistory
        // true flag

        // can_set_location
        // true flag

        // has_scheduled
        // true flag

        // can_view_stats
        // true flag

        // blocked
        // true flag

        // flags2
        result += 4; // flags2
        // can_delete_channel
        // true flag

        // antispam
        // true flag

        // participants_hidden
        // true flag

        // translations_disabled
        // true flag

        // stories_pinned_available
        // true flag

        // view_forum_as_messages
        // true flag

        // restricted_sponsored
        // true flag

        // can_view_revenue
        // true flag

        // paid_media_allowed
        // true flag

        // can_view_stars_revenue
        // true flag

        // paid_reactions_available
        // true flag

        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // about
        const paramabout = self.about;
        result += base.strEncodedSize(paramabout);
        // participants_count
        const paramparticipants_count = self.participants_count;
        if (paramparticipants_count) |paramparticipants_countflag| {
        result += @sizeOf(@TypeOf(paramparticipants_countflag));        }

        // admins_count
        const paramadmins_count = self.admins_count;
        if (paramadmins_count) |paramadmins_countflag| {
        result += @sizeOf(@TypeOf(paramadmins_countflag));        }

        // kicked_count
        const paramkicked_count = self.kicked_count;
        if (paramkicked_count) |paramkicked_countflag| {
        result += @sizeOf(@TypeOf(paramkicked_countflag));        }

        // banned_count
        const parambanned_count = self.banned_count;
        if (parambanned_count) |parambanned_countflag| {
        result += @sizeOf(@TypeOf(parambanned_countflag));        }

        // online_count
        const paramonline_count = self.online_count;
        if (paramonline_count) |paramonline_countflag| {
        result += @sizeOf(@TypeOf(paramonline_countflag));        }

        // read_inbox_max_id
        const paramread_inbox_max_id = self.read_inbox_max_id;
        result += @sizeOf(@TypeOf(paramread_inbox_max_id));
        // read_outbox_max_id
        const paramread_outbox_max_id = self.read_outbox_max_id;
        result += @sizeOf(@TypeOf(paramread_outbox_max_id));
        // unread_count
        const paramunread_count = self.unread_count;
        result += @sizeOf(@TypeOf(paramunread_count));
        // chat_photo
        const paramchat_photo = self.chat_photo;
        result += paramchat_photo.size();

        // notify_settings
        const paramnotify_settings = self.notify_settings;
        result += paramnotify_settings.size();

        // exported_invite
        const paramexported_invite = self.exported_invite;
        if (paramexported_invite) |paramexported_inviteflag| {
        result += paramexported_inviteflag.size();
        }

        // bot_info
        const parambot_info = self.bot_info;
        result += 4; // vector id
        result += 4; // vector size
        for (parambot_info) |parambot_infoitem| {
        result += parambot_infoitem.size();
        }

        // migrated_from_chat_id
        const parammigrated_from_chat_id = self.migrated_from_chat_id;
        if (parammigrated_from_chat_id) |parammigrated_from_chat_idflag| {
        result += @sizeOf(@TypeOf(parammigrated_from_chat_idflag));        }

        // migrated_from_max_id
        const parammigrated_from_max_id = self.migrated_from_max_id;
        if (parammigrated_from_max_id) |parammigrated_from_max_idflag| {
        result += @sizeOf(@TypeOf(parammigrated_from_max_idflag));        }

        // pinned_msg_id
        const parampinned_msg_id = self.pinned_msg_id;
        if (parampinned_msg_id) |parampinned_msg_idflag| {
        result += @sizeOf(@TypeOf(parampinned_msg_idflag));        }

        // stickerset
        const paramstickerset = self.stickerset;
        if (paramstickerset) |paramstickersetflag| {
        result += paramstickersetflag.size();
        }

        // available_min_id
        const paramavailable_min_id = self.available_min_id;
        if (paramavailable_min_id) |paramavailable_min_idflag| {
        result += @sizeOf(@TypeOf(paramavailable_min_idflag));        }

        // folder_id
        const paramfolder_id = self.folder_id;
        if (paramfolder_id) |paramfolder_idflag| {
        result += @sizeOf(@TypeOf(paramfolder_idflag));        }

        // linked_chat_id
        const paramlinked_chat_id = self.linked_chat_id;
        if (paramlinked_chat_id) |paramlinked_chat_idflag| {
        result += @sizeOf(@TypeOf(paramlinked_chat_idflag));        }

        // location
        const paramlocation = self.location;
        if (paramlocation) |paramlocationflag| {
        result += paramlocationflag.size();
        }

        // slowmode_seconds
        const paramslowmode_seconds = self.slowmode_seconds;
        if (paramslowmode_seconds) |paramslowmode_secondsflag| {
        result += @sizeOf(@TypeOf(paramslowmode_secondsflag));        }

        // slowmode_next_send_date
        const paramslowmode_next_send_date = self.slowmode_next_send_date;
        if (paramslowmode_next_send_date) |paramslowmode_next_send_dateflag| {
        result += @sizeOf(@TypeOf(paramslowmode_next_send_dateflag));        }

        // stats_dc
        const paramstats_dc = self.stats_dc;
        if (paramstats_dc) |paramstats_dcflag| {
        result += @sizeOf(@TypeOf(paramstats_dcflag));        }

        // pts
        const parampts = self.pts;
        result += @sizeOf(@TypeOf(parampts));
        // call
        const paramcall = self.call;
        if (paramcall) |paramcallflag| {
        result += paramcallflag.size();
        }

        // ttl_period
        const paramttl_period = self.ttl_period;
        if (paramttl_period) |paramttl_periodflag| {
        result += @sizeOf(@TypeOf(paramttl_periodflag));        }

        // pending_suggestions
        const parampending_suggestions = self.pending_suggestions;
        if (parampending_suggestions) |parampending_suggestionsflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (parampending_suggestionsflag) |parampending_suggestionsflagitem| {
        result += base.strEncodedSize(parampending_suggestionsflagitem);        }
        }

        // groupcall_default_join_as
        const paramgroupcall_default_join_as = self.groupcall_default_join_as;
        if (paramgroupcall_default_join_as) |paramgroupcall_default_join_asflag| {
        result += paramgroupcall_default_join_asflag.size();
        }

        // theme_emoticon
        const paramtheme_emoticon = self.theme_emoticon;
        if (paramtheme_emoticon) |paramtheme_emoticonflag| {
        result += base.strEncodedSize(paramtheme_emoticonflag);        }

        // requests_pending
        const paramrequests_pending = self.requests_pending;
        if (paramrequests_pending) |paramrequests_pendingflag| {
        result += @sizeOf(@TypeOf(paramrequests_pendingflag));        }

        // recent_requesters
        const paramrecent_requesters = self.recent_requesters;
        if (paramrecent_requesters) |paramrecent_requestersflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramrecent_requestersflag) |paramrecent_requestersflagitem| {
        result += @sizeOf(@TypeOf(paramrecent_requestersflagitem));        }
        }

        // default_send_as
        const paramdefault_send_as = self.default_send_as;
        if (paramdefault_send_as) |paramdefault_send_asflag| {
        result += paramdefault_send_asflag.size();
        }

        // available_reactions
        const paramavailable_reactions = self.available_reactions;
        if (paramavailable_reactions) |paramavailable_reactionsflag| {
        result += paramavailable_reactionsflag.size();
        }

        // reactions_limit
        const paramreactions_limit = self.reactions_limit;
        if (paramreactions_limit) |paramreactions_limitflag| {
        result += @sizeOf(@TypeOf(paramreactions_limitflag));        }

        // stories
        const paramstories = self.stories;
        if (paramstories) |paramstoriesflag| {
        result += paramstoriesflag.size();
        }

        // wallpaper
        const paramwallpaper = self.wallpaper;
        if (paramwallpaper) |paramwallpaperflag| {
        result += paramwallpaperflag.size();
        }

        // boosts_applied
        const paramboosts_applied = self.boosts_applied;
        if (paramboosts_applied) |paramboosts_appliedflag| {
        result += @sizeOf(@TypeOf(paramboosts_appliedflag));        }

        // boosts_unrestrict
        const paramboosts_unrestrict = self.boosts_unrestrict;
        if (paramboosts_unrestrict) |paramboosts_unrestrictflag| {
        result += @sizeOf(@TypeOf(paramboosts_unrestrictflag));        }

        // emojiset
        const paramemojiset = self.emojiset;
        if (paramemojiset) |paramemojisetflag| {
        result += paramemojisetflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 6;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 7;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 10;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 16;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 19;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 20;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 22;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 13;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 23;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 8;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 9;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 11;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 14;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 15;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 17;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 18;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 12;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 21;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 24;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 25;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 26;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 27;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 28;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 28;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 29;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 30;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        var flag_flags2: usize = 0;
        if (self.flags2) {
             flag_flags2 = flag_flags2 | 1 << 0;
        }
        if (self.flags2) {
             flag_flags2 = flag_flags2 | 1 << 1;
        }
        if (self.flags2) {
             flag_flags2 = flag_flags2 | 1 << 2;
        }
        if (self.flags2) {
             flag_flags2 = flag_flags2 | 1 << 3;
        }
        if (self.flags2) {
             flag_flags2 = flag_flags2 | 1 << 5;
        }
        if (self.flags2) {
             flag_flags2 = flag_flags2 | 1 << 6;
        }
        if (self.flags2) {
             flag_flags2 = flag_flags2 | 1 << 11;
        }
        if (self.flags2) {
             flag_flags2 = flag_flags2 | 1 << 12;
        }
        if (self.flags2) {
             flag_flags2 = flag_flags2 | 1 << 14;
        }
        if (self.flags2) {
             flag_flags2 = flag_flags2 | 1 << 15;
        }
        if (self.flags2) {
             flag_flags2 = flag_flags2 | 1 << 16;
        }
        if (self.flags2) {
             flag_flags2 = flag_flags2 | 1 << 13;
        }
        if (self.flags2) {
             flag_flags2 = flag_flags2 | 1 << 4;
        }
        if (self.flags2) {
             flag_flags2 = flag_flags2 | 1 << 7;
        }
        if (self.flags2) {
             flag_flags2 = flag_flags2 | 1 << 8;
        }
        if (self.flags2) {
             flag_flags2 = flag_flags2 | 1 << 9;
        }
        if (self.flags2) {
             flag_flags2 = flag_flags2 | 1 << 10;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChatParticipant= struct {
    user_id: i64,
    inviter_id: i64,
    date: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // user_id
        const paramuser_id = self.user_id;
        result += @sizeOf(@TypeOf(paramuser_id));
        // inviter_id
        const paraminviter_id = self.inviter_id;
        result += @sizeOf(@TypeOf(paraminviter_id));
        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChatParticipantCreator= struct {
    user_id: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // user_id
        const paramuser_id = self.user_id;
        result += @sizeOf(@TypeOf(paramuser_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const ChatParticipantAdmin= struct {
    user_id: i64,
    inviter_id: i64,
    date: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // user_id
        const paramuser_id = self.user_id;
        result += @sizeOf(@TypeOf(paramuser_id));
        // inviter_id
        const paraminviter_id = self.inviter_id;
        result += @sizeOf(@TypeOf(paraminviter_id));
        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChatParticipantsForbidden= struct {
    chat_id: i64,
    self_participant: ?IChatParticipant,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // chat_id
        const paramchat_id = self.chat_id;
        result += @sizeOf(@TypeOf(paramchat_id));
        // self_participant
        const paramself_participant = self.self_participant;
        if (paramself_participant) |paramself_participantflag| {
        result += paramself_participantflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChatParticipants= struct {
    chat_id: i64,
    participants: []const IChatParticipant,
    version: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // chat_id
        const paramchat_id = self.chat_id;
        result += @sizeOf(@TypeOf(paramchat_id));
        // participants
        const paramparticipants = self.participants;
        result += 4; // vector id
        result += 4; // vector size
        for (paramparticipants) |paramparticipantsitem| {
        result += paramparticipantsitem.size();
        }

        // version
        const paramversion = self.version;
        result += @sizeOf(@TypeOf(paramversion));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChatPhotoEmpty= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const ChatPhoto= struct {
    has_video: ?bool,
    photo_id: i64,
    stripped_thumb: ?[]const u8,
    dc_id: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // has_video
        // true flag

        // photo_id
        const paramphoto_id = self.photo_id;
        result += @sizeOf(@TypeOf(paramphoto_id));
        // stripped_thumb
        const paramstripped_thumb = self.stripped_thumb;
        if (paramstripped_thumb) |paramstripped_thumbflag| {
        result += base.strEncodedSize(paramstripped_thumbflag);        }

        // dc_id
        const paramdc_id = self.dc_id;
        result += @sizeOf(@TypeOf(paramdc_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessageEmpty= struct {
    id: i32,
    peer_id: ?IPeer,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // peer_id
        const parampeer_id = self.peer_id;
        if (parampeer_id) |parampeer_idflag| {
        result += parampeer_idflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const Message= struct {
    out: ?bool,
    mentioned: ?bool,
    media_unread: ?bool,
    silent: ?bool,
    post: ?bool,
    from_scheduled: ?bool,
    legacy: ?bool,
    edit_hide: ?bool,
    pinned: ?bool,
    noforwards: ?bool,
    invert_media: ?bool,
    offline: ?bool,
    id: i32,
    from_id: ?IPeer,
    from_boosts_applied: ?i32,
    peer_id: IPeer,
    saved_peer_id: ?IPeer,
    fwd_from: ?IMessageFwdHeader,
    via_bot_id: ?i64,
    via_business_bot_id: ?i64,
    reply_to: ?IMessageReplyHeader,
    date: i32,
    message: []const u8,
    media: ?IMessageMedia,
    reply_markup: ?IReplyMarkup,
    entities: ?[]const IMessageEntity,
    views: ?i32,
    forwards: ?i32,
    replies: ?IMessageReplies,
    edit_date: ?i32,
    post_author: ?[]const u8,
    grouped_id: ?i64,
    reactions: ?IMessageReactions,
    restriction_reason: ?[]const IRestrictionReason,
    ttl_period: ?i32,
    quick_reply_shortcut_id: ?i32,
    effect: ?i64,
    factcheck: ?IFactCheck,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // out
        // true flag

        // mentioned
        // true flag

        // media_unread
        // true flag

        // silent
        // true flag

        // post
        // true flag

        // from_scheduled
        // true flag

        // legacy
        // true flag

        // edit_hide
        // true flag

        // pinned
        // true flag

        // noforwards
        // true flag

        // invert_media
        // true flag

        // flags2
        result += 4; // flags2
        // offline
        // true flag

        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // from_id
        const paramfrom_id = self.from_id;
        if (paramfrom_id) |paramfrom_idflag| {
        result += paramfrom_idflag.size();
        }

        // from_boosts_applied
        const paramfrom_boosts_applied = self.from_boosts_applied;
        if (paramfrom_boosts_applied) |paramfrom_boosts_appliedflag| {
        result += @sizeOf(@TypeOf(paramfrom_boosts_appliedflag));        }

        // peer_id
        const parampeer_id = self.peer_id;
        result += parampeer_id.size();

        // saved_peer_id
        const paramsaved_peer_id = self.saved_peer_id;
        if (paramsaved_peer_id) |paramsaved_peer_idflag| {
        result += paramsaved_peer_idflag.size();
        }

        // fwd_from
        const paramfwd_from = self.fwd_from;
        if (paramfwd_from) |paramfwd_fromflag| {
        result += paramfwd_fromflag.size();
        }

        // via_bot_id
        const paramvia_bot_id = self.via_bot_id;
        if (paramvia_bot_id) |paramvia_bot_idflag| {
        result += @sizeOf(@TypeOf(paramvia_bot_idflag));        }

        // via_business_bot_id
        const paramvia_business_bot_id = self.via_business_bot_id;
        if (paramvia_business_bot_id) |paramvia_business_bot_idflag| {
        result += @sizeOf(@TypeOf(paramvia_business_bot_idflag));        }

        // reply_to
        const paramreply_to = self.reply_to;
        if (paramreply_to) |paramreply_toflag| {
        result += paramreply_toflag.size();
        }

        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        // message
        const parammessage = self.message;
        result += base.strEncodedSize(parammessage);
        // media
        const parammedia = self.media;
        if (parammedia) |parammediaflag| {
        result += parammediaflag.size();
        }

        // reply_markup
        const paramreply_markup = self.reply_markup;
        if (paramreply_markup) |paramreply_markupflag| {
        result += paramreply_markupflag.size();
        }

        // entities
        const paramentities = self.entities;
        if (paramentities) |paramentitiesflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramentitiesflag) |paramentitiesflagitem| {
        result += paramentitiesflagitem.size();
        }
        }

        // views
        const paramviews = self.views;
        if (paramviews) |paramviewsflag| {
        result += @sizeOf(@TypeOf(paramviewsflag));        }

        // forwards
        const paramforwards = self.forwards;
        if (paramforwards) |paramforwardsflag| {
        result += @sizeOf(@TypeOf(paramforwardsflag));        }

        // replies
        const paramreplies = self.replies;
        if (paramreplies) |paramrepliesflag| {
        result += paramrepliesflag.size();
        }

        // edit_date
        const paramedit_date = self.edit_date;
        if (paramedit_date) |paramedit_dateflag| {
        result += @sizeOf(@TypeOf(paramedit_dateflag));        }

        // post_author
        const parampost_author = self.post_author;
        if (parampost_author) |parampost_authorflag| {
        result += base.strEncodedSize(parampost_authorflag);        }

        // grouped_id
        const paramgrouped_id = self.grouped_id;
        if (paramgrouped_id) |paramgrouped_idflag| {
        result += @sizeOf(@TypeOf(paramgrouped_idflag));        }

        // reactions
        const paramreactions = self.reactions;
        if (paramreactions) |paramreactionsflag| {
        result += paramreactionsflag.size();
        }

        // restriction_reason
        const paramrestriction_reason = self.restriction_reason;
        if (paramrestriction_reason) |paramrestriction_reasonflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramrestriction_reasonflag) |paramrestriction_reasonflagitem| {
        result += paramrestriction_reasonflagitem.size();
        }
        }

        // ttl_period
        const paramttl_period = self.ttl_period;
        if (paramttl_period) |paramttl_periodflag| {
        result += @sizeOf(@TypeOf(paramttl_periodflag));        }

        // quick_reply_shortcut_id
        const paramquick_reply_shortcut_id = self.quick_reply_shortcut_id;
        if (paramquick_reply_shortcut_id) |paramquick_reply_shortcut_idflag| {
        result += @sizeOf(@TypeOf(paramquick_reply_shortcut_idflag));        }

        // effect
        const parameffect = self.effect;
        if (parameffect) |parameffectflag| {
        result += @sizeOf(@TypeOf(parameffectflag));        }

        // factcheck
        const paramfactcheck = self.factcheck;
        if (paramfactcheck) |paramfactcheckflag| {
        result += paramfactcheckflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 13;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 14;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 18;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 19;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 21;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 24;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 26;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 27;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 8;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 29;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 28;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 11;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 9;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 6;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 7;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 10;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 10;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 23;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 15;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 16;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 17;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 20;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 22;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 25;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 30;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        var flag_flags2: usize = 0;
        if (self.flags2) {
             flag_flags2 = flag_flags2 | 1 << 1;
        }
        if (self.flags2) {
             flag_flags2 = flag_flags2 | 1 << 0;
        }
        if (self.flags2) {
             flag_flags2 = flag_flags2 | 1 << 2;
        }
        if (self.flags2) {
             flag_flags2 = flag_flags2 | 1 << 3;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessageService= struct {
    out: ?bool,
    mentioned: ?bool,
    media_unread: ?bool,
    silent: ?bool,
    post: ?bool,
    legacy: ?bool,
    id: i32,
    from_id: ?IPeer,
    peer_id: IPeer,
    reply_to: ?IMessageReplyHeader,
    date: i32,
    action: IMessageAction,
    ttl_period: ?i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // out
        // true flag

        // mentioned
        // true flag

        // media_unread
        // true flag

        // silent
        // true flag

        // post
        // true flag

        // legacy
        // true flag

        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // from_id
        const paramfrom_id = self.from_id;
        if (paramfrom_id) |paramfrom_idflag| {
        result += paramfrom_idflag.size();
        }

        // peer_id
        const parampeer_id = self.peer_id;
        result += parampeer_id.size();

        // reply_to
        const paramreply_to = self.reply_to;
        if (paramreply_to) |paramreply_toflag| {
        result += paramreply_toflag.size();
        }

        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        // action
        const paramaction = self.action;
        result += paramaction.size();

        // ttl_period
        const paramttl_period = self.ttl_period;
        if (paramttl_period) |paramttl_periodflag| {
        result += @sizeOf(@TypeOf(paramttl_periodflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 13;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 14;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 19;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 8;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 25;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessageMediaEmpty= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const MessageMediaPhoto= struct {
    spoiler: ?bool,
    photo: ?IPhoto,
    ttl_seconds: ?i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // spoiler
        // true flag

        // photo
        const paramphoto = self.photo;
        if (paramphoto) |paramphotoflag| {
        result += paramphotoflag.size();
        }

        // ttl_seconds
        const paramttl_seconds = self.ttl_seconds;
        if (paramttl_seconds) |paramttl_secondsflag| {
        result += @sizeOf(@TypeOf(paramttl_secondsflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessageMediaGeo= struct {
    geo: IGeoPoint,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // geo
        const paramgeo = self.geo;
        result += paramgeo.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MessageMediaContact= struct {
    phone_number: []const u8,
    first_name: []const u8,
    last_name: []const u8,
    vcard: []const u8,
    user_id: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // phone_number
        const paramphone_number = self.phone_number;
        result += base.strEncodedSize(paramphone_number);
        // first_name
        const paramfirst_name = self.first_name;
        result += base.strEncodedSize(paramfirst_name);
        // last_name
        const paramlast_name = self.last_name;
        result += base.strEncodedSize(paramlast_name);
        // vcard
        const paramvcard = self.vcard;
        result += base.strEncodedSize(paramvcard);
        // user_id
        const paramuser_id = self.user_id;
        result += @sizeOf(@TypeOf(paramuser_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessageMediaUnsupported= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const MessageMediaDocument= struct {
    nopremium: ?bool,
    spoiler: ?bool,
    video: ?bool,
    round: ?bool,
    voice: ?bool,
    document: ?IDocument,
    alt_documents: ?[]const IDocument,
    ttl_seconds: ?i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // nopremium
        // true flag

        // spoiler
        // true flag

        // video
        // true flag

        // round
        // true flag

        // voice
        // true flag

        // document
        const paramdocument = self.document;
        if (paramdocument) |paramdocumentflag| {
        result += paramdocumentflag.size();
        }

        // alt_documents
        const paramalt_documents = self.alt_documents;
        if (paramalt_documents) |paramalt_documentsflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramalt_documentsflag) |paramalt_documentsflagitem| {
        result += paramalt_documentsflagitem.size();
        }
        }

        // ttl_seconds
        const paramttl_seconds = self.ttl_seconds;
        if (paramttl_seconds) |paramttl_secondsflag| {
        result += @sizeOf(@TypeOf(paramttl_secondsflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 6;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 7;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 8;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessageMediaWebPage= struct {
    force_large_media: ?bool,
    force_small_media: ?bool,
    manual: ?bool,
    safe: ?bool,
    webpage: IWebPage,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // force_large_media
        // true flag

        // force_small_media
        // true flag

        // manual
        // true flag

        // safe
        // true flag

        // webpage
        const paramwebpage = self.webpage;
        result += paramwebpage.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessageMediaVenue= struct {
    geo: IGeoPoint,
    title: []const u8,
    address: []const u8,
    provider: []const u8,
    venue_id: []const u8,
    venue_type: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // geo
        const paramgeo = self.geo;
        result += paramgeo.size();

        // title
        const paramtitle = self.title;
        result += base.strEncodedSize(paramtitle);
        // address
        const paramaddress = self.address;
        result += base.strEncodedSize(paramaddress);
        // provider
        const paramprovider = self.provider;
        result += base.strEncodedSize(paramprovider);
        // venue_id
        const paramvenue_id = self.venue_id;
        result += base.strEncodedSize(paramvenue_id);
        // venue_type
        const paramvenue_type = self.venue_type;
        result += base.strEncodedSize(paramvenue_type);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessageMediaGame= struct {
    game: IGame,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // game
        const paramgame = self.game;
        result += paramgame.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MessageMediaInvoice= struct {
    shipping_address_requested: ?bool,
    Test: ?bool,
    title: []const u8,
    description: []const u8,
    photo: ?IWebDocument,
    receipt_msg_id: ?i32,
    currency: []const u8,
    total_amount: i64,
    start_param: []const u8,
    extended_media: ?IMessageExtendedMedia,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // shipping_address_requested
        // true flag

        // test
        // true flag

        // title
        const paramtitle = self.title;
        result += base.strEncodedSize(paramtitle);
        // description
        const paramdescription = self.description;
        result += base.strEncodedSize(paramdescription);
        // photo
        const paramphoto = self.photo;
        if (paramphoto) |paramphotoflag| {
        result += paramphotoflag.size();
        }

        // receipt_msg_id
        const paramreceipt_msg_id = self.receipt_msg_id;
        if (paramreceipt_msg_id) |paramreceipt_msg_idflag| {
        result += @sizeOf(@TypeOf(paramreceipt_msg_idflag));        }

        // currency
        const paramcurrency = self.currency;
        result += base.strEncodedSize(paramcurrency);
        // total_amount
        const paramtotal_amount = self.total_amount;
        result += @sizeOf(@TypeOf(paramtotal_amount));
        // start_param
        const paramstart_param = self.start_param;
        result += base.strEncodedSize(paramstart_param);
        // extended_media
        const paramextended_media = self.extended_media;
        if (paramextended_media) |paramextended_mediaflag| {
        result += paramextended_mediaflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessageMediaGeoLive= struct {
    geo: IGeoPoint,
    heading: ?i32,
    period: i32,
    proximity_notification_radius: ?i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // geo
        const paramgeo = self.geo;
        result += paramgeo.size();

        // heading
        const paramheading = self.heading;
        if (paramheading) |paramheadingflag| {
        result += @sizeOf(@TypeOf(paramheadingflag));        }

        // period
        const paramperiod = self.period;
        result += @sizeOf(@TypeOf(paramperiod));
        // proximity_notification_radius
        const paramproximity_notification_radius = self.proximity_notification_radius;
        if (paramproximity_notification_radius) |paramproximity_notification_radiusflag| {
        result += @sizeOf(@TypeOf(paramproximity_notification_radiusflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessageMediaPoll= struct {
    poll: IPoll,
    results: IPollResults,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // poll
        const parampoll = self.poll;
        result += parampoll.size();

        // results
        const paramresults = self.results;
        result += paramresults.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessageMediaDice= struct {
    value: i32,
    emoticon: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // value
        const paramvalue = self.value;
        result += @sizeOf(@TypeOf(paramvalue));
        // emoticon
        const paramemoticon = self.emoticon;
        result += base.strEncodedSize(paramemoticon);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessageMediaStory= struct {
    via_mention: ?bool,
    peer: IPeer,
    id: i32,
    story: ?IStoryItem,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // via_mention
        // true flag

        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // story
        const paramstory = self.story;
        if (paramstory) |paramstoryflag| {
        result += paramstoryflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessageMediaGiveaway= struct {
    only_new_subscribers: ?bool,
    winners_are_visible: ?bool,
    channels: []const i64,
    countries_iso2: ?[]const []const u8,
    prize_description: ?[]const u8,
    quantity: i32,
    months: ?i32,
    stars: ?i64,
    until_date: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // only_new_subscribers
        // true flag

        // winners_are_visible
        // true flag

        // channels
        const paramchannels = self.channels;
        result += 4; // vector id
        result += 4; // vector size
        for (paramchannels) |paramchannelsitem| {
        result += @sizeOf(@TypeOf(paramchannelsitem));        }

        // countries_iso2
        const paramcountries_iso2 = self.countries_iso2;
        if (paramcountries_iso2) |paramcountries_iso2flag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramcountries_iso2flag) |paramcountries_iso2flagitem| {
        result += base.strEncodedSize(paramcountries_iso2flagitem);        }
        }

        // prize_description
        const paramprize_description = self.prize_description;
        if (paramprize_description) |paramprize_descriptionflag| {
        result += base.strEncodedSize(paramprize_descriptionflag);        }

        // quantity
        const paramquantity = self.quantity;
        result += @sizeOf(@TypeOf(paramquantity));
        // months
        const parammonths = self.months;
        if (parammonths) |parammonthsflag| {
        result += @sizeOf(@TypeOf(parammonthsflag));        }

        // stars
        const paramstars = self.stars;
        if (paramstars) |paramstarsflag| {
        result += @sizeOf(@TypeOf(paramstarsflag));        }

        // until_date
        const paramuntil_date = self.until_date;
        result += @sizeOf(@TypeOf(paramuntil_date));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessageMediaGiveawayResults= struct {
    only_new_subscribers: ?bool,
    refunded: ?bool,
    channel_id: i64,
    additional_peers_count: ?i32,
    launch_msg_id: i32,
    winners_count: i32,
    unclaimed_count: i32,
    winners: []const i64,
    months: ?i32,
    stars: ?i64,
    prize_description: ?[]const u8,
    until_date: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // only_new_subscribers
        // true flag

        // refunded
        // true flag

        // channel_id
        const paramchannel_id = self.channel_id;
        result += @sizeOf(@TypeOf(paramchannel_id));
        // additional_peers_count
        const paramadditional_peers_count = self.additional_peers_count;
        if (paramadditional_peers_count) |paramadditional_peers_countflag| {
        result += @sizeOf(@TypeOf(paramadditional_peers_countflag));        }

        // launch_msg_id
        const paramlaunch_msg_id = self.launch_msg_id;
        result += @sizeOf(@TypeOf(paramlaunch_msg_id));
        // winners_count
        const paramwinners_count = self.winners_count;
        result += @sizeOf(@TypeOf(paramwinners_count));
        // unclaimed_count
        const paramunclaimed_count = self.unclaimed_count;
        result += @sizeOf(@TypeOf(paramunclaimed_count));
        // winners
        const paramwinners = self.winners;
        result += 4; // vector id
        result += 4; // vector size
        for (paramwinners) |paramwinnersitem| {
        result += @sizeOf(@TypeOf(paramwinnersitem));        }

        // months
        const parammonths = self.months;
        if (parammonths) |parammonthsflag| {
        result += @sizeOf(@TypeOf(parammonthsflag));        }

        // stars
        const paramstars = self.stars;
        if (paramstars) |paramstarsflag| {
        result += @sizeOf(@TypeOf(paramstarsflag));        }

        // prize_description
        const paramprize_description = self.prize_description;
        if (paramprize_description) |paramprize_descriptionflag| {
        result += base.strEncodedSize(paramprize_descriptionflag);        }

        // until_date
        const paramuntil_date = self.until_date;
        result += @sizeOf(@TypeOf(paramuntil_date));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessageMediaPaidMedia= struct {
    stars_amount: i64,
    extended_media: []const IMessageExtendedMedia,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // stars_amount
        const paramstars_amount = self.stars_amount;
        result += @sizeOf(@TypeOf(paramstars_amount));
        // extended_media
        const paramextended_media = self.extended_media;
        result += 4; // vector id
        result += 4; // vector size
        for (paramextended_media) |paramextended_mediaitem| {
        result += paramextended_mediaitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessageActionEmpty= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const MessageActionChatCreate= struct {
    title: []const u8,
    users: []const i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // title
        const paramtitle = self.title;
        result += base.strEncodedSize(paramtitle);
        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += @sizeOf(@TypeOf(paramusersitem));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessageActionChatEditTitle= struct {
    title: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // title
        const paramtitle = self.title;
        result += base.strEncodedSize(paramtitle);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MessageActionChatEditPhoto= struct {
    photo: IPhoto,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // photo
        const paramphoto = self.photo;
        result += paramphoto.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MessageActionChatDeletePhoto= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const MessageActionChatAddUser= struct {
    users: []const i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += @sizeOf(@TypeOf(paramusersitem));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MessageActionChatDeleteUser= struct {
    user_id: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // user_id
        const paramuser_id = self.user_id;
        result += @sizeOf(@TypeOf(paramuser_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MessageActionChatJoinedByLink= struct {
    inviter_id: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // inviter_id
        const paraminviter_id = self.inviter_id;
        result += @sizeOf(@TypeOf(paraminviter_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MessageActionChannelCreate= struct {
    title: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // title
        const paramtitle = self.title;
        result += base.strEncodedSize(paramtitle);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MessageActionChatMigrateTo= struct {
    channel_id: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // channel_id
        const paramchannel_id = self.channel_id;
        result += @sizeOf(@TypeOf(paramchannel_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MessageActionChannelMigrateFrom= struct {
    title: []const u8,
    chat_id: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // title
        const paramtitle = self.title;
        result += base.strEncodedSize(paramtitle);
        // chat_id
        const paramchat_id = self.chat_id;
        result += @sizeOf(@TypeOf(paramchat_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessageActionPinMessage= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const MessageActionHistoryClear= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const MessageActionGameScore= struct {
    game_id: i64,
    score: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // game_id
        const paramgame_id = self.game_id;
        result += @sizeOf(@TypeOf(paramgame_id));
        // score
        const paramscore = self.score;
        result += @sizeOf(@TypeOf(paramscore));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessageActionPaymentSentMe= struct {
    recurring_init: ?bool,
    recurring_used: ?bool,
    currency: []const u8,
    total_amount: i64,
    payload: []const u8,
    info: ?IPaymentRequestedInfo,
    shipping_option_id: ?[]const u8,
    charge: IPaymentCharge,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // recurring_init
        // true flag

        // recurring_used
        // true flag

        // currency
        const paramcurrency = self.currency;
        result += base.strEncodedSize(paramcurrency);
        // total_amount
        const paramtotal_amount = self.total_amount;
        result += @sizeOf(@TypeOf(paramtotal_amount));
        // payload
        const parampayload = self.payload;
        result += base.strEncodedSize(parampayload);
        // info
        const paraminfo = self.info;
        if (paraminfo) |paraminfoflag| {
        result += paraminfoflag.size();
        }

        // shipping_option_id
        const paramshipping_option_id = self.shipping_option_id;
        if (paramshipping_option_id) |paramshipping_option_idflag| {
        result += base.strEncodedSize(paramshipping_option_idflag);        }

        // charge
        const paramcharge = self.charge;
        result += paramcharge.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessageActionPaymentSent= struct {
    recurring_init: ?bool,
    recurring_used: ?bool,
    currency: []const u8,
    total_amount: i64,
    invoice_slug: ?[]const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // recurring_init
        // true flag

        // recurring_used
        // true flag

        // currency
        const paramcurrency = self.currency;
        result += base.strEncodedSize(paramcurrency);
        // total_amount
        const paramtotal_amount = self.total_amount;
        result += @sizeOf(@TypeOf(paramtotal_amount));
        // invoice_slug
        const paraminvoice_slug = self.invoice_slug;
        if (paraminvoice_slug) |paraminvoice_slugflag| {
        result += base.strEncodedSize(paraminvoice_slugflag);        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessageActionPhoneCall= struct {
    video: ?bool,
    call_id: i64,
    reason: ?IPhoneCallDiscardReason,
    duration: ?i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // video
        // true flag

        // call_id
        const paramcall_id = self.call_id;
        result += @sizeOf(@TypeOf(paramcall_id));
        // reason
        const paramreason = self.reason;
        if (paramreason) |paramreasonflag| {
        result += paramreasonflag.size();
        }

        // duration
        const paramduration = self.duration;
        if (paramduration) |paramdurationflag| {
        result += @sizeOf(@TypeOf(paramdurationflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessageActionScreenshotTaken= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const MessageActionCustomAction= struct {
    message: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // message
        const parammessage = self.message;
        result += base.strEncodedSize(parammessage);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MessageActionBotAllowed= struct {
    attach_menu: ?bool,
    from_request: ?bool,
    domain: ?[]const u8,
    app: ?IBotApp,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // attach_menu
        // true flag

        // from_request
        // true flag

        // domain
        const paramdomain = self.domain;
        if (paramdomain) |paramdomainflag| {
        result += base.strEncodedSize(paramdomainflag);        }

        // app
        const paramapp = self.app;
        if (paramapp) |paramappflag| {
        result += paramappflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessageActionSecureValuesSentMe= struct {
    values: []const ISecureValue,
    credentials: ISecureCredentialsEncrypted,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // values
        const paramvalues = self.values;
        result += 4; // vector id
        result += 4; // vector size
        for (paramvalues) |paramvaluesitem| {
        result += paramvaluesitem.size();
        }

        // credentials
        const paramcredentials = self.credentials;
        result += paramcredentials.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessageActionSecureValuesSent= struct {
    types: []const ISecureValueType,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // types
        const paramtypes = self.types;
        result += 4; // vector id
        result += 4; // vector size
        for (paramtypes) |paramtypesitem| {
        result += paramtypesitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MessageActionContactSignUp= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const MessageActionGeoProximityReached= struct {
    from_id: IPeer,
    to_id: IPeer,
    distance: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // from_id
        const paramfrom_id = self.from_id;
        result += paramfrom_id.size();

        // to_id
        const paramto_id = self.to_id;
        result += paramto_id.size();

        // distance
        const paramdistance = self.distance;
        result += @sizeOf(@TypeOf(paramdistance));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessageActionGroupCall= struct {
    call: IInputGroupCall,
    duration: ?i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // call
        const paramcall = self.call;
        result += paramcall.size();

        // duration
        const paramduration = self.duration;
        if (paramduration) |paramdurationflag| {
        result += @sizeOf(@TypeOf(paramdurationflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessageActionInviteToGroupCall= struct {
    call: IInputGroupCall,
    users: []const i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // call
        const paramcall = self.call;
        result += paramcall.size();

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += @sizeOf(@TypeOf(paramusersitem));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessageActionSetMessagesTTL= struct {
    period: i32,
    auto_setting_from: ?i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // period
        const paramperiod = self.period;
        result += @sizeOf(@TypeOf(paramperiod));
        // auto_setting_from
        const paramauto_setting_from = self.auto_setting_from;
        if (paramauto_setting_from) |paramauto_setting_fromflag| {
        result += @sizeOf(@TypeOf(paramauto_setting_fromflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessageActionGroupCallScheduled= struct {
    call: IInputGroupCall,
    schedule_date: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // call
        const paramcall = self.call;
        result += paramcall.size();

        // schedule_date
        const paramschedule_date = self.schedule_date;
        result += @sizeOf(@TypeOf(paramschedule_date));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessageActionSetChatTheme= struct {
    emoticon: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // emoticon
        const paramemoticon = self.emoticon;
        result += base.strEncodedSize(paramemoticon);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MessageActionChatJoinedByRequest= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const MessageActionWebViewDataSentMe= struct {
    text: []const u8,
    data: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // text
        const paramtext = self.text;
        result += base.strEncodedSize(paramtext);
        // data
        const paramdata = self.data;
        result += base.strEncodedSize(paramdata);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessageActionWebViewDataSent= struct {
    text: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // text
        const paramtext = self.text;
        result += base.strEncodedSize(paramtext);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MessageActionGiftPremium= struct {
    currency: []const u8,
    amount: i64,
    months: i32,
    crypto_currency: ?[]const u8,
    crypto_amount: ?i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // currency
        const paramcurrency = self.currency;
        result += base.strEncodedSize(paramcurrency);
        // amount
        const paramamount = self.amount;
        result += @sizeOf(@TypeOf(paramamount));
        // months
        const parammonths = self.months;
        result += @sizeOf(@TypeOf(parammonths));
        // crypto_currency
        const paramcrypto_currency = self.crypto_currency;
        if (paramcrypto_currency) |paramcrypto_currencyflag| {
        result += base.strEncodedSize(paramcrypto_currencyflag);        }

        // crypto_amount
        const paramcrypto_amount = self.crypto_amount;
        if (paramcrypto_amount) |paramcrypto_amountflag| {
        result += @sizeOf(@TypeOf(paramcrypto_amountflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessageActionTopicCreate= struct {
    title: []const u8,
    icon_color: i32,
    icon_emoji_id: ?i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // title
        const paramtitle = self.title;
        result += base.strEncodedSize(paramtitle);
        // icon_color
        const paramicon_color = self.icon_color;
        result += @sizeOf(@TypeOf(paramicon_color));
        // icon_emoji_id
        const paramicon_emoji_id = self.icon_emoji_id;
        if (paramicon_emoji_id) |paramicon_emoji_idflag| {
        result += @sizeOf(@TypeOf(paramicon_emoji_idflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessageActionTopicEdit= struct {
    title: ?[]const u8,
    icon_emoji_id: ?i64,
    closed: ?bool,
    hidden: ?bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // title
        const paramtitle = self.title;
        if (paramtitle) |paramtitleflag| {
        result += base.strEncodedSize(paramtitleflag);        }

        // icon_emoji_id
        const paramicon_emoji_id = self.icon_emoji_id;
        if (paramicon_emoji_id) |paramicon_emoji_idflag| {
        result += @sizeOf(@TypeOf(paramicon_emoji_idflag));        }

        // closed
        const paramclosed = self.closed;
        if (paramclosed) |paramclosedflag| {
        _ = paramclosedflag;
        result += 4;        }

        // hidden
        const paramhidden = self.hidden;
        if (paramhidden) |paramhiddenflag| {
        _ = paramhiddenflag;
        result += 4;        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessageActionSuggestProfilePhoto= struct {
    photo: IPhoto,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // photo
        const paramphoto = self.photo;
        result += paramphoto.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MessageActionRequestedPeer= struct {
    button_id: i32,
    peers: []const IPeer,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // button_id
        const parambutton_id = self.button_id;
        result += @sizeOf(@TypeOf(parambutton_id));
        // peers
        const parampeers = self.peers;
        result += 4; // vector id
        result += 4; // vector size
        for (parampeers) |parampeersitem| {
        result += parampeersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessageActionSetChatWallPaper= struct {
    same: ?bool,
    for_both: ?bool,
    wallpaper: IWallPaper,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // same
        // true flag

        // for_both
        // true flag

        // wallpaper
        const paramwallpaper = self.wallpaper;
        result += paramwallpaper.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessageActionGiftCode= struct {
    via_giveaway: ?bool,
    unclaimed: ?bool,
    boost_peer: ?IPeer,
    months: i32,
    slug: []const u8,
    currency: ?[]const u8,
    amount: ?i64,
    crypto_currency: ?[]const u8,
    crypto_amount: ?i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // via_giveaway
        // true flag

        // unclaimed
        // true flag

        // boost_peer
        const paramboost_peer = self.boost_peer;
        if (paramboost_peer) |paramboost_peerflag| {
        result += paramboost_peerflag.size();
        }

        // months
        const parammonths = self.months;
        result += @sizeOf(@TypeOf(parammonths));
        // slug
        const paramslug = self.slug;
        result += base.strEncodedSize(paramslug);
        // currency
        const paramcurrency = self.currency;
        if (paramcurrency) |paramcurrencyflag| {
        result += base.strEncodedSize(paramcurrencyflag);        }

        // amount
        const paramamount = self.amount;
        if (paramamount) |paramamountflag| {
        result += @sizeOf(@TypeOf(paramamountflag));        }

        // crypto_currency
        const paramcrypto_currency = self.crypto_currency;
        if (paramcrypto_currency) |paramcrypto_currencyflag| {
        result += base.strEncodedSize(paramcrypto_currencyflag);        }

        // crypto_amount
        const paramcrypto_amount = self.crypto_amount;
        if (paramcrypto_amount) |paramcrypto_amountflag| {
        result += @sizeOf(@TypeOf(paramcrypto_amountflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessageActionGiveawayLaunch= struct {
    stars: ?i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // stars
        const paramstars = self.stars;
        if (paramstars) |paramstarsflag| {
        result += @sizeOf(@TypeOf(paramstarsflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        }
};
const MessageActionGiveawayResults= struct {
    stars: ?bool,
    winners_count: i32,
    unclaimed_count: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // stars
        // true flag

        // winners_count
        const paramwinners_count = self.winners_count;
        result += @sizeOf(@TypeOf(paramwinners_count));
        // unclaimed_count
        const paramunclaimed_count = self.unclaimed_count;
        result += @sizeOf(@TypeOf(paramunclaimed_count));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessageActionBoostApply= struct {
    boosts: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // boosts
        const paramboosts = self.boosts;
        result += @sizeOf(@TypeOf(paramboosts));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MessageActionRequestedPeerSentMe= struct {
    button_id: i32,
    peers: []const IRequestedPeer,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // button_id
        const parambutton_id = self.button_id;
        result += @sizeOf(@TypeOf(parambutton_id));
        // peers
        const parampeers = self.peers;
        result += 4; // vector id
        result += 4; // vector size
        for (parampeers) |parampeersitem| {
        result += parampeersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessageActionPaymentRefunded= struct {
    peer: IPeer,
    currency: []const u8,
    total_amount: i64,
    payload: ?[]const u8,
    charge: IPaymentCharge,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // currency
        const paramcurrency = self.currency;
        result += base.strEncodedSize(paramcurrency);
        // total_amount
        const paramtotal_amount = self.total_amount;
        result += @sizeOf(@TypeOf(paramtotal_amount));
        // payload
        const parampayload = self.payload;
        if (parampayload) |parampayloadflag| {
        result += base.strEncodedSize(parampayloadflag);        }

        // charge
        const paramcharge = self.charge;
        result += paramcharge.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessageActionGiftStars= struct {
    currency: []const u8,
    amount: i64,
    stars: i64,
    crypto_currency: ?[]const u8,
    crypto_amount: ?i64,
    transaction_id: ?[]const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // currency
        const paramcurrency = self.currency;
        result += base.strEncodedSize(paramcurrency);
        // amount
        const paramamount = self.amount;
        result += @sizeOf(@TypeOf(paramamount));
        // stars
        const paramstars = self.stars;
        result += @sizeOf(@TypeOf(paramstars));
        // crypto_currency
        const paramcrypto_currency = self.crypto_currency;
        if (paramcrypto_currency) |paramcrypto_currencyflag| {
        result += base.strEncodedSize(paramcrypto_currencyflag);        }

        // crypto_amount
        const paramcrypto_amount = self.crypto_amount;
        if (paramcrypto_amount) |paramcrypto_amountflag| {
        result += @sizeOf(@TypeOf(paramcrypto_amountflag));        }

        // transaction_id
        const paramtransaction_id = self.transaction_id;
        if (paramtransaction_id) |paramtransaction_idflag| {
        result += base.strEncodedSize(paramtransaction_idflag);        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessageActionPrizeStars= struct {
    unclaimed: ?bool,
    stars: i64,
    transaction_id: []const u8,
    boost_peer: IPeer,
    giveaway_msg_id: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // unclaimed
        // true flag

        // stars
        const paramstars = self.stars;
        result += @sizeOf(@TypeOf(paramstars));
        // transaction_id
        const paramtransaction_id = self.transaction_id;
        result += base.strEncodedSize(paramtransaction_id);
        // boost_peer
        const paramboost_peer = self.boost_peer;
        result += paramboost_peer.size();

        // giveaway_msg_id
        const paramgiveaway_msg_id = self.giveaway_msg_id;
        result += @sizeOf(@TypeOf(paramgiveaway_msg_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessageActionStarGift= struct {
    name_hidden: ?bool,
    saved: ?bool,
    converted: ?bool,
    gift: IStarGift,
    message: ?ITextWithEntities,
    convert_stars: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // name_hidden
        // true flag

        // saved
        // true flag

        // converted
        // true flag

        // gift
        const paramgift = self.gift;
        result += paramgift.size();

        // message
        const parammessage = self.message;
        if (parammessage) |parammessageflag| {
        result += parammessageflag.size();
        }

        // convert_stars
        const paramconvert_stars = self.convert_stars;
        result += @sizeOf(@TypeOf(paramconvert_stars));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const Dialog= struct {
    pinned: ?bool,
    unread_mark: ?bool,
    view_forum_as_messages: ?bool,
    peer: IPeer,
    top_message: i32,
    read_inbox_max_id: i32,
    read_outbox_max_id: i32,
    unread_count: i32,
    unread_mentions_count: i32,
    unread_reactions_count: i32,
    notify_settings: IPeerNotifySettings,
    pts: ?i32,
    draft: ?IDraftMessage,
    folder_id: ?i32,
    ttl_period: ?i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // pinned
        // true flag

        // unread_mark
        // true flag

        // view_forum_as_messages
        // true flag

        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // top_message
        const paramtop_message = self.top_message;
        result += @sizeOf(@TypeOf(paramtop_message));
        // read_inbox_max_id
        const paramread_inbox_max_id = self.read_inbox_max_id;
        result += @sizeOf(@TypeOf(paramread_inbox_max_id));
        // read_outbox_max_id
        const paramread_outbox_max_id = self.read_outbox_max_id;
        result += @sizeOf(@TypeOf(paramread_outbox_max_id));
        // unread_count
        const paramunread_count = self.unread_count;
        result += @sizeOf(@TypeOf(paramunread_count));
        // unread_mentions_count
        const paramunread_mentions_count = self.unread_mentions_count;
        result += @sizeOf(@TypeOf(paramunread_mentions_count));
        // unread_reactions_count
        const paramunread_reactions_count = self.unread_reactions_count;
        result += @sizeOf(@TypeOf(paramunread_reactions_count));
        // notify_settings
        const paramnotify_settings = self.notify_settings;
        result += paramnotify_settings.size();

        // pts
        const parampts = self.pts;
        if (parampts) |paramptsflag| {
        result += @sizeOf(@TypeOf(paramptsflag));        }

        // draft
        const paramdraft = self.draft;
        if (paramdraft) |paramdraftflag| {
        result += paramdraftflag.size();
        }

        // folder_id
        const paramfolder_id = self.folder_id;
        if (paramfolder_id) |paramfolder_idflag| {
        result += @sizeOf(@TypeOf(paramfolder_idflag));        }

        // ttl_period
        const paramttl_period = self.ttl_period;
        if (paramttl_period) |paramttl_periodflag| {
        result += @sizeOf(@TypeOf(paramttl_periodflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 6;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const DialogFolder= struct {
    pinned: ?bool,
    folder: IFolder,
    peer: IPeer,
    top_message: i32,
    unread_muted_peers_count: i32,
    unread_unmuted_peers_count: i32,
    unread_muted_messages_count: i32,
    unread_unmuted_messages_count: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // pinned
        // true flag

        // folder
        const paramfolder = self.folder;
        result += paramfolder.size();

        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // top_message
        const paramtop_message = self.top_message;
        result += @sizeOf(@TypeOf(paramtop_message));
        // unread_muted_peers_count
        const paramunread_muted_peers_count = self.unread_muted_peers_count;
        result += @sizeOf(@TypeOf(paramunread_muted_peers_count));
        // unread_unmuted_peers_count
        const paramunread_unmuted_peers_count = self.unread_unmuted_peers_count;
        result += @sizeOf(@TypeOf(paramunread_unmuted_peers_count));
        // unread_muted_messages_count
        const paramunread_muted_messages_count = self.unread_muted_messages_count;
        result += @sizeOf(@TypeOf(paramunread_muted_messages_count));
        // unread_unmuted_messages_count
        const paramunread_unmuted_messages_count = self.unread_unmuted_messages_count;
        result += @sizeOf(@TypeOf(paramunread_unmuted_messages_count));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PhotoEmpty= struct {
    id: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const Photo= struct {
    has_stickers: ?bool,
    id: i64,
    access_hash: i64,
    file_reference: []const u8,
    date: i32,
    sizes: []const IPhotoSize,
    video_sizes: ?[]const IVideoSize,
    dc_id: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // has_stickers
        // true flag

        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // access_hash
        const paramaccess_hash = self.access_hash;
        result += @sizeOf(@TypeOf(paramaccess_hash));
        // file_reference
        const paramfile_reference = self.file_reference;
        result += base.strEncodedSize(paramfile_reference);
        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        // sizes
        const paramsizes = self.sizes;
        result += 4; // vector id
        result += 4; // vector size
        for (paramsizes) |paramsizesitem| {
        result += paramsizesitem.size();
        }

        // video_sizes
        const paramvideo_sizes = self.video_sizes;
        if (paramvideo_sizes) |paramvideo_sizesflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramvideo_sizesflag) |paramvideo_sizesflagitem| {
        result += paramvideo_sizesflagitem.size();
        }
        }

        // dc_id
        const paramdc_id = self.dc_id;
        result += @sizeOf(@TypeOf(paramdc_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PhotoSizeEmpty= struct {
    type: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // type
        const paramtype = self.Type;
        result += base.strEncodedSize(paramtype);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const PhotoSize= struct {
    type: []const u8,
    w: i32,
    h: i32,
    size: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // type
        const paramtype = self.Type;
        result += base.strEncodedSize(paramtype);
        // w
        const paramw = self.w;
        result += @sizeOf(@TypeOf(paramw));
        // h
        const paramh = self.h;
        result += @sizeOf(@TypeOf(paramh));
        // size
        const paramsize = self.size;
        result += @sizeOf(@TypeOf(paramsize));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PhotoCachedSize= struct {
    type: []const u8,
    w: i32,
    h: i32,
    bytes: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // type
        const paramtype = self.Type;
        result += base.strEncodedSize(paramtype);
        // w
        const paramw = self.w;
        result += @sizeOf(@TypeOf(paramw));
        // h
        const paramh = self.h;
        result += @sizeOf(@TypeOf(paramh));
        // bytes
        const parambytes = self.bytes;
        result += base.strEncodedSize(parambytes);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PhotoStrippedSize= struct {
    type: []const u8,
    bytes: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // type
        const paramtype = self.Type;
        result += base.strEncodedSize(paramtype);
        // bytes
        const parambytes = self.bytes;
        result += base.strEncodedSize(parambytes);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PhotoSizeProgressive= struct {
    type: []const u8,
    w: i32,
    h: i32,
    sizes: []const i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // type
        const paramtype = self.Type;
        result += base.strEncodedSize(paramtype);
        // w
        const paramw = self.w;
        result += @sizeOf(@TypeOf(paramw));
        // h
        const paramh = self.h;
        result += @sizeOf(@TypeOf(paramh));
        // sizes
        const paramsizes = self.sizes;
        result += 4; // vector id
        result += 4; // vector size
        for (paramsizes) |paramsizesitem| {
        result += @sizeOf(@TypeOf(paramsizesitem));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PhotoPathSize= struct {
    type: []const u8,
    bytes: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // type
        const paramtype = self.Type;
        result += base.strEncodedSize(paramtype);
        // bytes
        const parambytes = self.bytes;
        result += base.strEncodedSize(parambytes);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const GeoPointEmpty= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const GeoPoint= struct {
    long: f64,
    lat: f64,
    access_hash: i64,
    accuracy_radius: ?i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // long
        const paramlong = self.long;
        result += @sizeOf(@TypeOf(paramlong));
        // lat
        const paramlat = self.lat;
        result += @sizeOf(@TypeOf(paramlat));
        // access_hash
        const paramaccess_hash = self.access_hash;
        result += @sizeOf(@TypeOf(paramaccess_hash));
        // accuracy_radius
        const paramaccuracy_radius = self.accuracy_radius;
        if (paramaccuracy_radius) |paramaccuracy_radiusflag| {
        result += @sizeOf(@TypeOf(paramaccuracy_radiusflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AuthSentCode= struct {
    type: IAuthSentCodeType,
    phone_code_hash: []const u8,
    next_type: ?IAuthCodeType,
    timeout: ?i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // type
        const paramtype = self.Type;
        result += paramtype.size();

        // phone_code_hash
        const paramphone_code_hash = self.phone_code_hash;
        result += base.strEncodedSize(paramphone_code_hash);
        // next_type
        const paramnext_type = self.next_type;
        if (paramnext_type) |paramnext_typeflag| {
        result += paramnext_typeflag.size();
        }

        // timeout
        const paramtimeout = self.timeout;
        if (paramtimeout) |paramtimeoutflag| {
        result += @sizeOf(@TypeOf(paramtimeoutflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AuthSentCodeSuccess= struct {
    authorization: IAuthAuthorization,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // authorization
        const paramauthorization = self.authorization;
        result += paramauthorization.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const AuthAuthorization= struct {
    setup_password_required: ?bool,
    otherwise_relogin_days: ?i32,
    tmp_sessions: ?i32,
    future_auth_token: ?[]const u8,
    user: IUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // setup_password_required
        // true flag

        // otherwise_relogin_days
        const paramotherwise_relogin_days = self.otherwise_relogin_days;
        if (paramotherwise_relogin_days) |paramotherwise_relogin_daysflag| {
        result += @sizeOf(@TypeOf(paramotherwise_relogin_daysflag));        }

        // tmp_sessions
        const paramtmp_sessions = self.tmp_sessions;
        if (paramtmp_sessions) |paramtmp_sessionsflag| {
        result += @sizeOf(@TypeOf(paramtmp_sessionsflag));        }

        // future_auth_token
        const paramfuture_auth_token = self.future_auth_token;
        if (paramfuture_auth_token) |paramfuture_auth_tokenflag| {
        result += base.strEncodedSize(paramfuture_auth_tokenflag);        }

        // user
        const paramuser = self.user;
        result += paramuser.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AuthAuthorizationSignUpRequired= struct {
    terms_of_service: ?IHelpTermsOfService,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // terms_of_service
        const paramterms_of_service = self.terms_of_service;
        if (paramterms_of_service) |paramterms_of_serviceflag| {
        result += paramterms_of_serviceflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        }
};
const AuthExportedAuthorization= struct {
    id: i64,
    bytes: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // bytes
        const parambytes = self.bytes;
        result += base.strEncodedSize(parambytes);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputNotifyPeer= struct {
    peer: IInputPeer,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const InputNotifyUsers= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const InputNotifyChats= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const InputNotifyBroadcasts= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const InputNotifyForumTopic= struct {
    peer: IInputPeer,
    top_msg_id: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // top_msg_id
        const paramtop_msg_id = self.top_msg_id;
        result += @sizeOf(@TypeOf(paramtop_msg_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputPeerNotifySettings= struct {
    show_previews: ?bool,
    silent: ?bool,
    mute_until: ?i32,
    sound: ?INotificationSound,
    stories_muted: ?bool,
    stories_hide_sender: ?bool,
    stories_sound: ?INotificationSound,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // show_previews
        const paramshow_previews = self.show_previews;
        if (paramshow_previews) |paramshow_previewsflag| {
        _ = paramshow_previewsflag;
        result += 4;        }

        // silent
        const paramsilent = self.silent;
        if (paramsilent) |paramsilentflag| {
        _ = paramsilentflag;
        result += 4;        }

        // mute_until
        const parammute_until = self.mute_until;
        if (parammute_until) |parammute_untilflag| {
        result += @sizeOf(@TypeOf(parammute_untilflag));        }

        // sound
        const paramsound = self.sound;
        if (paramsound) |paramsoundflag| {
        result += paramsoundflag.size();
        }

        // stories_muted
        const paramstories_muted = self.stories_muted;
        if (paramstories_muted) |paramstories_mutedflag| {
        _ = paramstories_mutedflag;
        result += 4;        }

        // stories_hide_sender
        const paramstories_hide_sender = self.stories_hide_sender;
        if (paramstories_hide_sender) |paramstories_hide_senderflag| {
        _ = paramstories_hide_senderflag;
        result += 4;        }

        // stories_sound
        const paramstories_sound = self.stories_sound;
        if (paramstories_sound) |paramstories_soundflag| {
        result += paramstories_soundflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 6;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 7;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 8;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PeerNotifySettings= struct {
    show_previews: ?bool,
    silent: ?bool,
    mute_until: ?i32,
    ios_sound: ?INotificationSound,
    android_sound: ?INotificationSound,
    other_sound: ?INotificationSound,
    stories_muted: ?bool,
    stories_hide_sender: ?bool,
    stories_ios_sound: ?INotificationSound,
    stories_android_sound: ?INotificationSound,
    stories_other_sound: ?INotificationSound,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // show_previews
        const paramshow_previews = self.show_previews;
        if (paramshow_previews) |paramshow_previewsflag| {
        _ = paramshow_previewsflag;
        result += 4;        }

        // silent
        const paramsilent = self.silent;
        if (paramsilent) |paramsilentflag| {
        _ = paramsilentflag;
        result += 4;        }

        // mute_until
        const parammute_until = self.mute_until;
        if (parammute_until) |parammute_untilflag| {
        result += @sizeOf(@TypeOf(parammute_untilflag));        }

        // ios_sound
        const paramios_sound = self.ios_sound;
        if (paramios_sound) |paramios_soundflag| {
        result += paramios_soundflag.size();
        }

        // android_sound
        const paramandroid_sound = self.android_sound;
        if (paramandroid_sound) |paramandroid_soundflag| {
        result += paramandroid_soundflag.size();
        }

        // other_sound
        const paramother_sound = self.other_sound;
        if (paramother_sound) |paramother_soundflag| {
        result += paramother_soundflag.size();
        }

        // stories_muted
        const paramstories_muted = self.stories_muted;
        if (paramstories_muted) |paramstories_mutedflag| {
        _ = paramstories_mutedflag;
        result += 4;        }

        // stories_hide_sender
        const paramstories_hide_sender = self.stories_hide_sender;
        if (paramstories_hide_sender) |paramstories_hide_senderflag| {
        _ = paramstories_hide_senderflag;
        result += 4;        }

        // stories_ios_sound
        const paramstories_ios_sound = self.stories_ios_sound;
        if (paramstories_ios_sound) |paramstories_ios_soundflag| {
        result += paramstories_ios_soundflag.size();
        }

        // stories_android_sound
        const paramstories_android_sound = self.stories_android_sound;
        if (paramstories_android_sound) |paramstories_android_soundflag| {
        result += paramstories_android_soundflag.size();
        }

        // stories_other_sound
        const paramstories_other_sound = self.stories_other_sound;
        if (paramstories_other_sound) |paramstories_other_soundflag| {
        result += paramstories_other_soundflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 6;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 7;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 8;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 9;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 10;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PeerSettings= struct {
    report_spam: ?bool,
    add_contact: ?bool,
    block_contact: ?bool,
    share_contact: ?bool,
    need_contacts_exception: ?bool,
    report_geo: ?bool,
    autoarchived: ?bool,
    invite_members: ?bool,
    request_chat_broadcast: ?bool,
    business_bot_paused: ?bool,
    business_bot_can_reply: ?bool,
    geo_distance: ?i32,
    request_chat_title: ?[]const u8,
    request_chat_date: ?i32,
    business_bot_id: ?i64,
    business_bot_manage_url: ?[]const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // report_spam
        // true flag

        // add_contact
        // true flag

        // block_contact
        // true flag

        // share_contact
        // true flag

        // need_contacts_exception
        // true flag

        // report_geo
        // true flag

        // autoarchived
        // true flag

        // invite_members
        // true flag

        // request_chat_broadcast
        // true flag

        // business_bot_paused
        // true flag

        // business_bot_can_reply
        // true flag

        // geo_distance
        const paramgeo_distance = self.geo_distance;
        if (paramgeo_distance) |paramgeo_distanceflag| {
        result += @sizeOf(@TypeOf(paramgeo_distanceflag));        }

        // request_chat_title
        const paramrequest_chat_title = self.request_chat_title;
        if (paramrequest_chat_title) |paramrequest_chat_titleflag| {
        result += base.strEncodedSize(paramrequest_chat_titleflag);        }

        // request_chat_date
        const paramrequest_chat_date = self.request_chat_date;
        if (paramrequest_chat_date) |paramrequest_chat_dateflag| {
        result += @sizeOf(@TypeOf(paramrequest_chat_dateflag));        }

        // business_bot_id
        const parambusiness_bot_id = self.business_bot_id;
        if (parambusiness_bot_id) |parambusiness_bot_idflag| {
        result += @sizeOf(@TypeOf(parambusiness_bot_idflag));        }

        // business_bot_manage_url
        const parambusiness_bot_manage_url = self.business_bot_manage_url;
        if (parambusiness_bot_manage_url) |parambusiness_bot_manage_urlflag| {
        result += base.strEncodedSize(parambusiness_bot_manage_urlflag);        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 7;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 8;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 10;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 11;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 12;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 6;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 9;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 9;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 13;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 13;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const WallPaper= struct {
    id: i64,
    creator: ?bool,
    default: ?bool,
    pattern: ?bool,
    dark: ?bool,
    access_hash: i64,
    slug: []const u8,
    document: IDocument,
    settings: ?IWallPaperSettings,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // flags
        result += 4; // flags
        // creator
        // true flag

        // default
        // true flag

        // pattern
        // true flag

        // dark
        // true flag

        // access_hash
        const paramaccess_hash = self.access_hash;
        result += @sizeOf(@TypeOf(paramaccess_hash));
        // slug
        const paramslug = self.slug;
        result += base.strEncodedSize(paramslug);
        // document
        const paramdocument = self.document;
        result += paramdocument.size();

        // settings
        const paramsettings = self.settings;
        if (paramsettings) |paramsettingsflag| {
        result += paramsettingsflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const WallPaperNoFile= struct {
    id: i64,
    default: ?bool,
    dark: ?bool,
    settings: ?IWallPaperSettings,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // flags
        result += 4; // flags
        // default
        // true flag

        // dark
        // true flag

        // settings
        const paramsettings = self.settings;
        if (paramsettings) |paramsettingsflag| {
        result += paramsettingsflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputReportReasonSpam= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const InputReportReasonViolence= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const InputReportReasonPornography= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const InputReportReasonChildAbuse= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const InputReportReasonOther= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const InputReportReasonCopyright= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const InputReportReasonGeoIrrelevant= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const InputReportReasonFake= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const InputReportReasonIllegalDrugs= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const InputReportReasonPersonalDetails= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const UserFull= struct {
    blocked: ?bool,
    phone_calls_available: ?bool,
    phone_calls_private: ?bool,
    can_pin_message: ?bool,
    has_scheduled: ?bool,
    video_calls_available: ?bool,
    voice_messages_forbidden: ?bool,
    translations_disabled: ?bool,
    stories_pinned_available: ?bool,
    blocked_my_stories_from: ?bool,
    wallpaper_overridden: ?bool,
    contact_require_premium: ?bool,
    read_dates_private: ?bool,
    sponsored_enabled: ?bool,
    id: i64,
    about: ?[]const u8,
    settings: IPeerSettings,
    personal_photo: ?IPhoto,
    profile_photo: ?IPhoto,
    fallback_photo: ?IPhoto,
    notify_settings: IPeerNotifySettings,
    bot_info: ?IBotInfo,
    pinned_msg_id: ?i32,
    common_chats_count: i32,
    folder_id: ?i32,
    ttl_period: ?i32,
    theme_emoticon: ?[]const u8,
    private_forward_name: ?[]const u8,
    bot_group_admin_rights: ?IChatAdminRights,
    bot_broadcast_admin_rights: ?IChatAdminRights,
    premium_gifts: ?[]const IPremiumGiftOption,
    wallpaper: ?IWallPaper,
    stories: ?IPeerStories,
    business_work_hours: ?IBusinessWorkHours,
    business_location: ?IBusinessLocation,
    business_greeting_message: ?IBusinessGreetingMessage,
    business_away_message: ?IBusinessAwayMessage,
    business_intro: ?IBusinessIntro,
    birthday: ?IBirthday,
    personal_channel_id: ?i64,
    personal_channel_message: ?i32,
    stargifts_count: ?i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // blocked
        // true flag

        // phone_calls_available
        // true flag

        // phone_calls_private
        // true flag

        // can_pin_message
        // true flag

        // has_scheduled
        // true flag

        // video_calls_available
        // true flag

        // voice_messages_forbidden
        // true flag

        // translations_disabled
        // true flag

        // stories_pinned_available
        // true flag

        // blocked_my_stories_from
        // true flag

        // wallpaper_overridden
        // true flag

        // contact_require_premium
        // true flag

        // read_dates_private
        // true flag

        // flags2
        result += 4; // flags2
        // sponsored_enabled
        // true flag

        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // about
        const paramabout = self.about;
        if (paramabout) |paramaboutflag| {
        result += base.strEncodedSize(paramaboutflag);        }

        // settings
        const paramsettings = self.settings;
        result += paramsettings.size();

        // personal_photo
        const parampersonal_photo = self.personal_photo;
        if (parampersonal_photo) |parampersonal_photoflag| {
        result += parampersonal_photoflag.size();
        }

        // profile_photo
        const paramprofile_photo = self.profile_photo;
        if (paramprofile_photo) |paramprofile_photoflag| {
        result += paramprofile_photoflag.size();
        }

        // fallback_photo
        const paramfallback_photo = self.fallback_photo;
        if (paramfallback_photo) |paramfallback_photoflag| {
        result += paramfallback_photoflag.size();
        }

        // notify_settings
        const paramnotify_settings = self.notify_settings;
        result += paramnotify_settings.size();

        // bot_info
        const parambot_info = self.bot_info;
        if (parambot_info) |parambot_infoflag| {
        result += parambot_infoflag.size();
        }

        // pinned_msg_id
        const parampinned_msg_id = self.pinned_msg_id;
        if (parampinned_msg_id) |parampinned_msg_idflag| {
        result += @sizeOf(@TypeOf(parampinned_msg_idflag));        }

        // common_chats_count
        const paramcommon_chats_count = self.common_chats_count;
        result += @sizeOf(@TypeOf(paramcommon_chats_count));
        // folder_id
        const paramfolder_id = self.folder_id;
        if (paramfolder_id) |paramfolder_idflag| {
        result += @sizeOf(@TypeOf(paramfolder_idflag));        }

        // ttl_period
        const paramttl_period = self.ttl_period;
        if (paramttl_period) |paramttl_periodflag| {
        result += @sizeOf(@TypeOf(paramttl_periodflag));        }

        // theme_emoticon
        const paramtheme_emoticon = self.theme_emoticon;
        if (paramtheme_emoticon) |paramtheme_emoticonflag| {
        result += base.strEncodedSize(paramtheme_emoticonflag);        }

        // private_forward_name
        const paramprivate_forward_name = self.private_forward_name;
        if (paramprivate_forward_name) |paramprivate_forward_nameflag| {
        result += base.strEncodedSize(paramprivate_forward_nameflag);        }

        // bot_group_admin_rights
        const parambot_group_admin_rights = self.bot_group_admin_rights;
        if (parambot_group_admin_rights) |parambot_group_admin_rightsflag| {
        result += parambot_group_admin_rightsflag.size();
        }

        // bot_broadcast_admin_rights
        const parambot_broadcast_admin_rights = self.bot_broadcast_admin_rights;
        if (parambot_broadcast_admin_rights) |parambot_broadcast_admin_rightsflag| {
        result += parambot_broadcast_admin_rightsflag.size();
        }

        // premium_gifts
        const parampremium_gifts = self.premium_gifts;
        if (parampremium_gifts) |parampremium_giftsflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (parampremium_giftsflag) |parampremium_giftsflagitem| {
        result += parampremium_giftsflagitem.size();
        }
        }

        // wallpaper
        const paramwallpaper = self.wallpaper;
        if (paramwallpaper) |paramwallpaperflag| {
        result += paramwallpaperflag.size();
        }

        // stories
        const paramstories = self.stories;
        if (paramstories) |paramstoriesflag| {
        result += paramstoriesflag.size();
        }

        // business_work_hours
        const parambusiness_work_hours = self.business_work_hours;
        if (parambusiness_work_hours) |parambusiness_work_hoursflag| {
        result += parambusiness_work_hoursflag.size();
        }

        // business_location
        const parambusiness_location = self.business_location;
        if (parambusiness_location) |parambusiness_locationflag| {
        result += parambusiness_locationflag.size();
        }

        // business_greeting_message
        const parambusiness_greeting_message = self.business_greeting_message;
        if (parambusiness_greeting_message) |parambusiness_greeting_messageflag| {
        result += parambusiness_greeting_messageflag.size();
        }

        // business_away_message
        const parambusiness_away_message = self.business_away_message;
        if (parambusiness_away_message) |parambusiness_away_messageflag| {
        result += parambusiness_away_messageflag.size();
        }

        // business_intro
        const parambusiness_intro = self.business_intro;
        if (parambusiness_intro) |parambusiness_introflag| {
        result += parambusiness_introflag.size();
        }

        // birthday
        const parambirthday = self.birthday;
        if (parambirthday) |parambirthdayflag| {
        result += parambirthdayflag.size();
        }

        // personal_channel_id
        const parampersonal_channel_id = self.personal_channel_id;
        if (parampersonal_channel_id) |parampersonal_channel_idflag| {
        result += @sizeOf(@TypeOf(parampersonal_channel_idflag));        }

        // personal_channel_message
        const parampersonal_channel_message = self.personal_channel_message;
        if (parampersonal_channel_message) |parampersonal_channel_messageflag| {
        result += @sizeOf(@TypeOf(parampersonal_channel_messageflag));        }

        // stargifts_count
        const paramstargifts_count = self.stargifts_count;
        if (paramstargifts_count) |paramstargifts_countflag| {
        result += @sizeOf(@TypeOf(paramstargifts_countflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 7;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 12;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 13;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 20;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 23;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 26;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 27;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 28;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 29;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 30;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 21;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 22;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 6;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 11;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 14;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 15;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 16;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 17;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 18;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 19;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 24;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 25;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        var flag_flags2: usize = 0;
        if (self.flags2) {
             flag_flags2 = flag_flags2 | 1 << 7;
        }
        if (self.flags2) {
             flag_flags2 = flag_flags2 | 1 << 0;
        }
        if (self.flags2) {
             flag_flags2 = flag_flags2 | 1 << 1;
        }
        if (self.flags2) {
             flag_flags2 = flag_flags2 | 1 << 2;
        }
        if (self.flags2) {
             flag_flags2 = flag_flags2 | 1 << 3;
        }
        if (self.flags2) {
             flag_flags2 = flag_flags2 | 1 << 4;
        }
        if (self.flags2) {
             flag_flags2 = flag_flags2 | 1 << 5;
        }
        if (self.flags2) {
             flag_flags2 = flag_flags2 | 1 << 6;
        }
        if (self.flags2) {
             flag_flags2 = flag_flags2 | 1 << 6;
        }
        if (self.flags2) {
             flag_flags2 = flag_flags2 | 1 << 8;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const Contact= struct {
    user_id: i64,
    mutual: bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // user_id
        const paramuser_id = self.user_id;
        result += @sizeOf(@TypeOf(paramuser_id));
        // mutual
        const parammutual = self.mutual;
        _ = parammutual;
        result += 4;
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ImportedContact= struct {
    user_id: i64,
    client_id: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // user_id
        const paramuser_id = self.user_id;
        result += @sizeOf(@TypeOf(paramuser_id));
        // client_id
        const paramclient_id = self.client_id;
        result += @sizeOf(@TypeOf(paramclient_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ContactStatus= struct {
    user_id: i64,
    status: IUserStatus,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // user_id
        const paramuser_id = self.user_id;
        result += @sizeOf(@TypeOf(paramuser_id));
        // status
        const paramstatus = self.status;
        result += paramstatus.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ContactsContactsNotModified= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const ContactsContacts= struct {
    contacts: []const IContact,
    saved_count: i32,
    users: []const IUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // contacts
        const paramcontacts = self.contacts;
        result += 4; // vector id
        result += 4; // vector size
        for (paramcontacts) |paramcontactsitem| {
        result += paramcontactsitem.size();
        }

        // saved_count
        const paramsaved_count = self.saved_count;
        result += @sizeOf(@TypeOf(paramsaved_count));
        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ContactsImportedContacts= struct {
    imported: []const IImportedContact,
    popular_invites: []const IPopularContact,
    retry_contacts: []const i64,
    users: []const IUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // imported
        const paramimported = self.imported;
        result += 4; // vector id
        result += 4; // vector size
        for (paramimported) |paramimporteditem| {
        result += paramimporteditem.size();
        }

        // popular_invites
        const parampopular_invites = self.popular_invites;
        result += 4; // vector id
        result += 4; // vector size
        for (parampopular_invites) |parampopular_invitesitem| {
        result += parampopular_invitesitem.size();
        }

        // retry_contacts
        const paramretry_contacts = self.retry_contacts;
        result += 4; // vector id
        result += 4; // vector size
        for (paramretry_contacts) |paramretry_contactsitem| {
        result += @sizeOf(@TypeOf(paramretry_contactsitem));        }

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ContactsBlocked= struct {
    blocked: []const IPeerBlocked,
    chats: []const IChat,
    users: []const IUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // blocked
        const paramblocked = self.blocked;
        result += 4; // vector id
        result += 4; // vector size
        for (paramblocked) |paramblockeditem| {
        result += paramblockeditem.size();
        }

        // chats
        const paramchats = self.chats;
        result += 4; // vector id
        result += 4; // vector size
        for (paramchats) |paramchatsitem| {
        result += paramchatsitem.size();
        }

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ContactsBlockedSlice= struct {
    count: i32,
    blocked: []const IPeerBlocked,
    chats: []const IChat,
    users: []const IUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // count
        const paramcount = self.count;
        result += @sizeOf(@TypeOf(paramcount));
        // blocked
        const paramblocked = self.blocked;
        result += 4; // vector id
        result += 4; // vector size
        for (paramblocked) |paramblockeditem| {
        result += paramblockeditem.size();
        }

        // chats
        const paramchats = self.chats;
        result += 4; // vector id
        result += 4; // vector size
        for (paramchats) |paramchatsitem| {
        result += paramchatsitem.size();
        }

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesDialogs= struct {
    dialogs: []const IDialog,
    messages: []const IMessage,
    chats: []const IChat,
    users: []const IUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // dialogs
        const paramdialogs = self.dialogs;
        result += 4; // vector id
        result += 4; // vector size
        for (paramdialogs) |paramdialogsitem| {
        result += paramdialogsitem.size();
        }

        // messages
        const parammessages = self.messages;
        result += 4; // vector id
        result += 4; // vector size
        for (parammessages) |parammessagesitem| {
        result += parammessagesitem.size();
        }

        // chats
        const paramchats = self.chats;
        result += 4; // vector id
        result += 4; // vector size
        for (paramchats) |paramchatsitem| {
        result += paramchatsitem.size();
        }

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesDialogsSlice= struct {
    count: i32,
    dialogs: []const IDialog,
    messages: []const IMessage,
    chats: []const IChat,
    users: []const IUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // count
        const paramcount = self.count;
        result += @sizeOf(@TypeOf(paramcount));
        // dialogs
        const paramdialogs = self.dialogs;
        result += 4; // vector id
        result += 4; // vector size
        for (paramdialogs) |paramdialogsitem| {
        result += paramdialogsitem.size();
        }

        // messages
        const parammessages = self.messages;
        result += 4; // vector id
        result += 4; // vector size
        for (parammessages) |parammessagesitem| {
        result += parammessagesitem.size();
        }

        // chats
        const paramchats = self.chats;
        result += 4; // vector id
        result += 4; // vector size
        for (paramchats) |paramchatsitem| {
        result += paramchatsitem.size();
        }

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesDialogsNotModified= struct {
    count: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // count
        const paramcount = self.count;
        result += @sizeOf(@TypeOf(paramcount));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MessagesMessages= struct {
    messages: []const IMessage,
    chats: []const IChat,
    users: []const IUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // messages
        const parammessages = self.messages;
        result += 4; // vector id
        result += 4; // vector size
        for (parammessages) |parammessagesitem| {
        result += parammessagesitem.size();
        }

        // chats
        const paramchats = self.chats;
        result += 4; // vector id
        result += 4; // vector size
        for (paramchats) |paramchatsitem| {
        result += paramchatsitem.size();
        }

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesMessagesSlice= struct {
    inexact: ?bool,
    count: i32,
    next_rate: ?i32,
    offset_id_offset: ?i32,
    messages: []const IMessage,
    chats: []const IChat,
    users: []const IUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // inexact
        // true flag

        // count
        const paramcount = self.count;
        result += @sizeOf(@TypeOf(paramcount));
        // next_rate
        const paramnext_rate = self.next_rate;
        if (paramnext_rate) |paramnext_rateflag| {
        result += @sizeOf(@TypeOf(paramnext_rateflag));        }

        // offset_id_offset
        const paramoffset_id_offset = self.offset_id_offset;
        if (paramoffset_id_offset) |paramoffset_id_offsetflag| {
        result += @sizeOf(@TypeOf(paramoffset_id_offsetflag));        }

        // messages
        const parammessages = self.messages;
        result += 4; // vector id
        result += 4; // vector size
        for (parammessages) |parammessagesitem| {
        result += parammessagesitem.size();
        }

        // chats
        const paramchats = self.chats;
        result += 4; // vector id
        result += 4; // vector size
        for (paramchats) |paramchatsitem| {
        result += paramchatsitem.size();
        }

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesChannelMessages= struct {
    inexact: ?bool,
    pts: i32,
    count: i32,
    offset_id_offset: ?i32,
    messages: []const IMessage,
    topics: []const IForumTopic,
    chats: []const IChat,
    users: []const IUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // inexact
        // true flag

        // pts
        const parampts = self.pts;
        result += @sizeOf(@TypeOf(parampts));
        // count
        const paramcount = self.count;
        result += @sizeOf(@TypeOf(paramcount));
        // offset_id_offset
        const paramoffset_id_offset = self.offset_id_offset;
        if (paramoffset_id_offset) |paramoffset_id_offsetflag| {
        result += @sizeOf(@TypeOf(paramoffset_id_offsetflag));        }

        // messages
        const parammessages = self.messages;
        result += 4; // vector id
        result += 4; // vector size
        for (parammessages) |parammessagesitem| {
        result += parammessagesitem.size();
        }

        // topics
        const paramtopics = self.topics;
        result += 4; // vector id
        result += 4; // vector size
        for (paramtopics) |paramtopicsitem| {
        result += paramtopicsitem.size();
        }

        // chats
        const paramchats = self.chats;
        result += 4; // vector id
        result += 4; // vector size
        for (paramchats) |paramchatsitem| {
        result += paramchatsitem.size();
        }

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesMessagesNotModified= struct {
    count: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // count
        const paramcount = self.count;
        result += @sizeOf(@TypeOf(paramcount));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MessagesChats= struct {
    chats: []const IChat,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // chats
        const paramchats = self.chats;
        result += 4; // vector id
        result += 4; // vector size
        for (paramchats) |paramchatsitem| {
        result += paramchatsitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MessagesChatsSlice= struct {
    count: i32,
    chats: []const IChat,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // count
        const paramcount = self.count;
        result += @sizeOf(@TypeOf(paramcount));
        // chats
        const paramchats = self.chats;
        result += 4; // vector id
        result += 4; // vector size
        for (paramchats) |paramchatsitem| {
        result += paramchatsitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesChatFull= struct {
    full_chat: IChatFull,
    chats: []const IChat,
    users: []const IUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // full_chat
        const paramfull_chat = self.full_chat;
        result += paramfull_chat.size();

        // chats
        const paramchats = self.chats;
        result += 4; // vector id
        result += 4; // vector size
        for (paramchats) |paramchatsitem| {
        result += paramchatsitem.size();
        }

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesAffectedHistory= struct {
    pts: i32,
    pts_count: i32,
    offset: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // pts
        const parampts = self.pts;
        result += @sizeOf(@TypeOf(parampts));
        // pts_count
        const parampts_count = self.pts_count;
        result += @sizeOf(@TypeOf(parampts_count));
        // offset
        const paramoffset = self.offset;
        result += @sizeOf(@TypeOf(paramoffset));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputMessagesFilterEmpty= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const InputMessagesFilterPhotos= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const InputMessagesFilterVideo= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const InputMessagesFilterPhotoVideo= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const InputMessagesFilterDocument= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const InputMessagesFilterUrl= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const InputMessagesFilterGif= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const InputMessagesFilterVoice= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const InputMessagesFilterMusic= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const InputMessagesFilterChatPhotos= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const InputMessagesFilterPhoneCalls= struct {
    missed: ?bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // missed
        // true flag


        _ = self;
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        }
};
const InputMessagesFilterRoundVoice= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const InputMessagesFilterRoundVideo= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const InputMessagesFilterMyMentions= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const InputMessagesFilterGeo= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const InputMessagesFilterContacts= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const InputMessagesFilterPinned= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const UpdateNewMessage= struct {
    message: IMessage,
    pts: i32,
    pts_count: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // message
        const parammessage = self.message;
        result += parammessage.size();

        // pts
        const parampts = self.pts;
        result += @sizeOf(@TypeOf(parampts));
        // pts_count
        const parampts_count = self.pts_count;
        result += @sizeOf(@TypeOf(parampts_count));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateMessageID= struct {
    id: i32,
    random_id: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // random_id
        const paramrandom_id = self.random_id;
        result += @sizeOf(@TypeOf(paramrandom_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateDeleteMessages= struct {
    messages: []const i32,
    pts: i32,
    pts_count: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // messages
        const parammessages = self.messages;
        result += 4; // vector id
        result += 4; // vector size
        for (parammessages) |parammessagesitem| {
        result += @sizeOf(@TypeOf(parammessagesitem));        }

        // pts
        const parampts = self.pts;
        result += @sizeOf(@TypeOf(parampts));
        // pts_count
        const parampts_count = self.pts_count;
        result += @sizeOf(@TypeOf(parampts_count));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateUserTyping= struct {
    user_id: i64,
    action: ISendMessageAction,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // user_id
        const paramuser_id = self.user_id;
        result += @sizeOf(@TypeOf(paramuser_id));
        // action
        const paramaction = self.action;
        result += paramaction.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateChatUserTyping= struct {
    chat_id: i64,
    from_id: IPeer,
    action: ISendMessageAction,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // chat_id
        const paramchat_id = self.chat_id;
        result += @sizeOf(@TypeOf(paramchat_id));
        // from_id
        const paramfrom_id = self.from_id;
        result += paramfrom_id.size();

        // action
        const paramaction = self.action;
        result += paramaction.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateChatParticipants= struct {
    participants: IChatParticipants,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // participants
        const paramparticipants = self.participants;
        result += paramparticipants.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const UpdateUserStatus= struct {
    user_id: i64,
    status: IUserStatus,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // user_id
        const paramuser_id = self.user_id;
        result += @sizeOf(@TypeOf(paramuser_id));
        // status
        const paramstatus = self.status;
        result += paramstatus.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateUserName= struct {
    user_id: i64,
    first_name: []const u8,
    last_name: []const u8,
    usernames: []const IUsername,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // user_id
        const paramuser_id = self.user_id;
        result += @sizeOf(@TypeOf(paramuser_id));
        // first_name
        const paramfirst_name = self.first_name;
        result += base.strEncodedSize(paramfirst_name);
        // last_name
        const paramlast_name = self.last_name;
        result += base.strEncodedSize(paramlast_name);
        // usernames
        const paramusernames = self.usernames;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusernames) |paramusernamesitem| {
        result += paramusernamesitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateNewAuthorization= struct {
    unconfirmed: ?bool,
    hash: i64,
    date: ?i32,
    device: ?[]const u8,
    location: ?[]const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // unconfirmed
        // true flag

        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        // date
        const paramdate = self.date;
        if (paramdate) |paramdateflag| {
        result += @sizeOf(@TypeOf(paramdateflag));        }

        // device
        const paramdevice = self.device;
        if (paramdevice) |paramdeviceflag| {
        result += base.strEncodedSize(paramdeviceflag);        }

        // location
        const paramlocation = self.location;
        if (paramlocation) |paramlocationflag| {
        result += base.strEncodedSize(paramlocationflag);        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateNewEncryptedMessage= struct {
    message: IEncryptedMessage,
    qts: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // message
        const parammessage = self.message;
        result += parammessage.size();

        // qts
        const paramqts = self.qts;
        result += @sizeOf(@TypeOf(paramqts));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateEncryptedChatTyping= struct {
    chat_id: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // chat_id
        const paramchat_id = self.chat_id;
        result += @sizeOf(@TypeOf(paramchat_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const UpdateEncryption= struct {
    chat: IEncryptedChat,
    date: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // chat
        const paramchat = self.chat;
        result += paramchat.size();

        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateEncryptedMessagesRead= struct {
    chat_id: i32,
    max_date: i32,
    date: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // chat_id
        const paramchat_id = self.chat_id;
        result += @sizeOf(@TypeOf(paramchat_id));
        // max_date
        const parammax_date = self.max_date;
        result += @sizeOf(@TypeOf(parammax_date));
        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateChatParticipantAdd= struct {
    chat_id: i64,
    user_id: i64,
    inviter_id: i64,
    date: i32,
    version: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // chat_id
        const paramchat_id = self.chat_id;
        result += @sizeOf(@TypeOf(paramchat_id));
        // user_id
        const paramuser_id = self.user_id;
        result += @sizeOf(@TypeOf(paramuser_id));
        // inviter_id
        const paraminviter_id = self.inviter_id;
        result += @sizeOf(@TypeOf(paraminviter_id));
        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        // version
        const paramversion = self.version;
        result += @sizeOf(@TypeOf(paramversion));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateChatParticipantDelete= struct {
    chat_id: i64,
    user_id: i64,
    version: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // chat_id
        const paramchat_id = self.chat_id;
        result += @sizeOf(@TypeOf(paramchat_id));
        // user_id
        const paramuser_id = self.user_id;
        result += @sizeOf(@TypeOf(paramuser_id));
        // version
        const paramversion = self.version;
        result += @sizeOf(@TypeOf(paramversion));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateDcOptions= struct {
    dc_options: []const IDcOption,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // dc_options
        const paramdc_options = self.dc_options;
        result += 4; // vector id
        result += 4; // vector size
        for (paramdc_options) |paramdc_optionsitem| {
        result += paramdc_optionsitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const UpdateNotifySettings= struct {
    peer: INotifyPeer,
    notify_settings: IPeerNotifySettings,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // notify_settings
        const paramnotify_settings = self.notify_settings;
        result += paramnotify_settings.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateServiceNotification= struct {
    popup: ?bool,
    invert_media: ?bool,
    inbox_date: ?i32,
    type: []const u8,
    message: []const u8,
    media: IMessageMedia,
    entities: []const IMessageEntity,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // popup
        // true flag

        // invert_media
        // true flag

        // inbox_date
        const paraminbox_date = self.inbox_date;
        if (paraminbox_date) |paraminbox_dateflag| {
        result += @sizeOf(@TypeOf(paraminbox_dateflag));        }

        // type
        const paramtype = self.Type;
        result += base.strEncodedSize(paramtype);
        // message
        const parammessage = self.message;
        result += base.strEncodedSize(parammessage);
        // media
        const parammedia = self.media;
        result += parammedia.size();

        // entities
        const paramentities = self.entities;
        result += 4; // vector id
        result += 4; // vector size
        for (paramentities) |paramentitiesitem| {
        result += paramentitiesitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdatePrivacy= struct {
    key: IPrivacyKey,
    rules: []const IPrivacyRule,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // key
        const paramkey = self.key;
        result += paramkey.size();

        // rules
        const paramrules = self.rules;
        result += 4; // vector id
        result += 4; // vector size
        for (paramrules) |paramrulesitem| {
        result += paramrulesitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateUserPhone= struct {
    user_id: i64,
    phone: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // user_id
        const paramuser_id = self.user_id;
        result += @sizeOf(@TypeOf(paramuser_id));
        // phone
        const paramphone = self.phone;
        result += base.strEncodedSize(paramphone);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateReadHistoryInbox= struct {
    folder_id: ?i32,
    peer: IPeer,
    max_id: i32,
    still_unread_count: i32,
    pts: i32,
    pts_count: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // folder_id
        const paramfolder_id = self.folder_id;
        if (paramfolder_id) |paramfolder_idflag| {
        result += @sizeOf(@TypeOf(paramfolder_idflag));        }

        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // max_id
        const parammax_id = self.max_id;
        result += @sizeOf(@TypeOf(parammax_id));
        // still_unread_count
        const paramstill_unread_count = self.still_unread_count;
        result += @sizeOf(@TypeOf(paramstill_unread_count));
        // pts
        const parampts = self.pts;
        result += @sizeOf(@TypeOf(parampts));
        // pts_count
        const parampts_count = self.pts_count;
        result += @sizeOf(@TypeOf(parampts_count));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateReadHistoryOutbox= struct {
    peer: IPeer,
    max_id: i32,
    pts: i32,
    pts_count: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // max_id
        const parammax_id = self.max_id;
        result += @sizeOf(@TypeOf(parammax_id));
        // pts
        const parampts = self.pts;
        result += @sizeOf(@TypeOf(parampts));
        // pts_count
        const parampts_count = self.pts_count;
        result += @sizeOf(@TypeOf(parampts_count));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateWebPage= struct {
    webpage: IWebPage,
    pts: i32,
    pts_count: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // webpage
        const paramwebpage = self.webpage;
        result += paramwebpage.size();

        // pts
        const parampts = self.pts;
        result += @sizeOf(@TypeOf(parampts));
        // pts_count
        const parampts_count = self.pts_count;
        result += @sizeOf(@TypeOf(parampts_count));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateReadMessagesContents= struct {
    messages: []const i32,
    pts: i32,
    pts_count: i32,
    date: ?i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // messages
        const parammessages = self.messages;
        result += 4; // vector id
        result += 4; // vector size
        for (parammessages) |parammessagesitem| {
        result += @sizeOf(@TypeOf(parammessagesitem));        }

        // pts
        const parampts = self.pts;
        result += @sizeOf(@TypeOf(parampts));
        // pts_count
        const parampts_count = self.pts_count;
        result += @sizeOf(@TypeOf(parampts_count));
        // date
        const paramdate = self.date;
        if (paramdate) |paramdateflag| {
        result += @sizeOf(@TypeOf(paramdateflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateChannelTooLong= struct {
    channel_id: i64,
    pts: ?i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // channel_id
        const paramchannel_id = self.channel_id;
        result += @sizeOf(@TypeOf(paramchannel_id));
        // pts
        const parampts = self.pts;
        if (parampts) |paramptsflag| {
        result += @sizeOf(@TypeOf(paramptsflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateChannel= struct {
    channel_id: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // channel_id
        const paramchannel_id = self.channel_id;
        result += @sizeOf(@TypeOf(paramchannel_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const UpdateNewChannelMessage= struct {
    message: IMessage,
    pts: i32,
    pts_count: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // message
        const parammessage = self.message;
        result += parammessage.size();

        // pts
        const parampts = self.pts;
        result += @sizeOf(@TypeOf(parampts));
        // pts_count
        const parampts_count = self.pts_count;
        result += @sizeOf(@TypeOf(parampts_count));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateReadChannelInbox= struct {
    folder_id: ?i32,
    channel_id: i64,
    max_id: i32,
    still_unread_count: i32,
    pts: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // folder_id
        const paramfolder_id = self.folder_id;
        if (paramfolder_id) |paramfolder_idflag| {
        result += @sizeOf(@TypeOf(paramfolder_idflag));        }

        // channel_id
        const paramchannel_id = self.channel_id;
        result += @sizeOf(@TypeOf(paramchannel_id));
        // max_id
        const parammax_id = self.max_id;
        result += @sizeOf(@TypeOf(parammax_id));
        // still_unread_count
        const paramstill_unread_count = self.still_unread_count;
        result += @sizeOf(@TypeOf(paramstill_unread_count));
        // pts
        const parampts = self.pts;
        result += @sizeOf(@TypeOf(parampts));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateDeleteChannelMessages= struct {
    channel_id: i64,
    messages: []const i32,
    pts: i32,
    pts_count: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // channel_id
        const paramchannel_id = self.channel_id;
        result += @sizeOf(@TypeOf(paramchannel_id));
        // messages
        const parammessages = self.messages;
        result += 4; // vector id
        result += 4; // vector size
        for (parammessages) |parammessagesitem| {
        result += @sizeOf(@TypeOf(parammessagesitem));        }

        // pts
        const parampts = self.pts;
        result += @sizeOf(@TypeOf(parampts));
        // pts_count
        const parampts_count = self.pts_count;
        result += @sizeOf(@TypeOf(parampts_count));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateChannelMessageViews= struct {
    channel_id: i64,
    id: i32,
    views: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // channel_id
        const paramchannel_id = self.channel_id;
        result += @sizeOf(@TypeOf(paramchannel_id));
        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // views
        const paramviews = self.views;
        result += @sizeOf(@TypeOf(paramviews));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateChatParticipantAdmin= struct {
    chat_id: i64,
    user_id: i64,
    is_admin: bool,
    version: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // chat_id
        const paramchat_id = self.chat_id;
        result += @sizeOf(@TypeOf(paramchat_id));
        // user_id
        const paramuser_id = self.user_id;
        result += @sizeOf(@TypeOf(paramuser_id));
        // is_admin
        const paramis_admin = self.is_admin;
        _ = paramis_admin;
        result += 4;
        // version
        const paramversion = self.version;
        result += @sizeOf(@TypeOf(paramversion));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateNewStickerSet= struct {
    stickerset: IMessagesStickerSet,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // stickerset
        const paramstickerset = self.stickerset;
        result += paramstickerset.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const UpdateStickerSetsOrder= struct {
    masks: ?bool,
    emojis: ?bool,
    order: []const i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // masks
        // true flag

        // emojis
        // true flag

        // order
        const paramorder = self.order;
        result += 4; // vector id
        result += 4; // vector size
        for (paramorder) |paramorderitem| {
        result += @sizeOf(@TypeOf(paramorderitem));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateStickerSets= struct {
    masks: ?bool,
    emojis: ?bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // masks
        // true flag

        // emojis
        // true flag


        _ = self;
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateSavedGifs= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const UpdateBotInlineQuery= struct {
    query_id: i64,
    user_id: i64,
    query: []const u8,
    geo: ?IGeoPoint,
    peer_type: ?IInlineQueryPeerType,
    offset: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // query_id
        const paramquery_id = self.query_id;
        result += @sizeOf(@TypeOf(paramquery_id));
        // user_id
        const paramuser_id = self.user_id;
        result += @sizeOf(@TypeOf(paramuser_id));
        // query
        const paramquery = self.query;
        result += base.strEncodedSize(paramquery);
        // geo
        const paramgeo = self.geo;
        if (paramgeo) |paramgeoflag| {
        result += paramgeoflag.size();
        }

        // peer_type
        const parampeer_type = self.peer_type;
        if (parampeer_type) |parampeer_typeflag| {
        result += parampeer_typeflag.size();
        }

        // offset
        const paramoffset = self.offset;
        result += base.strEncodedSize(paramoffset);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateBotInlineSend= struct {
    user_id: i64,
    query: []const u8,
    geo: ?IGeoPoint,
    id: []const u8,
    msg_id: ?IInputBotInlineMessageID,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // user_id
        const paramuser_id = self.user_id;
        result += @sizeOf(@TypeOf(paramuser_id));
        // query
        const paramquery = self.query;
        result += base.strEncodedSize(paramquery);
        // geo
        const paramgeo = self.geo;
        if (paramgeo) |paramgeoflag| {
        result += paramgeoflag.size();
        }

        // id
        const paramid = self.id;
        result += base.strEncodedSize(paramid);
        // msg_id
        const parammsg_id = self.msg_id;
        if (parammsg_id) |parammsg_idflag| {
        result += parammsg_idflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateEditChannelMessage= struct {
    message: IMessage,
    pts: i32,
    pts_count: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // message
        const parammessage = self.message;
        result += parammessage.size();

        // pts
        const parampts = self.pts;
        result += @sizeOf(@TypeOf(parampts));
        // pts_count
        const parampts_count = self.pts_count;
        result += @sizeOf(@TypeOf(parampts_count));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateBotCallbackQuery= struct {
    query_id: i64,
    user_id: i64,
    peer: IPeer,
    msg_id: i32,
    chat_instance: i64,
    data: ?[]const u8,
    game_short_name: ?[]const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // query_id
        const paramquery_id = self.query_id;
        result += @sizeOf(@TypeOf(paramquery_id));
        // user_id
        const paramuser_id = self.user_id;
        result += @sizeOf(@TypeOf(paramuser_id));
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // msg_id
        const parammsg_id = self.msg_id;
        result += @sizeOf(@TypeOf(parammsg_id));
        // chat_instance
        const paramchat_instance = self.chat_instance;
        result += @sizeOf(@TypeOf(paramchat_instance));
        // data
        const paramdata = self.data;
        if (paramdata) |paramdataflag| {
        result += base.strEncodedSize(paramdataflag);        }

        // game_short_name
        const paramgame_short_name = self.game_short_name;
        if (paramgame_short_name) |paramgame_short_nameflag| {
        result += base.strEncodedSize(paramgame_short_nameflag);        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateEditMessage= struct {
    message: IMessage,
    pts: i32,
    pts_count: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // message
        const parammessage = self.message;
        result += parammessage.size();

        // pts
        const parampts = self.pts;
        result += @sizeOf(@TypeOf(parampts));
        // pts_count
        const parampts_count = self.pts_count;
        result += @sizeOf(@TypeOf(parampts_count));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateInlineBotCallbackQuery= struct {
    query_id: i64,
    user_id: i64,
    msg_id: IInputBotInlineMessageID,
    chat_instance: i64,
    data: ?[]const u8,
    game_short_name: ?[]const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // query_id
        const paramquery_id = self.query_id;
        result += @sizeOf(@TypeOf(paramquery_id));
        // user_id
        const paramuser_id = self.user_id;
        result += @sizeOf(@TypeOf(paramuser_id));
        // msg_id
        const parammsg_id = self.msg_id;
        result += parammsg_id.size();

        // chat_instance
        const paramchat_instance = self.chat_instance;
        result += @sizeOf(@TypeOf(paramchat_instance));
        // data
        const paramdata = self.data;
        if (paramdata) |paramdataflag| {
        result += base.strEncodedSize(paramdataflag);        }

        // game_short_name
        const paramgame_short_name = self.game_short_name;
        if (paramgame_short_name) |paramgame_short_nameflag| {
        result += base.strEncodedSize(paramgame_short_nameflag);        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateReadChannelOutbox= struct {
    channel_id: i64,
    max_id: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // channel_id
        const paramchannel_id = self.channel_id;
        result += @sizeOf(@TypeOf(paramchannel_id));
        // max_id
        const parammax_id = self.max_id;
        result += @sizeOf(@TypeOf(parammax_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateDraftMessage= struct {
    peer: IPeer,
    top_msg_id: ?i32,
    draft: IDraftMessage,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // top_msg_id
        const paramtop_msg_id = self.top_msg_id;
        if (paramtop_msg_id) |paramtop_msg_idflag| {
        result += @sizeOf(@TypeOf(paramtop_msg_idflag));        }

        // draft
        const paramdraft = self.draft;
        result += paramdraft.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateReadFeaturedStickers= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const UpdateRecentStickers= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const UpdateConfig= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const UpdatePtsChanged= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const UpdateChannelWebPage= struct {
    channel_id: i64,
    webpage: IWebPage,
    pts: i32,
    pts_count: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // channel_id
        const paramchannel_id = self.channel_id;
        result += @sizeOf(@TypeOf(paramchannel_id));
        // webpage
        const paramwebpage = self.webpage;
        result += paramwebpage.size();

        // pts
        const parampts = self.pts;
        result += @sizeOf(@TypeOf(parampts));
        // pts_count
        const parampts_count = self.pts_count;
        result += @sizeOf(@TypeOf(parampts_count));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateDialogPinned= struct {
    pinned: ?bool,
    folder_id: ?i32,
    peer: IDialogPeer,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // pinned
        // true flag

        // folder_id
        const paramfolder_id = self.folder_id;
        if (paramfolder_id) |paramfolder_idflag| {
        result += @sizeOf(@TypeOf(paramfolder_idflag));        }

        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdatePinnedDialogs= struct {
    folder_id: ?i32,
    order: ?[]const IDialogPeer,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // folder_id
        const paramfolder_id = self.folder_id;
        if (paramfolder_id) |paramfolder_idflag| {
        result += @sizeOf(@TypeOf(paramfolder_idflag));        }

        // order
        const paramorder = self.order;
        if (paramorder) |paramorderflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramorderflag) |paramorderflagitem| {
        result += paramorderflagitem.size();
        }
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateBotWebhookJSON= struct {
    data: IDataJSON,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // data
        const paramdata = self.data;
        result += paramdata.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const UpdateBotWebhookJSONQuery= struct {
    query_id: i64,
    data: IDataJSON,
    timeout: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // query_id
        const paramquery_id = self.query_id;
        result += @sizeOf(@TypeOf(paramquery_id));
        // data
        const paramdata = self.data;
        result += paramdata.size();

        // timeout
        const paramtimeout = self.timeout;
        result += @sizeOf(@TypeOf(paramtimeout));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateBotShippingQuery= struct {
    query_id: i64,
    user_id: i64,
    payload: []const u8,
    shipping_address: IPostAddress,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // query_id
        const paramquery_id = self.query_id;
        result += @sizeOf(@TypeOf(paramquery_id));
        // user_id
        const paramuser_id = self.user_id;
        result += @sizeOf(@TypeOf(paramuser_id));
        // payload
        const parampayload = self.payload;
        result += base.strEncodedSize(parampayload);
        // shipping_address
        const paramshipping_address = self.shipping_address;
        result += paramshipping_address.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateBotPrecheckoutQuery= struct {
    query_id: i64,
    user_id: i64,
    payload: []const u8,
    info: ?IPaymentRequestedInfo,
    shipping_option_id: ?[]const u8,
    currency: []const u8,
    total_amount: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // query_id
        const paramquery_id = self.query_id;
        result += @sizeOf(@TypeOf(paramquery_id));
        // user_id
        const paramuser_id = self.user_id;
        result += @sizeOf(@TypeOf(paramuser_id));
        // payload
        const parampayload = self.payload;
        result += base.strEncodedSize(parampayload);
        // info
        const paraminfo = self.info;
        if (paraminfo) |paraminfoflag| {
        result += paraminfoflag.size();
        }

        // shipping_option_id
        const paramshipping_option_id = self.shipping_option_id;
        if (paramshipping_option_id) |paramshipping_option_idflag| {
        result += base.strEncodedSize(paramshipping_option_idflag);        }

        // currency
        const paramcurrency = self.currency;
        result += base.strEncodedSize(paramcurrency);
        // total_amount
        const paramtotal_amount = self.total_amount;
        result += @sizeOf(@TypeOf(paramtotal_amount));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdatePhoneCall= struct {
    phone_call: IPhoneCall,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // phone_call
        const paramphone_call = self.phone_call;
        result += paramphone_call.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const UpdateLangPackTooLong= struct {
    lang_code: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // lang_code
        const paramlang_code = self.lang_code;
        result += base.strEncodedSize(paramlang_code);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const UpdateLangPack= struct {
    difference: ILangPackDifference,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // difference
        const paramdifference = self.difference;
        result += paramdifference.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const UpdateFavedStickers= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const UpdateChannelReadMessagesContents= struct {
    channel_id: i64,
    top_msg_id: ?i32,
    messages: []const i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // channel_id
        const paramchannel_id = self.channel_id;
        result += @sizeOf(@TypeOf(paramchannel_id));
        // top_msg_id
        const paramtop_msg_id = self.top_msg_id;
        if (paramtop_msg_id) |paramtop_msg_idflag| {
        result += @sizeOf(@TypeOf(paramtop_msg_idflag));        }

        // messages
        const parammessages = self.messages;
        result += 4; // vector id
        result += 4; // vector size
        for (parammessages) |parammessagesitem| {
        result += @sizeOf(@TypeOf(parammessagesitem));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateContactsReset= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const UpdateChannelAvailableMessages= struct {
    channel_id: i64,
    available_min_id: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // channel_id
        const paramchannel_id = self.channel_id;
        result += @sizeOf(@TypeOf(paramchannel_id));
        // available_min_id
        const paramavailable_min_id = self.available_min_id;
        result += @sizeOf(@TypeOf(paramavailable_min_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateDialogUnreadMark= struct {
    unread: ?bool,
    peer: IDialogPeer,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // unread
        // true flag

        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateMessagePoll= struct {
    poll_id: i64,
    poll: ?IPoll,
    results: IPollResults,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // poll_id
        const parampoll_id = self.poll_id;
        result += @sizeOf(@TypeOf(parampoll_id));
        // poll
        const parampoll = self.poll;
        if (parampoll) |parampollflag| {
        result += parampollflag.size();
        }

        // results
        const paramresults = self.results;
        result += paramresults.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateChatDefaultBannedRights= struct {
    peer: IPeer,
    default_banned_rights: IChatBannedRights,
    version: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // default_banned_rights
        const paramdefault_banned_rights = self.default_banned_rights;
        result += paramdefault_banned_rights.size();

        // version
        const paramversion = self.version;
        result += @sizeOf(@TypeOf(paramversion));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateFolderPeers= struct {
    folder_peers: []const IFolderPeer,
    pts: i32,
    pts_count: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // folder_peers
        const paramfolder_peers = self.folder_peers;
        result += 4; // vector id
        result += 4; // vector size
        for (paramfolder_peers) |paramfolder_peersitem| {
        result += paramfolder_peersitem.size();
        }

        // pts
        const parampts = self.pts;
        result += @sizeOf(@TypeOf(parampts));
        // pts_count
        const parampts_count = self.pts_count;
        result += @sizeOf(@TypeOf(parampts_count));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdatePeerSettings= struct {
    peer: IPeer,
    settings: IPeerSettings,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // settings
        const paramsettings = self.settings;
        result += paramsettings.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdatePeerLocated= struct {
    peers: []const IPeerLocated,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peers
        const parampeers = self.peers;
        result += 4; // vector id
        result += 4; // vector size
        for (parampeers) |parampeersitem| {
        result += parampeersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const UpdateNewScheduledMessage= struct {
    message: IMessage,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // message
        const parammessage = self.message;
        result += parammessage.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const UpdateDeleteScheduledMessages= struct {
    peer: IPeer,
    messages: []const i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // messages
        const parammessages = self.messages;
        result += 4; // vector id
        result += 4; // vector size
        for (parammessages) |parammessagesitem| {
        result += @sizeOf(@TypeOf(parammessagesitem));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateTheme= struct {
    theme: ITheme,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // theme
        const paramtheme = self.theme;
        result += paramtheme.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const UpdateGeoLiveViewed= struct {
    peer: IPeer,
    msg_id: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // msg_id
        const parammsg_id = self.msg_id;
        result += @sizeOf(@TypeOf(parammsg_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateLoginToken= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const UpdateMessagePollVote= struct {
    poll_id: i64,
    peer: IPeer,
    options: []const []const u8,
    qts: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // poll_id
        const parampoll_id = self.poll_id;
        result += @sizeOf(@TypeOf(parampoll_id));
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // options
        const paramoptions = self.options;
        result += 4; // vector id
        result += 4; // vector size
        for (paramoptions) |paramoptionsitem| {
        result += base.strEncodedSize(paramoptionsitem);        }

        // qts
        const paramqts = self.qts;
        result += @sizeOf(@TypeOf(paramqts));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateDialogFilter= struct {
    id: i32,
    filter: ?IDialogFilter,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // filter
        const paramfilter = self.filter;
        if (paramfilter) |paramfilterflag| {
        result += paramfilterflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateDialogFilterOrder= struct {
    order: []const i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // order
        const paramorder = self.order;
        result += 4; // vector id
        result += 4; // vector size
        for (paramorder) |paramorderitem| {
        result += @sizeOf(@TypeOf(paramorderitem));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const UpdateDialogFilters= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const UpdatePhoneCallSignalingData= struct {
    phone_call_id: i64,
    data: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // phone_call_id
        const paramphone_call_id = self.phone_call_id;
        result += @sizeOf(@TypeOf(paramphone_call_id));
        // data
        const paramdata = self.data;
        result += base.strEncodedSize(paramdata);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateChannelMessageForwards= struct {
    channel_id: i64,
    id: i32,
    forwards: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // channel_id
        const paramchannel_id = self.channel_id;
        result += @sizeOf(@TypeOf(paramchannel_id));
        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // forwards
        const paramforwards = self.forwards;
        result += @sizeOf(@TypeOf(paramforwards));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateReadChannelDiscussionInbox= struct {
    channel_id: i64,
    top_msg_id: i32,
    read_max_id: i32,
    broadcast_id: ?i64,
    broadcast_post: ?i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // channel_id
        const paramchannel_id = self.channel_id;
        result += @sizeOf(@TypeOf(paramchannel_id));
        // top_msg_id
        const paramtop_msg_id = self.top_msg_id;
        result += @sizeOf(@TypeOf(paramtop_msg_id));
        // read_max_id
        const paramread_max_id = self.read_max_id;
        result += @sizeOf(@TypeOf(paramread_max_id));
        // broadcast_id
        const parambroadcast_id = self.broadcast_id;
        if (parambroadcast_id) |parambroadcast_idflag| {
        result += @sizeOf(@TypeOf(parambroadcast_idflag));        }

        // broadcast_post
        const parambroadcast_post = self.broadcast_post;
        if (parambroadcast_post) |parambroadcast_postflag| {
        result += @sizeOf(@TypeOf(parambroadcast_postflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateReadChannelDiscussionOutbox= struct {
    channel_id: i64,
    top_msg_id: i32,
    read_max_id: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // channel_id
        const paramchannel_id = self.channel_id;
        result += @sizeOf(@TypeOf(paramchannel_id));
        // top_msg_id
        const paramtop_msg_id = self.top_msg_id;
        result += @sizeOf(@TypeOf(paramtop_msg_id));
        // read_max_id
        const paramread_max_id = self.read_max_id;
        result += @sizeOf(@TypeOf(paramread_max_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdatePeerBlocked= struct {
    blocked: ?bool,
    blocked_my_stories_from: ?bool,
    peer_id: IPeer,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // blocked
        // true flag

        // blocked_my_stories_from
        // true flag

        // peer_id
        const parampeer_id = self.peer_id;
        result += parampeer_id.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateChannelUserTyping= struct {
    channel_id: i64,
    top_msg_id: ?i32,
    from_id: IPeer,
    action: ISendMessageAction,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // channel_id
        const paramchannel_id = self.channel_id;
        result += @sizeOf(@TypeOf(paramchannel_id));
        // top_msg_id
        const paramtop_msg_id = self.top_msg_id;
        if (paramtop_msg_id) |paramtop_msg_idflag| {
        result += @sizeOf(@TypeOf(paramtop_msg_idflag));        }

        // from_id
        const paramfrom_id = self.from_id;
        result += paramfrom_id.size();

        // action
        const paramaction = self.action;
        result += paramaction.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdatePinnedMessages= struct {
    pinned: ?bool,
    peer: IPeer,
    messages: []const i32,
    pts: i32,
    pts_count: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // pinned
        // true flag

        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // messages
        const parammessages = self.messages;
        result += 4; // vector id
        result += 4; // vector size
        for (parammessages) |parammessagesitem| {
        result += @sizeOf(@TypeOf(parammessagesitem));        }

        // pts
        const parampts = self.pts;
        result += @sizeOf(@TypeOf(parampts));
        // pts_count
        const parampts_count = self.pts_count;
        result += @sizeOf(@TypeOf(parampts_count));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdatePinnedChannelMessages= struct {
    pinned: ?bool,
    channel_id: i64,
    messages: []const i32,
    pts: i32,
    pts_count: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // pinned
        // true flag

        // channel_id
        const paramchannel_id = self.channel_id;
        result += @sizeOf(@TypeOf(paramchannel_id));
        // messages
        const parammessages = self.messages;
        result += 4; // vector id
        result += 4; // vector size
        for (parammessages) |parammessagesitem| {
        result += @sizeOf(@TypeOf(parammessagesitem));        }

        // pts
        const parampts = self.pts;
        result += @sizeOf(@TypeOf(parampts));
        // pts_count
        const parampts_count = self.pts_count;
        result += @sizeOf(@TypeOf(parampts_count));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateChat= struct {
    chat_id: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // chat_id
        const paramchat_id = self.chat_id;
        result += @sizeOf(@TypeOf(paramchat_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const UpdateGroupCallParticipants= struct {
    call: IInputGroupCall,
    participants: []const IGroupCallParticipant,
    version: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // call
        const paramcall = self.call;
        result += paramcall.size();

        // participants
        const paramparticipants = self.participants;
        result += 4; // vector id
        result += 4; // vector size
        for (paramparticipants) |paramparticipantsitem| {
        result += paramparticipantsitem.size();
        }

        // version
        const paramversion = self.version;
        result += @sizeOf(@TypeOf(paramversion));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateGroupCall= struct {
    chat_id: i64,
    call: IGroupCall,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // chat_id
        const paramchat_id = self.chat_id;
        result += @sizeOf(@TypeOf(paramchat_id));
        // call
        const paramcall = self.call;
        result += paramcall.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdatePeerHistoryTTL= struct {
    peer: IPeer,
    ttl_period: ?i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // ttl_period
        const paramttl_period = self.ttl_period;
        if (paramttl_period) |paramttl_periodflag| {
        result += @sizeOf(@TypeOf(paramttl_periodflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateChatParticipant= struct {
    chat_id: i64,
    date: i32,
    actor_id: i64,
    user_id: i64,
    prev_participant: ?IChatParticipant,
    new_participant: ?IChatParticipant,
    invite: ?IExportedChatInvite,
    qts: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // chat_id
        const paramchat_id = self.chat_id;
        result += @sizeOf(@TypeOf(paramchat_id));
        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        // actor_id
        const paramactor_id = self.actor_id;
        result += @sizeOf(@TypeOf(paramactor_id));
        // user_id
        const paramuser_id = self.user_id;
        result += @sizeOf(@TypeOf(paramuser_id));
        // prev_participant
        const paramprev_participant = self.prev_participant;
        if (paramprev_participant) |paramprev_participantflag| {
        result += paramprev_participantflag.size();
        }

        // new_participant
        const paramnew_participant = self.new_participant;
        if (paramnew_participant) |paramnew_participantflag| {
        result += paramnew_participantflag.size();
        }

        // invite
        const paraminvite = self.invite;
        if (paraminvite) |paraminviteflag| {
        result += paraminviteflag.size();
        }

        // qts
        const paramqts = self.qts;
        result += @sizeOf(@TypeOf(paramqts));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateChannelParticipant= struct {
    via_chatlist: ?bool,
    channel_id: i64,
    date: i32,
    actor_id: i64,
    user_id: i64,
    prev_participant: ?IChannelParticipant,
    new_participant: ?IChannelParticipant,
    invite: ?IExportedChatInvite,
    qts: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // via_chatlist
        // true flag

        // channel_id
        const paramchannel_id = self.channel_id;
        result += @sizeOf(@TypeOf(paramchannel_id));
        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        // actor_id
        const paramactor_id = self.actor_id;
        result += @sizeOf(@TypeOf(paramactor_id));
        // user_id
        const paramuser_id = self.user_id;
        result += @sizeOf(@TypeOf(paramuser_id));
        // prev_participant
        const paramprev_participant = self.prev_participant;
        if (paramprev_participant) |paramprev_participantflag| {
        result += paramprev_participantflag.size();
        }

        // new_participant
        const paramnew_participant = self.new_participant;
        if (paramnew_participant) |paramnew_participantflag| {
        result += paramnew_participantflag.size();
        }

        // invite
        const paraminvite = self.invite;
        if (paraminvite) |paraminviteflag| {
        result += paraminviteflag.size();
        }

        // qts
        const paramqts = self.qts;
        result += @sizeOf(@TypeOf(paramqts));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateBotStopped= struct {
    user_id: i64,
    date: i32,
    stopped: bool,
    qts: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // user_id
        const paramuser_id = self.user_id;
        result += @sizeOf(@TypeOf(paramuser_id));
        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        // stopped
        const paramstopped = self.stopped;
        _ = paramstopped;
        result += 4;
        // qts
        const paramqts = self.qts;
        result += @sizeOf(@TypeOf(paramqts));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateGroupCallConnection= struct {
    presentation: ?bool,
    params: IDataJSON,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // presentation
        // true flag

        // params
        const paramparams = self.params;
        result += paramparams.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateBotCommands= struct {
    peer: IPeer,
    bot_id: i64,
    commands: []const IBotCommand,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // bot_id
        const parambot_id = self.bot_id;
        result += @sizeOf(@TypeOf(parambot_id));
        // commands
        const paramcommands = self.commands;
        result += 4; // vector id
        result += 4; // vector size
        for (paramcommands) |paramcommandsitem| {
        result += paramcommandsitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdatePendingJoinRequests= struct {
    peer: IPeer,
    requests_pending: i32,
    recent_requesters: []const i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // requests_pending
        const paramrequests_pending = self.requests_pending;
        result += @sizeOf(@TypeOf(paramrequests_pending));
        // recent_requesters
        const paramrecent_requesters = self.recent_requesters;
        result += 4; // vector id
        result += 4; // vector size
        for (paramrecent_requesters) |paramrecent_requestersitem| {
        result += @sizeOf(@TypeOf(paramrecent_requestersitem));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateBotChatInviteRequester= struct {
    peer: IPeer,
    date: i32,
    user_id: i64,
    about: []const u8,
    invite: IExportedChatInvite,
    qts: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        // user_id
        const paramuser_id = self.user_id;
        result += @sizeOf(@TypeOf(paramuser_id));
        // about
        const paramabout = self.about;
        result += base.strEncodedSize(paramabout);
        // invite
        const paraminvite = self.invite;
        result += paraminvite.size();

        // qts
        const paramqts = self.qts;
        result += @sizeOf(@TypeOf(paramqts));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateMessageReactions= struct {
    peer: IPeer,
    msg_id: i32,
    top_msg_id: ?i32,
    reactions: IMessageReactions,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // msg_id
        const parammsg_id = self.msg_id;
        result += @sizeOf(@TypeOf(parammsg_id));
        // top_msg_id
        const paramtop_msg_id = self.top_msg_id;
        if (paramtop_msg_id) |paramtop_msg_idflag| {
        result += @sizeOf(@TypeOf(paramtop_msg_idflag));        }

        // reactions
        const paramreactions = self.reactions;
        result += paramreactions.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateAttachMenuBots= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const UpdateWebViewResultSent= struct {
    query_id: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // query_id
        const paramquery_id = self.query_id;
        result += @sizeOf(@TypeOf(paramquery_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const UpdateBotMenuButton= struct {
    bot_id: i64,
    button: IBotMenuButton,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // bot_id
        const parambot_id = self.bot_id;
        result += @sizeOf(@TypeOf(parambot_id));
        // button
        const parambutton = self.button;
        result += parambutton.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateSavedRingtones= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const UpdateTranscribedAudio= struct {
    pending: ?bool,
    peer: IPeer,
    msg_id: i32,
    transcription_id: i64,
    text: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // pending
        // true flag

        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // msg_id
        const parammsg_id = self.msg_id;
        result += @sizeOf(@TypeOf(parammsg_id));
        // transcription_id
        const paramtranscription_id = self.transcription_id;
        result += @sizeOf(@TypeOf(paramtranscription_id));
        // text
        const paramtext = self.text;
        result += base.strEncodedSize(paramtext);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateReadFeaturedEmojiStickers= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const UpdateUserEmojiStatus= struct {
    user_id: i64,
    emoji_status: IEmojiStatus,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // user_id
        const paramuser_id = self.user_id;
        result += @sizeOf(@TypeOf(paramuser_id));
        // emoji_status
        const paramemoji_status = self.emoji_status;
        result += paramemoji_status.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateRecentEmojiStatuses= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const UpdateRecentReactions= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const UpdateMoveStickerSetToTop= struct {
    masks: ?bool,
    emojis: ?bool,
    stickerset: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // masks
        // true flag

        // emojis
        // true flag

        // stickerset
        const paramstickerset = self.stickerset;
        result += @sizeOf(@TypeOf(paramstickerset));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateMessageExtendedMedia= struct {
    peer: IPeer,
    msg_id: i32,
    extended_media: []const IMessageExtendedMedia,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // msg_id
        const parammsg_id = self.msg_id;
        result += @sizeOf(@TypeOf(parammsg_id));
        // extended_media
        const paramextended_media = self.extended_media;
        result += 4; // vector id
        result += 4; // vector size
        for (paramextended_media) |paramextended_mediaitem| {
        result += paramextended_mediaitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateChannelPinnedTopic= struct {
    pinned: ?bool,
    channel_id: i64,
    topic_id: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // pinned
        // true flag

        // channel_id
        const paramchannel_id = self.channel_id;
        result += @sizeOf(@TypeOf(paramchannel_id));
        // topic_id
        const paramtopic_id = self.topic_id;
        result += @sizeOf(@TypeOf(paramtopic_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateChannelPinnedTopics= struct {
    channel_id: i64,
    order: ?[]const i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // channel_id
        const paramchannel_id = self.channel_id;
        result += @sizeOf(@TypeOf(paramchannel_id));
        // order
        const paramorder = self.order;
        if (paramorder) |paramorderflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramorderflag) |paramorderflagitem| {
        result += @sizeOf(@TypeOf(paramorderflagitem));        }
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateUser= struct {
    user_id: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // user_id
        const paramuser_id = self.user_id;
        result += @sizeOf(@TypeOf(paramuser_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const UpdateAutoSaveSettings= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const UpdateStory= struct {
    peer: IPeer,
    story: IStoryItem,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // story
        const paramstory = self.story;
        result += paramstory.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateReadStories= struct {
    peer: IPeer,
    max_id: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // max_id
        const parammax_id = self.max_id;
        result += @sizeOf(@TypeOf(parammax_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateStoryID= struct {
    id: i32,
    random_id: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // random_id
        const paramrandom_id = self.random_id;
        result += @sizeOf(@TypeOf(paramrandom_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateStoriesStealthMode= struct {
    stealth_mode: IStoriesStealthMode,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // stealth_mode
        const paramstealth_mode = self.stealth_mode;
        result += paramstealth_mode.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const UpdateSentStoryReaction= struct {
    peer: IPeer,
    story_id: i32,
    reaction: IReaction,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // story_id
        const paramstory_id = self.story_id;
        result += @sizeOf(@TypeOf(paramstory_id));
        // reaction
        const paramreaction = self.reaction;
        result += paramreaction.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateBotChatBoost= struct {
    peer: IPeer,
    boost: IBoost,
    qts: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // boost
        const paramboost = self.boost;
        result += paramboost.size();

        // qts
        const paramqts = self.qts;
        result += @sizeOf(@TypeOf(paramqts));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateChannelViewForumAsMessages= struct {
    channel_id: i64,
    enabled: bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // channel_id
        const paramchannel_id = self.channel_id;
        result += @sizeOf(@TypeOf(paramchannel_id));
        // enabled
        const paramenabled = self.enabled;
        _ = paramenabled;
        result += 4;
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdatePeerWallpaper= struct {
    wallpaper_overridden: ?bool,
    peer: IPeer,
    wallpaper: ?IWallPaper,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // wallpaper_overridden
        // true flag

        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // wallpaper
        const paramwallpaper = self.wallpaper;
        if (paramwallpaper) |paramwallpaperflag| {
        result += paramwallpaperflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateBotMessageReaction= struct {
    peer: IPeer,
    msg_id: i32,
    date: i32,
    actor: IPeer,
    old_reactions: []const IReaction,
    new_reactions: []const IReaction,
    qts: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // msg_id
        const parammsg_id = self.msg_id;
        result += @sizeOf(@TypeOf(parammsg_id));
        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        // actor
        const paramactor = self.actor;
        result += paramactor.size();

        // old_reactions
        const paramold_reactions = self.old_reactions;
        result += 4; // vector id
        result += 4; // vector size
        for (paramold_reactions) |paramold_reactionsitem| {
        result += paramold_reactionsitem.size();
        }

        // new_reactions
        const paramnew_reactions = self.new_reactions;
        result += 4; // vector id
        result += 4; // vector size
        for (paramnew_reactions) |paramnew_reactionsitem| {
        result += paramnew_reactionsitem.size();
        }

        // qts
        const paramqts = self.qts;
        result += @sizeOf(@TypeOf(paramqts));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateBotMessageReactions= struct {
    peer: IPeer,
    msg_id: i32,
    date: i32,
    reactions: []const IReactionCount,
    qts: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // msg_id
        const parammsg_id = self.msg_id;
        result += @sizeOf(@TypeOf(parammsg_id));
        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        // reactions
        const paramreactions = self.reactions;
        result += 4; // vector id
        result += 4; // vector size
        for (paramreactions) |paramreactionsitem| {
        result += paramreactionsitem.size();
        }

        // qts
        const paramqts = self.qts;
        result += @sizeOf(@TypeOf(paramqts));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateSavedDialogPinned= struct {
    pinned: ?bool,
    peer: IDialogPeer,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // pinned
        // true flag

        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdatePinnedSavedDialogs= struct {
    order: ?[]const IDialogPeer,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // order
        const paramorder = self.order;
        if (paramorder) |paramorderflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramorderflag) |paramorderflagitem| {
        result += paramorderflagitem.size();
        }
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        }
};
const UpdateSavedReactionTags= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const UpdateSmsJob= struct {
    job_id: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // job_id
        const paramjob_id = self.job_id;
        result += base.strEncodedSize(paramjob_id);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const UpdateQuickReplies= struct {
    quick_replies: []const IQuickReply,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // quick_replies
        const paramquick_replies = self.quick_replies;
        result += 4; // vector id
        result += 4; // vector size
        for (paramquick_replies) |paramquick_repliesitem| {
        result += paramquick_repliesitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const UpdateNewQuickReply= struct {
    quick_reply: IQuickReply,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // quick_reply
        const paramquick_reply = self.quick_reply;
        result += paramquick_reply.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const UpdateDeleteQuickReply= struct {
    shortcut_id: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // shortcut_id
        const paramshortcut_id = self.shortcut_id;
        result += @sizeOf(@TypeOf(paramshortcut_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const UpdateQuickReplyMessage= struct {
    message: IMessage,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // message
        const parammessage = self.message;
        result += parammessage.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const UpdateDeleteQuickReplyMessages= struct {
    shortcut_id: i32,
    messages: []const i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // shortcut_id
        const paramshortcut_id = self.shortcut_id;
        result += @sizeOf(@TypeOf(paramshortcut_id));
        // messages
        const parammessages = self.messages;
        result += 4; // vector id
        result += 4; // vector size
        for (parammessages) |parammessagesitem| {
        result += @sizeOf(@TypeOf(parammessagesitem));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateBotBusinessConnect= struct {
    connection: IBotBusinessConnection,
    qts: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // connection
        const paramconnection = self.connection;
        result += paramconnection.size();

        // qts
        const paramqts = self.qts;
        result += @sizeOf(@TypeOf(paramqts));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateBotNewBusinessMessage= struct {
    connection_id: []const u8,
    message: IMessage,
    reply_to_message: ?IMessage,
    qts: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // connection_id
        const paramconnection_id = self.connection_id;
        result += base.strEncodedSize(paramconnection_id);
        // message
        const parammessage = self.message;
        result += parammessage.size();

        // reply_to_message
        const paramreply_to_message = self.reply_to_message;
        if (paramreply_to_message) |paramreply_to_messageflag| {
        result += paramreply_to_messageflag.size();
        }

        // qts
        const paramqts = self.qts;
        result += @sizeOf(@TypeOf(paramqts));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateBotEditBusinessMessage= struct {
    connection_id: []const u8,
    message: IMessage,
    reply_to_message: ?IMessage,
    qts: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // connection_id
        const paramconnection_id = self.connection_id;
        result += base.strEncodedSize(paramconnection_id);
        // message
        const parammessage = self.message;
        result += parammessage.size();

        // reply_to_message
        const paramreply_to_message = self.reply_to_message;
        if (paramreply_to_message) |paramreply_to_messageflag| {
        result += paramreply_to_messageflag.size();
        }

        // qts
        const paramqts = self.qts;
        result += @sizeOf(@TypeOf(paramqts));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateBotDeleteBusinessMessage= struct {
    connection_id: []const u8,
    peer: IPeer,
    messages: []const i32,
    qts: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // connection_id
        const paramconnection_id = self.connection_id;
        result += base.strEncodedSize(paramconnection_id);
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // messages
        const parammessages = self.messages;
        result += 4; // vector id
        result += 4; // vector size
        for (parammessages) |parammessagesitem| {
        result += @sizeOf(@TypeOf(parammessagesitem));        }

        // qts
        const paramqts = self.qts;
        result += @sizeOf(@TypeOf(paramqts));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateNewStoryReaction= struct {
    story_id: i32,
    peer: IPeer,
    reaction: IReaction,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // story_id
        const paramstory_id = self.story_id;
        result += @sizeOf(@TypeOf(paramstory_id));
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // reaction
        const paramreaction = self.reaction;
        result += paramreaction.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateBroadcastRevenueTransactions= struct {
    peer: IPeer,
    balances: IBroadcastRevenueBalances,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // balances
        const parambalances = self.balances;
        result += parambalances.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateStarsBalance= struct {
    balance: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // balance
        const parambalance = self.balance;
        result += @sizeOf(@TypeOf(parambalance));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const UpdateBusinessBotCallbackQuery= struct {
    query_id: i64,
    user_id: i64,
    connection_id: []const u8,
    message: IMessage,
    reply_to_message: ?IMessage,
    chat_instance: i64,
    data: ?[]const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // query_id
        const paramquery_id = self.query_id;
        result += @sizeOf(@TypeOf(paramquery_id));
        // user_id
        const paramuser_id = self.user_id;
        result += @sizeOf(@TypeOf(paramuser_id));
        // connection_id
        const paramconnection_id = self.connection_id;
        result += base.strEncodedSize(paramconnection_id);
        // message
        const parammessage = self.message;
        result += parammessage.size();

        // reply_to_message
        const paramreply_to_message = self.reply_to_message;
        if (paramreply_to_message) |paramreply_to_messageflag| {
        result += paramreply_to_messageflag.size();
        }

        // chat_instance
        const paramchat_instance = self.chat_instance;
        result += @sizeOf(@TypeOf(paramchat_instance));
        // data
        const paramdata = self.data;
        if (paramdata) |paramdataflag| {
        result += base.strEncodedSize(paramdataflag);        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateStarsRevenueStatus= struct {
    peer: IPeer,
    status: IStarsRevenueStatus,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // status
        const paramstatus = self.status;
        result += paramstatus.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateBotPurchasedPaidMedia= struct {
    user_id: i64,
    payload: []const u8,
    qts: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // user_id
        const paramuser_id = self.user_id;
        result += @sizeOf(@TypeOf(paramuser_id));
        // payload
        const parampayload = self.payload;
        result += base.strEncodedSize(parampayload);
        // qts
        const paramqts = self.qts;
        result += @sizeOf(@TypeOf(paramqts));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdatePaidReactionPrivacy= struct {
    private: bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // private
        const paramprivate = self.private;
        _ = paramprivate;
        result += 4;
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const UpdatesState= struct {
    pts: i32,
    qts: i32,
    date: i32,
    seq: i32,
    unread_count: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // pts
        const parampts = self.pts;
        result += @sizeOf(@TypeOf(parampts));
        // qts
        const paramqts = self.qts;
        result += @sizeOf(@TypeOf(paramqts));
        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        // seq
        const paramseq = self.seq;
        result += @sizeOf(@TypeOf(paramseq));
        // unread_count
        const paramunread_count = self.unread_count;
        result += @sizeOf(@TypeOf(paramunread_count));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdatesDifferenceEmpty= struct {
    date: i32,
    seq: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        // seq
        const paramseq = self.seq;
        result += @sizeOf(@TypeOf(paramseq));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdatesDifference= struct {
    new_messages: []const IMessage,
    new_encrypted_messages: []const IEncryptedMessage,
    other_updates: []const IUpdate,
    chats: []const IChat,
    users: []const IUser,
    state: IUpdatesState,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // new_messages
        const paramnew_messages = self.new_messages;
        result += 4; // vector id
        result += 4; // vector size
        for (paramnew_messages) |paramnew_messagesitem| {
        result += paramnew_messagesitem.size();
        }

        // new_encrypted_messages
        const paramnew_encrypted_messages = self.new_encrypted_messages;
        result += 4; // vector id
        result += 4; // vector size
        for (paramnew_encrypted_messages) |paramnew_encrypted_messagesitem| {
        result += paramnew_encrypted_messagesitem.size();
        }

        // other_updates
        const paramother_updates = self.other_updates;
        result += 4; // vector id
        result += 4; // vector size
        for (paramother_updates) |paramother_updatesitem| {
        result += paramother_updatesitem.size();
        }

        // chats
        const paramchats = self.chats;
        result += 4; // vector id
        result += 4; // vector size
        for (paramchats) |paramchatsitem| {
        result += paramchatsitem.size();
        }

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        // state
        const paramstate = self.state;
        result += paramstate.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdatesDifferenceSlice= struct {
    new_messages: []const IMessage,
    new_encrypted_messages: []const IEncryptedMessage,
    other_updates: []const IUpdate,
    chats: []const IChat,
    users: []const IUser,
    intermediate_state: IUpdatesState,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // new_messages
        const paramnew_messages = self.new_messages;
        result += 4; // vector id
        result += 4; // vector size
        for (paramnew_messages) |paramnew_messagesitem| {
        result += paramnew_messagesitem.size();
        }

        // new_encrypted_messages
        const paramnew_encrypted_messages = self.new_encrypted_messages;
        result += 4; // vector id
        result += 4; // vector size
        for (paramnew_encrypted_messages) |paramnew_encrypted_messagesitem| {
        result += paramnew_encrypted_messagesitem.size();
        }

        // other_updates
        const paramother_updates = self.other_updates;
        result += 4; // vector id
        result += 4; // vector size
        for (paramother_updates) |paramother_updatesitem| {
        result += paramother_updatesitem.size();
        }

        // chats
        const paramchats = self.chats;
        result += 4; // vector id
        result += 4; // vector size
        for (paramchats) |paramchatsitem| {
        result += paramchatsitem.size();
        }

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        // intermediate_state
        const paramintermediate_state = self.intermediate_state;
        result += paramintermediate_state.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdatesDifferenceTooLong= struct {
    pts: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // pts
        const parampts = self.pts;
        result += @sizeOf(@TypeOf(parampts));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const UpdatesTooLong= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const UpdateShortMessage= struct {
    out: ?bool,
    mentioned: ?bool,
    media_unread: ?bool,
    silent: ?bool,
    id: i32,
    user_id: i64,
    message: []const u8,
    pts: i32,
    pts_count: i32,
    date: i32,
    fwd_from: ?IMessageFwdHeader,
    via_bot_id: ?i64,
    reply_to: ?IMessageReplyHeader,
    entities: ?[]const IMessageEntity,
    ttl_period: ?i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // out
        // true flag

        // mentioned
        // true flag

        // media_unread
        // true flag

        // silent
        // true flag

        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // user_id
        const paramuser_id = self.user_id;
        result += @sizeOf(@TypeOf(paramuser_id));
        // message
        const parammessage = self.message;
        result += base.strEncodedSize(parammessage);
        // pts
        const parampts = self.pts;
        result += @sizeOf(@TypeOf(parampts));
        // pts_count
        const parampts_count = self.pts_count;
        result += @sizeOf(@TypeOf(parampts_count));
        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        // fwd_from
        const paramfwd_from = self.fwd_from;
        if (paramfwd_from) |paramfwd_fromflag| {
        result += paramfwd_fromflag.size();
        }

        // via_bot_id
        const paramvia_bot_id = self.via_bot_id;
        if (paramvia_bot_id) |paramvia_bot_idflag| {
        result += @sizeOf(@TypeOf(paramvia_bot_idflag));        }

        // reply_to
        const paramreply_to = self.reply_to;
        if (paramreply_to) |paramreply_toflag| {
        result += paramreply_toflag.size();
        }

        // entities
        const paramentities = self.entities;
        if (paramentities) |paramentitiesflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramentitiesflag) |paramentitiesflagitem| {
        result += paramentitiesflagitem.size();
        }
        }

        // ttl_period
        const paramttl_period = self.ttl_period;
        if (paramttl_period) |paramttl_periodflag| {
        result += @sizeOf(@TypeOf(paramttl_periodflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 13;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 11;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 7;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 25;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateShortChatMessage= struct {
    out: ?bool,
    mentioned: ?bool,
    media_unread: ?bool,
    silent: ?bool,
    id: i32,
    from_id: i64,
    chat_id: i64,
    message: []const u8,
    pts: i32,
    pts_count: i32,
    date: i32,
    fwd_from: ?IMessageFwdHeader,
    via_bot_id: ?i64,
    reply_to: ?IMessageReplyHeader,
    entities: ?[]const IMessageEntity,
    ttl_period: ?i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // out
        // true flag

        // mentioned
        // true flag

        // media_unread
        // true flag

        // silent
        // true flag

        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // from_id
        const paramfrom_id = self.from_id;
        result += @sizeOf(@TypeOf(paramfrom_id));
        // chat_id
        const paramchat_id = self.chat_id;
        result += @sizeOf(@TypeOf(paramchat_id));
        // message
        const parammessage = self.message;
        result += base.strEncodedSize(parammessage);
        // pts
        const parampts = self.pts;
        result += @sizeOf(@TypeOf(parampts));
        // pts_count
        const parampts_count = self.pts_count;
        result += @sizeOf(@TypeOf(parampts_count));
        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        // fwd_from
        const paramfwd_from = self.fwd_from;
        if (paramfwd_from) |paramfwd_fromflag| {
        result += paramfwd_fromflag.size();
        }

        // via_bot_id
        const paramvia_bot_id = self.via_bot_id;
        if (paramvia_bot_id) |paramvia_bot_idflag| {
        result += @sizeOf(@TypeOf(paramvia_bot_idflag));        }

        // reply_to
        const paramreply_to = self.reply_to;
        if (paramreply_to) |paramreply_toflag| {
        result += paramreply_toflag.size();
        }

        // entities
        const paramentities = self.entities;
        if (paramentities) |paramentitiesflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramentitiesflag) |paramentitiesflagitem| {
        result += paramentitiesflagitem.size();
        }
        }

        // ttl_period
        const paramttl_period = self.ttl_period;
        if (paramttl_period) |paramttl_periodflag| {
        result += @sizeOf(@TypeOf(paramttl_periodflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 13;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 11;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 7;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 25;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateShort= struct {
    update: IUpdate,
    date: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // update
        const paramupdate = self.update;
        result += paramupdate.size();

        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdatesCombined= struct {
    updates: []const IUpdate,
    users: []const IUser,
    chats: []const IChat,
    date: i32,
    seq_start: i32,
    seq: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // updates
        const paramupdates = self.updates;
        result += 4; // vector id
        result += 4; // vector size
        for (paramupdates) |paramupdatesitem| {
        result += paramupdatesitem.size();
        }

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        // chats
        const paramchats = self.chats;
        result += 4; // vector id
        result += 4; // vector size
        for (paramchats) |paramchatsitem| {
        result += paramchatsitem.size();
        }

        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        // seq_start
        const paramseq_start = self.seq_start;
        result += @sizeOf(@TypeOf(paramseq_start));
        // seq
        const paramseq = self.seq;
        result += @sizeOf(@TypeOf(paramseq));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const Updates= struct {
    updates: []const IUpdate,
    users: []const IUser,
    chats: []const IChat,
    date: i32,
    seq: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // updates
        const paramupdates = self.updates;
        result += 4; // vector id
        result += 4; // vector size
        for (paramupdates) |paramupdatesitem| {
        result += paramupdatesitem.size();
        }

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        // chats
        const paramchats = self.chats;
        result += 4; // vector id
        result += 4; // vector size
        for (paramchats) |paramchatsitem| {
        result += paramchatsitem.size();
        }

        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        // seq
        const paramseq = self.seq;
        result += @sizeOf(@TypeOf(paramseq));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdateShortSentMessage= struct {
    out: ?bool,
    id: i32,
    pts: i32,
    pts_count: i32,
    date: i32,
    media: ?IMessageMedia,
    entities: ?[]const IMessageEntity,
    ttl_period: ?i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // out
        // true flag

        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // pts
        const parampts = self.pts;
        result += @sizeOf(@TypeOf(parampts));
        // pts_count
        const parampts_count = self.pts_count;
        result += @sizeOf(@TypeOf(parampts_count));
        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        // media
        const parammedia = self.media;
        if (parammedia) |parammediaflag| {
        result += parammediaflag.size();
        }

        // entities
        const paramentities = self.entities;
        if (paramentities) |paramentitiesflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramentitiesflag) |paramentitiesflagitem| {
        result += paramentitiesflagitem.size();
        }
        }

        // ttl_period
        const paramttl_period = self.ttl_period;
        if (paramttl_period) |paramttl_periodflag| {
        result += @sizeOf(@TypeOf(paramttl_periodflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 9;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 7;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 25;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PhotosPhotos= struct {
    photos: []const IPhoto,
    users: []const IUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // photos
        const paramphotos = self.photos;
        result += 4; // vector id
        result += 4; // vector size
        for (paramphotos) |paramphotositem| {
        result += paramphotositem.size();
        }

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PhotosPhotosSlice= struct {
    count: i32,
    photos: []const IPhoto,
    users: []const IUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // count
        const paramcount = self.count;
        result += @sizeOf(@TypeOf(paramcount));
        // photos
        const paramphotos = self.photos;
        result += 4; // vector id
        result += 4; // vector size
        for (paramphotos) |paramphotositem| {
        result += paramphotositem.size();
        }

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PhotosPhoto= struct {
    photo: IPhoto,
    users: []const IUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // photo
        const paramphoto = self.photo;
        result += paramphoto.size();

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UploadFile= struct {
    type: IStorageFileType,
    mtime: i32,
    bytes: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // type
        const paramtype = self.Type;
        result += paramtype.size();

        // mtime
        const parammtime = self.mtime;
        result += @sizeOf(@TypeOf(parammtime));
        // bytes
        const parambytes = self.bytes;
        result += base.strEncodedSize(parambytes);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UploadFileCdnRedirect= struct {
    dc_id: i32,
    file_token: []const u8,
    encryption_key: []const u8,
    encryption_iv: []const u8,
    file_hashes: []const IFileHash,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // dc_id
        const paramdc_id = self.dc_id;
        result += @sizeOf(@TypeOf(paramdc_id));
        // file_token
        const paramfile_token = self.file_token;
        result += base.strEncodedSize(paramfile_token);
        // encryption_key
        const paramencryption_key = self.encryption_key;
        result += base.strEncodedSize(paramencryption_key);
        // encryption_iv
        const paramencryption_iv = self.encryption_iv;
        result += base.strEncodedSize(paramencryption_iv);
        // file_hashes
        const paramfile_hashes = self.file_hashes;
        result += 4; // vector id
        result += 4; // vector size
        for (paramfile_hashes) |paramfile_hashesitem| {
        result += paramfile_hashesitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const DcOption= struct {
    ipv6: ?bool,
    media_only: ?bool,
    tcpo_only: ?bool,
    cdn: ?bool,
    static: ?bool,
    this_port_only: ?bool,
    id: i32,
    ip_address: []const u8,
    port: i32,
    secret: ?[]const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // ipv6
        // true flag

        // media_only
        // true flag

        // tcpo_only
        // true flag

        // cdn
        // true flag

        // static
        // true flag

        // this_port_only
        // true flag

        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // ip_address
        const paramip_address = self.ip_address;
        result += base.strEncodedSize(paramip_address);
        // port
        const paramport = self.port;
        result += @sizeOf(@TypeOf(paramport));
        // secret
        const paramsecret = self.secret;
        if (paramsecret) |paramsecretflag| {
        result += base.strEncodedSize(paramsecretflag);        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 10;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const Config= struct {
    default_p2p_contacts: ?bool,
    preload_featured_stickers: ?bool,
    revoke_pm_inbox: ?bool,
    blocked_mode: ?bool,
    force_try_ipv6: ?bool,
    date: i32,
    expires: i32,
    test_mode: bool,
    this_dc: i32,
    dc_options: []const IDcOption,
    dc_txt_domain_name: []const u8,
    chat_size_max: i32,
    megagroup_size_max: i32,
    forwarded_count_max: i32,
    online_update_period_ms: i32,
    offline_blur_timeout_ms: i32,
    offline_idle_timeout_ms: i32,
    online_cloud_timeout_ms: i32,
    notify_cloud_delay_ms: i32,
    notify_default_delay_ms: i32,
    push_chat_period_ms: i32,
    push_chat_limit: i32,
    edit_time_limit: i32,
    revoke_time_limit: i32,
    revoke_pm_time_limit: i32,
    rating_e_decay: i32,
    stickers_recent_limit: i32,
    channels_read_media_period: i32,
    tmp_sessions: ?i32,
    call_receive_timeout_ms: i32,
    call_ring_timeout_ms: i32,
    call_connect_timeout_ms: i32,
    call_packet_timeout_ms: i32,
    me_url_prefix: []const u8,
    autoupdate_url_prefix: ?[]const u8,
    gif_search_username: ?[]const u8,
    venue_search_username: ?[]const u8,
    img_search_username: ?[]const u8,
    static_maps_provider: ?[]const u8,
    caption_length_max: i32,
    message_length_max: i32,
    webfile_dc_id: i32,
    suggested_lang_code: ?[]const u8,
    lang_pack_version: ?i32,
    base_lang_pack_version: ?i32,
    reactions_default: ?IReaction,
    autologin_token: ?[]const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // default_p2p_contacts
        // true flag

        // preload_featured_stickers
        // true flag

        // revoke_pm_inbox
        // true flag

        // blocked_mode
        // true flag

        // force_try_ipv6
        // true flag

        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        // expires
        const paramexpires = self.expires;
        result += @sizeOf(@TypeOf(paramexpires));
        // test_mode
        const paramtest_mode = self.test_mode;
        _ = paramtest_mode;
        result += 4;
        // this_dc
        const paramthis_dc = self.this_dc;
        result += @sizeOf(@TypeOf(paramthis_dc));
        // dc_options
        const paramdc_options = self.dc_options;
        result += 4; // vector id
        result += 4; // vector size
        for (paramdc_options) |paramdc_optionsitem| {
        result += paramdc_optionsitem.size();
        }

        // dc_txt_domain_name
        const paramdc_txt_domain_name = self.dc_txt_domain_name;
        result += base.strEncodedSize(paramdc_txt_domain_name);
        // chat_size_max
        const paramchat_size_max = self.chat_size_max;
        result += @sizeOf(@TypeOf(paramchat_size_max));
        // megagroup_size_max
        const parammegagroup_size_max = self.megagroup_size_max;
        result += @sizeOf(@TypeOf(parammegagroup_size_max));
        // forwarded_count_max
        const paramforwarded_count_max = self.forwarded_count_max;
        result += @sizeOf(@TypeOf(paramforwarded_count_max));
        // online_update_period_ms
        const paramonline_update_period_ms = self.online_update_period_ms;
        result += @sizeOf(@TypeOf(paramonline_update_period_ms));
        // offline_blur_timeout_ms
        const paramoffline_blur_timeout_ms = self.offline_blur_timeout_ms;
        result += @sizeOf(@TypeOf(paramoffline_blur_timeout_ms));
        // offline_idle_timeout_ms
        const paramoffline_idle_timeout_ms = self.offline_idle_timeout_ms;
        result += @sizeOf(@TypeOf(paramoffline_idle_timeout_ms));
        // online_cloud_timeout_ms
        const paramonline_cloud_timeout_ms = self.online_cloud_timeout_ms;
        result += @sizeOf(@TypeOf(paramonline_cloud_timeout_ms));
        // notify_cloud_delay_ms
        const paramnotify_cloud_delay_ms = self.notify_cloud_delay_ms;
        result += @sizeOf(@TypeOf(paramnotify_cloud_delay_ms));
        // notify_default_delay_ms
        const paramnotify_default_delay_ms = self.notify_default_delay_ms;
        result += @sizeOf(@TypeOf(paramnotify_default_delay_ms));
        // push_chat_period_ms
        const parampush_chat_period_ms = self.push_chat_period_ms;
        result += @sizeOf(@TypeOf(parampush_chat_period_ms));
        // push_chat_limit
        const parampush_chat_limit = self.push_chat_limit;
        result += @sizeOf(@TypeOf(parampush_chat_limit));
        // edit_time_limit
        const paramedit_time_limit = self.edit_time_limit;
        result += @sizeOf(@TypeOf(paramedit_time_limit));
        // revoke_time_limit
        const paramrevoke_time_limit = self.revoke_time_limit;
        result += @sizeOf(@TypeOf(paramrevoke_time_limit));
        // revoke_pm_time_limit
        const paramrevoke_pm_time_limit = self.revoke_pm_time_limit;
        result += @sizeOf(@TypeOf(paramrevoke_pm_time_limit));
        // rating_e_decay
        const paramrating_e_decay = self.rating_e_decay;
        result += @sizeOf(@TypeOf(paramrating_e_decay));
        // stickers_recent_limit
        const paramstickers_recent_limit = self.stickers_recent_limit;
        result += @sizeOf(@TypeOf(paramstickers_recent_limit));
        // channels_read_media_period
        const paramchannels_read_media_period = self.channels_read_media_period;
        result += @sizeOf(@TypeOf(paramchannels_read_media_period));
        // tmp_sessions
        const paramtmp_sessions = self.tmp_sessions;
        if (paramtmp_sessions) |paramtmp_sessionsflag| {
        result += @sizeOf(@TypeOf(paramtmp_sessionsflag));        }

        // call_receive_timeout_ms
        const paramcall_receive_timeout_ms = self.call_receive_timeout_ms;
        result += @sizeOf(@TypeOf(paramcall_receive_timeout_ms));
        // call_ring_timeout_ms
        const paramcall_ring_timeout_ms = self.call_ring_timeout_ms;
        result += @sizeOf(@TypeOf(paramcall_ring_timeout_ms));
        // call_connect_timeout_ms
        const paramcall_connect_timeout_ms = self.call_connect_timeout_ms;
        result += @sizeOf(@TypeOf(paramcall_connect_timeout_ms));
        // call_packet_timeout_ms
        const paramcall_packet_timeout_ms = self.call_packet_timeout_ms;
        result += @sizeOf(@TypeOf(paramcall_packet_timeout_ms));
        // me_url_prefix
        const paramme_url_prefix = self.me_url_prefix;
        result += base.strEncodedSize(paramme_url_prefix);
        // autoupdate_url_prefix
        const paramautoupdate_url_prefix = self.autoupdate_url_prefix;
        if (paramautoupdate_url_prefix) |paramautoupdate_url_prefixflag| {
        result += base.strEncodedSize(paramautoupdate_url_prefixflag);        }

        // gif_search_username
        const paramgif_search_username = self.gif_search_username;
        if (paramgif_search_username) |paramgif_search_usernameflag| {
        result += base.strEncodedSize(paramgif_search_usernameflag);        }

        // venue_search_username
        const paramvenue_search_username = self.venue_search_username;
        if (paramvenue_search_username) |paramvenue_search_usernameflag| {
        result += base.strEncodedSize(paramvenue_search_usernameflag);        }

        // img_search_username
        const paramimg_search_username = self.img_search_username;
        if (paramimg_search_username) |paramimg_search_usernameflag| {
        result += base.strEncodedSize(paramimg_search_usernameflag);        }

        // static_maps_provider
        const paramstatic_maps_provider = self.static_maps_provider;
        if (paramstatic_maps_provider) |paramstatic_maps_providerflag| {
        result += base.strEncodedSize(paramstatic_maps_providerflag);        }

        // caption_length_max
        const paramcaption_length_max = self.caption_length_max;
        result += @sizeOf(@TypeOf(paramcaption_length_max));
        // message_length_max
        const parammessage_length_max = self.message_length_max;
        result += @sizeOf(@TypeOf(parammessage_length_max));
        // webfile_dc_id
        const paramwebfile_dc_id = self.webfile_dc_id;
        result += @sizeOf(@TypeOf(paramwebfile_dc_id));
        // suggested_lang_code
        const paramsuggested_lang_code = self.suggested_lang_code;
        if (paramsuggested_lang_code) |paramsuggested_lang_codeflag| {
        result += base.strEncodedSize(paramsuggested_lang_codeflag);        }

        // lang_pack_version
        const paramlang_pack_version = self.lang_pack_version;
        if (paramlang_pack_version) |paramlang_pack_versionflag| {
        result += @sizeOf(@TypeOf(paramlang_pack_versionflag));        }

        // base_lang_pack_version
        const parambase_lang_pack_version = self.base_lang_pack_version;
        if (parambase_lang_pack_version) |parambase_lang_pack_versionflag| {
        result += @sizeOf(@TypeOf(parambase_lang_pack_versionflag));        }

        // reactions_default
        const paramreactions_default = self.reactions_default;
        if (paramreactions_default) |paramreactions_defaultflag| {
        result += paramreactions_defaultflag.size();
        }

        // autologin_token
        const paramautologin_token = self.autologin_token;
        if (paramautologin_token) |paramautologin_tokenflag| {
        result += base.strEncodedSize(paramautologin_tokenflag);        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 6;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 8;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 14;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 7;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 9;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 10;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 11;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 12;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 15;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 16;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const NearestDc= struct {
    country: []const u8,
    this_dc: i32,
    nearest_dc: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // country
        const paramcountry = self.country;
        result += base.strEncodedSize(paramcountry);
        // this_dc
        const paramthis_dc = self.this_dc;
        result += @sizeOf(@TypeOf(paramthis_dc));
        // nearest_dc
        const paramnearest_dc = self.nearest_dc;
        result += @sizeOf(@TypeOf(paramnearest_dc));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const HelpAppUpdate= struct {
    can_not_skip: ?bool,
    id: i32,
    version: []const u8,
    text: []const u8,
    entities: []const IMessageEntity,
    document: ?IDocument,
    url: ?[]const u8,
    sticker: ?IDocument,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // can_not_skip
        // true flag

        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // version
        const paramversion = self.version;
        result += base.strEncodedSize(paramversion);
        // text
        const paramtext = self.text;
        result += base.strEncodedSize(paramtext);
        // entities
        const paramentities = self.entities;
        result += 4; // vector id
        result += 4; // vector size
        for (paramentities) |paramentitiesitem| {
        result += paramentitiesitem.size();
        }

        // document
        const paramdocument = self.document;
        if (paramdocument) |paramdocumentflag| {
        result += paramdocumentflag.size();
        }

        // url
        const paramurl = self.url;
        if (paramurl) |paramurlflag| {
        result += base.strEncodedSize(paramurlflag);        }

        // sticker
        const paramsticker = self.sticker;
        if (paramsticker) |paramstickerflag| {
        result += paramstickerflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const HelpNoAppUpdate= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const HelpInviteText= struct {
    message: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // message
        const parammessage = self.message;
        result += base.strEncodedSize(parammessage);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const EncryptedChatEmpty= struct {
    id: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const EncryptedChatWaiting= struct {
    id: i32,
    access_hash: i64,
    date: i32,
    admin_id: i64,
    participant_id: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // access_hash
        const paramaccess_hash = self.access_hash;
        result += @sizeOf(@TypeOf(paramaccess_hash));
        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        // admin_id
        const paramadmin_id = self.admin_id;
        result += @sizeOf(@TypeOf(paramadmin_id));
        // participant_id
        const paramparticipant_id = self.participant_id;
        result += @sizeOf(@TypeOf(paramparticipant_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const EncryptedChatRequested= struct {
    folder_id: ?i32,
    id: i32,
    access_hash: i64,
    date: i32,
    admin_id: i64,
    participant_id: i64,
    g_a: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // folder_id
        const paramfolder_id = self.folder_id;
        if (paramfolder_id) |paramfolder_idflag| {
        result += @sizeOf(@TypeOf(paramfolder_idflag));        }

        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // access_hash
        const paramaccess_hash = self.access_hash;
        result += @sizeOf(@TypeOf(paramaccess_hash));
        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        // admin_id
        const paramadmin_id = self.admin_id;
        result += @sizeOf(@TypeOf(paramadmin_id));
        // participant_id
        const paramparticipant_id = self.participant_id;
        result += @sizeOf(@TypeOf(paramparticipant_id));
        // g_a
        const paramg_a = self.g_a;
        result += base.strEncodedSize(paramg_a);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const EncryptedChat= struct {
    id: i32,
    access_hash: i64,
    date: i32,
    admin_id: i64,
    participant_id: i64,
    g_a_or_b: []const u8,
    key_fingerprint: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // access_hash
        const paramaccess_hash = self.access_hash;
        result += @sizeOf(@TypeOf(paramaccess_hash));
        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        // admin_id
        const paramadmin_id = self.admin_id;
        result += @sizeOf(@TypeOf(paramadmin_id));
        // participant_id
        const paramparticipant_id = self.participant_id;
        result += @sizeOf(@TypeOf(paramparticipant_id));
        // g_a_or_b
        const paramg_a_or_b = self.g_a_or_b;
        result += base.strEncodedSize(paramg_a_or_b);
        // key_fingerprint
        const paramkey_fingerprint = self.key_fingerprint;
        result += @sizeOf(@TypeOf(paramkey_fingerprint));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const EncryptedChatDiscarded= struct {
    history_deleted: ?bool,
    id: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // history_deleted
        // true flag

        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputEncryptedChat= struct {
    chat_id: i32,
    access_hash: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // chat_id
        const paramchat_id = self.chat_id;
        result += @sizeOf(@TypeOf(paramchat_id));
        // access_hash
        const paramaccess_hash = self.access_hash;
        result += @sizeOf(@TypeOf(paramaccess_hash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const EncryptedFileEmpty= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const EncryptedFile= struct {
    id: i64,
    access_hash: i64,
    size: i64,
    dc_id: i32,
    key_fingerprint: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // access_hash
        const paramaccess_hash = self.access_hash;
        result += @sizeOf(@TypeOf(paramaccess_hash));
        // size
        const paramsize = self.size;
        result += @sizeOf(@TypeOf(paramsize));
        // dc_id
        const paramdc_id = self.dc_id;
        result += @sizeOf(@TypeOf(paramdc_id));
        // key_fingerprint
        const paramkey_fingerprint = self.key_fingerprint;
        result += @sizeOf(@TypeOf(paramkey_fingerprint));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputEncryptedFileEmpty= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const InputEncryptedFileUploaded= struct {
    id: i64,
    parts: i32,
    md5_checksum: []const u8,
    key_fingerprint: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // parts
        const paramparts = self.parts;
        result += @sizeOf(@TypeOf(paramparts));
        // md5_checksum
        const parammd5_checksum = self.md5_checksum;
        result += base.strEncodedSize(parammd5_checksum);
        // key_fingerprint
        const paramkey_fingerprint = self.key_fingerprint;
        result += @sizeOf(@TypeOf(paramkey_fingerprint));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputEncryptedFile= struct {
    id: i64,
    access_hash: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // access_hash
        const paramaccess_hash = self.access_hash;
        result += @sizeOf(@TypeOf(paramaccess_hash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputEncryptedFileBigUploaded= struct {
    id: i64,
    parts: i32,
    key_fingerprint: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // parts
        const paramparts = self.parts;
        result += @sizeOf(@TypeOf(paramparts));
        // key_fingerprint
        const paramkey_fingerprint = self.key_fingerprint;
        result += @sizeOf(@TypeOf(paramkey_fingerprint));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const EncryptedMessage= struct {
    random_id: i64,
    chat_id: i32,
    date: i32,
    bytes: []const u8,
    file: IEncryptedFile,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // random_id
        const paramrandom_id = self.random_id;
        result += @sizeOf(@TypeOf(paramrandom_id));
        // chat_id
        const paramchat_id = self.chat_id;
        result += @sizeOf(@TypeOf(paramchat_id));
        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        // bytes
        const parambytes = self.bytes;
        result += base.strEncodedSize(parambytes);
        // file
        const paramfile = self.file;
        result += paramfile.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const EncryptedMessageService= struct {
    random_id: i64,
    chat_id: i32,
    date: i32,
    bytes: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // random_id
        const paramrandom_id = self.random_id;
        result += @sizeOf(@TypeOf(paramrandom_id));
        // chat_id
        const paramchat_id = self.chat_id;
        result += @sizeOf(@TypeOf(paramchat_id));
        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        // bytes
        const parambytes = self.bytes;
        result += base.strEncodedSize(parambytes);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesDhConfigNotModified= struct {
    random: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // random
        const paramrandom = self.random;
        result += base.strEncodedSize(paramrandom);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MessagesDhConfig= struct {
    g: i32,
    p: []const u8,
    version: i32,
    random: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // g
        const paramg = self.g;
        result += @sizeOf(@TypeOf(paramg));
        // p
        const paramp = self.p;
        result += base.strEncodedSize(paramp);
        // version
        const paramversion = self.version;
        result += @sizeOf(@TypeOf(paramversion));
        // random
        const paramrandom = self.random;
        result += base.strEncodedSize(paramrandom);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesSentEncryptedMessage= struct {
    date: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MessagesSentEncryptedFile= struct {
    date: i32,
    file: IEncryptedFile,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        // file
        const paramfile = self.file;
        result += paramfile.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputDocumentEmpty= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const InputDocument= struct {
    id: i64,
    access_hash: i64,
    file_reference: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // access_hash
        const paramaccess_hash = self.access_hash;
        result += @sizeOf(@TypeOf(paramaccess_hash));
        // file_reference
        const paramfile_reference = self.file_reference;
        result += base.strEncodedSize(paramfile_reference);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const DocumentEmpty= struct {
    id: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const Document= struct {
    id: i64,
    access_hash: i64,
    file_reference: []const u8,
    date: i32,
    mime_type: []const u8,
    size: i64,
    thumbs: ?[]const IPhotoSize,
    video_thumbs: ?[]const IVideoSize,
    dc_id: i32,
    attributes: []const IDocumentAttribute,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // access_hash
        const paramaccess_hash = self.access_hash;
        result += @sizeOf(@TypeOf(paramaccess_hash));
        // file_reference
        const paramfile_reference = self.file_reference;
        result += base.strEncodedSize(paramfile_reference);
        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        // mime_type
        const parammime_type = self.mime_type;
        result += base.strEncodedSize(parammime_type);
        // size
        const paramsize = self.size;
        result += @sizeOf(@TypeOf(paramsize));
        // thumbs
        const paramthumbs = self.thumbs;
        if (paramthumbs) |paramthumbsflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramthumbsflag) |paramthumbsflagitem| {
        result += paramthumbsflagitem.size();
        }
        }

        // video_thumbs
        const paramvideo_thumbs = self.video_thumbs;
        if (paramvideo_thumbs) |paramvideo_thumbsflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramvideo_thumbsflag) |paramvideo_thumbsflagitem| {
        result += paramvideo_thumbsflagitem.size();
        }
        }

        // dc_id
        const paramdc_id = self.dc_id;
        result += @sizeOf(@TypeOf(paramdc_id));
        // attributes
        const paramattributes = self.attributes;
        result += 4; // vector id
        result += 4; // vector size
        for (paramattributes) |paramattributesitem| {
        result += paramattributesitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const HelpSupport= struct {
    phone_number: []const u8,
    user: IUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // phone_number
        const paramphone_number = self.phone_number;
        result += base.strEncodedSize(paramphone_number);
        // user
        const paramuser = self.user;
        result += paramuser.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const NotifyPeer= struct {
    peer: IPeer,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const NotifyUsers= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const NotifyChats= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const NotifyBroadcasts= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const NotifyForumTopic= struct {
    peer: IPeer,
    top_msg_id: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // top_msg_id
        const paramtop_msg_id = self.top_msg_id;
        result += @sizeOf(@TypeOf(paramtop_msg_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const SendMessageTypingAction= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const SendMessageCancelAction= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const SendMessageRecordVideoAction= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const SendMessageUploadVideoAction= struct {
    progress: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // progress
        const paramprogress = self.progress;
        result += @sizeOf(@TypeOf(paramprogress));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const SendMessageRecordAudioAction= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const SendMessageUploadAudioAction= struct {
    progress: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // progress
        const paramprogress = self.progress;
        result += @sizeOf(@TypeOf(paramprogress));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const SendMessageUploadPhotoAction= struct {
    progress: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // progress
        const paramprogress = self.progress;
        result += @sizeOf(@TypeOf(paramprogress));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const SendMessageUploadDocumentAction= struct {
    progress: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // progress
        const paramprogress = self.progress;
        result += @sizeOf(@TypeOf(paramprogress));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const SendMessageGeoLocationAction= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const SendMessageChooseContactAction= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const SendMessageGamePlayAction= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const SendMessageRecordRoundAction= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const SendMessageUploadRoundAction= struct {
    progress: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // progress
        const paramprogress = self.progress;
        result += @sizeOf(@TypeOf(paramprogress));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const SpeakingInGroupCallAction= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const SendMessageHistoryImportAction= struct {
    progress: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // progress
        const paramprogress = self.progress;
        result += @sizeOf(@TypeOf(paramprogress));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const SendMessageChooseStickerAction= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const SendMessageEmojiInteraction= struct {
    emoticon: []const u8,
    msg_id: i32,
    interaction: IDataJSON,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // emoticon
        const paramemoticon = self.emoticon;
        result += base.strEncodedSize(paramemoticon);
        // msg_id
        const parammsg_id = self.msg_id;
        result += @sizeOf(@TypeOf(parammsg_id));
        // interaction
        const paraminteraction = self.interaction;
        result += paraminteraction.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const SendMessageEmojiInteractionSeen= struct {
    emoticon: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // emoticon
        const paramemoticon = self.emoticon;
        result += base.strEncodedSize(paramemoticon);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const ContactsFound= struct {
    my_results: []const IPeer,
    results: []const IPeer,
    chats: []const IChat,
    users: []const IUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // my_results
        const parammy_results = self.my_results;
        result += 4; // vector id
        result += 4; // vector size
        for (parammy_results) |parammy_resultsitem| {
        result += parammy_resultsitem.size();
        }

        // results
        const paramresults = self.results;
        result += 4; // vector id
        result += 4; // vector size
        for (paramresults) |paramresultsitem| {
        result += paramresultsitem.size();
        }

        // chats
        const paramchats = self.chats;
        result += 4; // vector id
        result += 4; // vector size
        for (paramchats) |paramchatsitem| {
        result += paramchatsitem.size();
        }

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputPrivacyKeyStatusTimestamp= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const InputPrivacyKeyChatInvite= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const InputPrivacyKeyPhoneCall= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const InputPrivacyKeyPhoneP2P= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const InputPrivacyKeyForwards= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const InputPrivacyKeyProfilePhoto= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const InputPrivacyKeyPhoneNumber= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const InputPrivacyKeyAddedByPhone= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const InputPrivacyKeyVoiceMessages= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const InputPrivacyKeyAbout= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const InputPrivacyKeyBirthday= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const PrivacyKeyStatusTimestamp= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const PrivacyKeyChatInvite= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const PrivacyKeyPhoneCall= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const PrivacyKeyPhoneP2P= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const PrivacyKeyForwards= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const PrivacyKeyProfilePhoto= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const PrivacyKeyPhoneNumber= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const PrivacyKeyAddedByPhone= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const PrivacyKeyVoiceMessages= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const PrivacyKeyAbout= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const PrivacyKeyBirthday= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const InputPrivacyValueAllowContacts= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const InputPrivacyValueAllowAll= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const InputPrivacyValueAllowUsers= struct {
    users: []const IInputUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const InputPrivacyValueDisallowContacts= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const InputPrivacyValueDisallowAll= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const InputPrivacyValueDisallowUsers= struct {
    users: []const IInputUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const InputPrivacyValueAllowChatParticipants= struct {
    chats: []const i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // chats
        const paramchats = self.chats;
        result += 4; // vector id
        result += 4; // vector size
        for (paramchats) |paramchatsitem| {
        result += @sizeOf(@TypeOf(paramchatsitem));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const InputPrivacyValueDisallowChatParticipants= struct {
    chats: []const i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // chats
        const paramchats = self.chats;
        result += 4; // vector id
        result += 4; // vector size
        for (paramchats) |paramchatsitem| {
        result += @sizeOf(@TypeOf(paramchatsitem));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const InputPrivacyValueAllowCloseFriends= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const InputPrivacyValueAllowPremium= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const PrivacyValueAllowContacts= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const PrivacyValueAllowAll= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const PrivacyValueAllowUsers= struct {
    users: []const i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += @sizeOf(@TypeOf(paramusersitem));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const PrivacyValueDisallowContacts= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const PrivacyValueDisallowAll= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const PrivacyValueDisallowUsers= struct {
    users: []const i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += @sizeOf(@TypeOf(paramusersitem));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const PrivacyValueAllowChatParticipants= struct {
    chats: []const i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // chats
        const paramchats = self.chats;
        result += 4; // vector id
        result += 4; // vector size
        for (paramchats) |paramchatsitem| {
        result += @sizeOf(@TypeOf(paramchatsitem));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const PrivacyValueDisallowChatParticipants= struct {
    chats: []const i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // chats
        const paramchats = self.chats;
        result += 4; // vector id
        result += 4; // vector size
        for (paramchats) |paramchatsitem| {
        result += @sizeOf(@TypeOf(paramchatsitem));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const PrivacyValueAllowCloseFriends= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const PrivacyValueAllowPremium= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const AccountPrivacyRules= struct {
    rules: []const IPrivacyRule,
    chats: []const IChat,
    users: []const IUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // rules
        const paramrules = self.rules;
        result += 4; // vector id
        result += 4; // vector size
        for (paramrules) |paramrulesitem| {
        result += paramrulesitem.size();
        }

        // chats
        const paramchats = self.chats;
        result += 4; // vector id
        result += 4; // vector size
        for (paramchats) |paramchatsitem| {
        result += paramchatsitem.size();
        }

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AccountDaysTTL= struct {
    days: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // days
        const paramdays = self.days;
        result += @sizeOf(@TypeOf(paramdays));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const DocumentAttributeImageSize= struct {
    w: i32,
    h: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // w
        const paramw = self.w;
        result += @sizeOf(@TypeOf(paramw));
        // h
        const paramh = self.h;
        result += @sizeOf(@TypeOf(paramh));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const DocumentAttributeAnimated= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const DocumentAttributeSticker= struct {
    mask: ?bool,
    alt: []const u8,
    stickerset: IInputStickerSet,
    mask_coords: ?IMaskCoords,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // mask
        // true flag

        // alt
        const paramalt = self.alt;
        result += base.strEncodedSize(paramalt);
        // stickerset
        const paramstickerset = self.stickerset;
        result += paramstickerset.size();

        // mask_coords
        const parammask_coords = self.mask_coords;
        if (parammask_coords) |parammask_coordsflag| {
        result += parammask_coordsflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const DocumentAttributeVideo= struct {
    round_message: ?bool,
    supports_streaming: ?bool,
    nosound: ?bool,
    duration: f64,
    w: i32,
    h: i32,
    preload_prefix_size: ?i32,
    video_start_ts: ?f64,
    video_codec: ?[]const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // round_message
        // true flag

        // supports_streaming
        // true flag

        // nosound
        // true flag

        // duration
        const paramduration = self.duration;
        result += @sizeOf(@TypeOf(paramduration));
        // w
        const paramw = self.w;
        result += @sizeOf(@TypeOf(paramw));
        // h
        const paramh = self.h;
        result += @sizeOf(@TypeOf(paramh));
        // preload_prefix_size
        const parampreload_prefix_size = self.preload_prefix_size;
        if (parampreload_prefix_size) |parampreload_prefix_sizeflag| {
        result += @sizeOf(@TypeOf(parampreload_prefix_sizeflag));        }

        // video_start_ts
        const paramvideo_start_ts = self.video_start_ts;
        if (paramvideo_start_ts) |paramvideo_start_tsflag| {
        result += @sizeOf(@TypeOf(paramvideo_start_tsflag));        }

        // video_codec
        const paramvideo_codec = self.video_codec;
        if (paramvideo_codec) |paramvideo_codecflag| {
        result += base.strEncodedSize(paramvideo_codecflag);        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const DocumentAttributeAudio= struct {
    voice: ?bool,
    duration: i32,
    title: ?[]const u8,
    performer: ?[]const u8,
    waveform: ?[]const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // voice
        // true flag

        // duration
        const paramduration = self.duration;
        result += @sizeOf(@TypeOf(paramduration));
        // title
        const paramtitle = self.title;
        if (paramtitle) |paramtitleflag| {
        result += base.strEncodedSize(paramtitleflag);        }

        // performer
        const paramperformer = self.performer;
        if (paramperformer) |paramperformerflag| {
        result += base.strEncodedSize(paramperformerflag);        }

        // waveform
        const paramwaveform = self.waveform;
        if (paramwaveform) |paramwaveformflag| {
        result += base.strEncodedSize(paramwaveformflag);        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 10;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const DocumentAttributeFilename= struct {
    file_name: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // file_name
        const paramfile_name = self.file_name;
        result += base.strEncodedSize(paramfile_name);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const DocumentAttributeHasStickers= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const DocumentAttributeCustomEmoji= struct {
    free: ?bool,
    text_color: ?bool,
    alt: []const u8,
    stickerset: IInputStickerSet,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // free
        // true flag

        // text_color
        // true flag

        // alt
        const paramalt = self.alt;
        result += base.strEncodedSize(paramalt);
        // stickerset
        const paramstickerset = self.stickerset;
        result += paramstickerset.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesStickersNotModified= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const MessagesStickers= struct {
    hash: i64,
    stickers: []const IDocument,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        // stickers
        const paramstickers = self.stickers;
        result += 4; // vector id
        result += 4; // vector size
        for (paramstickers) |paramstickersitem| {
        result += paramstickersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StickerPack= struct {
    emoticon: []const u8,
    documents: []const i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // emoticon
        const paramemoticon = self.emoticon;
        result += base.strEncodedSize(paramemoticon);
        // documents
        const paramdocuments = self.documents;
        result += 4; // vector id
        result += 4; // vector size
        for (paramdocuments) |paramdocumentsitem| {
        result += @sizeOf(@TypeOf(paramdocumentsitem));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesAllStickersNotModified= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const MessagesAllStickers= struct {
    hash: i64,
    sets: []const IStickerSet,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        // sets
        const paramsets = self.sets;
        result += 4; // vector id
        result += 4; // vector size
        for (paramsets) |paramsetsitem| {
        result += paramsetsitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesAffectedMessages= struct {
    pts: i32,
    pts_count: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // pts
        const parampts = self.pts;
        result += @sizeOf(@TypeOf(parampts));
        // pts_count
        const parampts_count = self.pts_count;
        result += @sizeOf(@TypeOf(parampts_count));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const WebPageEmpty= struct {
    id: i64,
    url: ?[]const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // url
        const paramurl = self.url;
        if (paramurl) |paramurlflag| {
        result += base.strEncodedSize(paramurlflag);        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const WebPagePending= struct {
    id: i64,
    url: ?[]const u8,
    date: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // url
        const paramurl = self.url;
        if (paramurl) |paramurlflag| {
        result += base.strEncodedSize(paramurlflag);        }

        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const WebPage= struct {
    has_large_media: ?bool,
    id: i64,
    url: []const u8,
    display_url: []const u8,
    hash: i32,
    type: ?[]const u8,
    site_name: ?[]const u8,
    title: ?[]const u8,
    description: ?[]const u8,
    photo: ?IPhoto,
    embed_url: ?[]const u8,
    embed_type: ?[]const u8,
    embed_width: ?i32,
    embed_height: ?i32,
    duration: ?i32,
    author: ?[]const u8,
    document: ?IDocument,
    cached_page: ?IPage,
    attributes: ?[]const IWebPageAttribute,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // has_large_media
        // true flag

        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // url
        const paramurl = self.url;
        result += base.strEncodedSize(paramurl);
        // display_url
        const paramdisplay_url = self.display_url;
        result += base.strEncodedSize(paramdisplay_url);
        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        // type
        const paramtype = self.Type;
        if (paramtype) |paramtypeflag| {
        result += base.strEncodedSize(paramtypeflag);        }

        // site_name
        const paramsite_name = self.site_name;
        if (paramsite_name) |paramsite_nameflag| {
        result += base.strEncodedSize(paramsite_nameflag);        }

        // title
        const paramtitle = self.title;
        if (paramtitle) |paramtitleflag| {
        result += base.strEncodedSize(paramtitleflag);        }

        // description
        const paramdescription = self.description;
        if (paramdescription) |paramdescriptionflag| {
        result += base.strEncodedSize(paramdescriptionflag);        }

        // photo
        const paramphoto = self.photo;
        if (paramphoto) |paramphotoflag| {
        result += paramphotoflag.size();
        }

        // embed_url
        const paramembed_url = self.embed_url;
        if (paramembed_url) |paramembed_urlflag| {
        result += base.strEncodedSize(paramembed_urlflag);        }

        // embed_type
        const paramembed_type = self.embed_type;
        if (paramembed_type) |paramembed_typeflag| {
        result += base.strEncodedSize(paramembed_typeflag);        }

        // embed_width
        const paramembed_width = self.embed_width;
        if (paramembed_width) |paramembed_widthflag| {
        result += @sizeOf(@TypeOf(paramembed_widthflag));        }

        // embed_height
        const paramembed_height = self.embed_height;
        if (paramembed_height) |paramembed_heightflag| {
        result += @sizeOf(@TypeOf(paramembed_heightflag));        }

        // duration
        const paramduration = self.duration;
        if (paramduration) |paramdurationflag| {
        result += @sizeOf(@TypeOf(paramdurationflag));        }

        // author
        const paramauthor = self.author;
        if (paramauthor) |paramauthorflag| {
        result += base.strEncodedSize(paramauthorflag);        }

        // document
        const paramdocument = self.document;
        if (paramdocument) |paramdocumentflag| {
        result += paramdocumentflag.size();
        }

        // cached_page
        const paramcached_page = self.cached_page;
        if (paramcached_page) |paramcached_pageflag| {
        result += paramcached_pageflag.size();
        }

        // attributes
        const paramattributes = self.attributes;
        if (paramattributes) |paramattributesflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramattributesflag) |paramattributesflagitem| {
        result += paramattributesflagitem.size();
        }
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 13;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 6;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 6;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 7;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 8;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 9;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 10;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 12;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const WebPageNotModified= struct {
    cached_page_views: ?i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // cached_page_views
        const paramcached_page_views = self.cached_page_views;
        if (paramcached_page_views) |paramcached_page_viewsflag| {
        result += @sizeOf(@TypeOf(paramcached_page_viewsflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        }
};
const Authorization= struct {
    current: ?bool,
    official_app: ?bool,
    password_pending: ?bool,
    encrypted_requests_disabled: ?bool,
    call_requests_disabled: ?bool,
    unconfirmed: ?bool,
    hash: i64,
    device_model: []const u8,
    platform: []const u8,
    system_version: []const u8,
    api_id: i32,
    app_name: []const u8,
    app_version: []const u8,
    date_created: i32,
    date_active: i32,
    ip: []const u8,
    country: []const u8,
    region: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // current
        // true flag

        // official_app
        // true flag

        // password_pending
        // true flag

        // encrypted_requests_disabled
        // true flag

        // call_requests_disabled
        // true flag

        // unconfirmed
        // true flag

        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        // device_model
        const paramdevice_model = self.device_model;
        result += base.strEncodedSize(paramdevice_model);
        // platform
        const paramplatform = self.platform;
        result += base.strEncodedSize(paramplatform);
        // system_version
        const paramsystem_version = self.system_version;
        result += base.strEncodedSize(paramsystem_version);
        // api_id
        const paramapi_id = self.api_id;
        result += @sizeOf(@TypeOf(paramapi_id));
        // app_name
        const paramapp_name = self.app_name;
        result += base.strEncodedSize(paramapp_name);
        // app_version
        const paramapp_version = self.app_version;
        result += base.strEncodedSize(paramapp_version);
        // date_created
        const paramdate_created = self.date_created;
        result += @sizeOf(@TypeOf(paramdate_created));
        // date_active
        const paramdate_active = self.date_active;
        result += @sizeOf(@TypeOf(paramdate_active));
        // ip
        const paramip = self.ip;
        result += base.strEncodedSize(paramip);
        // country
        const paramcountry = self.country;
        result += base.strEncodedSize(paramcountry);
        // region
        const paramregion = self.region;
        result += base.strEncodedSize(paramregion);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AccountAuthorizations= struct {
    authorization_ttl_days: i32,
    authorizations: []const IAuthorization,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // authorization_ttl_days
        const paramauthorization_ttl_days = self.authorization_ttl_days;
        result += @sizeOf(@TypeOf(paramauthorization_ttl_days));
        // authorizations
        const paramauthorizations = self.authorizations;
        result += 4; // vector id
        result += 4; // vector size
        for (paramauthorizations) |paramauthorizationsitem| {
        result += paramauthorizationsitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AccountPassword= struct {
    has_recovery: ?bool,
    has_secure_values: ?bool,
    has_password: ?bool,
    current_algo: ?IPasswordKdfAlgo,
    srp_B: ?[]const u8,
    srp_id: ?i64,
    hint: ?[]const u8,
    email_unconfirmed_pattern: ?[]const u8,
    new_algo: IPasswordKdfAlgo,
    new_secure_algo: ISecurePasswordKdfAlgo,
    secure_random: []const u8,
    pending_reset_date: ?i32,
    login_email_pattern: ?[]const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // has_recovery
        // true flag

        // has_secure_values
        // true flag

        // has_password
        // true flag

        // current_algo
        const paramcurrent_algo = self.current_algo;
        if (paramcurrent_algo) |paramcurrent_algoflag| {
        result += paramcurrent_algoflag.size();
        }

        // srp_B
        const paramsrp_B = self.srp_B;
        if (paramsrp_B) |paramsrp_Bflag| {
        result += base.strEncodedSize(paramsrp_Bflag);        }

        // srp_id
        const paramsrp_id = self.srp_id;
        if (paramsrp_id) |paramsrp_idflag| {
        result += @sizeOf(@TypeOf(paramsrp_idflag));        }

        // hint
        const paramhint = self.hint;
        if (paramhint) |paramhintflag| {
        result += base.strEncodedSize(paramhintflag);        }

        // email_unconfirmed_pattern
        const paramemail_unconfirmed_pattern = self.email_unconfirmed_pattern;
        if (paramemail_unconfirmed_pattern) |paramemail_unconfirmed_patternflag| {
        result += base.strEncodedSize(paramemail_unconfirmed_patternflag);        }

        // new_algo
        const paramnew_algo = self.new_algo;
        result += paramnew_algo.size();

        // new_secure_algo
        const paramnew_secure_algo = self.new_secure_algo;
        result += paramnew_secure_algo.size();

        // secure_random
        const paramsecure_random = self.secure_random;
        result += base.strEncodedSize(paramsecure_random);
        // pending_reset_date
        const parampending_reset_date = self.pending_reset_date;
        if (parampending_reset_date) |parampending_reset_dateflag| {
        result += @sizeOf(@TypeOf(parampending_reset_dateflag));        }

        // login_email_pattern
        const paramlogin_email_pattern = self.login_email_pattern;
        if (paramlogin_email_pattern) |paramlogin_email_patternflag| {
        result += base.strEncodedSize(paramlogin_email_patternflag);        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 6;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AccountPasswordSettings= struct {
    email: ?[]const u8,
    secure_settings: ?ISecureSecretSettings,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // email
        const paramemail = self.email;
        if (paramemail) |paramemailflag| {
        result += base.strEncodedSize(paramemailflag);        }

        // secure_settings
        const paramsecure_settings = self.secure_settings;
        if (paramsecure_settings) |paramsecure_settingsflag| {
        result += paramsecure_settingsflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AccountPasswordInputSettings= struct {
    new_algo: ?IPasswordKdfAlgo,
    new_password_hash: ?[]const u8,
    hint: ?[]const u8,
    email: ?[]const u8,
    new_secure_settings: ?ISecureSecretSettings,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // new_algo
        const paramnew_algo = self.new_algo;
        if (paramnew_algo) |paramnew_algoflag| {
        result += paramnew_algoflag.size();
        }

        // new_password_hash
        const paramnew_password_hash = self.new_password_hash;
        if (paramnew_password_hash) |paramnew_password_hashflag| {
        result += base.strEncodedSize(paramnew_password_hashflag);        }

        // hint
        const paramhint = self.hint;
        if (paramhint) |paramhintflag| {
        result += base.strEncodedSize(paramhintflag);        }

        // email
        const paramemail = self.email;
        if (paramemail) |paramemailflag| {
        result += base.strEncodedSize(paramemailflag);        }

        // new_secure_settings
        const paramnew_secure_settings = self.new_secure_settings;
        if (paramnew_secure_settings) |paramnew_secure_settingsflag| {
        result += paramnew_secure_settingsflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AuthPasswordRecovery= struct {
    email_pattern: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // email_pattern
        const paramemail_pattern = self.email_pattern;
        result += base.strEncodedSize(paramemail_pattern);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const ReceivedNotifyMessage= struct {
    id: i32,
    flags: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // flags
        const paramflags = self.flags;
        result += @sizeOf(@TypeOf(paramflags));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChatInviteExported= struct {
    revoked: ?bool,
    permanent: ?bool,
    request_needed: ?bool,
    link: []const u8,
    admin_id: i64,
    date: i32,
    start_date: ?i32,
    expire_date: ?i32,
    usage_limit: ?i32,
    usage: ?i32,
    requested: ?i32,
    subscription_expired: ?i32,
    title: ?[]const u8,
    subscription_pricing: ?IStarsSubscriptionPricing,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // revoked
        // true flag

        // permanent
        // true flag

        // request_needed
        // true flag

        // link
        const paramlink = self.link;
        result += base.strEncodedSize(paramlink);
        // admin_id
        const paramadmin_id = self.admin_id;
        result += @sizeOf(@TypeOf(paramadmin_id));
        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        // start_date
        const paramstart_date = self.start_date;
        if (paramstart_date) |paramstart_dateflag| {
        result += @sizeOf(@TypeOf(paramstart_dateflag));        }

        // expire_date
        const paramexpire_date = self.expire_date;
        if (paramexpire_date) |paramexpire_dateflag| {
        result += @sizeOf(@TypeOf(paramexpire_dateflag));        }

        // usage_limit
        const paramusage_limit = self.usage_limit;
        if (paramusage_limit) |paramusage_limitflag| {
        result += @sizeOf(@TypeOf(paramusage_limitflag));        }

        // usage
        const paramusage = self.usage;
        if (paramusage) |paramusageflag| {
        result += @sizeOf(@TypeOf(paramusageflag));        }

        // requested
        const paramrequested = self.requested;
        if (paramrequested) |paramrequestedflag| {
        result += @sizeOf(@TypeOf(paramrequestedflag));        }

        // subscription_expired
        const paramsubscription_expired = self.subscription_expired;
        if (paramsubscription_expired) |paramsubscription_expiredflag| {
        result += @sizeOf(@TypeOf(paramsubscription_expiredflag));        }

        // title
        const paramtitle = self.title;
        if (paramtitle) |paramtitleflag| {
        result += base.strEncodedSize(paramtitleflag);        }

        // subscription_pricing
        const paramsubscription_pricing = self.subscription_pricing;
        if (paramsubscription_pricing) |paramsubscription_pricingflag| {
        result += paramsubscription_pricingflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 6;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 7;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 10;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 8;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 9;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChatInvitePublicJoinRequests= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const ChatInviteAlready= struct {
    chat: IChat,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // chat
        const paramchat = self.chat;
        result += paramchat.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const ChatInvite= struct {
    channel: ?bool,
    broadcast: ?bool,
    public: ?bool,
    megagroup: ?bool,
    request_needed: ?bool,
    verified: ?bool,
    scam: ?bool,
    fake: ?bool,
    can_refulfill_subscription: ?bool,
    title: []const u8,
    about: ?[]const u8,
    photo: IPhoto,
    participants_count: i32,
    participants: ?[]const IUser,
    color: i32,
    subscription_pricing: ?IStarsSubscriptionPricing,
    subscription_form_id: ?i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // channel
        // true flag

        // broadcast
        // true flag

        // public
        // true flag

        // megagroup
        // true flag

        // request_needed
        // true flag

        // verified
        // true flag

        // scam
        // true flag

        // fake
        // true flag

        // can_refulfill_subscription
        // true flag

        // title
        const paramtitle = self.title;
        result += base.strEncodedSize(paramtitle);
        // about
        const paramabout = self.about;
        if (paramabout) |paramaboutflag| {
        result += base.strEncodedSize(paramaboutflag);        }

        // photo
        const paramphoto = self.photo;
        result += paramphoto.size();

        // participants_count
        const paramparticipants_count = self.participants_count;
        result += @sizeOf(@TypeOf(paramparticipants_count));
        // participants
        const paramparticipants = self.participants;
        if (paramparticipants) |paramparticipantsflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramparticipantsflag) |paramparticipantsflagitem| {
        result += paramparticipantsflagitem.size();
        }
        }

        // color
        const paramcolor = self.color;
        result += @sizeOf(@TypeOf(paramcolor));
        // subscription_pricing
        const paramsubscription_pricing = self.subscription_pricing;
        if (paramsubscription_pricing) |paramsubscription_pricingflag| {
        result += paramsubscription_pricingflag.size();
        }

        // subscription_form_id
        const paramsubscription_form_id = self.subscription_form_id;
        if (paramsubscription_form_id) |paramsubscription_form_idflag| {
        result += @sizeOf(@TypeOf(paramsubscription_form_idflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 6;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 7;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 8;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 9;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 11;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 10;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 12;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChatInvitePeek= struct {
    chat: IChat,
    expires: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // chat
        const paramchat = self.chat;
        result += paramchat.size();

        // expires
        const paramexpires = self.expires;
        result += @sizeOf(@TypeOf(paramexpires));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputStickerSetEmpty= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const InputStickerSetID= struct {
    id: i64,
    access_hash: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // access_hash
        const paramaccess_hash = self.access_hash;
        result += @sizeOf(@TypeOf(paramaccess_hash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputStickerSetShortName= struct {
    short_name: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // short_name
        const paramshort_name = self.short_name;
        result += base.strEncodedSize(paramshort_name);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const InputStickerSetAnimatedEmoji= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const InputStickerSetDice= struct {
    emoticon: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // emoticon
        const paramemoticon = self.emoticon;
        result += base.strEncodedSize(paramemoticon);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const InputStickerSetAnimatedEmojiAnimations= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const InputStickerSetPremiumGifts= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const InputStickerSetEmojiGenericAnimations= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const InputStickerSetEmojiDefaultStatuses= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const InputStickerSetEmojiDefaultTopicIcons= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const InputStickerSetEmojiChannelDefaultStatuses= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const StickerSet= struct {
    archived: ?bool,
    official: ?bool,
    masks: ?bool,
    emojis: ?bool,
    text_color: ?bool,
    channel_emoji_status: ?bool,
    creator: ?bool,
    installed_date: ?i32,
    id: i64,
    access_hash: i64,
    title: []const u8,
    short_name: []const u8,
    thumbs: ?[]const IPhotoSize,
    thumb_dc_id: ?i32,
    thumb_version: ?i32,
    thumb_document_id: ?i64,
    count: i32,
    hash: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // archived
        // true flag

        // official
        // true flag

        // masks
        // true flag

        // emojis
        // true flag

        // text_color
        // true flag

        // channel_emoji_status
        // true flag

        // creator
        // true flag

        // installed_date
        const paraminstalled_date = self.installed_date;
        if (paraminstalled_date) |paraminstalled_dateflag| {
        result += @sizeOf(@TypeOf(paraminstalled_dateflag));        }

        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // access_hash
        const paramaccess_hash = self.access_hash;
        result += @sizeOf(@TypeOf(paramaccess_hash));
        // title
        const paramtitle = self.title;
        result += base.strEncodedSize(paramtitle);
        // short_name
        const paramshort_name = self.short_name;
        result += base.strEncodedSize(paramshort_name);
        // thumbs
        const paramthumbs = self.thumbs;
        if (paramthumbs) |paramthumbsflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramthumbsflag) |paramthumbsflagitem| {
        result += paramthumbsflagitem.size();
        }
        }

        // thumb_dc_id
        const paramthumb_dc_id = self.thumb_dc_id;
        if (paramthumb_dc_id) |paramthumb_dc_idflag| {
        result += @sizeOf(@TypeOf(paramthumb_dc_idflag));        }

        // thumb_version
        const paramthumb_version = self.thumb_version;
        if (paramthumb_version) |paramthumb_versionflag| {
        result += @sizeOf(@TypeOf(paramthumb_versionflag));        }

        // thumb_document_id
        const paramthumb_document_id = self.thumb_document_id;
        if (paramthumb_document_id) |paramthumb_document_idflag| {
        result += @sizeOf(@TypeOf(paramthumb_document_idflag));        }

        // count
        const paramcount = self.count;
        result += @sizeOf(@TypeOf(paramcount));
        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 7;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 9;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 10;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 11;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 8;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesStickerSet= struct {
    set: IStickerSet,
    packs: []const IStickerPack,
    keywords: []const IStickerKeyword,
    documents: []const IDocument,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // set
        const paramset = self.set;
        result += paramset.size();

        // packs
        const parampacks = self.packs;
        result += 4; // vector id
        result += 4; // vector size
        for (parampacks) |parampacksitem| {
        result += parampacksitem.size();
        }

        // keywords
        const paramkeywords = self.keywords;
        result += 4; // vector id
        result += 4; // vector size
        for (paramkeywords) |paramkeywordsitem| {
        result += paramkeywordsitem.size();
        }

        // documents
        const paramdocuments = self.documents;
        result += 4; // vector id
        result += 4; // vector size
        for (paramdocuments) |paramdocumentsitem| {
        result += paramdocumentsitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesStickerSetNotModified= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const BotCommand= struct {
    command: []const u8,
    description: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // command
        const paramcommand = self.command;
        result += base.strEncodedSize(paramcommand);
        // description
        const paramdescription = self.description;
        result += base.strEncodedSize(paramdescription);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const BotInfo= struct {
    has_preview_medias: ?bool,
    user_id: ?i64,
    description: ?[]const u8,
    description_photo: ?IPhoto,
    description_document: ?IDocument,
    commands: ?[]const IBotCommand,
    menu_button: ?IBotMenuButton,
    privacy_policy_url: ?[]const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // has_preview_medias
        // true flag

        // user_id
        const paramuser_id = self.user_id;
        if (paramuser_id) |paramuser_idflag| {
        result += @sizeOf(@TypeOf(paramuser_idflag));        }

        // description
        const paramdescription = self.description;
        if (paramdescription) |paramdescriptionflag| {
        result += base.strEncodedSize(paramdescriptionflag);        }

        // description_photo
        const paramdescription_photo = self.description_photo;
        if (paramdescription_photo) |paramdescription_photoflag| {
        result += paramdescription_photoflag.size();
        }

        // description_document
        const paramdescription_document = self.description_document;
        if (paramdescription_document) |paramdescription_documentflag| {
        result += paramdescription_documentflag.size();
        }

        // commands
        const paramcommands = self.commands;
        if (paramcommands) |paramcommandsflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramcommandsflag) |paramcommandsflagitem| {
        result += paramcommandsflagitem.size();
        }
        }

        // menu_button
        const parammenu_button = self.menu_button;
        if (parammenu_button) |parammenu_buttonflag| {
        result += parammenu_buttonflag.size();
        }

        // privacy_policy_url
        const paramprivacy_policy_url = self.privacy_policy_url;
        if (paramprivacy_policy_url) |paramprivacy_policy_urlflag| {
        result += base.strEncodedSize(paramprivacy_policy_urlflag);        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 6;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 7;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const KeyboardButton= struct {
    text: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // text
        const paramtext = self.text;
        result += base.strEncodedSize(paramtext);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const KeyboardButtonUrl= struct {
    text: []const u8,
    url: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // text
        const paramtext = self.text;
        result += base.strEncodedSize(paramtext);
        // url
        const paramurl = self.url;
        result += base.strEncodedSize(paramurl);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const KeyboardButtonCallback= struct {
    requires_password: ?bool,
    text: []const u8,
    data: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // requires_password
        // true flag

        // text
        const paramtext = self.text;
        result += base.strEncodedSize(paramtext);
        // data
        const paramdata = self.data;
        result += base.strEncodedSize(paramdata);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const KeyboardButtonRequestPhone= struct {
    text: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // text
        const paramtext = self.text;
        result += base.strEncodedSize(paramtext);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const KeyboardButtonRequestGeoLocation= struct {
    text: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // text
        const paramtext = self.text;
        result += base.strEncodedSize(paramtext);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const KeyboardButtonSwitchInline= struct {
    same_peer: ?bool,
    text: []const u8,
    query: []const u8,
    peer_types: ?[]const IInlineQueryPeerType,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // same_peer
        // true flag

        // text
        const paramtext = self.text;
        result += base.strEncodedSize(paramtext);
        // query
        const paramquery = self.query;
        result += base.strEncodedSize(paramquery);
        // peer_types
        const parampeer_types = self.peer_types;
        if (parampeer_types) |parampeer_typesflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (parampeer_typesflag) |parampeer_typesflagitem| {
        result += parampeer_typesflagitem.size();
        }
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const KeyboardButtonGame= struct {
    text: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // text
        const paramtext = self.text;
        result += base.strEncodedSize(paramtext);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const KeyboardButtonBuy= struct {
    text: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // text
        const paramtext = self.text;
        result += base.strEncodedSize(paramtext);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const KeyboardButtonUrlAuth= struct {
    text: []const u8,
    fwd_text: ?[]const u8,
    url: []const u8,
    button_id: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // text
        const paramtext = self.text;
        result += base.strEncodedSize(paramtext);
        // fwd_text
        const paramfwd_text = self.fwd_text;
        if (paramfwd_text) |paramfwd_textflag| {
        result += base.strEncodedSize(paramfwd_textflag);        }

        // url
        const paramurl = self.url;
        result += base.strEncodedSize(paramurl);
        // button_id
        const parambutton_id = self.button_id;
        result += @sizeOf(@TypeOf(parambutton_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputKeyboardButtonUrlAuth= struct {
    request_write_access: ?bool,
    text: []const u8,
    fwd_text: ?[]const u8,
    url: []const u8,
    bot: IInputUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // request_write_access
        // true flag

        // text
        const paramtext = self.text;
        result += base.strEncodedSize(paramtext);
        // fwd_text
        const paramfwd_text = self.fwd_text;
        if (paramfwd_text) |paramfwd_textflag| {
        result += base.strEncodedSize(paramfwd_textflag);        }

        // url
        const paramurl = self.url;
        result += base.strEncodedSize(paramurl);
        // bot
        const parambot = self.bot;
        result += parambot.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const KeyboardButtonRequestPoll= struct {
    quiz: ?bool,
    text: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // quiz
        const paramquiz = self.quiz;
        if (paramquiz) |paramquizflag| {
        _ = paramquizflag;
        result += 4;        }

        // text
        const paramtext = self.text;
        result += base.strEncodedSize(paramtext);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputKeyboardButtonUserProfile= struct {
    text: []const u8,
    user_id: IInputUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // text
        const paramtext = self.text;
        result += base.strEncodedSize(paramtext);
        // user_id
        const paramuser_id = self.user_id;
        result += paramuser_id.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const KeyboardButtonUserProfile= struct {
    text: []const u8,
    user_id: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // text
        const paramtext = self.text;
        result += base.strEncodedSize(paramtext);
        // user_id
        const paramuser_id = self.user_id;
        result += @sizeOf(@TypeOf(paramuser_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const KeyboardButtonWebView= struct {
    text: []const u8,
    url: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // text
        const paramtext = self.text;
        result += base.strEncodedSize(paramtext);
        // url
        const paramurl = self.url;
        result += base.strEncodedSize(paramurl);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const KeyboardButtonSimpleWebView= struct {
    text: []const u8,
    url: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // text
        const paramtext = self.text;
        result += base.strEncodedSize(paramtext);
        // url
        const paramurl = self.url;
        result += base.strEncodedSize(paramurl);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const KeyboardButtonRequestPeer= struct {
    text: []const u8,
    button_id: i32,
    peer_type: IRequestPeerType,
    max_quantity: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // text
        const paramtext = self.text;
        result += base.strEncodedSize(paramtext);
        // button_id
        const parambutton_id = self.button_id;
        result += @sizeOf(@TypeOf(parambutton_id));
        // peer_type
        const parampeer_type = self.peer_type;
        result += parampeer_type.size();

        // max_quantity
        const parammax_quantity = self.max_quantity;
        result += @sizeOf(@TypeOf(parammax_quantity));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputKeyboardButtonRequestPeer= struct {
    name_requested: ?bool,
    username_requested: ?bool,
    photo_requested: ?bool,
    text: []const u8,
    button_id: i32,
    peer_type: IRequestPeerType,
    max_quantity: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // name_requested
        // true flag

        // username_requested
        // true flag

        // photo_requested
        // true flag

        // text
        const paramtext = self.text;
        result += base.strEncodedSize(paramtext);
        // button_id
        const parambutton_id = self.button_id;
        result += @sizeOf(@TypeOf(parambutton_id));
        // peer_type
        const parampeer_type = self.peer_type;
        result += parampeer_type.size();

        // max_quantity
        const parammax_quantity = self.max_quantity;
        result += @sizeOf(@TypeOf(parammax_quantity));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const KeyboardButtonCopy= struct {
    text: []const u8,
    copy_text: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // text
        const paramtext = self.text;
        result += base.strEncodedSize(paramtext);
        // copy_text
        const paramcopy_text = self.copy_text;
        result += base.strEncodedSize(paramcopy_text);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const KeyboardButtonRow= struct {
    buttons: []const IKeyboardButton,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // buttons
        const parambuttons = self.buttons;
        result += 4; // vector id
        result += 4; // vector size
        for (parambuttons) |parambuttonsitem| {
        result += parambuttonsitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const ReplyKeyboardHide= struct {
    selective: ?bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // selective
        // true flag


        _ = self;
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        }
};
const ReplyKeyboardForceReply= struct {
    single_use: ?bool,
    selective: ?bool,
    placeholder: ?[]const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // single_use
        // true flag

        // selective
        // true flag

        // placeholder
        const paramplaceholder = self.placeholder;
        if (paramplaceholder) |paramplaceholderflag| {
        result += base.strEncodedSize(paramplaceholderflag);        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ReplyKeyboardMarkup= struct {
    resize: ?bool,
    single_use: ?bool,
    selective: ?bool,
    persistent: ?bool,
    rows: []const IKeyboardButtonRow,
    placeholder: ?[]const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // resize
        // true flag

        // single_use
        // true flag

        // selective
        // true flag

        // persistent
        // true flag

        // rows
        const paramrows = self.rows;
        result += 4; // vector id
        result += 4; // vector size
        for (paramrows) |paramrowsitem| {
        result += paramrowsitem.size();
        }

        // placeholder
        const paramplaceholder = self.placeholder;
        if (paramplaceholder) |paramplaceholderflag| {
        result += base.strEncodedSize(paramplaceholderflag);        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ReplyInlineMarkup= struct {
    rows: []const IKeyboardButtonRow,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // rows
        const paramrows = self.rows;
        result += 4; // vector id
        result += 4; // vector size
        for (paramrows) |paramrowsitem| {
        result += paramrowsitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MessageEntityUnknown= struct {
    offset: i32,
    length: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // offset
        const paramoffset = self.offset;
        result += @sizeOf(@TypeOf(paramoffset));
        // length
        const paramlength = self.length;
        result += @sizeOf(@TypeOf(paramlength));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessageEntityMention= struct {
    offset: i32,
    length: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // offset
        const paramoffset = self.offset;
        result += @sizeOf(@TypeOf(paramoffset));
        // length
        const paramlength = self.length;
        result += @sizeOf(@TypeOf(paramlength));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessageEntityHashtag= struct {
    offset: i32,
    length: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // offset
        const paramoffset = self.offset;
        result += @sizeOf(@TypeOf(paramoffset));
        // length
        const paramlength = self.length;
        result += @sizeOf(@TypeOf(paramlength));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessageEntityBotCommand= struct {
    offset: i32,
    length: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // offset
        const paramoffset = self.offset;
        result += @sizeOf(@TypeOf(paramoffset));
        // length
        const paramlength = self.length;
        result += @sizeOf(@TypeOf(paramlength));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessageEntityUrl= struct {
    offset: i32,
    length: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // offset
        const paramoffset = self.offset;
        result += @sizeOf(@TypeOf(paramoffset));
        // length
        const paramlength = self.length;
        result += @sizeOf(@TypeOf(paramlength));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessageEntityEmail= struct {
    offset: i32,
    length: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // offset
        const paramoffset = self.offset;
        result += @sizeOf(@TypeOf(paramoffset));
        // length
        const paramlength = self.length;
        result += @sizeOf(@TypeOf(paramlength));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessageEntityBold= struct {
    offset: i32,
    length: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // offset
        const paramoffset = self.offset;
        result += @sizeOf(@TypeOf(paramoffset));
        // length
        const paramlength = self.length;
        result += @sizeOf(@TypeOf(paramlength));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessageEntityItalic= struct {
    offset: i32,
    length: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // offset
        const paramoffset = self.offset;
        result += @sizeOf(@TypeOf(paramoffset));
        // length
        const paramlength = self.length;
        result += @sizeOf(@TypeOf(paramlength));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessageEntityCode= struct {
    offset: i32,
    length: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // offset
        const paramoffset = self.offset;
        result += @sizeOf(@TypeOf(paramoffset));
        // length
        const paramlength = self.length;
        result += @sizeOf(@TypeOf(paramlength));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessageEntityPre= struct {
    offset: i32,
    length: i32,
    language: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // offset
        const paramoffset = self.offset;
        result += @sizeOf(@TypeOf(paramoffset));
        // length
        const paramlength = self.length;
        result += @sizeOf(@TypeOf(paramlength));
        // language
        const paramlanguage = self.language;
        result += base.strEncodedSize(paramlanguage);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessageEntityTextUrl= struct {
    offset: i32,
    length: i32,
    url: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // offset
        const paramoffset = self.offset;
        result += @sizeOf(@TypeOf(paramoffset));
        // length
        const paramlength = self.length;
        result += @sizeOf(@TypeOf(paramlength));
        // url
        const paramurl = self.url;
        result += base.strEncodedSize(paramurl);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessageEntityMentionName= struct {
    offset: i32,
    length: i32,
    user_id: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // offset
        const paramoffset = self.offset;
        result += @sizeOf(@TypeOf(paramoffset));
        // length
        const paramlength = self.length;
        result += @sizeOf(@TypeOf(paramlength));
        // user_id
        const paramuser_id = self.user_id;
        result += @sizeOf(@TypeOf(paramuser_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputMessageEntityMentionName= struct {
    offset: i32,
    length: i32,
    user_id: IInputUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // offset
        const paramoffset = self.offset;
        result += @sizeOf(@TypeOf(paramoffset));
        // length
        const paramlength = self.length;
        result += @sizeOf(@TypeOf(paramlength));
        // user_id
        const paramuser_id = self.user_id;
        result += paramuser_id.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessageEntityPhone= struct {
    offset: i32,
    length: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // offset
        const paramoffset = self.offset;
        result += @sizeOf(@TypeOf(paramoffset));
        // length
        const paramlength = self.length;
        result += @sizeOf(@TypeOf(paramlength));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessageEntityCashtag= struct {
    offset: i32,
    length: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // offset
        const paramoffset = self.offset;
        result += @sizeOf(@TypeOf(paramoffset));
        // length
        const paramlength = self.length;
        result += @sizeOf(@TypeOf(paramlength));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessageEntityUnderline= struct {
    offset: i32,
    length: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // offset
        const paramoffset = self.offset;
        result += @sizeOf(@TypeOf(paramoffset));
        // length
        const paramlength = self.length;
        result += @sizeOf(@TypeOf(paramlength));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessageEntityStrike= struct {
    offset: i32,
    length: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // offset
        const paramoffset = self.offset;
        result += @sizeOf(@TypeOf(paramoffset));
        // length
        const paramlength = self.length;
        result += @sizeOf(@TypeOf(paramlength));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessageEntityBankCard= struct {
    offset: i32,
    length: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // offset
        const paramoffset = self.offset;
        result += @sizeOf(@TypeOf(paramoffset));
        // length
        const paramlength = self.length;
        result += @sizeOf(@TypeOf(paramlength));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessageEntitySpoiler= struct {
    offset: i32,
    length: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // offset
        const paramoffset = self.offset;
        result += @sizeOf(@TypeOf(paramoffset));
        // length
        const paramlength = self.length;
        result += @sizeOf(@TypeOf(paramlength));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessageEntityCustomEmoji= struct {
    offset: i32,
    length: i32,
    document_id: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // offset
        const paramoffset = self.offset;
        result += @sizeOf(@TypeOf(paramoffset));
        // length
        const paramlength = self.length;
        result += @sizeOf(@TypeOf(paramlength));
        // document_id
        const paramdocument_id = self.document_id;
        result += @sizeOf(@TypeOf(paramdocument_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessageEntityBlockquote= struct {
    collapsed: ?bool,
    offset: i32,
    length: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // collapsed
        // true flag

        // offset
        const paramoffset = self.offset;
        result += @sizeOf(@TypeOf(paramoffset));
        // length
        const paramlength = self.length;
        result += @sizeOf(@TypeOf(paramlength));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputChannelEmpty= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const InputChannel= struct {
    channel_id: i64,
    access_hash: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // channel_id
        const paramchannel_id = self.channel_id;
        result += @sizeOf(@TypeOf(paramchannel_id));
        // access_hash
        const paramaccess_hash = self.access_hash;
        result += @sizeOf(@TypeOf(paramaccess_hash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputChannelFromMessage= struct {
    peer: IInputPeer,
    msg_id: i32,
    channel_id: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // msg_id
        const parammsg_id = self.msg_id;
        result += @sizeOf(@TypeOf(parammsg_id));
        // channel_id
        const paramchannel_id = self.channel_id;
        result += @sizeOf(@TypeOf(paramchannel_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ContactsResolvedPeer= struct {
    peer: IPeer,
    chats: []const IChat,
    users: []const IUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // chats
        const paramchats = self.chats;
        result += 4; // vector id
        result += 4; // vector size
        for (paramchats) |paramchatsitem| {
        result += paramchatsitem.size();
        }

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessageRange= struct {
    min_id: i32,
    max_id: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // min_id
        const parammin_id = self.min_id;
        result += @sizeOf(@TypeOf(parammin_id));
        // max_id
        const parammax_id = self.max_id;
        result += @sizeOf(@TypeOf(parammax_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdatesChannelDifferenceEmpty= struct {
    final: ?bool,
    pts: i32,
    timeout: ?i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // final
        // true flag

        // pts
        const parampts = self.pts;
        result += @sizeOf(@TypeOf(parampts));
        // timeout
        const paramtimeout = self.timeout;
        if (paramtimeout) |paramtimeoutflag| {
        result += @sizeOf(@TypeOf(paramtimeoutflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdatesChannelDifferenceTooLong= struct {
    final: ?bool,
    timeout: ?i32,
    dialog: IDialog,
    messages: []const IMessage,
    chats: []const IChat,
    users: []const IUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // final
        // true flag

        // timeout
        const paramtimeout = self.timeout;
        if (paramtimeout) |paramtimeoutflag| {
        result += @sizeOf(@TypeOf(paramtimeoutflag));        }

        // dialog
        const paramdialog = self.dialog;
        result += paramdialog.size();

        // messages
        const parammessages = self.messages;
        result += 4; // vector id
        result += 4; // vector size
        for (parammessages) |parammessagesitem| {
        result += parammessagesitem.size();
        }

        // chats
        const paramchats = self.chats;
        result += 4; // vector id
        result += 4; // vector size
        for (paramchats) |paramchatsitem| {
        result += paramchatsitem.size();
        }

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdatesChannelDifference= struct {
    final: ?bool,
    pts: i32,
    timeout: ?i32,
    new_messages: []const IMessage,
    other_updates: []const IUpdate,
    chats: []const IChat,
    users: []const IUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // final
        // true flag

        // pts
        const parampts = self.pts;
        result += @sizeOf(@TypeOf(parampts));
        // timeout
        const paramtimeout = self.timeout;
        if (paramtimeout) |paramtimeoutflag| {
        result += @sizeOf(@TypeOf(paramtimeoutflag));        }

        // new_messages
        const paramnew_messages = self.new_messages;
        result += 4; // vector id
        result += 4; // vector size
        for (paramnew_messages) |paramnew_messagesitem| {
        result += paramnew_messagesitem.size();
        }

        // other_updates
        const paramother_updates = self.other_updates;
        result += 4; // vector id
        result += 4; // vector size
        for (paramother_updates) |paramother_updatesitem| {
        result += paramother_updatesitem.size();
        }

        // chats
        const paramchats = self.chats;
        result += 4; // vector id
        result += 4; // vector size
        for (paramchats) |paramchatsitem| {
        result += paramchatsitem.size();
        }

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelMessagesFilterEmpty= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const ChannelMessagesFilter= struct {
    exclude_new_messages: ?bool,
    ranges: []const IMessageRange,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // exclude_new_messages
        // true flag

        // ranges
        const paramranges = self.ranges;
        result += 4; // vector id
        result += 4; // vector size
        for (paramranges) |paramrangesitem| {
        result += paramrangesitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelParticipant= struct {
    user_id: i64,
    date: i32,
    subscription_until_date: ?i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // user_id
        const paramuser_id = self.user_id;
        result += @sizeOf(@TypeOf(paramuser_id));
        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        // subscription_until_date
        const paramsubscription_until_date = self.subscription_until_date;
        if (paramsubscription_until_date) |paramsubscription_until_dateflag| {
        result += @sizeOf(@TypeOf(paramsubscription_until_dateflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelParticipantSelf= struct {
    via_request: ?bool,
    user_id: i64,
    inviter_id: i64,
    date: i32,
    subscription_until_date: ?i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // via_request
        // true flag

        // user_id
        const paramuser_id = self.user_id;
        result += @sizeOf(@TypeOf(paramuser_id));
        // inviter_id
        const paraminviter_id = self.inviter_id;
        result += @sizeOf(@TypeOf(paraminviter_id));
        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        // subscription_until_date
        const paramsubscription_until_date = self.subscription_until_date;
        if (paramsubscription_until_date) |paramsubscription_until_dateflag| {
        result += @sizeOf(@TypeOf(paramsubscription_until_dateflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelParticipantCreator= struct {
    user_id: i64,
    admin_rights: IChatAdminRights,
    rank: ?[]const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // user_id
        const paramuser_id = self.user_id;
        result += @sizeOf(@TypeOf(paramuser_id));
        // admin_rights
        const paramadmin_rights = self.admin_rights;
        result += paramadmin_rights.size();

        // rank
        const paramrank = self.rank;
        if (paramrank) |paramrankflag| {
        result += base.strEncodedSize(paramrankflag);        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelParticipantAdmin= struct {
    can_edit: ?bool,
    self: ?bool,
    user_id: i64,
    inviter_id: ?i64,
    promoted_by: i64,
    date: i32,
    admin_rights: IChatAdminRights,
    rank: ?[]const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // can_edit
        // true flag

        // self
        // true flag

        // user_id
        const paramuser_id = self.user_id;
        result += @sizeOf(@TypeOf(paramuser_id));
        // inviter_id
        const paraminviter_id = self.inviter_id;
        if (paraminviter_id) |paraminviter_idflag| {
        result += @sizeOf(@TypeOf(paraminviter_idflag));        }

        // promoted_by
        const parampromoted_by = self.promoted_by;
        result += @sizeOf(@TypeOf(parampromoted_by));
        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        // admin_rights
        const paramadmin_rights = self.admin_rights;
        result += paramadmin_rights.size();

        // rank
        const paramrank = self.rank;
        if (paramrank) |paramrankflag| {
        result += base.strEncodedSize(paramrankflag);        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelParticipantBanned= struct {
    left: ?bool,
    peer: IPeer,
    kicked_by: i64,
    date: i32,
    banned_rights: IChatBannedRights,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // left
        // true flag

        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // kicked_by
        const paramkicked_by = self.kicked_by;
        result += @sizeOf(@TypeOf(paramkicked_by));
        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        // banned_rights
        const parambanned_rights = self.banned_rights;
        result += parambanned_rights.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelParticipantLeft= struct {
    peer: IPeer,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const ChannelParticipantsRecent= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const ChannelParticipantsAdmins= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const ChannelParticipantsKicked= struct {
    q: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // q
        const paramq = self.q;
        result += base.strEncodedSize(paramq);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const ChannelParticipantsBots= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const ChannelParticipantsBanned= struct {
    q: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // q
        const paramq = self.q;
        result += base.strEncodedSize(paramq);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const ChannelParticipantsSearch= struct {
    q: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // q
        const paramq = self.q;
        result += base.strEncodedSize(paramq);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const ChannelParticipantsContacts= struct {
    q: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // q
        const paramq = self.q;
        result += base.strEncodedSize(paramq);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const ChannelParticipantsMentions= struct {
    q: ?[]const u8,
    top_msg_id: ?i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // q
        const paramq = self.q;
        if (paramq) |paramqflag| {
        result += base.strEncodedSize(paramqflag);        }

        // top_msg_id
        const paramtop_msg_id = self.top_msg_id;
        if (paramtop_msg_id) |paramtop_msg_idflag| {
        result += @sizeOf(@TypeOf(paramtop_msg_idflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelsChannelParticipants= struct {
    count: i32,
    participants: []const IChannelParticipant,
    chats: []const IChat,
    users: []const IUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // count
        const paramcount = self.count;
        result += @sizeOf(@TypeOf(paramcount));
        // participants
        const paramparticipants = self.participants;
        result += 4; // vector id
        result += 4; // vector size
        for (paramparticipants) |paramparticipantsitem| {
        result += paramparticipantsitem.size();
        }

        // chats
        const paramchats = self.chats;
        result += 4; // vector id
        result += 4; // vector size
        for (paramchats) |paramchatsitem| {
        result += paramchatsitem.size();
        }

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelsChannelParticipantsNotModified= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const ChannelsChannelParticipant= struct {
    participant: IChannelParticipant,
    chats: []const IChat,
    users: []const IUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // participant
        const paramparticipant = self.participant;
        result += paramparticipant.size();

        // chats
        const paramchats = self.chats;
        result += 4; // vector id
        result += 4; // vector size
        for (paramchats) |paramchatsitem| {
        result += paramchatsitem.size();
        }

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const HelpTermsOfService= struct {
    popup: ?bool,
    id: IDataJSON,
    text: []const u8,
    entities: []const IMessageEntity,
    min_age_confirm: ?i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // popup
        // true flag

        // id
        const paramid = self.id;
        result += paramid.size();

        // text
        const paramtext = self.text;
        result += base.strEncodedSize(paramtext);
        // entities
        const paramentities = self.entities;
        result += 4; // vector id
        result += 4; // vector size
        for (paramentities) |paramentitiesitem| {
        result += paramentitiesitem.size();
        }

        // min_age_confirm
        const parammin_age_confirm = self.min_age_confirm;
        if (parammin_age_confirm) |parammin_age_confirmflag| {
        result += @sizeOf(@TypeOf(parammin_age_confirmflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesSavedGifsNotModified= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const MessagesSavedGifs= struct {
    hash: i64,
    gifs: []const IDocument,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        // gifs
        const paramgifs = self.gifs;
        result += 4; // vector id
        result += 4; // vector size
        for (paramgifs) |paramgifsitem| {
        result += paramgifsitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputBotInlineMessageMediaAuto= struct {
    invert_media: ?bool,
    message: []const u8,
    entities: ?[]const IMessageEntity,
    reply_markup: ?IReplyMarkup,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // invert_media
        // true flag

        // message
        const parammessage = self.message;
        result += base.strEncodedSize(parammessage);
        // entities
        const paramentities = self.entities;
        if (paramentities) |paramentitiesflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramentitiesflag) |paramentitiesflagitem| {
        result += paramentitiesflagitem.size();
        }
        }

        // reply_markup
        const paramreply_markup = self.reply_markup;
        if (paramreply_markup) |paramreply_markupflag| {
        result += paramreply_markupflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputBotInlineMessageText= struct {
    no_webpage: ?bool,
    invert_media: ?bool,
    message: []const u8,
    entities: ?[]const IMessageEntity,
    reply_markup: ?IReplyMarkup,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // no_webpage
        // true flag

        // invert_media
        // true flag

        // message
        const parammessage = self.message;
        result += base.strEncodedSize(parammessage);
        // entities
        const paramentities = self.entities;
        if (paramentities) |paramentitiesflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramentitiesflag) |paramentitiesflagitem| {
        result += paramentitiesflagitem.size();
        }
        }

        // reply_markup
        const paramreply_markup = self.reply_markup;
        if (paramreply_markup) |paramreply_markupflag| {
        result += paramreply_markupflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputBotInlineMessageMediaGeo= struct {
    geo_point: IInputGeoPoint,
    heading: ?i32,
    period: ?i32,
    proximity_notification_radius: ?i32,
    reply_markup: ?IReplyMarkup,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // geo_point
        const paramgeo_point = self.geo_point;
        result += paramgeo_point.size();

        // heading
        const paramheading = self.heading;
        if (paramheading) |paramheadingflag| {
        result += @sizeOf(@TypeOf(paramheadingflag));        }

        // period
        const paramperiod = self.period;
        if (paramperiod) |paramperiodflag| {
        result += @sizeOf(@TypeOf(paramperiodflag));        }

        // proximity_notification_radius
        const paramproximity_notification_radius = self.proximity_notification_radius;
        if (paramproximity_notification_radius) |paramproximity_notification_radiusflag| {
        result += @sizeOf(@TypeOf(paramproximity_notification_radiusflag));        }

        // reply_markup
        const paramreply_markup = self.reply_markup;
        if (paramreply_markup) |paramreply_markupflag| {
        result += paramreply_markupflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputBotInlineMessageMediaVenue= struct {
    geo_point: IInputGeoPoint,
    title: []const u8,
    address: []const u8,
    provider: []const u8,
    venue_id: []const u8,
    venue_type: []const u8,
    reply_markup: ?IReplyMarkup,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // geo_point
        const paramgeo_point = self.geo_point;
        result += paramgeo_point.size();

        // title
        const paramtitle = self.title;
        result += base.strEncodedSize(paramtitle);
        // address
        const paramaddress = self.address;
        result += base.strEncodedSize(paramaddress);
        // provider
        const paramprovider = self.provider;
        result += base.strEncodedSize(paramprovider);
        // venue_id
        const paramvenue_id = self.venue_id;
        result += base.strEncodedSize(paramvenue_id);
        // venue_type
        const paramvenue_type = self.venue_type;
        result += base.strEncodedSize(paramvenue_type);
        // reply_markup
        const paramreply_markup = self.reply_markup;
        if (paramreply_markup) |paramreply_markupflag| {
        result += paramreply_markupflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputBotInlineMessageMediaContact= struct {
    phone_number: []const u8,
    first_name: []const u8,
    last_name: []const u8,
    vcard: []const u8,
    reply_markup: ?IReplyMarkup,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // phone_number
        const paramphone_number = self.phone_number;
        result += base.strEncodedSize(paramphone_number);
        // first_name
        const paramfirst_name = self.first_name;
        result += base.strEncodedSize(paramfirst_name);
        // last_name
        const paramlast_name = self.last_name;
        result += base.strEncodedSize(paramlast_name);
        // vcard
        const paramvcard = self.vcard;
        result += base.strEncodedSize(paramvcard);
        // reply_markup
        const paramreply_markup = self.reply_markup;
        if (paramreply_markup) |paramreply_markupflag| {
        result += paramreply_markupflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputBotInlineMessageGame= struct {
    reply_markup: ?IReplyMarkup,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // reply_markup
        const paramreply_markup = self.reply_markup;
        if (paramreply_markup) |paramreply_markupflag| {
        result += paramreply_markupflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        }
};
const InputBotInlineMessageMediaInvoice= struct {
    title: []const u8,
    description: []const u8,
    photo: ?IInputWebDocument,
    invoice: IInvoice,
    payload: []const u8,
    provider: []const u8,
    provider_data: IDataJSON,
    reply_markup: ?IReplyMarkup,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // title
        const paramtitle = self.title;
        result += base.strEncodedSize(paramtitle);
        // description
        const paramdescription = self.description;
        result += base.strEncodedSize(paramdescription);
        // photo
        const paramphoto = self.photo;
        if (paramphoto) |paramphotoflag| {
        result += paramphotoflag.size();
        }

        // invoice
        const paraminvoice = self.invoice;
        result += paraminvoice.size();

        // payload
        const parampayload = self.payload;
        result += base.strEncodedSize(parampayload);
        // provider
        const paramprovider = self.provider;
        result += base.strEncodedSize(paramprovider);
        // provider_data
        const paramprovider_data = self.provider_data;
        result += paramprovider_data.size();

        // reply_markup
        const paramreply_markup = self.reply_markup;
        if (paramreply_markup) |paramreply_markupflag| {
        result += paramreply_markupflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputBotInlineMessageMediaWebPage= struct {
    invert_media: ?bool,
    force_large_media: ?bool,
    force_small_media: ?bool,
    optional: ?bool,
    message: []const u8,
    entities: ?[]const IMessageEntity,
    url: []const u8,
    reply_markup: ?IReplyMarkup,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // invert_media
        // true flag

        // force_large_media
        // true flag

        // force_small_media
        // true flag

        // optional
        // true flag

        // message
        const parammessage = self.message;
        result += base.strEncodedSize(parammessage);
        // entities
        const paramentities = self.entities;
        if (paramentities) |paramentitiesflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramentitiesflag) |paramentitiesflagitem| {
        result += paramentitiesflagitem.size();
        }
        }

        // url
        const paramurl = self.url;
        result += base.strEncodedSize(paramurl);
        // reply_markup
        const paramreply_markup = self.reply_markup;
        if (paramreply_markup) |paramreply_markupflag| {
        result += paramreply_markupflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 6;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputBotInlineResult= struct {
    id: []const u8,
    type: []const u8,
    title: ?[]const u8,
    description: ?[]const u8,
    url: ?[]const u8,
    thumb: ?IInputWebDocument,
    content: ?IInputWebDocument,
    send_message: IInputBotInlineMessage,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // id
        const paramid = self.id;
        result += base.strEncodedSize(paramid);
        // type
        const paramtype = self.Type;
        result += base.strEncodedSize(paramtype);
        // title
        const paramtitle = self.title;
        if (paramtitle) |paramtitleflag| {
        result += base.strEncodedSize(paramtitleflag);        }

        // description
        const paramdescription = self.description;
        if (paramdescription) |paramdescriptionflag| {
        result += base.strEncodedSize(paramdescriptionflag);        }

        // url
        const paramurl = self.url;
        if (paramurl) |paramurlflag| {
        result += base.strEncodedSize(paramurlflag);        }

        // thumb
        const paramthumb = self.thumb;
        if (paramthumb) |paramthumbflag| {
        result += paramthumbflag.size();
        }

        // content
        const paramcontent = self.content;
        if (paramcontent) |paramcontentflag| {
        result += paramcontentflag.size();
        }

        // send_message
        const paramsend_message = self.send_message;
        result += paramsend_message.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputBotInlineResultPhoto= struct {
    id: []const u8,
    type: []const u8,
    photo: IInputPhoto,
    send_message: IInputBotInlineMessage,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += base.strEncodedSize(paramid);
        // type
        const paramtype = self.Type;
        result += base.strEncodedSize(paramtype);
        // photo
        const paramphoto = self.photo;
        result += paramphoto.size();

        // send_message
        const paramsend_message = self.send_message;
        result += paramsend_message.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputBotInlineResultDocument= struct {
    id: []const u8,
    type: []const u8,
    title: ?[]const u8,
    description: ?[]const u8,
    document: IInputDocument,
    send_message: IInputBotInlineMessage,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // id
        const paramid = self.id;
        result += base.strEncodedSize(paramid);
        // type
        const paramtype = self.Type;
        result += base.strEncodedSize(paramtype);
        // title
        const paramtitle = self.title;
        if (paramtitle) |paramtitleflag| {
        result += base.strEncodedSize(paramtitleflag);        }

        // description
        const paramdescription = self.description;
        if (paramdescription) |paramdescriptionflag| {
        result += base.strEncodedSize(paramdescriptionflag);        }

        // document
        const paramdocument = self.document;
        result += paramdocument.size();

        // send_message
        const paramsend_message = self.send_message;
        result += paramsend_message.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputBotInlineResultGame= struct {
    id: []const u8,
    short_name: []const u8,
    send_message: IInputBotInlineMessage,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += base.strEncodedSize(paramid);
        // short_name
        const paramshort_name = self.short_name;
        result += base.strEncodedSize(paramshort_name);
        // send_message
        const paramsend_message = self.send_message;
        result += paramsend_message.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const BotInlineMessageMediaAuto= struct {
    invert_media: ?bool,
    message: []const u8,
    entities: ?[]const IMessageEntity,
    reply_markup: ?IReplyMarkup,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // invert_media
        // true flag

        // message
        const parammessage = self.message;
        result += base.strEncodedSize(parammessage);
        // entities
        const paramentities = self.entities;
        if (paramentities) |paramentitiesflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramentitiesflag) |paramentitiesflagitem| {
        result += paramentitiesflagitem.size();
        }
        }

        // reply_markup
        const paramreply_markup = self.reply_markup;
        if (paramreply_markup) |paramreply_markupflag| {
        result += paramreply_markupflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const BotInlineMessageText= struct {
    no_webpage: ?bool,
    invert_media: ?bool,
    message: []const u8,
    entities: ?[]const IMessageEntity,
    reply_markup: ?IReplyMarkup,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // no_webpage
        // true flag

        // invert_media
        // true flag

        // message
        const parammessage = self.message;
        result += base.strEncodedSize(parammessage);
        // entities
        const paramentities = self.entities;
        if (paramentities) |paramentitiesflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramentitiesflag) |paramentitiesflagitem| {
        result += paramentitiesflagitem.size();
        }
        }

        // reply_markup
        const paramreply_markup = self.reply_markup;
        if (paramreply_markup) |paramreply_markupflag| {
        result += paramreply_markupflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const BotInlineMessageMediaGeo= struct {
    geo: IGeoPoint,
    heading: ?i32,
    period: ?i32,
    proximity_notification_radius: ?i32,
    reply_markup: ?IReplyMarkup,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // geo
        const paramgeo = self.geo;
        result += paramgeo.size();

        // heading
        const paramheading = self.heading;
        if (paramheading) |paramheadingflag| {
        result += @sizeOf(@TypeOf(paramheadingflag));        }

        // period
        const paramperiod = self.period;
        if (paramperiod) |paramperiodflag| {
        result += @sizeOf(@TypeOf(paramperiodflag));        }

        // proximity_notification_radius
        const paramproximity_notification_radius = self.proximity_notification_radius;
        if (paramproximity_notification_radius) |paramproximity_notification_radiusflag| {
        result += @sizeOf(@TypeOf(paramproximity_notification_radiusflag));        }

        // reply_markup
        const paramreply_markup = self.reply_markup;
        if (paramreply_markup) |paramreply_markupflag| {
        result += paramreply_markupflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const BotInlineMessageMediaVenue= struct {
    geo: IGeoPoint,
    title: []const u8,
    address: []const u8,
    provider: []const u8,
    venue_id: []const u8,
    venue_type: []const u8,
    reply_markup: ?IReplyMarkup,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // geo
        const paramgeo = self.geo;
        result += paramgeo.size();

        // title
        const paramtitle = self.title;
        result += base.strEncodedSize(paramtitle);
        // address
        const paramaddress = self.address;
        result += base.strEncodedSize(paramaddress);
        // provider
        const paramprovider = self.provider;
        result += base.strEncodedSize(paramprovider);
        // venue_id
        const paramvenue_id = self.venue_id;
        result += base.strEncodedSize(paramvenue_id);
        // venue_type
        const paramvenue_type = self.venue_type;
        result += base.strEncodedSize(paramvenue_type);
        // reply_markup
        const paramreply_markup = self.reply_markup;
        if (paramreply_markup) |paramreply_markupflag| {
        result += paramreply_markupflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const BotInlineMessageMediaContact= struct {
    phone_number: []const u8,
    first_name: []const u8,
    last_name: []const u8,
    vcard: []const u8,
    reply_markup: ?IReplyMarkup,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // phone_number
        const paramphone_number = self.phone_number;
        result += base.strEncodedSize(paramphone_number);
        // first_name
        const paramfirst_name = self.first_name;
        result += base.strEncodedSize(paramfirst_name);
        // last_name
        const paramlast_name = self.last_name;
        result += base.strEncodedSize(paramlast_name);
        // vcard
        const paramvcard = self.vcard;
        result += base.strEncodedSize(paramvcard);
        // reply_markup
        const paramreply_markup = self.reply_markup;
        if (paramreply_markup) |paramreply_markupflag| {
        result += paramreply_markupflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const BotInlineMessageMediaInvoice= struct {
    shipping_address_requested: ?bool,
    Test: ?bool,
    title: []const u8,
    description: []const u8,
    photo: ?IWebDocument,
    currency: []const u8,
    total_amount: i64,
    reply_markup: ?IReplyMarkup,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // shipping_address_requested
        // true flag

        // test
        // true flag

        // title
        const paramtitle = self.title;
        result += base.strEncodedSize(paramtitle);
        // description
        const paramdescription = self.description;
        result += base.strEncodedSize(paramdescription);
        // photo
        const paramphoto = self.photo;
        if (paramphoto) |paramphotoflag| {
        result += paramphotoflag.size();
        }

        // currency
        const paramcurrency = self.currency;
        result += base.strEncodedSize(paramcurrency);
        // total_amount
        const paramtotal_amount = self.total_amount;
        result += @sizeOf(@TypeOf(paramtotal_amount));
        // reply_markup
        const paramreply_markup = self.reply_markup;
        if (paramreply_markup) |paramreply_markupflag| {
        result += paramreply_markupflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const BotInlineMessageMediaWebPage= struct {
    invert_media: ?bool,
    force_large_media: ?bool,
    force_small_media: ?bool,
    manual: ?bool,
    safe: ?bool,
    message: []const u8,
    entities: ?[]const IMessageEntity,
    url: []const u8,
    reply_markup: ?IReplyMarkup,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // invert_media
        // true flag

        // force_large_media
        // true flag

        // force_small_media
        // true flag

        // manual
        // true flag

        // safe
        // true flag

        // message
        const parammessage = self.message;
        result += base.strEncodedSize(parammessage);
        // entities
        const paramentities = self.entities;
        if (paramentities) |paramentitiesflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramentitiesflag) |paramentitiesflagitem| {
        result += paramentitiesflagitem.size();
        }
        }

        // url
        const paramurl = self.url;
        result += base.strEncodedSize(paramurl);
        // reply_markup
        const paramreply_markup = self.reply_markup;
        if (paramreply_markup) |paramreply_markupflag| {
        result += paramreply_markupflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 7;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 8;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const BotInlineResult= struct {
    id: []const u8,
    type: []const u8,
    title: ?[]const u8,
    description: ?[]const u8,
    url: ?[]const u8,
    thumb: ?IWebDocument,
    content: ?IWebDocument,
    send_message: IBotInlineMessage,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // id
        const paramid = self.id;
        result += base.strEncodedSize(paramid);
        // type
        const paramtype = self.Type;
        result += base.strEncodedSize(paramtype);
        // title
        const paramtitle = self.title;
        if (paramtitle) |paramtitleflag| {
        result += base.strEncodedSize(paramtitleflag);        }

        // description
        const paramdescription = self.description;
        if (paramdescription) |paramdescriptionflag| {
        result += base.strEncodedSize(paramdescriptionflag);        }

        // url
        const paramurl = self.url;
        if (paramurl) |paramurlflag| {
        result += base.strEncodedSize(paramurlflag);        }

        // thumb
        const paramthumb = self.thumb;
        if (paramthumb) |paramthumbflag| {
        result += paramthumbflag.size();
        }

        // content
        const paramcontent = self.content;
        if (paramcontent) |paramcontentflag| {
        result += paramcontentflag.size();
        }

        // send_message
        const paramsend_message = self.send_message;
        result += paramsend_message.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const BotInlineMediaResult= struct {
    id: []const u8,
    type: []const u8,
    photo: ?IPhoto,
    document: ?IDocument,
    title: ?[]const u8,
    description: ?[]const u8,
    send_message: IBotInlineMessage,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // id
        const paramid = self.id;
        result += base.strEncodedSize(paramid);
        // type
        const paramtype = self.Type;
        result += base.strEncodedSize(paramtype);
        // photo
        const paramphoto = self.photo;
        if (paramphoto) |paramphotoflag| {
        result += paramphotoflag.size();
        }

        // document
        const paramdocument = self.document;
        if (paramdocument) |paramdocumentflag| {
        result += paramdocumentflag.size();
        }

        // title
        const paramtitle = self.title;
        if (paramtitle) |paramtitleflag| {
        result += base.strEncodedSize(paramtitleflag);        }

        // description
        const paramdescription = self.description;
        if (paramdescription) |paramdescriptionflag| {
        result += base.strEncodedSize(paramdescriptionflag);        }

        // send_message
        const paramsend_message = self.send_message;
        result += paramsend_message.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesBotResults= struct {
    gallery: ?bool,
    query_id: i64,
    next_offset: ?[]const u8,
    switch_pm: ?IInlineBotSwitchPM,
    switch_webview: ?IInlineBotWebView,
    results: []const IBotInlineResult,
    cache_time: i32,
    users: []const IUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // gallery
        // true flag

        // query_id
        const paramquery_id = self.query_id;
        result += @sizeOf(@TypeOf(paramquery_id));
        // next_offset
        const paramnext_offset = self.next_offset;
        if (paramnext_offset) |paramnext_offsetflag| {
        result += base.strEncodedSize(paramnext_offsetflag);        }

        // switch_pm
        const paramswitch_pm = self.switch_pm;
        if (paramswitch_pm) |paramswitch_pmflag| {
        result += paramswitch_pmflag.size();
        }

        // switch_webview
        const paramswitch_webview = self.switch_webview;
        if (paramswitch_webview) |paramswitch_webviewflag| {
        result += paramswitch_webviewflag.size();
        }

        // results
        const paramresults = self.results;
        result += 4; // vector id
        result += 4; // vector size
        for (paramresults) |paramresultsitem| {
        result += paramresultsitem.size();
        }

        // cache_time
        const paramcache_time = self.cache_time;
        result += @sizeOf(@TypeOf(paramcache_time));
        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ExportedMessageLink= struct {
    link: []const u8,
    html: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // link
        const paramlink = self.link;
        result += base.strEncodedSize(paramlink);
        // html
        const paramhtml = self.html;
        result += base.strEncodedSize(paramhtml);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessageFwdHeader= struct {
    imported: ?bool,
    saved_out: ?bool,
    from_id: ?IPeer,
    from_name: ?[]const u8,
    date: i32,
    channel_post: ?i32,
    post_author: ?[]const u8,
    saved_from_peer: ?IPeer,
    saved_from_msg_id: ?i32,
    saved_from_id: ?IPeer,
    saved_from_name: ?[]const u8,
    saved_date: ?i32,
    psa_type: ?[]const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // imported
        // true flag

        // saved_out
        // true flag

        // from_id
        const paramfrom_id = self.from_id;
        if (paramfrom_id) |paramfrom_idflag| {
        result += paramfrom_idflag.size();
        }

        // from_name
        const paramfrom_name = self.from_name;
        if (paramfrom_name) |paramfrom_nameflag| {
        result += base.strEncodedSize(paramfrom_nameflag);        }

        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        // channel_post
        const paramchannel_post = self.channel_post;
        if (paramchannel_post) |paramchannel_postflag| {
        result += @sizeOf(@TypeOf(paramchannel_postflag));        }

        // post_author
        const parampost_author = self.post_author;
        if (parampost_author) |parampost_authorflag| {
        result += base.strEncodedSize(parampost_authorflag);        }

        // saved_from_peer
        const paramsaved_from_peer = self.saved_from_peer;
        if (paramsaved_from_peer) |paramsaved_from_peerflag| {
        result += paramsaved_from_peerflag.size();
        }

        // saved_from_msg_id
        const paramsaved_from_msg_id = self.saved_from_msg_id;
        if (paramsaved_from_msg_id) |paramsaved_from_msg_idflag| {
        result += @sizeOf(@TypeOf(paramsaved_from_msg_idflag));        }

        // saved_from_id
        const paramsaved_from_id = self.saved_from_id;
        if (paramsaved_from_id) |paramsaved_from_idflag| {
        result += paramsaved_from_idflag.size();
        }

        // saved_from_name
        const paramsaved_from_name = self.saved_from_name;
        if (paramsaved_from_name) |paramsaved_from_nameflag| {
        result += base.strEncodedSize(paramsaved_from_nameflag);        }

        // saved_date
        const paramsaved_date = self.saved_date;
        if (paramsaved_date) |paramsaved_dateflag| {
        result += @sizeOf(@TypeOf(paramsaved_dateflag));        }

        // psa_type
        const parampsa_type = self.psa_type;
        if (parampsa_type) |parampsa_typeflag| {
        result += base.strEncodedSize(parampsa_typeflag);        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 7;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 11;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 8;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 9;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 10;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 6;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AuthCodeTypeSms= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const AuthCodeTypeCall= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const AuthCodeTypeFlashCall= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const AuthCodeTypeMissedCall= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const AuthCodeTypeFragmentSms= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const AuthSentCodeTypeApp= struct {
    length: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // length
        const paramlength = self.length;
        result += @sizeOf(@TypeOf(paramlength));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const AuthSentCodeTypeSms= struct {
    length: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // length
        const paramlength = self.length;
        result += @sizeOf(@TypeOf(paramlength));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const AuthSentCodeTypeCall= struct {
    length: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // length
        const paramlength = self.length;
        result += @sizeOf(@TypeOf(paramlength));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const AuthSentCodeTypeFlashCall= struct {
    pattern: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // pattern
        const parampattern = self.pattern;
        result += base.strEncodedSize(parampattern);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const AuthSentCodeTypeMissedCall= struct {
    prefix: []const u8,
    length: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // prefix
        const paramprefix = self.prefix;
        result += base.strEncodedSize(paramprefix);
        // length
        const paramlength = self.length;
        result += @sizeOf(@TypeOf(paramlength));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AuthSentCodeTypeEmailCode= struct {
    apple_signin_allowed: ?bool,
    google_signin_allowed: ?bool,
    email_pattern: []const u8,
    length: i32,
    reset_available_period: ?i32,
    reset_pending_date: ?i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // apple_signin_allowed
        // true flag

        // google_signin_allowed
        // true flag

        // email_pattern
        const paramemail_pattern = self.email_pattern;
        result += base.strEncodedSize(paramemail_pattern);
        // length
        const paramlength = self.length;
        result += @sizeOf(@TypeOf(paramlength));
        // reset_available_period
        const paramreset_available_period = self.reset_available_period;
        if (paramreset_available_period) |paramreset_available_periodflag| {
        result += @sizeOf(@TypeOf(paramreset_available_periodflag));        }

        // reset_pending_date
        const paramreset_pending_date = self.reset_pending_date;
        if (paramreset_pending_date) |paramreset_pending_dateflag| {
        result += @sizeOf(@TypeOf(paramreset_pending_dateflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AuthSentCodeTypeSetUpEmailRequired= struct {
    apple_signin_allowed: ?bool,
    google_signin_allowed: ?bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // apple_signin_allowed
        // true flag

        // google_signin_allowed
        // true flag


        _ = self;
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AuthSentCodeTypeFragmentSms= struct {
    url: []const u8,
    length: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // url
        const paramurl = self.url;
        result += base.strEncodedSize(paramurl);
        // length
        const paramlength = self.length;
        result += @sizeOf(@TypeOf(paramlength));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AuthSentCodeTypeFirebaseSms= struct {
    nonce: ?[]const u8,
    play_integrity_project_id: ?i64,
    play_integrity_nonce: ?[]const u8,
    receipt: ?[]const u8,
    push_timeout: ?i32,
    length: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // nonce
        const paramnonce = self.nonce;
        if (paramnonce) |paramnonceflag| {
        result += base.strEncodedSize(paramnonceflag);        }

        // play_integrity_project_id
        const paramplay_integrity_project_id = self.play_integrity_project_id;
        if (paramplay_integrity_project_id) |paramplay_integrity_project_idflag| {
        result += @sizeOf(@TypeOf(paramplay_integrity_project_idflag));        }

        // play_integrity_nonce
        const paramplay_integrity_nonce = self.play_integrity_nonce;
        if (paramplay_integrity_nonce) |paramplay_integrity_nonceflag| {
        result += base.strEncodedSize(paramplay_integrity_nonceflag);        }

        // receipt
        const paramreceipt = self.receipt;
        if (paramreceipt) |paramreceiptflag| {
        result += base.strEncodedSize(paramreceiptflag);        }

        // push_timeout
        const parampush_timeout = self.push_timeout;
        if (parampush_timeout) |parampush_timeoutflag| {
        result += @sizeOf(@TypeOf(parampush_timeoutflag));        }

        // length
        const paramlength = self.length;
        result += @sizeOf(@TypeOf(paramlength));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AuthSentCodeTypeSmsWord= struct {
    beginning: ?[]const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // beginning
        const parambeginning = self.beginning;
        if (parambeginning) |parambeginningflag| {
        result += base.strEncodedSize(parambeginningflag);        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        }
};
const AuthSentCodeTypeSmsPhrase= struct {
    beginning: ?[]const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // beginning
        const parambeginning = self.beginning;
        if (parambeginning) |parambeginningflag| {
        result += base.strEncodedSize(parambeginningflag);        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        }
};
const MessagesBotCallbackAnswer= struct {
    alert: ?bool,
    has_url: ?bool,
    native_ui: ?bool,
    message: ?[]const u8,
    url: ?[]const u8,
    cache_time: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // alert
        // true flag

        // has_url
        // true flag

        // native_ui
        // true flag

        // message
        const parammessage = self.message;
        if (parammessage) |parammessageflag| {
        result += base.strEncodedSize(parammessageflag);        }

        // url
        const paramurl = self.url;
        if (paramurl) |paramurlflag| {
        result += base.strEncodedSize(paramurlflag);        }

        // cache_time
        const paramcache_time = self.cache_time;
        result += @sizeOf(@TypeOf(paramcache_time));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesMessageEditData= struct {
    caption: ?bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // caption
        // true flag


        _ = self;
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        }
};
const InputBotInlineMessageID= struct {
    dc_id: i32,
    id: i64,
    access_hash: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // dc_id
        const paramdc_id = self.dc_id;
        result += @sizeOf(@TypeOf(paramdc_id));
        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // access_hash
        const paramaccess_hash = self.access_hash;
        result += @sizeOf(@TypeOf(paramaccess_hash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputBotInlineMessageID64= struct {
    dc_id: i32,
    owner_id: i64,
    id: i32,
    access_hash: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // dc_id
        const paramdc_id = self.dc_id;
        result += @sizeOf(@TypeOf(paramdc_id));
        // owner_id
        const paramowner_id = self.owner_id;
        result += @sizeOf(@TypeOf(paramowner_id));
        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // access_hash
        const paramaccess_hash = self.access_hash;
        result += @sizeOf(@TypeOf(paramaccess_hash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InlineBotSwitchPM= struct {
    text: []const u8,
    start_param: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // text
        const paramtext = self.text;
        result += base.strEncodedSize(paramtext);
        // start_param
        const paramstart_param = self.start_param;
        result += base.strEncodedSize(paramstart_param);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesPeerDialogs= struct {
    dialogs: []const IDialog,
    messages: []const IMessage,
    chats: []const IChat,
    users: []const IUser,
    state: IUpdatesState,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // dialogs
        const paramdialogs = self.dialogs;
        result += 4; // vector id
        result += 4; // vector size
        for (paramdialogs) |paramdialogsitem| {
        result += paramdialogsitem.size();
        }

        // messages
        const parammessages = self.messages;
        result += 4; // vector id
        result += 4; // vector size
        for (parammessages) |parammessagesitem| {
        result += parammessagesitem.size();
        }

        // chats
        const paramchats = self.chats;
        result += 4; // vector id
        result += 4; // vector size
        for (paramchats) |paramchatsitem| {
        result += paramchatsitem.size();
        }

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        // state
        const paramstate = self.state;
        result += paramstate.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const TopPeer= struct {
    peer: IPeer,
    rating: f64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // rating
        const paramrating = self.rating;
        result += @sizeOf(@TypeOf(paramrating));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const TopPeerCategoryBotsPM= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const TopPeerCategoryBotsInline= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const TopPeerCategoryCorrespondents= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const TopPeerCategoryGroups= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const TopPeerCategoryChannels= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const TopPeerCategoryPhoneCalls= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const TopPeerCategoryForwardUsers= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const TopPeerCategoryForwardChats= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const TopPeerCategoryBotsApp= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const TopPeerCategoryPeers= struct {
    category: ITopPeerCategory,
    count: i32,
    peers: []const ITopPeer,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // category
        const paramcategory = self.category;
        result += paramcategory.size();

        // count
        const paramcount = self.count;
        result += @sizeOf(@TypeOf(paramcount));
        // peers
        const parampeers = self.peers;
        result += 4; // vector id
        result += 4; // vector size
        for (parampeers) |parampeersitem| {
        result += parampeersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ContactsTopPeersNotModified= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const ContactsTopPeers= struct {
    categories: []const ITopPeerCategoryPeers,
    chats: []const IChat,
    users: []const IUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // categories
        const paramcategories = self.categories;
        result += 4; // vector id
        result += 4; // vector size
        for (paramcategories) |paramcategoriesitem| {
        result += paramcategoriesitem.size();
        }

        // chats
        const paramchats = self.chats;
        result += 4; // vector id
        result += 4; // vector size
        for (paramchats) |paramchatsitem| {
        result += paramchatsitem.size();
        }

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ContactsTopPeersDisabled= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const DraftMessageEmpty= struct {
    date: ?i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // date
        const paramdate = self.date;
        if (paramdate) |paramdateflag| {
        result += @sizeOf(@TypeOf(paramdateflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        }
};
const DraftMessage= struct {
    no_webpage: ?bool,
    invert_media: ?bool,
    reply_to: ?IInputReplyTo,
    message: []const u8,
    entities: ?[]const IMessageEntity,
    media: ?IInputMedia,
    date: i32,
    effect: ?i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // no_webpage
        // true flag

        // invert_media
        // true flag

        // reply_to
        const paramreply_to = self.reply_to;
        if (paramreply_to) |paramreply_toflag| {
        result += paramreply_toflag.size();
        }

        // message
        const parammessage = self.message;
        result += base.strEncodedSize(parammessage);
        // entities
        const paramentities = self.entities;
        if (paramentities) |paramentitiesflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramentitiesflag) |paramentitiesflagitem| {
        result += paramentitiesflagitem.size();
        }
        }

        // media
        const parammedia = self.media;
        if (parammedia) |parammediaflag| {
        result += parammediaflag.size();
        }

        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        // effect
        const parameffect = self.effect;
        if (parameffect) |parameffectflag| {
        result += @sizeOf(@TypeOf(parameffectflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 6;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 7;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesFeaturedStickersNotModified= struct {
    count: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // count
        const paramcount = self.count;
        result += @sizeOf(@TypeOf(paramcount));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MessagesFeaturedStickers= struct {
    premium: ?bool,
    hash: i64,
    count: i32,
    sets: []const IStickerSetCovered,
    unread: []const i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // premium
        // true flag

        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        // count
        const paramcount = self.count;
        result += @sizeOf(@TypeOf(paramcount));
        // sets
        const paramsets = self.sets;
        result += 4; // vector id
        result += 4; // vector size
        for (paramsets) |paramsetsitem| {
        result += paramsetsitem.size();
        }

        // unread
        const paramunread = self.unread;
        result += 4; // vector id
        result += 4; // vector size
        for (paramunread) |paramunreaditem| {
        result += @sizeOf(@TypeOf(paramunreaditem));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesRecentStickersNotModified= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const MessagesRecentStickers= struct {
    hash: i64,
    packs: []const IStickerPack,
    stickers: []const IDocument,
    dates: []const i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        // packs
        const parampacks = self.packs;
        result += 4; // vector id
        result += 4; // vector size
        for (parampacks) |parampacksitem| {
        result += parampacksitem.size();
        }

        // stickers
        const paramstickers = self.stickers;
        result += 4; // vector id
        result += 4; // vector size
        for (paramstickers) |paramstickersitem| {
        result += paramstickersitem.size();
        }

        // dates
        const paramdates = self.dates;
        result += 4; // vector id
        result += 4; // vector size
        for (paramdates) |paramdatesitem| {
        result += @sizeOf(@TypeOf(paramdatesitem));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesArchivedStickers= struct {
    count: i32,
    sets: []const IStickerSetCovered,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // count
        const paramcount = self.count;
        result += @sizeOf(@TypeOf(paramcount));
        // sets
        const paramsets = self.sets;
        result += 4; // vector id
        result += 4; // vector size
        for (paramsets) |paramsetsitem| {
        result += paramsetsitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesStickerSetInstallResultSuccess= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const MessagesStickerSetInstallResultArchive= struct {
    sets: []const IStickerSetCovered,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // sets
        const paramsets = self.sets;
        result += 4; // vector id
        result += 4; // vector size
        for (paramsets) |paramsetsitem| {
        result += paramsetsitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const StickerSetCovered= struct {
    set: IStickerSet,
    cover: IDocument,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // set
        const paramset = self.set;
        result += paramset.size();

        // cover
        const paramcover = self.cover;
        result += paramcover.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StickerSetMultiCovered= struct {
    set: IStickerSet,
    covers: []const IDocument,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // set
        const paramset = self.set;
        result += paramset.size();

        // covers
        const paramcovers = self.covers;
        result += 4; // vector id
        result += 4; // vector size
        for (paramcovers) |paramcoversitem| {
        result += paramcoversitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StickerSetFullCovered= struct {
    set: IStickerSet,
    packs: []const IStickerPack,
    keywords: []const IStickerKeyword,
    documents: []const IDocument,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // set
        const paramset = self.set;
        result += paramset.size();

        // packs
        const parampacks = self.packs;
        result += 4; // vector id
        result += 4; // vector size
        for (parampacks) |parampacksitem| {
        result += parampacksitem.size();
        }

        // keywords
        const paramkeywords = self.keywords;
        result += 4; // vector id
        result += 4; // vector size
        for (paramkeywords) |paramkeywordsitem| {
        result += paramkeywordsitem.size();
        }

        // documents
        const paramdocuments = self.documents;
        result += 4; // vector id
        result += 4; // vector size
        for (paramdocuments) |paramdocumentsitem| {
        result += paramdocumentsitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StickerSetNoCovered= struct {
    set: IStickerSet,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // set
        const paramset = self.set;
        result += paramset.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MaskCoords= struct {
    n: i32,
    x: f64,
    y: f64,
    zoom: f64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // n
        const paramn = self.n;
        result += @sizeOf(@TypeOf(paramn));
        // x
        const paramx = self.x;
        result += @sizeOf(@TypeOf(paramx));
        // y
        const paramy = self.y;
        result += @sizeOf(@TypeOf(paramy));
        // zoom
        const paramzoom = self.zoom;
        result += @sizeOf(@TypeOf(paramzoom));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputStickeredMediaPhoto= struct {
    id: IInputPhoto,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += paramid.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const InputStickeredMediaDocument= struct {
    id: IInputDocument,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += paramid.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const Game= struct {
    id: i64,
    access_hash: i64,
    short_name: []const u8,
    title: []const u8,
    description: []const u8,
    photo: IPhoto,
    document: ?IDocument,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // access_hash
        const paramaccess_hash = self.access_hash;
        result += @sizeOf(@TypeOf(paramaccess_hash));
        // short_name
        const paramshort_name = self.short_name;
        result += base.strEncodedSize(paramshort_name);
        // title
        const paramtitle = self.title;
        result += base.strEncodedSize(paramtitle);
        // description
        const paramdescription = self.description;
        result += base.strEncodedSize(paramdescription);
        // photo
        const paramphoto = self.photo;
        result += paramphoto.size();

        // document
        const paramdocument = self.document;
        if (paramdocument) |paramdocumentflag| {
        result += paramdocumentflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputGameID= struct {
    id: i64,
    access_hash: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // access_hash
        const paramaccess_hash = self.access_hash;
        result += @sizeOf(@TypeOf(paramaccess_hash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputGameShortName= struct {
    bot_id: IInputUser,
    short_name: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // bot_id
        const parambot_id = self.bot_id;
        result += parambot_id.size();

        // short_name
        const paramshort_name = self.short_name;
        result += base.strEncodedSize(paramshort_name);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const HighScore= struct {
    pos: i32,
    user_id: i64,
    score: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // pos
        const parampos = self.pos;
        result += @sizeOf(@TypeOf(parampos));
        // user_id
        const paramuser_id = self.user_id;
        result += @sizeOf(@TypeOf(paramuser_id));
        // score
        const paramscore = self.score;
        result += @sizeOf(@TypeOf(paramscore));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesHighScores= struct {
    scores: []const IHighScore,
    users: []const IUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // scores
        const paramscores = self.scores;
        result += 4; // vector id
        result += 4; // vector size
        for (paramscores) |paramscoresitem| {
        result += paramscoresitem.size();
        }

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const TextEmpty= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const TextPlain= struct {
    text: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // text
        const paramtext = self.text;
        result += base.strEncodedSize(paramtext);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const TextBold= struct {
    text: IRichText,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // text
        const paramtext = self.text;
        result += paramtext.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const TextItalic= struct {
    text: IRichText,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // text
        const paramtext = self.text;
        result += paramtext.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const TextUnderline= struct {
    text: IRichText,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // text
        const paramtext = self.text;
        result += paramtext.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const TextStrike= struct {
    text: IRichText,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // text
        const paramtext = self.text;
        result += paramtext.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const TextFixed= struct {
    text: IRichText,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // text
        const paramtext = self.text;
        result += paramtext.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const TextUrl= struct {
    text: IRichText,
    url: []const u8,
    webpage_id: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // text
        const paramtext = self.text;
        result += paramtext.size();

        // url
        const paramurl = self.url;
        result += base.strEncodedSize(paramurl);
        // webpage_id
        const paramwebpage_id = self.webpage_id;
        result += @sizeOf(@TypeOf(paramwebpage_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const TextEmail= struct {
    text: IRichText,
    email: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // text
        const paramtext = self.text;
        result += paramtext.size();

        // email
        const paramemail = self.email;
        result += base.strEncodedSize(paramemail);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const TextConcat= struct {
    texts: []const IRichText,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // texts
        const paramtexts = self.texts;
        result += 4; // vector id
        result += 4; // vector size
        for (paramtexts) |paramtextsitem| {
        result += paramtextsitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const TextSubscript= struct {
    text: IRichText,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // text
        const paramtext = self.text;
        result += paramtext.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const TextSuperscript= struct {
    text: IRichText,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // text
        const paramtext = self.text;
        result += paramtext.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const TextMarked= struct {
    text: IRichText,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // text
        const paramtext = self.text;
        result += paramtext.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const TextPhone= struct {
    text: IRichText,
    phone: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // text
        const paramtext = self.text;
        result += paramtext.size();

        // phone
        const paramphone = self.phone;
        result += base.strEncodedSize(paramphone);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const TextImage= struct {
    document_id: i64,
    w: i32,
    h: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // document_id
        const paramdocument_id = self.document_id;
        result += @sizeOf(@TypeOf(paramdocument_id));
        // w
        const paramw = self.w;
        result += @sizeOf(@TypeOf(paramw));
        // h
        const paramh = self.h;
        result += @sizeOf(@TypeOf(paramh));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const TextAnchor= struct {
    text: IRichText,
    name: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // text
        const paramtext = self.text;
        result += paramtext.size();

        // name
        const paramname = self.name;
        result += base.strEncodedSize(paramname);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PageBlockUnsupported= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const PageBlockTitle= struct {
    text: IRichText,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // text
        const paramtext = self.text;
        result += paramtext.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const PageBlockSubtitle= struct {
    text: IRichText,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // text
        const paramtext = self.text;
        result += paramtext.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const PageBlockAuthorDate= struct {
    author: IRichText,
    published_date: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // author
        const paramauthor = self.author;
        result += paramauthor.size();

        // published_date
        const parampublished_date = self.published_date;
        result += @sizeOf(@TypeOf(parampublished_date));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PageBlockHeader= struct {
    text: IRichText,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // text
        const paramtext = self.text;
        result += paramtext.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const PageBlockSubheader= struct {
    text: IRichText,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // text
        const paramtext = self.text;
        result += paramtext.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const PageBlockParagraph= struct {
    text: IRichText,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // text
        const paramtext = self.text;
        result += paramtext.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const PageBlockPreformatted= struct {
    text: IRichText,
    language: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // text
        const paramtext = self.text;
        result += paramtext.size();

        // language
        const paramlanguage = self.language;
        result += base.strEncodedSize(paramlanguage);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PageBlockFooter= struct {
    text: IRichText,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // text
        const paramtext = self.text;
        result += paramtext.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const PageBlockDivider= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const PageBlockAnchor= struct {
    name: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // name
        const paramname = self.name;
        result += base.strEncodedSize(paramname);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const PageBlockList= struct {
    items: []const IPageListItem,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // items
        const paramitems = self.items;
        result += 4; // vector id
        result += 4; // vector size
        for (paramitems) |paramitemsitem| {
        result += paramitemsitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const PageBlockBlockquote= struct {
    text: IRichText,
    caption: IRichText,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // text
        const paramtext = self.text;
        result += paramtext.size();

        // caption
        const paramcaption = self.caption;
        result += paramcaption.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PageBlockPullquote= struct {
    text: IRichText,
    caption: IRichText,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // text
        const paramtext = self.text;
        result += paramtext.size();

        // caption
        const paramcaption = self.caption;
        result += paramcaption.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PageBlockPhoto= struct {
    photo_id: i64,
    caption: IPageCaption,
    url: ?[]const u8,
    webpage_id: ?i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // photo_id
        const paramphoto_id = self.photo_id;
        result += @sizeOf(@TypeOf(paramphoto_id));
        // caption
        const paramcaption = self.caption;
        result += paramcaption.size();

        // url
        const paramurl = self.url;
        if (paramurl) |paramurlflag| {
        result += base.strEncodedSize(paramurlflag);        }

        // webpage_id
        const paramwebpage_id = self.webpage_id;
        if (paramwebpage_id) |paramwebpage_idflag| {
        result += @sizeOf(@TypeOf(paramwebpage_idflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PageBlockVideo= struct {
    autoplay: ?bool,
    loop: ?bool,
    video_id: i64,
    caption: IPageCaption,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // autoplay
        // true flag

        // loop
        // true flag

        // video_id
        const paramvideo_id = self.video_id;
        result += @sizeOf(@TypeOf(paramvideo_id));
        // caption
        const paramcaption = self.caption;
        result += paramcaption.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PageBlockCover= struct {
    cover: IPageBlock,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // cover
        const paramcover = self.cover;
        result += paramcover.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const PageBlockEmbed= struct {
    full_width: ?bool,
    allow_scrolling: ?bool,
    url: ?[]const u8,
    html: ?[]const u8,
    poster_photo_id: ?i64,
    w: ?i32,
    h: ?i32,
    caption: IPageCaption,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // full_width
        // true flag

        // allow_scrolling
        // true flag

        // url
        const paramurl = self.url;
        if (paramurl) |paramurlflag| {
        result += base.strEncodedSize(paramurlflag);        }

        // html
        const paramhtml = self.html;
        if (paramhtml) |paramhtmlflag| {
        result += base.strEncodedSize(paramhtmlflag);        }

        // poster_photo_id
        const paramposter_photo_id = self.poster_photo_id;
        if (paramposter_photo_id) |paramposter_photo_idflag| {
        result += @sizeOf(@TypeOf(paramposter_photo_idflag));        }

        // w
        const paramw = self.w;
        if (paramw) |paramwflag| {
        result += @sizeOf(@TypeOf(paramwflag));        }

        // h
        const paramh = self.h;
        if (paramh) |paramhflag| {
        result += @sizeOf(@TypeOf(paramhflag));        }

        // caption
        const paramcaption = self.caption;
        result += paramcaption.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PageBlockEmbedPost= struct {
    url: []const u8,
    webpage_id: i64,
    author_photo_id: i64,
    author: []const u8,
    date: i32,
    blocks: []const IPageBlock,
    caption: IPageCaption,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // url
        const paramurl = self.url;
        result += base.strEncodedSize(paramurl);
        // webpage_id
        const paramwebpage_id = self.webpage_id;
        result += @sizeOf(@TypeOf(paramwebpage_id));
        // author_photo_id
        const paramauthor_photo_id = self.author_photo_id;
        result += @sizeOf(@TypeOf(paramauthor_photo_id));
        // author
        const paramauthor = self.author;
        result += base.strEncodedSize(paramauthor);
        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        // blocks
        const paramblocks = self.blocks;
        result += 4; // vector id
        result += 4; // vector size
        for (paramblocks) |paramblocksitem| {
        result += paramblocksitem.size();
        }

        // caption
        const paramcaption = self.caption;
        result += paramcaption.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PageBlockCollage= struct {
    items: []const IPageBlock,
    caption: IPageCaption,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // items
        const paramitems = self.items;
        result += 4; // vector id
        result += 4; // vector size
        for (paramitems) |paramitemsitem| {
        result += paramitemsitem.size();
        }

        // caption
        const paramcaption = self.caption;
        result += paramcaption.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PageBlockSlideshow= struct {
    items: []const IPageBlock,
    caption: IPageCaption,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // items
        const paramitems = self.items;
        result += 4; // vector id
        result += 4; // vector size
        for (paramitems) |paramitemsitem| {
        result += paramitemsitem.size();
        }

        // caption
        const paramcaption = self.caption;
        result += paramcaption.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PageBlockChannel= struct {
    channel: IChat,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // channel
        const paramchannel = self.channel;
        result += paramchannel.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const PageBlockAudio= struct {
    audio_id: i64,
    caption: IPageCaption,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // audio_id
        const paramaudio_id = self.audio_id;
        result += @sizeOf(@TypeOf(paramaudio_id));
        // caption
        const paramcaption = self.caption;
        result += paramcaption.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PageBlockKicker= struct {
    text: IRichText,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // text
        const paramtext = self.text;
        result += paramtext.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const PageBlockTable= struct {
    bordered: ?bool,
    striped: ?bool,
    title: IRichText,
    rows: []const IPageTableRow,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // bordered
        // true flag

        // striped
        // true flag

        // title
        const paramtitle = self.title;
        result += paramtitle.size();

        // rows
        const paramrows = self.rows;
        result += 4; // vector id
        result += 4; // vector size
        for (paramrows) |paramrowsitem| {
        result += paramrowsitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PageBlockOrderedList= struct {
    items: []const IPageListOrderedItem,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // items
        const paramitems = self.items;
        result += 4; // vector id
        result += 4; // vector size
        for (paramitems) |paramitemsitem| {
        result += paramitemsitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const PageBlockDetails= struct {
    open: ?bool,
    blocks: []const IPageBlock,
    title: IRichText,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // open
        // true flag

        // blocks
        const paramblocks = self.blocks;
        result += 4; // vector id
        result += 4; // vector size
        for (paramblocks) |paramblocksitem| {
        result += paramblocksitem.size();
        }

        // title
        const paramtitle = self.title;
        result += paramtitle.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PageBlockRelatedArticles= struct {
    title: IRichText,
    articles: []const IPageRelatedArticle,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // title
        const paramtitle = self.title;
        result += paramtitle.size();

        // articles
        const paramarticles = self.articles;
        result += 4; // vector id
        result += 4; // vector size
        for (paramarticles) |paramarticlesitem| {
        result += paramarticlesitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PageBlockMap= struct {
    geo: IGeoPoint,
    zoom: i32,
    w: i32,
    h: i32,
    caption: IPageCaption,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // geo
        const paramgeo = self.geo;
        result += paramgeo.size();

        // zoom
        const paramzoom = self.zoom;
        result += @sizeOf(@TypeOf(paramzoom));
        // w
        const paramw = self.w;
        result += @sizeOf(@TypeOf(paramw));
        // h
        const paramh = self.h;
        result += @sizeOf(@TypeOf(paramh));
        // caption
        const paramcaption = self.caption;
        result += paramcaption.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PhoneCallDiscardReasonMissed= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const PhoneCallDiscardReasonDisconnect= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const PhoneCallDiscardReasonHangup= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const PhoneCallDiscardReasonBusy= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const DataJSON= struct {
    data: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // data
        const paramdata = self.data;
        result += base.strEncodedSize(paramdata);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const LabeledPrice= struct {
    label: []const u8,
    amount: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // label
        const paramlabel = self.label;
        result += base.strEncodedSize(paramlabel);
        // amount
        const paramamount = self.amount;
        result += @sizeOf(@TypeOf(paramamount));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const Invoice= struct {
    Test: ?bool,
    name_requested: ?bool,
    phone_requested: ?bool,
    email_requested: ?bool,
    shipping_address_requested: ?bool,
    flexible: ?bool,
    phone_to_provider: ?bool,
    email_to_provider: ?bool,
    recurring: ?bool,
    currency: []const u8,
    prices: []const ILabeledPrice,
    max_tip_amount: ?i64,
    suggested_tip_amounts: ?[]const i64,
    terms_url: ?[]const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // test
        // true flag

        // name_requested
        // true flag

        // phone_requested
        // true flag

        // email_requested
        // true flag

        // shipping_address_requested
        // true flag

        // flexible
        // true flag

        // phone_to_provider
        // true flag

        // email_to_provider
        // true flag

        // recurring
        // true flag

        // currency
        const paramcurrency = self.currency;
        result += base.strEncodedSize(paramcurrency);
        // prices
        const paramprices = self.prices;
        result += 4; // vector id
        result += 4; // vector size
        for (paramprices) |parampricesitem| {
        result += parampricesitem.size();
        }

        // max_tip_amount
        const parammax_tip_amount = self.max_tip_amount;
        if (parammax_tip_amount) |parammax_tip_amountflag| {
        result += @sizeOf(@TypeOf(parammax_tip_amountflag));        }

        // suggested_tip_amounts
        const paramsuggested_tip_amounts = self.suggested_tip_amounts;
        if (paramsuggested_tip_amounts) |paramsuggested_tip_amountsflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramsuggested_tip_amountsflag) |paramsuggested_tip_amountsflagitem| {
        result += @sizeOf(@TypeOf(paramsuggested_tip_amountsflagitem));        }
        }

        // terms_url
        const paramterms_url = self.terms_url;
        if (paramterms_url) |paramterms_urlflag| {
        result += base.strEncodedSize(paramterms_urlflag);        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 6;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 7;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 9;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 8;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 8;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 10;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PaymentCharge= struct {
    id: []const u8,
    provider_charge_id: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += base.strEncodedSize(paramid);
        // provider_charge_id
        const paramprovider_charge_id = self.provider_charge_id;
        result += base.strEncodedSize(paramprovider_charge_id);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PostAddress= struct {
    street_line1: []const u8,
    street_line2: []const u8,
    city: []const u8,
    state: []const u8,
    country_iso2: []const u8,
    post_code: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // street_line1
        const paramstreet_line1 = self.street_line1;
        result += base.strEncodedSize(paramstreet_line1);
        // street_line2
        const paramstreet_line2 = self.street_line2;
        result += base.strEncodedSize(paramstreet_line2);
        // city
        const paramcity = self.city;
        result += base.strEncodedSize(paramcity);
        // state
        const paramstate = self.state;
        result += base.strEncodedSize(paramstate);
        // country_iso2
        const paramcountry_iso2 = self.country_iso2;
        result += base.strEncodedSize(paramcountry_iso2);
        // post_code
        const parampost_code = self.post_code;
        result += base.strEncodedSize(parampost_code);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PaymentRequestedInfo= struct {
    name: ?[]const u8,
    phone: ?[]const u8,
    email: ?[]const u8,
    shipping_address: ?IPostAddress,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // name
        const paramname = self.name;
        if (paramname) |paramnameflag| {
        result += base.strEncodedSize(paramnameflag);        }

        // phone
        const paramphone = self.phone;
        if (paramphone) |paramphoneflag| {
        result += base.strEncodedSize(paramphoneflag);        }

        // email
        const paramemail = self.email;
        if (paramemail) |paramemailflag| {
        result += base.strEncodedSize(paramemailflag);        }

        // shipping_address
        const paramshipping_address = self.shipping_address;
        if (paramshipping_address) |paramshipping_addressflag| {
        result += paramshipping_addressflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PaymentSavedCredentialsCard= struct {
    id: []const u8,
    title: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += base.strEncodedSize(paramid);
        // title
        const paramtitle = self.title;
        result += base.strEncodedSize(paramtitle);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const WebDocument= struct {
    url: []const u8,
    access_hash: i64,
    size: i32,
    mime_type: []const u8,
    attributes: []const IDocumentAttribute,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // url
        const paramurl = self.url;
        result += base.strEncodedSize(paramurl);
        // access_hash
        const paramaccess_hash = self.access_hash;
        result += @sizeOf(@TypeOf(paramaccess_hash));
        // size
        const paramsize = self.size;
        result += @sizeOf(@TypeOf(paramsize));
        // mime_type
        const parammime_type = self.mime_type;
        result += base.strEncodedSize(parammime_type);
        // attributes
        const paramattributes = self.attributes;
        result += 4; // vector id
        result += 4; // vector size
        for (paramattributes) |paramattributesitem| {
        result += paramattributesitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const WebDocumentNoProxy= struct {
    url: []const u8,
    size: i32,
    mime_type: []const u8,
    attributes: []const IDocumentAttribute,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // url
        const paramurl = self.url;
        result += base.strEncodedSize(paramurl);
        // size
        const paramsize = self.size;
        result += @sizeOf(@TypeOf(paramsize));
        // mime_type
        const parammime_type = self.mime_type;
        result += base.strEncodedSize(parammime_type);
        // attributes
        const paramattributes = self.attributes;
        result += 4; // vector id
        result += 4; // vector size
        for (paramattributes) |paramattributesitem| {
        result += paramattributesitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputWebDocument= struct {
    url: []const u8,
    size: i32,
    mime_type: []const u8,
    attributes: []const IDocumentAttribute,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // url
        const paramurl = self.url;
        result += base.strEncodedSize(paramurl);
        // size
        const paramsize = self.size;
        result += @sizeOf(@TypeOf(paramsize));
        // mime_type
        const parammime_type = self.mime_type;
        result += base.strEncodedSize(parammime_type);
        // attributes
        const paramattributes = self.attributes;
        result += 4; // vector id
        result += 4; // vector size
        for (paramattributes) |paramattributesitem| {
        result += paramattributesitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputWebFileLocation= struct {
    url: []const u8,
    access_hash: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // url
        const paramurl = self.url;
        result += base.strEncodedSize(paramurl);
        // access_hash
        const paramaccess_hash = self.access_hash;
        result += @sizeOf(@TypeOf(paramaccess_hash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputWebFileGeoPointLocation= struct {
    geo_point: IInputGeoPoint,
    access_hash: i64,
    w: i32,
    h: i32,
    zoom: i32,
    scale: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // geo_point
        const paramgeo_point = self.geo_point;
        result += paramgeo_point.size();

        // access_hash
        const paramaccess_hash = self.access_hash;
        result += @sizeOf(@TypeOf(paramaccess_hash));
        // w
        const paramw = self.w;
        result += @sizeOf(@TypeOf(paramw));
        // h
        const paramh = self.h;
        result += @sizeOf(@TypeOf(paramh));
        // zoom
        const paramzoom = self.zoom;
        result += @sizeOf(@TypeOf(paramzoom));
        // scale
        const paramscale = self.scale;
        result += @sizeOf(@TypeOf(paramscale));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputWebFileAudioAlbumThumbLocation= struct {
    small: ?bool,
    document: ?IInputDocument,
    title: ?[]const u8,
    performer: ?[]const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // small
        // true flag

        // document
        const paramdocument = self.document;
        if (paramdocument) |paramdocumentflag| {
        result += paramdocumentflag.size();
        }

        // title
        const paramtitle = self.title;
        if (paramtitle) |paramtitleflag| {
        result += base.strEncodedSize(paramtitleflag);        }

        // performer
        const paramperformer = self.performer;
        if (paramperformer) |paramperformerflag| {
        result += base.strEncodedSize(paramperformerflag);        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UploadWebFile= struct {
    size: i32,
    mime_type: []const u8,
    file_type: IStorageFileType,
    mtime: i32,
    bytes: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // size
        const paramsize = self.size;
        result += @sizeOf(@TypeOf(paramsize));
        // mime_type
        const parammime_type = self.mime_type;
        result += base.strEncodedSize(parammime_type);
        // file_type
        const paramfile_type = self.file_type;
        result += paramfile_type.size();

        // mtime
        const parammtime = self.mtime;
        result += @sizeOf(@TypeOf(parammtime));
        // bytes
        const parambytes = self.bytes;
        result += base.strEncodedSize(parambytes);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PaymentsPaymentForm= struct {
    can_save_credentials: ?bool,
    password_missing: ?bool,
    form_id: i64,
    bot_id: i64,
    title: []const u8,
    description: []const u8,
    photo: ?IWebDocument,
    invoice: IInvoice,
    provider_id: i64,
    url: []const u8,
    native_provider: ?[]const u8,
    native_params: ?IDataJSON,
    additional_methods: ?[]const IPaymentFormMethod,
    saved_info: ?IPaymentRequestedInfo,
    saved_credentials: ?[]const IPaymentSavedCredentials,
    users: []const IUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // can_save_credentials
        // true flag

        // password_missing
        // true flag

        // form_id
        const paramform_id = self.form_id;
        result += @sizeOf(@TypeOf(paramform_id));
        // bot_id
        const parambot_id = self.bot_id;
        result += @sizeOf(@TypeOf(parambot_id));
        // title
        const paramtitle = self.title;
        result += base.strEncodedSize(paramtitle);
        // description
        const paramdescription = self.description;
        result += base.strEncodedSize(paramdescription);
        // photo
        const paramphoto = self.photo;
        if (paramphoto) |paramphotoflag| {
        result += paramphotoflag.size();
        }

        // invoice
        const paraminvoice = self.invoice;
        result += paraminvoice.size();

        // provider_id
        const paramprovider_id = self.provider_id;
        result += @sizeOf(@TypeOf(paramprovider_id));
        // url
        const paramurl = self.url;
        result += base.strEncodedSize(paramurl);
        // native_provider
        const paramnative_provider = self.native_provider;
        if (paramnative_provider) |paramnative_providerflag| {
        result += base.strEncodedSize(paramnative_providerflag);        }

        // native_params
        const paramnative_params = self.native_params;
        if (paramnative_params) |paramnative_paramsflag| {
        result += paramnative_paramsflag.size();
        }

        // additional_methods
        const paramadditional_methods = self.additional_methods;
        if (paramadditional_methods) |paramadditional_methodsflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramadditional_methodsflag) |paramadditional_methodsflagitem| {
        result += paramadditional_methodsflagitem.size();
        }
        }

        // saved_info
        const paramsaved_info = self.saved_info;
        if (paramsaved_info) |paramsaved_infoflag| {
        result += paramsaved_infoflag.size();
        }

        // saved_credentials
        const paramsaved_credentials = self.saved_credentials;
        if (paramsaved_credentials) |paramsaved_credentialsflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramsaved_credentialsflag) |paramsaved_credentialsflagitem| {
        result += paramsaved_credentialsflagitem.size();
        }
        }

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 6;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PaymentsPaymentFormStars= struct {
    form_id: i64,
    bot_id: i64,
    title: []const u8,
    description: []const u8,
    photo: ?IWebDocument,
    invoice: IInvoice,
    users: []const IUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // form_id
        const paramform_id = self.form_id;
        result += @sizeOf(@TypeOf(paramform_id));
        // bot_id
        const parambot_id = self.bot_id;
        result += @sizeOf(@TypeOf(parambot_id));
        // title
        const paramtitle = self.title;
        result += base.strEncodedSize(paramtitle);
        // description
        const paramdescription = self.description;
        result += base.strEncodedSize(paramdescription);
        // photo
        const paramphoto = self.photo;
        if (paramphoto) |paramphotoflag| {
        result += paramphotoflag.size();
        }

        // invoice
        const paraminvoice = self.invoice;
        result += paraminvoice.size();

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PaymentsPaymentFormStarGift= struct {
    form_id: i64,
    invoice: IInvoice,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // form_id
        const paramform_id = self.form_id;
        result += @sizeOf(@TypeOf(paramform_id));
        // invoice
        const paraminvoice = self.invoice;
        result += paraminvoice.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PaymentsValidatedRequestedInfo= struct {
    id: ?[]const u8,
    shipping_options: ?[]const IShippingOption,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // id
        const paramid = self.id;
        if (paramid) |paramidflag| {
        result += base.strEncodedSize(paramidflag);        }

        // shipping_options
        const paramshipping_options = self.shipping_options;
        if (paramshipping_options) |paramshipping_optionsflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramshipping_optionsflag) |paramshipping_optionsflagitem| {
        result += paramshipping_optionsflagitem.size();
        }
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PaymentsPaymentResult= struct {
    updates: IUpdates,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // updates
        const paramupdates = self.updates;
        result += paramupdates.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const PaymentsPaymentVerificationNeeded= struct {
    url: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // url
        const paramurl = self.url;
        result += base.strEncodedSize(paramurl);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const PaymentsPaymentReceipt= struct {
    date: i32,
    bot_id: i64,
    provider_id: i64,
    title: []const u8,
    description: []const u8,
    photo: ?IWebDocument,
    invoice: IInvoice,
    info: ?IPaymentRequestedInfo,
    shipping: ?IShippingOption,
    tip_amount: ?i64,
    currency: []const u8,
    total_amount: i64,
    credentials_title: []const u8,
    users: []const IUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        // bot_id
        const parambot_id = self.bot_id;
        result += @sizeOf(@TypeOf(parambot_id));
        // provider_id
        const paramprovider_id = self.provider_id;
        result += @sizeOf(@TypeOf(paramprovider_id));
        // title
        const paramtitle = self.title;
        result += base.strEncodedSize(paramtitle);
        // description
        const paramdescription = self.description;
        result += base.strEncodedSize(paramdescription);
        // photo
        const paramphoto = self.photo;
        if (paramphoto) |paramphotoflag| {
        result += paramphotoflag.size();
        }

        // invoice
        const paraminvoice = self.invoice;
        result += paraminvoice.size();

        // info
        const paraminfo = self.info;
        if (paraminfo) |paraminfoflag| {
        result += paraminfoflag.size();
        }

        // shipping
        const paramshipping = self.shipping;
        if (paramshipping) |paramshippingflag| {
        result += paramshippingflag.size();
        }

        // tip_amount
        const paramtip_amount = self.tip_amount;
        if (paramtip_amount) |paramtip_amountflag| {
        result += @sizeOf(@TypeOf(paramtip_amountflag));        }

        // currency
        const paramcurrency = self.currency;
        result += base.strEncodedSize(paramcurrency);
        // total_amount
        const paramtotal_amount = self.total_amount;
        result += @sizeOf(@TypeOf(paramtotal_amount));
        // credentials_title
        const paramcredentials_title = self.credentials_title;
        result += base.strEncodedSize(paramcredentials_title);
        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PaymentsPaymentReceiptStars= struct {
    date: i32,
    bot_id: i64,
    title: []const u8,
    description: []const u8,
    photo: ?IWebDocument,
    invoice: IInvoice,
    currency: []const u8,
    total_amount: i64,
    transaction_id: []const u8,
    users: []const IUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        // bot_id
        const parambot_id = self.bot_id;
        result += @sizeOf(@TypeOf(parambot_id));
        // title
        const paramtitle = self.title;
        result += base.strEncodedSize(paramtitle);
        // description
        const paramdescription = self.description;
        result += base.strEncodedSize(paramdescription);
        // photo
        const paramphoto = self.photo;
        if (paramphoto) |paramphotoflag| {
        result += paramphotoflag.size();
        }

        // invoice
        const paraminvoice = self.invoice;
        result += paraminvoice.size();

        // currency
        const paramcurrency = self.currency;
        result += base.strEncodedSize(paramcurrency);
        // total_amount
        const paramtotal_amount = self.total_amount;
        result += @sizeOf(@TypeOf(paramtotal_amount));
        // transaction_id
        const paramtransaction_id = self.transaction_id;
        result += base.strEncodedSize(paramtransaction_id);
        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PaymentsSavedInfo= struct {
    has_saved_credentials: ?bool,
    saved_info: ?IPaymentRequestedInfo,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // has_saved_credentials
        // true flag

        // saved_info
        const paramsaved_info = self.saved_info;
        if (paramsaved_info) |paramsaved_infoflag| {
        result += paramsaved_infoflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputPaymentCredentialsSaved= struct {
    id: []const u8,
    tmp_password: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += base.strEncodedSize(paramid);
        // tmp_password
        const paramtmp_password = self.tmp_password;
        result += base.strEncodedSize(paramtmp_password);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputPaymentCredentials= struct {
    save: ?bool,
    data: IDataJSON,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // save
        // true flag

        // data
        const paramdata = self.data;
        result += paramdata.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputPaymentCredentialsApplePay= struct {
    payment_data: IDataJSON,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // payment_data
        const parampayment_data = self.payment_data;
        result += parampayment_data.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const InputPaymentCredentialsGooglePay= struct {
    payment_token: IDataJSON,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // payment_token
        const parampayment_token = self.payment_token;
        result += parampayment_token.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const AccountTmpPassword= struct {
    tmp_password: []const u8,
    valid_until: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // tmp_password
        const paramtmp_password = self.tmp_password;
        result += base.strEncodedSize(paramtmp_password);
        // valid_until
        const paramvalid_until = self.valid_until;
        result += @sizeOf(@TypeOf(paramvalid_until));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ShippingOption= struct {
    id: []const u8,
    title: []const u8,
    prices: []const ILabeledPrice,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += base.strEncodedSize(paramid);
        // title
        const paramtitle = self.title;
        result += base.strEncodedSize(paramtitle);
        // prices
        const paramprices = self.prices;
        result += 4; // vector id
        result += 4; // vector size
        for (paramprices) |parampricesitem| {
        result += parampricesitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputStickerSetItem= struct {
    document: IInputDocument,
    emoji: []const u8,
    mask_coords: ?IMaskCoords,
    keywords: ?[]const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // document
        const paramdocument = self.document;
        result += paramdocument.size();

        // emoji
        const paramemoji = self.emoji;
        result += base.strEncodedSize(paramemoji);
        // mask_coords
        const parammask_coords = self.mask_coords;
        if (parammask_coords) |parammask_coordsflag| {
        result += parammask_coordsflag.size();
        }

        // keywords
        const paramkeywords = self.keywords;
        if (paramkeywords) |paramkeywordsflag| {
        result += base.strEncodedSize(paramkeywordsflag);        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputPhoneCall= struct {
    id: i64,
    access_hash: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // access_hash
        const paramaccess_hash = self.access_hash;
        result += @sizeOf(@TypeOf(paramaccess_hash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PhoneCallEmpty= struct {
    id: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const PhoneCallWaiting= struct {
    video: ?bool,
    id: i64,
    access_hash: i64,
    date: i32,
    admin_id: i64,
    participant_id: i64,
    protocol: IPhoneCallProtocol,
    receive_date: ?i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // video
        // true flag

        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // access_hash
        const paramaccess_hash = self.access_hash;
        result += @sizeOf(@TypeOf(paramaccess_hash));
        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        // admin_id
        const paramadmin_id = self.admin_id;
        result += @sizeOf(@TypeOf(paramadmin_id));
        // participant_id
        const paramparticipant_id = self.participant_id;
        result += @sizeOf(@TypeOf(paramparticipant_id));
        // protocol
        const paramprotocol = self.protocol;
        result += paramprotocol.size();

        // receive_date
        const paramreceive_date = self.receive_date;
        if (paramreceive_date) |paramreceive_dateflag| {
        result += @sizeOf(@TypeOf(paramreceive_dateflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 6;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PhoneCallRequested= struct {
    video: ?bool,
    id: i64,
    access_hash: i64,
    date: i32,
    admin_id: i64,
    participant_id: i64,
    g_a_hash: []const u8,
    protocol: IPhoneCallProtocol,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // video
        // true flag

        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // access_hash
        const paramaccess_hash = self.access_hash;
        result += @sizeOf(@TypeOf(paramaccess_hash));
        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        // admin_id
        const paramadmin_id = self.admin_id;
        result += @sizeOf(@TypeOf(paramadmin_id));
        // participant_id
        const paramparticipant_id = self.participant_id;
        result += @sizeOf(@TypeOf(paramparticipant_id));
        // g_a_hash
        const paramg_a_hash = self.g_a_hash;
        result += base.strEncodedSize(paramg_a_hash);
        // protocol
        const paramprotocol = self.protocol;
        result += paramprotocol.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 6;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PhoneCallAccepted= struct {
    video: ?bool,
    id: i64,
    access_hash: i64,
    date: i32,
    admin_id: i64,
    participant_id: i64,
    g_b: []const u8,
    protocol: IPhoneCallProtocol,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // video
        // true flag

        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // access_hash
        const paramaccess_hash = self.access_hash;
        result += @sizeOf(@TypeOf(paramaccess_hash));
        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        // admin_id
        const paramadmin_id = self.admin_id;
        result += @sizeOf(@TypeOf(paramadmin_id));
        // participant_id
        const paramparticipant_id = self.participant_id;
        result += @sizeOf(@TypeOf(paramparticipant_id));
        // g_b
        const paramg_b = self.g_b;
        result += base.strEncodedSize(paramg_b);
        // protocol
        const paramprotocol = self.protocol;
        result += paramprotocol.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 6;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PhoneCall= struct {
    p2p_allowed: ?bool,
    video: ?bool,
    id: i64,
    access_hash: i64,
    date: i32,
    admin_id: i64,
    participant_id: i64,
    g_a_or_b: []const u8,
    key_fingerprint: i64,
    protocol: IPhoneCallProtocol,
    connections: []const IPhoneConnection,
    start_date: i32,
    custom_parameters: ?IDataJSON,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // p2p_allowed
        // true flag

        // video
        // true flag

        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // access_hash
        const paramaccess_hash = self.access_hash;
        result += @sizeOf(@TypeOf(paramaccess_hash));
        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        // admin_id
        const paramadmin_id = self.admin_id;
        result += @sizeOf(@TypeOf(paramadmin_id));
        // participant_id
        const paramparticipant_id = self.participant_id;
        result += @sizeOf(@TypeOf(paramparticipant_id));
        // g_a_or_b
        const paramg_a_or_b = self.g_a_or_b;
        result += base.strEncodedSize(paramg_a_or_b);
        // key_fingerprint
        const paramkey_fingerprint = self.key_fingerprint;
        result += @sizeOf(@TypeOf(paramkey_fingerprint));
        // protocol
        const paramprotocol = self.protocol;
        result += paramprotocol.size();

        // connections
        const paramconnections = self.connections;
        result += 4; // vector id
        result += 4; // vector size
        for (paramconnections) |paramconnectionsitem| {
        result += paramconnectionsitem.size();
        }

        // start_date
        const paramstart_date = self.start_date;
        result += @sizeOf(@TypeOf(paramstart_date));
        // custom_parameters
        const paramcustom_parameters = self.custom_parameters;
        if (paramcustom_parameters) |paramcustom_parametersflag| {
        result += paramcustom_parametersflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 6;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 7;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PhoneCallDiscarded= struct {
    need_rating: ?bool,
    need_debug: ?bool,
    video: ?bool,
    id: i64,
    reason: ?IPhoneCallDiscardReason,
    duration: ?i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // need_rating
        // true flag

        // need_debug
        // true flag

        // video
        // true flag

        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // reason
        const paramreason = self.reason;
        if (paramreason) |paramreasonflag| {
        result += paramreasonflag.size();
        }

        // duration
        const paramduration = self.duration;
        if (paramduration) |paramdurationflag| {
        result += @sizeOf(@TypeOf(paramdurationflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 6;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PhoneConnection= struct {
    tcp: ?bool,
    id: i64,
    ip: []const u8,
    ipv6: []const u8,
    port: i32,
    peer_tag: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // tcp
        // true flag

        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // ip
        const paramip = self.ip;
        result += base.strEncodedSize(paramip);
        // ipv6
        const paramipv6 = self.ipv6;
        result += base.strEncodedSize(paramipv6);
        // port
        const paramport = self.port;
        result += @sizeOf(@TypeOf(paramport));
        // peer_tag
        const parampeer_tag = self.peer_tag;
        result += base.strEncodedSize(parampeer_tag);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PhoneConnectionWebrtc= struct {
    turn: ?bool,
    stun: ?bool,
    id: i64,
    ip: []const u8,
    ipv6: []const u8,
    port: i32,
    username: []const u8,
    password: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // turn
        // true flag

        // stun
        // true flag

        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // ip
        const paramip = self.ip;
        result += base.strEncodedSize(paramip);
        // ipv6
        const paramipv6 = self.ipv6;
        result += base.strEncodedSize(paramipv6);
        // port
        const paramport = self.port;
        result += @sizeOf(@TypeOf(paramport));
        // username
        const paramusername = self.username;
        result += base.strEncodedSize(paramusername);
        // password
        const parampassword = self.password;
        result += base.strEncodedSize(parampassword);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PhoneCallProtocol= struct {
    udp_p2p: ?bool,
    udp_reflector: ?bool,
    min_layer: i32,
    max_layer: i32,
    library_versions: []const []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // udp_p2p
        // true flag

        // udp_reflector
        // true flag

        // min_layer
        const parammin_layer = self.min_layer;
        result += @sizeOf(@TypeOf(parammin_layer));
        // max_layer
        const parammax_layer = self.max_layer;
        result += @sizeOf(@TypeOf(parammax_layer));
        // library_versions
        const paramlibrary_versions = self.library_versions;
        result += 4; // vector id
        result += 4; // vector size
        for (paramlibrary_versions) |paramlibrary_versionsitem| {
        result += base.strEncodedSize(paramlibrary_versionsitem);        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PhonePhoneCall= struct {
    phone_call: IPhoneCall,
    users: []const IUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // phone_call
        const paramphone_call = self.phone_call;
        result += paramphone_call.size();

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UploadCdnFileReuploadNeeded= struct {
    request_token: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // request_token
        const paramrequest_token = self.request_token;
        result += base.strEncodedSize(paramrequest_token);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const UploadCdnFile= struct {
    bytes: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // bytes
        const parambytes = self.bytes;
        result += base.strEncodedSize(parambytes);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const CdnPublicKey= struct {
    dc_id: i32,
    public_key: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // dc_id
        const paramdc_id = self.dc_id;
        result += @sizeOf(@TypeOf(paramdc_id));
        // public_key
        const parampublic_key = self.public_key;
        result += base.strEncodedSize(parampublic_key);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const CdnConfig= struct {
    public_keys: []const ICdnPublicKey,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // public_keys
        const parampublic_keys = self.public_keys;
        result += 4; // vector id
        result += 4; // vector size
        for (parampublic_keys) |parampublic_keysitem| {
        result += parampublic_keysitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const LangPackString= struct {
    key: []const u8,
    value: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // key
        const paramkey = self.key;
        result += base.strEncodedSize(paramkey);
        // value
        const paramvalue = self.value;
        result += base.strEncodedSize(paramvalue);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const LangPackStringPluralized= struct {
    key: []const u8,
    zero_value: ?[]const u8,
    one_value: ?[]const u8,
    two_value: ?[]const u8,
    few_value: ?[]const u8,
    many_value: ?[]const u8,
    other_value: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // key
        const paramkey = self.key;
        result += base.strEncodedSize(paramkey);
        // zero_value
        const paramzero_value = self.zero_value;
        if (paramzero_value) |paramzero_valueflag| {
        result += base.strEncodedSize(paramzero_valueflag);        }

        // one_value
        const paramone_value = self.one_value;
        if (paramone_value) |paramone_valueflag| {
        result += base.strEncodedSize(paramone_valueflag);        }

        // two_value
        const paramtwo_value = self.two_value;
        if (paramtwo_value) |paramtwo_valueflag| {
        result += base.strEncodedSize(paramtwo_valueflag);        }

        // few_value
        const paramfew_value = self.few_value;
        if (paramfew_value) |paramfew_valueflag| {
        result += base.strEncodedSize(paramfew_valueflag);        }

        // many_value
        const parammany_value = self.many_value;
        if (parammany_value) |parammany_valueflag| {
        result += base.strEncodedSize(parammany_valueflag);        }

        // other_value
        const paramother_value = self.other_value;
        result += base.strEncodedSize(paramother_value);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const LangPackStringDeleted= struct {
    key: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // key
        const paramkey = self.key;
        result += base.strEncodedSize(paramkey);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const LangPackDifference= struct {
    lang_code: []const u8,
    from_version: i32,
    version: i32,
    strings: []const ILangPackString,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // lang_code
        const paramlang_code = self.lang_code;
        result += base.strEncodedSize(paramlang_code);
        // from_version
        const paramfrom_version = self.from_version;
        result += @sizeOf(@TypeOf(paramfrom_version));
        // version
        const paramversion = self.version;
        result += @sizeOf(@TypeOf(paramversion));
        // strings
        const paramstrings = self.strings;
        result += 4; // vector id
        result += 4; // vector size
        for (paramstrings) |paramstringsitem| {
        result += paramstringsitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const LangPackLanguage= struct {
    official: ?bool,
    rtl: ?bool,
    beta: ?bool,
    name: []const u8,
    native_name: []const u8,
    lang_code: []const u8,
    base_lang_code: ?[]const u8,
    plural_code: []const u8,
    strings_count: i32,
    translated_count: i32,
    translations_url: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // official
        // true flag

        // rtl
        // true flag

        // beta
        // true flag

        // name
        const paramname = self.name;
        result += base.strEncodedSize(paramname);
        // native_name
        const paramnative_name = self.native_name;
        result += base.strEncodedSize(paramnative_name);
        // lang_code
        const paramlang_code = self.lang_code;
        result += base.strEncodedSize(paramlang_code);
        // base_lang_code
        const parambase_lang_code = self.base_lang_code;
        if (parambase_lang_code) |parambase_lang_codeflag| {
        result += base.strEncodedSize(parambase_lang_codeflag);        }

        // plural_code
        const paramplural_code = self.plural_code;
        result += base.strEncodedSize(paramplural_code);
        // strings_count
        const paramstrings_count = self.strings_count;
        result += @sizeOf(@TypeOf(paramstrings_count));
        // translated_count
        const paramtranslated_count = self.translated_count;
        result += @sizeOf(@TypeOf(paramtranslated_count));
        // translations_url
        const paramtranslations_url = self.translations_url;
        result += base.strEncodedSize(paramtranslations_url);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelAdminLogEventActionChangeTitle= struct {
    prev_value: []const u8,
    new_value: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // prev_value
        const paramprev_value = self.prev_value;
        result += base.strEncodedSize(paramprev_value);
        // new_value
        const paramnew_value = self.new_value;
        result += base.strEncodedSize(paramnew_value);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelAdminLogEventActionChangeAbout= struct {
    prev_value: []const u8,
    new_value: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // prev_value
        const paramprev_value = self.prev_value;
        result += base.strEncodedSize(paramprev_value);
        // new_value
        const paramnew_value = self.new_value;
        result += base.strEncodedSize(paramnew_value);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelAdminLogEventActionChangeUsername= struct {
    prev_value: []const u8,
    new_value: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // prev_value
        const paramprev_value = self.prev_value;
        result += base.strEncodedSize(paramprev_value);
        // new_value
        const paramnew_value = self.new_value;
        result += base.strEncodedSize(paramnew_value);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelAdminLogEventActionChangePhoto= struct {
    prev_photo: IPhoto,
    new_photo: IPhoto,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // prev_photo
        const paramprev_photo = self.prev_photo;
        result += paramprev_photo.size();

        // new_photo
        const paramnew_photo = self.new_photo;
        result += paramnew_photo.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelAdminLogEventActionToggleInvites= struct {
    new_value: bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // new_value
        const paramnew_value = self.new_value;
        _ = paramnew_value;
        result += 4;
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const ChannelAdminLogEventActionToggleSignatures= struct {
    new_value: bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // new_value
        const paramnew_value = self.new_value;
        _ = paramnew_value;
        result += 4;
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const ChannelAdminLogEventActionUpdatePinned= struct {
    message: IMessage,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // message
        const parammessage = self.message;
        result += parammessage.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const ChannelAdminLogEventActionEditMessage= struct {
    prev_message: IMessage,
    new_message: IMessage,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // prev_message
        const paramprev_message = self.prev_message;
        result += paramprev_message.size();

        // new_message
        const paramnew_message = self.new_message;
        result += paramnew_message.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelAdminLogEventActionDeleteMessage= struct {
    message: IMessage,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // message
        const parammessage = self.message;
        result += parammessage.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const ChannelAdminLogEventActionParticipantJoin= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const ChannelAdminLogEventActionParticipantLeave= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const ChannelAdminLogEventActionParticipantInvite= struct {
    participant: IChannelParticipant,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // participant
        const paramparticipant = self.participant;
        result += paramparticipant.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const ChannelAdminLogEventActionParticipantToggleBan= struct {
    prev_participant: IChannelParticipant,
    new_participant: IChannelParticipant,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // prev_participant
        const paramprev_participant = self.prev_participant;
        result += paramprev_participant.size();

        // new_participant
        const paramnew_participant = self.new_participant;
        result += paramnew_participant.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelAdminLogEventActionParticipantToggleAdmin= struct {
    prev_participant: IChannelParticipant,
    new_participant: IChannelParticipant,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // prev_participant
        const paramprev_participant = self.prev_participant;
        result += paramprev_participant.size();

        // new_participant
        const paramnew_participant = self.new_participant;
        result += paramnew_participant.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelAdminLogEventActionChangeStickerSet= struct {
    prev_stickerset: IInputStickerSet,
    new_stickerset: IInputStickerSet,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // prev_stickerset
        const paramprev_stickerset = self.prev_stickerset;
        result += paramprev_stickerset.size();

        // new_stickerset
        const paramnew_stickerset = self.new_stickerset;
        result += paramnew_stickerset.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelAdminLogEventActionTogglePreHistoryHidden= struct {
    new_value: bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // new_value
        const paramnew_value = self.new_value;
        _ = paramnew_value;
        result += 4;
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const ChannelAdminLogEventActionDefaultBannedRights= struct {
    prev_banned_rights: IChatBannedRights,
    new_banned_rights: IChatBannedRights,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // prev_banned_rights
        const paramprev_banned_rights = self.prev_banned_rights;
        result += paramprev_banned_rights.size();

        // new_banned_rights
        const paramnew_banned_rights = self.new_banned_rights;
        result += paramnew_banned_rights.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelAdminLogEventActionStopPoll= struct {
    message: IMessage,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // message
        const parammessage = self.message;
        result += parammessage.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const ChannelAdminLogEventActionChangeLinkedChat= struct {
    prev_value: i64,
    new_value: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // prev_value
        const paramprev_value = self.prev_value;
        result += @sizeOf(@TypeOf(paramprev_value));
        // new_value
        const paramnew_value = self.new_value;
        result += @sizeOf(@TypeOf(paramnew_value));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelAdminLogEventActionChangeLocation= struct {
    prev_value: IChannelLocation,
    new_value: IChannelLocation,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // prev_value
        const paramprev_value = self.prev_value;
        result += paramprev_value.size();

        // new_value
        const paramnew_value = self.new_value;
        result += paramnew_value.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelAdminLogEventActionToggleSlowMode= struct {
    prev_value: i32,
    new_value: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // prev_value
        const paramprev_value = self.prev_value;
        result += @sizeOf(@TypeOf(paramprev_value));
        // new_value
        const paramnew_value = self.new_value;
        result += @sizeOf(@TypeOf(paramnew_value));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelAdminLogEventActionStartGroupCall= struct {
    call: IInputGroupCall,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // call
        const paramcall = self.call;
        result += paramcall.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const ChannelAdminLogEventActionDiscardGroupCall= struct {
    call: IInputGroupCall,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // call
        const paramcall = self.call;
        result += paramcall.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const ChannelAdminLogEventActionParticipantMute= struct {
    participant: IGroupCallParticipant,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // participant
        const paramparticipant = self.participant;
        result += paramparticipant.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const ChannelAdminLogEventActionParticipantUnmute= struct {
    participant: IGroupCallParticipant,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // participant
        const paramparticipant = self.participant;
        result += paramparticipant.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const ChannelAdminLogEventActionToggleGroupCallSetting= struct {
    join_muted: bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // join_muted
        const paramjoin_muted = self.join_muted;
        _ = paramjoin_muted;
        result += 4;
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const ChannelAdminLogEventActionParticipantJoinByInvite= struct {
    via_chatlist: ?bool,
    invite: IExportedChatInvite,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // via_chatlist
        // true flag

        // invite
        const paraminvite = self.invite;
        result += paraminvite.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelAdminLogEventActionExportedInviteDelete= struct {
    invite: IExportedChatInvite,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // invite
        const paraminvite = self.invite;
        result += paraminvite.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const ChannelAdminLogEventActionExportedInviteRevoke= struct {
    invite: IExportedChatInvite,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // invite
        const paraminvite = self.invite;
        result += paraminvite.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const ChannelAdminLogEventActionExportedInviteEdit= struct {
    prev_invite: IExportedChatInvite,
    new_invite: IExportedChatInvite,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // prev_invite
        const paramprev_invite = self.prev_invite;
        result += paramprev_invite.size();

        // new_invite
        const paramnew_invite = self.new_invite;
        result += paramnew_invite.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelAdminLogEventActionParticipantVolume= struct {
    participant: IGroupCallParticipant,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // participant
        const paramparticipant = self.participant;
        result += paramparticipant.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const ChannelAdminLogEventActionChangeHistoryTTL= struct {
    prev_value: i32,
    new_value: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // prev_value
        const paramprev_value = self.prev_value;
        result += @sizeOf(@TypeOf(paramprev_value));
        // new_value
        const paramnew_value = self.new_value;
        result += @sizeOf(@TypeOf(paramnew_value));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelAdminLogEventActionParticipantJoinByRequest= struct {
    invite: IExportedChatInvite,
    approved_by: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // invite
        const paraminvite = self.invite;
        result += paraminvite.size();

        // approved_by
        const paramapproved_by = self.approved_by;
        result += @sizeOf(@TypeOf(paramapproved_by));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelAdminLogEventActionToggleNoForwards= struct {
    new_value: bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // new_value
        const paramnew_value = self.new_value;
        _ = paramnew_value;
        result += 4;
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const ChannelAdminLogEventActionSendMessage= struct {
    message: IMessage,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // message
        const parammessage = self.message;
        result += parammessage.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const ChannelAdminLogEventActionChangeAvailableReactions= struct {
    prev_value: IChatReactions,
    new_value: IChatReactions,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // prev_value
        const paramprev_value = self.prev_value;
        result += paramprev_value.size();

        // new_value
        const paramnew_value = self.new_value;
        result += paramnew_value.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelAdminLogEventActionChangeUsernames= struct {
    prev_value: []const []const u8,
    new_value: []const []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // prev_value
        const paramprev_value = self.prev_value;
        result += 4; // vector id
        result += 4; // vector size
        for (paramprev_value) |paramprev_valueitem| {
        result += base.strEncodedSize(paramprev_valueitem);        }

        // new_value
        const paramnew_value = self.new_value;
        result += 4; // vector id
        result += 4; // vector size
        for (paramnew_value) |paramnew_valueitem| {
        result += base.strEncodedSize(paramnew_valueitem);        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelAdminLogEventActionToggleForum= struct {
    new_value: bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // new_value
        const paramnew_value = self.new_value;
        _ = paramnew_value;
        result += 4;
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const ChannelAdminLogEventActionCreateTopic= struct {
    topic: IForumTopic,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // topic
        const paramtopic = self.topic;
        result += paramtopic.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const ChannelAdminLogEventActionEditTopic= struct {
    prev_topic: IForumTopic,
    new_topic: IForumTopic,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // prev_topic
        const paramprev_topic = self.prev_topic;
        result += paramprev_topic.size();

        // new_topic
        const paramnew_topic = self.new_topic;
        result += paramnew_topic.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelAdminLogEventActionDeleteTopic= struct {
    topic: IForumTopic,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // topic
        const paramtopic = self.topic;
        result += paramtopic.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const ChannelAdminLogEventActionPinTopic= struct {
    prev_topic: ?IForumTopic,
    new_topic: ?IForumTopic,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // prev_topic
        const paramprev_topic = self.prev_topic;
        if (paramprev_topic) |paramprev_topicflag| {
        result += paramprev_topicflag.size();
        }

        // new_topic
        const paramnew_topic = self.new_topic;
        if (paramnew_topic) |paramnew_topicflag| {
        result += paramnew_topicflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelAdminLogEventActionToggleAntiSpam= struct {
    new_value: bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // new_value
        const paramnew_value = self.new_value;
        _ = paramnew_value;
        result += 4;
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const ChannelAdminLogEventActionChangePeerColor= struct {
    prev_value: IPeerColor,
    new_value: IPeerColor,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // prev_value
        const paramprev_value = self.prev_value;
        result += paramprev_value.size();

        // new_value
        const paramnew_value = self.new_value;
        result += paramnew_value.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelAdminLogEventActionChangeProfilePeerColor= struct {
    prev_value: IPeerColor,
    new_value: IPeerColor,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // prev_value
        const paramprev_value = self.prev_value;
        result += paramprev_value.size();

        // new_value
        const paramnew_value = self.new_value;
        result += paramnew_value.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelAdminLogEventActionChangeWallpaper= struct {
    prev_value: IWallPaper,
    new_value: IWallPaper,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // prev_value
        const paramprev_value = self.prev_value;
        result += paramprev_value.size();

        // new_value
        const paramnew_value = self.new_value;
        result += paramnew_value.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelAdminLogEventActionChangeEmojiStatus= struct {
    prev_value: IEmojiStatus,
    new_value: IEmojiStatus,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // prev_value
        const paramprev_value = self.prev_value;
        result += paramprev_value.size();

        // new_value
        const paramnew_value = self.new_value;
        result += paramnew_value.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelAdminLogEventActionChangeEmojiStickerSet= struct {
    prev_stickerset: IInputStickerSet,
    new_stickerset: IInputStickerSet,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // prev_stickerset
        const paramprev_stickerset = self.prev_stickerset;
        result += paramprev_stickerset.size();

        // new_stickerset
        const paramnew_stickerset = self.new_stickerset;
        result += paramnew_stickerset.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelAdminLogEventActionToggleSignatureProfiles= struct {
    new_value: bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // new_value
        const paramnew_value = self.new_value;
        _ = paramnew_value;
        result += 4;
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const ChannelAdminLogEventActionParticipantSubExtend= struct {
    prev_participant: IChannelParticipant,
    new_participant: IChannelParticipant,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // prev_participant
        const paramprev_participant = self.prev_participant;
        result += paramprev_participant.size();

        // new_participant
        const paramnew_participant = self.new_participant;
        result += paramnew_participant.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelAdminLogEvent= struct {
    id: i64,
    date: i32,
    user_id: i64,
    action: IChannelAdminLogEventAction,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        // user_id
        const paramuser_id = self.user_id;
        result += @sizeOf(@TypeOf(paramuser_id));
        // action
        const paramaction = self.action;
        result += paramaction.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelsAdminLogResults= struct {
    events: []const IChannelAdminLogEvent,
    chats: []const IChat,
    users: []const IUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // events
        const paramevents = self.events;
        result += 4; // vector id
        result += 4; // vector size
        for (paramevents) |parameventsitem| {
        result += parameventsitem.size();
        }

        // chats
        const paramchats = self.chats;
        result += 4; // vector id
        result += 4; // vector size
        for (paramchats) |paramchatsitem| {
        result += paramchatsitem.size();
        }

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelAdminLogEventsFilter= struct {
    join: ?bool,
    leave: ?bool,
    invite: ?bool,
    ban: ?bool,
    unban: ?bool,
    kick: ?bool,
    unkick: ?bool,
    promote: ?bool,
    demote: ?bool,
    info: ?bool,
    settings: ?bool,
    pinned: ?bool,
    edit: ?bool,
    delete: ?bool,
    group_call: ?bool,
    invites: ?bool,
    send: ?bool,
    forums: ?bool,
    sub_extend: ?bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // join
        // true flag

        // leave
        // true flag

        // invite
        // true flag

        // ban
        // true flag

        // unban
        // true flag

        // kick
        // true flag

        // unkick
        // true flag

        // promote
        // true flag

        // demote
        // true flag

        // info
        // true flag

        // settings
        // true flag

        // pinned
        // true flag

        // edit
        // true flag

        // delete
        // true flag

        // group_call
        // true flag

        // invites
        // true flag

        // send
        // true flag

        // forums
        // true flag

        // sub_extend
        // true flag


        _ = self;
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 6;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 7;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 8;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 9;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 10;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 11;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 12;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 13;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 14;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 15;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 16;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 17;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 18;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PopularContact= struct {
    client_id: i64,
    importers: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // client_id
        const paramclient_id = self.client_id;
        result += @sizeOf(@TypeOf(paramclient_id));
        // importers
        const paramimporters = self.importers;
        result += @sizeOf(@TypeOf(paramimporters));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesFavedStickersNotModified= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const MessagesFavedStickers= struct {
    hash: i64,
    packs: []const IStickerPack,
    stickers: []const IDocument,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        // packs
        const parampacks = self.packs;
        result += 4; // vector id
        result += 4; // vector size
        for (parampacks) |parampacksitem| {
        result += parampacksitem.size();
        }

        // stickers
        const paramstickers = self.stickers;
        result += 4; // vector id
        result += 4; // vector size
        for (paramstickers) |paramstickersitem| {
        result += paramstickersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const RecentMeUrlUnknown= struct {
    url: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // url
        const paramurl = self.url;
        result += base.strEncodedSize(paramurl);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const RecentMeUrlUser= struct {
    url: []const u8,
    user_id: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // url
        const paramurl = self.url;
        result += base.strEncodedSize(paramurl);
        // user_id
        const paramuser_id = self.user_id;
        result += @sizeOf(@TypeOf(paramuser_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const RecentMeUrlChat= struct {
    url: []const u8,
    chat_id: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // url
        const paramurl = self.url;
        result += base.strEncodedSize(paramurl);
        // chat_id
        const paramchat_id = self.chat_id;
        result += @sizeOf(@TypeOf(paramchat_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const RecentMeUrlChatInvite= struct {
    url: []const u8,
    chat_invite: IChatInvite,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // url
        const paramurl = self.url;
        result += base.strEncodedSize(paramurl);
        // chat_invite
        const paramchat_invite = self.chat_invite;
        result += paramchat_invite.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const RecentMeUrlStickerSet= struct {
    url: []const u8,
    set: IStickerSetCovered,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // url
        const paramurl = self.url;
        result += base.strEncodedSize(paramurl);
        // set
        const paramset = self.set;
        result += paramset.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const HelpRecentMeUrls= struct {
    urls: []const IRecentMeUrl,
    chats: []const IChat,
    users: []const IUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // urls
        const paramurls = self.urls;
        result += 4; // vector id
        result += 4; // vector size
        for (paramurls) |paramurlsitem| {
        result += paramurlsitem.size();
        }

        // chats
        const paramchats = self.chats;
        result += 4; // vector id
        result += 4; // vector size
        for (paramchats) |paramchatsitem| {
        result += paramchatsitem.size();
        }

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputSingleMedia= struct {
    media: IInputMedia,
    random_id: i64,
    message: []const u8,
    entities: ?[]const IMessageEntity,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // media
        const parammedia = self.media;
        result += parammedia.size();

        // random_id
        const paramrandom_id = self.random_id;
        result += @sizeOf(@TypeOf(paramrandom_id));
        // message
        const parammessage = self.message;
        result += base.strEncodedSize(parammessage);
        // entities
        const paramentities = self.entities;
        if (paramentities) |paramentitiesflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramentitiesflag) |paramentitiesflagitem| {
        result += paramentitiesflagitem.size();
        }
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const WebAuthorization= struct {
    hash: i64,
    bot_id: i64,
    domain: []const u8,
    browser: []const u8,
    platform: []const u8,
    date_created: i32,
    date_active: i32,
    ip: []const u8,
    region: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        // bot_id
        const parambot_id = self.bot_id;
        result += @sizeOf(@TypeOf(parambot_id));
        // domain
        const paramdomain = self.domain;
        result += base.strEncodedSize(paramdomain);
        // browser
        const parambrowser = self.browser;
        result += base.strEncodedSize(parambrowser);
        // platform
        const paramplatform = self.platform;
        result += base.strEncodedSize(paramplatform);
        // date_created
        const paramdate_created = self.date_created;
        result += @sizeOf(@TypeOf(paramdate_created));
        // date_active
        const paramdate_active = self.date_active;
        result += @sizeOf(@TypeOf(paramdate_active));
        // ip
        const paramip = self.ip;
        result += base.strEncodedSize(paramip);
        // region
        const paramregion = self.region;
        result += base.strEncodedSize(paramregion);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AccountWebAuthorizations= struct {
    authorizations: []const IWebAuthorization,
    users: []const IUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // authorizations
        const paramauthorizations = self.authorizations;
        result += 4; // vector id
        result += 4; // vector size
        for (paramauthorizations) |paramauthorizationsitem| {
        result += paramauthorizationsitem.size();
        }

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputMessageID= struct {
    id: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const InputMessageReplyTo= struct {
    id: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const InputMessagePinned= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const InputMessageCallbackQuery= struct {
    id: i32,
    query_id: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // query_id
        const paramquery_id = self.query_id;
        result += @sizeOf(@TypeOf(paramquery_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputDialogPeer= struct {
    peer: IInputPeer,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const InputDialogPeerFolder= struct {
    folder_id: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // folder_id
        const paramfolder_id = self.folder_id;
        result += @sizeOf(@TypeOf(paramfolder_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const DialogPeer= struct {
    peer: IPeer,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const DialogPeerFolder= struct {
    folder_id: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // folder_id
        const paramfolder_id = self.folder_id;
        result += @sizeOf(@TypeOf(paramfolder_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MessagesFoundStickerSetsNotModified= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const MessagesFoundStickerSets= struct {
    hash: i64,
    sets: []const IStickerSetCovered,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        // sets
        const paramsets = self.sets;
        result += 4; // vector id
        result += 4; // vector size
        for (paramsets) |paramsetsitem| {
        result += paramsetsitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const FileHash= struct {
    offset: i64,
    limit: i32,
    hash: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // offset
        const paramoffset = self.offset;
        result += @sizeOf(@TypeOf(paramoffset));
        // limit
        const paramlimit = self.limit;
        result += @sizeOf(@TypeOf(paramlimit));
        // hash
        const paramhash = self.hash;
        result += base.strEncodedSize(paramhash);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputClientProxy= struct {
    address: []const u8,
    port: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // address
        const paramaddress = self.address;
        result += base.strEncodedSize(paramaddress);
        // port
        const paramport = self.port;
        result += @sizeOf(@TypeOf(paramport));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const HelpTermsOfServiceUpdateEmpty= struct {
    expires: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // expires
        const paramexpires = self.expires;
        result += @sizeOf(@TypeOf(paramexpires));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const HelpTermsOfServiceUpdate= struct {
    expires: i32,
    terms_of_service: IHelpTermsOfService,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // expires
        const paramexpires = self.expires;
        result += @sizeOf(@TypeOf(paramexpires));
        // terms_of_service
        const paramterms_of_service = self.terms_of_service;
        result += paramterms_of_service.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputSecureFileUploaded= struct {
    id: i64,
    parts: i32,
    md5_checksum: []const u8,
    file_hash: []const u8,
    secret: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // parts
        const paramparts = self.parts;
        result += @sizeOf(@TypeOf(paramparts));
        // md5_checksum
        const parammd5_checksum = self.md5_checksum;
        result += base.strEncodedSize(parammd5_checksum);
        // file_hash
        const paramfile_hash = self.file_hash;
        result += base.strEncodedSize(paramfile_hash);
        // secret
        const paramsecret = self.secret;
        result += base.strEncodedSize(paramsecret);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputSecureFile= struct {
    id: i64,
    access_hash: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // access_hash
        const paramaccess_hash = self.access_hash;
        result += @sizeOf(@TypeOf(paramaccess_hash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const SecureFileEmpty= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const SecureFile= struct {
    id: i64,
    access_hash: i64,
    size: i64,
    dc_id: i32,
    date: i32,
    file_hash: []const u8,
    secret: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // access_hash
        const paramaccess_hash = self.access_hash;
        result += @sizeOf(@TypeOf(paramaccess_hash));
        // size
        const paramsize = self.size;
        result += @sizeOf(@TypeOf(paramsize));
        // dc_id
        const paramdc_id = self.dc_id;
        result += @sizeOf(@TypeOf(paramdc_id));
        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        // file_hash
        const paramfile_hash = self.file_hash;
        result += base.strEncodedSize(paramfile_hash);
        // secret
        const paramsecret = self.secret;
        result += base.strEncodedSize(paramsecret);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const SecureData= struct {
    data: []const u8,
    data_hash: []const u8,
    secret: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // data
        const paramdata = self.data;
        result += base.strEncodedSize(paramdata);
        // data_hash
        const paramdata_hash = self.data_hash;
        result += base.strEncodedSize(paramdata_hash);
        // secret
        const paramsecret = self.secret;
        result += base.strEncodedSize(paramsecret);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const SecurePlainPhone= struct {
    phone: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // phone
        const paramphone = self.phone;
        result += base.strEncodedSize(paramphone);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const SecurePlainEmail= struct {
    email: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // email
        const paramemail = self.email;
        result += base.strEncodedSize(paramemail);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const SecureValueTypePersonalDetails= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const SecureValueTypePassport= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const SecureValueTypeDriverLicense= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const SecureValueTypeIdentityCard= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const SecureValueTypeInternalPassport= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const SecureValueTypeAddress= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const SecureValueTypeUtilityBill= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const SecureValueTypeBankStatement= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const SecureValueTypeRentalAgreement= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const SecureValueTypePassportRegistration= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const SecureValueTypeTemporaryRegistration= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const SecureValueTypePhone= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const SecureValueTypeEmail= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const SecureValue= struct {
    type: ISecureValueType,
    data: ?ISecureData,
    front_side: ?ISecureFile,
    reverse_side: ?ISecureFile,
    selfie: ?ISecureFile,
    translation: ?[]const ISecureFile,
    files: ?[]const ISecureFile,
    plain_data: ?ISecurePlainData,
    hash: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // type
        const paramtype = self.Type;
        result += paramtype.size();

        // data
        const paramdata = self.data;
        if (paramdata) |paramdataflag| {
        result += paramdataflag.size();
        }

        // front_side
        const paramfront_side = self.front_side;
        if (paramfront_side) |paramfront_sideflag| {
        result += paramfront_sideflag.size();
        }

        // reverse_side
        const paramreverse_side = self.reverse_side;
        if (paramreverse_side) |paramreverse_sideflag| {
        result += paramreverse_sideflag.size();
        }

        // selfie
        const paramselfie = self.selfie;
        if (paramselfie) |paramselfieflag| {
        result += paramselfieflag.size();
        }

        // translation
        const paramtranslation = self.translation;
        if (paramtranslation) |paramtranslationflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramtranslationflag) |paramtranslationflagitem| {
        result += paramtranslationflagitem.size();
        }
        }

        // files
        const paramfiles = self.files;
        if (paramfiles) |paramfilesflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramfilesflag) |paramfilesflagitem| {
        result += paramfilesflagitem.size();
        }
        }

        // plain_data
        const paramplain_data = self.plain_data;
        if (paramplain_data) |paramplain_dataflag| {
        result += paramplain_dataflag.size();
        }

        // hash
        const paramhash = self.hash;
        result += base.strEncodedSize(paramhash);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 6;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputSecureValue= struct {
    type: ISecureValueType,
    data: ?ISecureData,
    front_side: ?IInputSecureFile,
    reverse_side: ?IInputSecureFile,
    selfie: ?IInputSecureFile,
    translation: ?[]const IInputSecureFile,
    files: ?[]const IInputSecureFile,
    plain_data: ?ISecurePlainData,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // type
        const paramtype = self.Type;
        result += paramtype.size();

        // data
        const paramdata = self.data;
        if (paramdata) |paramdataflag| {
        result += paramdataflag.size();
        }

        // front_side
        const paramfront_side = self.front_side;
        if (paramfront_side) |paramfront_sideflag| {
        result += paramfront_sideflag.size();
        }

        // reverse_side
        const paramreverse_side = self.reverse_side;
        if (paramreverse_side) |paramreverse_sideflag| {
        result += paramreverse_sideflag.size();
        }

        // selfie
        const paramselfie = self.selfie;
        if (paramselfie) |paramselfieflag| {
        result += paramselfieflag.size();
        }

        // translation
        const paramtranslation = self.translation;
        if (paramtranslation) |paramtranslationflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramtranslationflag) |paramtranslationflagitem| {
        result += paramtranslationflagitem.size();
        }
        }

        // files
        const paramfiles = self.files;
        if (paramfiles) |paramfilesflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramfilesflag) |paramfilesflagitem| {
        result += paramfilesflagitem.size();
        }
        }

        // plain_data
        const paramplain_data = self.plain_data;
        if (paramplain_data) |paramplain_dataflag| {
        result += paramplain_dataflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 6;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const SecureValueHash= struct {
    type: ISecureValueType,
    hash: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // type
        const paramtype = self.Type;
        result += paramtype.size();

        // hash
        const paramhash = self.hash;
        result += base.strEncodedSize(paramhash);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const SecureValueErrorData= struct {
    type: ISecureValueType,
    data_hash: []const u8,
    field: []const u8,
    text: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // type
        const paramtype = self.Type;
        result += paramtype.size();

        // data_hash
        const paramdata_hash = self.data_hash;
        result += base.strEncodedSize(paramdata_hash);
        // field
        const paramfield = self.field;
        result += base.strEncodedSize(paramfield);
        // text
        const paramtext = self.text;
        result += base.strEncodedSize(paramtext);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const SecureValueErrorFrontSide= struct {
    type: ISecureValueType,
    file_hash: []const u8,
    text: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // type
        const paramtype = self.Type;
        result += paramtype.size();

        // file_hash
        const paramfile_hash = self.file_hash;
        result += base.strEncodedSize(paramfile_hash);
        // text
        const paramtext = self.text;
        result += base.strEncodedSize(paramtext);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const SecureValueErrorReverseSide= struct {
    type: ISecureValueType,
    file_hash: []const u8,
    text: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // type
        const paramtype = self.Type;
        result += paramtype.size();

        // file_hash
        const paramfile_hash = self.file_hash;
        result += base.strEncodedSize(paramfile_hash);
        // text
        const paramtext = self.text;
        result += base.strEncodedSize(paramtext);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const SecureValueErrorSelfie= struct {
    type: ISecureValueType,
    file_hash: []const u8,
    text: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // type
        const paramtype = self.Type;
        result += paramtype.size();

        // file_hash
        const paramfile_hash = self.file_hash;
        result += base.strEncodedSize(paramfile_hash);
        // text
        const paramtext = self.text;
        result += base.strEncodedSize(paramtext);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const SecureValueErrorFile= struct {
    type: ISecureValueType,
    file_hash: []const u8,
    text: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // type
        const paramtype = self.Type;
        result += paramtype.size();

        // file_hash
        const paramfile_hash = self.file_hash;
        result += base.strEncodedSize(paramfile_hash);
        // text
        const paramtext = self.text;
        result += base.strEncodedSize(paramtext);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const SecureValueErrorFiles= struct {
    type: ISecureValueType,
    file_hash: []const []const u8,
    text: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // type
        const paramtype = self.Type;
        result += paramtype.size();

        // file_hash
        const paramfile_hash = self.file_hash;
        result += 4; // vector id
        result += 4; // vector size
        for (paramfile_hash) |paramfile_hashitem| {
        result += base.strEncodedSize(paramfile_hashitem);        }

        // text
        const paramtext = self.text;
        result += base.strEncodedSize(paramtext);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const SecureValueError= struct {
    type: ISecureValueType,
    hash: []const u8,
    text: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // type
        const paramtype = self.Type;
        result += paramtype.size();

        // hash
        const paramhash = self.hash;
        result += base.strEncodedSize(paramhash);
        // text
        const paramtext = self.text;
        result += base.strEncodedSize(paramtext);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const SecureValueErrorTranslationFile= struct {
    type: ISecureValueType,
    file_hash: []const u8,
    text: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // type
        const paramtype = self.Type;
        result += paramtype.size();

        // file_hash
        const paramfile_hash = self.file_hash;
        result += base.strEncodedSize(paramfile_hash);
        // text
        const paramtext = self.text;
        result += base.strEncodedSize(paramtext);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const SecureValueErrorTranslationFiles= struct {
    type: ISecureValueType,
    file_hash: []const []const u8,
    text: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // type
        const paramtype = self.Type;
        result += paramtype.size();

        // file_hash
        const paramfile_hash = self.file_hash;
        result += 4; // vector id
        result += 4; // vector size
        for (paramfile_hash) |paramfile_hashitem| {
        result += base.strEncodedSize(paramfile_hashitem);        }

        // text
        const paramtext = self.text;
        result += base.strEncodedSize(paramtext);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const SecureCredentialsEncrypted= struct {
    data: []const u8,
    hash: []const u8,
    secret: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // data
        const paramdata = self.data;
        result += base.strEncodedSize(paramdata);
        // hash
        const paramhash = self.hash;
        result += base.strEncodedSize(paramhash);
        // secret
        const paramsecret = self.secret;
        result += base.strEncodedSize(paramsecret);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AccountAuthorizationForm= struct {
    required_types: []const ISecureRequiredType,
    values: []const ISecureValue,
    errors: []const ISecureValueError,
    users: []const IUser,
    privacy_policy_url: ?[]const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // required_types
        const paramrequired_types = self.required_types;
        result += 4; // vector id
        result += 4; // vector size
        for (paramrequired_types) |paramrequired_typesitem| {
        result += paramrequired_typesitem.size();
        }

        // values
        const paramvalues = self.values;
        result += 4; // vector id
        result += 4; // vector size
        for (paramvalues) |paramvaluesitem| {
        result += paramvaluesitem.size();
        }

        // errors
        const paramerrors = self.errors;
        result += 4; // vector id
        result += 4; // vector size
        for (paramerrors) |paramerrorsitem| {
        result += paramerrorsitem.size();
        }

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        // privacy_policy_url
        const paramprivacy_policy_url = self.privacy_policy_url;
        if (paramprivacy_policy_url) |paramprivacy_policy_urlflag| {
        result += base.strEncodedSize(paramprivacy_policy_urlflag);        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AccountSentEmailCode= struct {
    email_pattern: []const u8,
    length: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // email_pattern
        const paramemail_pattern = self.email_pattern;
        result += base.strEncodedSize(paramemail_pattern);
        // length
        const paramlength = self.length;
        result += @sizeOf(@TypeOf(paramlength));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const HelpDeepLinkInfoEmpty= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const HelpDeepLinkInfo= struct {
    update_app: ?bool,
    message: []const u8,
    entities: ?[]const IMessageEntity,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // update_app
        // true flag

        // message
        const parammessage = self.message;
        result += base.strEncodedSize(parammessage);
        // entities
        const paramentities = self.entities;
        if (paramentities) |paramentitiesflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramentitiesflag) |paramentitiesflagitem| {
        result += paramentitiesflagitem.size();
        }
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const SavedPhoneContact= struct {
    phone: []const u8,
    first_name: []const u8,
    last_name: []const u8,
    date: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // phone
        const paramphone = self.phone;
        result += base.strEncodedSize(paramphone);
        // first_name
        const paramfirst_name = self.first_name;
        result += base.strEncodedSize(paramfirst_name);
        // last_name
        const paramlast_name = self.last_name;
        result += base.strEncodedSize(paramlast_name);
        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AccountTakeout= struct {
    id: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const PasswordKdfAlgoUnknown= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow= struct {
    salt1: []const u8,
    salt2: []const u8,
    g: i32,
    p: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // salt1
        const paramsalt1 = self.salt1;
        result += base.strEncodedSize(paramsalt1);
        // salt2
        const paramsalt2 = self.salt2;
        result += base.strEncodedSize(paramsalt2);
        // g
        const paramg = self.g;
        result += @sizeOf(@TypeOf(paramg));
        // p
        const paramp = self.p;
        result += base.strEncodedSize(paramp);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const SecurePasswordKdfAlgoUnknown= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000= struct {
    salt: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // salt
        const paramsalt = self.salt;
        result += base.strEncodedSize(paramsalt);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const SecurePasswordKdfAlgoSHA512= struct {
    salt: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // salt
        const paramsalt = self.salt;
        result += base.strEncodedSize(paramsalt);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const SecureSecretSettings= struct {
    secure_algo: ISecurePasswordKdfAlgo,
    secure_secret: []const u8,
    secure_secret_id: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // secure_algo
        const paramsecure_algo = self.secure_algo;
        result += paramsecure_algo.size();

        // secure_secret
        const paramsecure_secret = self.secure_secret;
        result += base.strEncodedSize(paramsecure_secret);
        // secure_secret_id
        const paramsecure_secret_id = self.secure_secret_id;
        result += @sizeOf(@TypeOf(paramsecure_secret_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputCheckPasswordEmpty= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const InputCheckPasswordSRP= struct {
    srp_id: i64,
    A: []const u8,
    M1: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // srp_id
        const paramsrp_id = self.srp_id;
        result += @sizeOf(@TypeOf(paramsrp_id));
        // A
        const paramA = self.A;
        result += base.strEncodedSize(paramA);
        // M1
        const paramM1 = self.M1;
        result += base.strEncodedSize(paramM1);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const SecureRequiredType= struct {
    native_names: ?bool,
    selfie_required: ?bool,
    translation_required: ?bool,
    type: ISecureValueType,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // native_names
        // true flag

        // selfie_required
        // true flag

        // translation_required
        // true flag

        // type
        const paramtype = self.Type;
        result += paramtype.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const SecureRequiredTypeOneOf= struct {
    types: []const ISecureRequiredType,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // types
        const paramtypes = self.types;
        result += 4; // vector id
        result += 4; // vector size
        for (paramtypes) |paramtypesitem| {
        result += paramtypesitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const HelpPassportConfigNotModified= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const HelpPassportConfig= struct {
    hash: i32,
    countries_langs: IDataJSON,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        // countries_langs
        const paramcountries_langs = self.countries_langs;
        result += paramcountries_langs.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputAppEvent= struct {
    time: f64,
    type: []const u8,
    peer: i64,
    data: IJSONValue,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // time
        const paramtime = self.time;
        result += @sizeOf(@TypeOf(paramtime));
        // type
        const paramtype = self.Type;
        result += base.strEncodedSize(paramtype);
        // peer
        const parampeer = self.peer;
        result += @sizeOf(@TypeOf(parampeer));
        // data
        const paramdata = self.data;
        result += paramdata.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const JsonObjectValue= struct {
    key: []const u8,
    value: IJSONValue,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // key
        const paramkey = self.key;
        result += base.strEncodedSize(paramkey);
        // value
        const paramvalue = self.value;
        result += paramvalue.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const JsonNull= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const JsonBool= struct {
    value: bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // value
        const paramvalue = self.value;
        _ = paramvalue;
        result += 4;
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const JsonNumber= struct {
    value: f64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // value
        const paramvalue = self.value;
        result += @sizeOf(@TypeOf(paramvalue));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const JsonString= struct {
    value: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // value
        const paramvalue = self.value;
        result += base.strEncodedSize(paramvalue);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const JsonArray= struct {
    value: []const IJSONValue,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // value
        const paramvalue = self.value;
        result += 4; // vector id
        result += 4; // vector size
        for (paramvalue) |paramvalueitem| {
        result += paramvalueitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const JsonObject= struct {
    value: []const IJSONObjectValue,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // value
        const paramvalue = self.value;
        result += 4; // vector id
        result += 4; // vector size
        for (paramvalue) |paramvalueitem| {
        result += paramvalueitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const PageTableCell= struct {
    header: ?bool,
    align_center: ?bool,
    align_right: ?bool,
    valign_middle: ?bool,
    valign_bottom: ?bool,
    text: ?IRichText,
    colspan: ?i32,
    rowspan: ?i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // header
        // true flag

        // align_center
        // true flag

        // align_right
        // true flag

        // valign_middle
        // true flag

        // valign_bottom
        // true flag

        // text
        const paramtext = self.text;
        if (paramtext) |paramtextflag| {
        result += paramtextflag.size();
        }

        // colspan
        const paramcolspan = self.colspan;
        if (paramcolspan) |paramcolspanflag| {
        result += @sizeOf(@TypeOf(paramcolspanflag));        }

        // rowspan
        const paramrowspan = self.rowspan;
        if (paramrowspan) |paramrowspanflag| {
        result += @sizeOf(@TypeOf(paramrowspanflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 6;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 7;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PageTableRow= struct {
    cells: []const IPageTableCell,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // cells
        const paramcells = self.cells;
        result += 4; // vector id
        result += 4; // vector size
        for (paramcells) |paramcellsitem| {
        result += paramcellsitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const PageCaption= struct {
    text: IRichText,
    credit: IRichText,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // text
        const paramtext = self.text;
        result += paramtext.size();

        // credit
        const paramcredit = self.credit;
        result += paramcredit.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PageListItemText= struct {
    text: IRichText,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // text
        const paramtext = self.text;
        result += paramtext.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const PageListItemBlocks= struct {
    blocks: []const IPageBlock,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // blocks
        const paramblocks = self.blocks;
        result += 4; // vector id
        result += 4; // vector size
        for (paramblocks) |paramblocksitem| {
        result += paramblocksitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const PageListOrderedItemText= struct {
    num: []const u8,
    text: IRichText,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // num
        const paramnum = self.num;
        result += base.strEncodedSize(paramnum);
        // text
        const paramtext = self.text;
        result += paramtext.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PageListOrderedItemBlocks= struct {
    num: []const u8,
    blocks: []const IPageBlock,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // num
        const paramnum = self.num;
        result += base.strEncodedSize(paramnum);
        // blocks
        const paramblocks = self.blocks;
        result += 4; // vector id
        result += 4; // vector size
        for (paramblocks) |paramblocksitem| {
        result += paramblocksitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PageRelatedArticle= struct {
    url: []const u8,
    webpage_id: i64,
    title: ?[]const u8,
    description: ?[]const u8,
    photo_id: ?i64,
    author: ?[]const u8,
    published_date: ?i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // url
        const paramurl = self.url;
        result += base.strEncodedSize(paramurl);
        // webpage_id
        const paramwebpage_id = self.webpage_id;
        result += @sizeOf(@TypeOf(paramwebpage_id));
        // title
        const paramtitle = self.title;
        if (paramtitle) |paramtitleflag| {
        result += base.strEncodedSize(paramtitleflag);        }

        // description
        const paramdescription = self.description;
        if (paramdescription) |paramdescriptionflag| {
        result += base.strEncodedSize(paramdescriptionflag);        }

        // photo_id
        const paramphoto_id = self.photo_id;
        if (paramphoto_id) |paramphoto_idflag| {
        result += @sizeOf(@TypeOf(paramphoto_idflag));        }

        // author
        const paramauthor = self.author;
        if (paramauthor) |paramauthorflag| {
        result += base.strEncodedSize(paramauthorflag);        }

        // published_date
        const parampublished_date = self.published_date;
        if (parampublished_date) |parampublished_dateflag| {
        result += @sizeOf(@TypeOf(parampublished_dateflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const Page= struct {
    part: ?bool,
    rtl: ?bool,
    v2: ?bool,
    url: []const u8,
    blocks: []const IPageBlock,
    photos: []const IPhoto,
    documents: []const IDocument,
    views: ?i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // part
        // true flag

        // rtl
        // true flag

        // v2
        // true flag

        // url
        const paramurl = self.url;
        result += base.strEncodedSize(paramurl);
        // blocks
        const paramblocks = self.blocks;
        result += 4; // vector id
        result += 4; // vector size
        for (paramblocks) |paramblocksitem| {
        result += paramblocksitem.size();
        }

        // photos
        const paramphotos = self.photos;
        result += 4; // vector id
        result += 4; // vector size
        for (paramphotos) |paramphotositem| {
        result += paramphotositem.size();
        }

        // documents
        const paramdocuments = self.documents;
        result += 4; // vector id
        result += 4; // vector size
        for (paramdocuments) |paramdocumentsitem| {
        result += paramdocumentsitem.size();
        }

        // views
        const paramviews = self.views;
        if (paramviews) |paramviewsflag| {
        result += @sizeOf(@TypeOf(paramviewsflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const HelpSupportName= struct {
    name: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // name
        const paramname = self.name;
        result += base.strEncodedSize(paramname);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const HelpUserInfoEmpty= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const HelpUserInfo= struct {
    message: []const u8,
    entities: []const IMessageEntity,
    author: []const u8,
    date: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // message
        const parammessage = self.message;
        result += base.strEncodedSize(parammessage);
        // entities
        const paramentities = self.entities;
        result += 4; // vector id
        result += 4; // vector size
        for (paramentities) |paramentitiesitem| {
        result += paramentitiesitem.size();
        }

        // author
        const paramauthor = self.author;
        result += base.strEncodedSize(paramauthor);
        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PollAnswer= struct {
    text: ITextWithEntities,
    option: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // text
        const paramtext = self.text;
        result += paramtext.size();

        // option
        const paramoption = self.option;
        result += base.strEncodedSize(paramoption);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const Poll= struct {
    id: i64,
    closed: ?bool,
    public_voters: ?bool,
    multiple_choice: ?bool,
    quiz: ?bool,
    question: ITextWithEntities,
    answers: []const IPollAnswer,
    close_period: ?i32,
    close_date: ?i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // flags
        result += 4; // flags
        // closed
        // true flag

        // public_voters
        // true flag

        // multiple_choice
        // true flag

        // quiz
        // true flag

        // question
        const paramquestion = self.question;
        result += paramquestion.size();

        // answers
        const paramanswers = self.answers;
        result += 4; // vector id
        result += 4; // vector size
        for (paramanswers) |paramanswersitem| {
        result += paramanswersitem.size();
        }

        // close_period
        const paramclose_period = self.close_period;
        if (paramclose_period) |paramclose_periodflag| {
        result += @sizeOf(@TypeOf(paramclose_periodflag));        }

        // close_date
        const paramclose_date = self.close_date;
        if (paramclose_date) |paramclose_dateflag| {
        result += @sizeOf(@TypeOf(paramclose_dateflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PollAnswerVoters= struct {
    chosen: ?bool,
    correct: ?bool,
    option: []const u8,
    voters: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // chosen
        // true flag

        // correct
        // true flag

        // option
        const paramoption = self.option;
        result += base.strEncodedSize(paramoption);
        // voters
        const paramvoters = self.voters;
        result += @sizeOf(@TypeOf(paramvoters));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PollResults= struct {
    min: ?bool,
    results: ?[]const IPollAnswerVoters,
    total_voters: ?i32,
    recent_voters: ?[]const IPeer,
    solution: ?[]const u8,
    solution_entities: ?[]const IMessageEntity,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // min
        // true flag

        // results
        const paramresults = self.results;
        if (paramresults) |paramresultsflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramresultsflag) |paramresultsflagitem| {
        result += paramresultsflagitem.size();
        }
        }

        // total_voters
        const paramtotal_voters = self.total_voters;
        if (paramtotal_voters) |paramtotal_votersflag| {
        result += @sizeOf(@TypeOf(paramtotal_votersflag));        }

        // recent_voters
        const paramrecent_voters = self.recent_voters;
        if (paramrecent_voters) |paramrecent_votersflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramrecent_votersflag) |paramrecent_votersflagitem| {
        result += paramrecent_votersflagitem.size();
        }
        }

        // solution
        const paramsolution = self.solution;
        if (paramsolution) |paramsolutionflag| {
        result += base.strEncodedSize(paramsolutionflag);        }

        // solution_entities
        const paramsolution_entities = self.solution_entities;
        if (paramsolution_entities) |paramsolution_entitiesflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramsolution_entitiesflag) |paramsolution_entitiesflagitem| {
        result += paramsolution_entitiesflagitem.size();
        }
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChatOnlines= struct {
    onlines: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // onlines
        const paramonlines = self.onlines;
        result += @sizeOf(@TypeOf(paramonlines));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const StatsURL= struct {
    url: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // url
        const paramurl = self.url;
        result += base.strEncodedSize(paramurl);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const ChatAdminRights= struct {
    change_info: ?bool,
    post_messages: ?bool,
    edit_messages: ?bool,
    delete_messages: ?bool,
    ban_users: ?bool,
    invite_users: ?bool,
    pin_messages: ?bool,
    add_admins: ?bool,
    anonymous: ?bool,
    manage_call: ?bool,
    other: ?bool,
    manage_topics: ?bool,
    post_stories: ?bool,
    edit_stories: ?bool,
    delete_stories: ?bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // change_info
        // true flag

        // post_messages
        // true flag

        // edit_messages
        // true flag

        // delete_messages
        // true flag

        // ban_users
        // true flag

        // invite_users
        // true flag

        // pin_messages
        // true flag

        // add_admins
        // true flag

        // anonymous
        // true flag

        // manage_call
        // true flag

        // other
        // true flag

        // manage_topics
        // true flag

        // post_stories
        // true flag

        // edit_stories
        // true flag

        // delete_stories
        // true flag


        _ = self;
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 7;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 9;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 10;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 11;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 12;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 13;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 14;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 15;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 16;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChatBannedRights= struct {
    view_messages: ?bool,
    send_messages: ?bool,
    send_media: ?bool,
    send_stickers: ?bool,
    send_gifs: ?bool,
    send_games: ?bool,
    send_inline: ?bool,
    embed_links: ?bool,
    send_polls: ?bool,
    change_info: ?bool,
    invite_users: ?bool,
    pin_messages: ?bool,
    manage_topics: ?bool,
    send_photos: ?bool,
    send_videos: ?bool,
    send_roundvideos: ?bool,
    send_audios: ?bool,
    send_voices: ?bool,
    send_docs: ?bool,
    send_plain: ?bool,
    until_date: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // view_messages
        // true flag

        // send_messages
        // true flag

        // send_media
        // true flag

        // send_stickers
        // true flag

        // send_gifs
        // true flag

        // send_games
        // true flag

        // send_inline
        // true flag

        // embed_links
        // true flag

        // send_polls
        // true flag

        // change_info
        // true flag

        // invite_users
        // true flag

        // pin_messages
        // true flag

        // manage_topics
        // true flag

        // send_photos
        // true flag

        // send_videos
        // true flag

        // send_roundvideos
        // true flag

        // send_audios
        // true flag

        // send_voices
        // true flag

        // send_docs
        // true flag

        // send_plain
        // true flag

        // until_date
        const paramuntil_date = self.until_date;
        result += @sizeOf(@TypeOf(paramuntil_date));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 6;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 7;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 8;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 10;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 15;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 17;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 18;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 19;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 20;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 21;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 22;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 23;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 24;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 25;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputWallPaper= struct {
    id: i64,
    access_hash: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // access_hash
        const paramaccess_hash = self.access_hash;
        result += @sizeOf(@TypeOf(paramaccess_hash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputWallPaperSlug= struct {
    slug: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // slug
        const paramslug = self.slug;
        result += base.strEncodedSize(paramslug);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const InputWallPaperNoFile= struct {
    id: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const AccountWallPapersNotModified= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const AccountWallPapers= struct {
    hash: i64,
    wallpapers: []const IWallPaper,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        // wallpapers
        const paramwallpapers = self.wallpapers;
        result += 4; // vector id
        result += 4; // vector size
        for (paramwallpapers) |paramwallpapersitem| {
        result += paramwallpapersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const CodeSettings= struct {
    allow_flashcall: ?bool,
    current_number: ?bool,
    allow_app_hash: ?bool,
    allow_missed_call: ?bool,
    allow_firebase: ?bool,
    unknown_number: ?bool,
    logout_tokens: ?[]const []const u8,
    token: ?[]const u8,
    app_sandbox: ?bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // allow_flashcall
        // true flag

        // current_number
        // true flag

        // allow_app_hash
        // true flag

        // allow_missed_call
        // true flag

        // allow_firebase
        // true flag

        // unknown_number
        // true flag

        // logout_tokens
        const paramlogout_tokens = self.logout_tokens;
        if (paramlogout_tokens) |paramlogout_tokensflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramlogout_tokensflag) |paramlogout_tokensflagitem| {
        result += base.strEncodedSize(paramlogout_tokensflagitem);        }
        }

        // token
        const paramtoken = self.token;
        if (paramtoken) |paramtokenflag| {
        result += base.strEncodedSize(paramtokenflag);        }

        // app_sandbox
        const paramapp_sandbox = self.app_sandbox;
        if (paramapp_sandbox) |paramapp_sandboxflag| {
        _ = paramapp_sandboxflag;
        result += 4;        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 7;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 9;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 6;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 8;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 8;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const WallPaperSettings= struct {
    blur: ?bool,
    motion: ?bool,
    background_color: ?i32,
    second_background_color: ?i32,
    third_background_color: ?i32,
    fourth_background_color: ?i32,
    intensity: ?i32,
    rotation: ?i32,
    emoticon: ?[]const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // blur
        // true flag

        // motion
        // true flag

        // background_color
        const parambackground_color = self.background_color;
        if (parambackground_color) |parambackground_colorflag| {
        result += @sizeOf(@TypeOf(parambackground_colorflag));        }

        // second_background_color
        const paramsecond_background_color = self.second_background_color;
        if (paramsecond_background_color) |paramsecond_background_colorflag| {
        result += @sizeOf(@TypeOf(paramsecond_background_colorflag));        }

        // third_background_color
        const paramthird_background_color = self.third_background_color;
        if (paramthird_background_color) |paramthird_background_colorflag| {
        result += @sizeOf(@TypeOf(paramthird_background_colorflag));        }

        // fourth_background_color
        const paramfourth_background_color = self.fourth_background_color;
        if (paramfourth_background_color) |paramfourth_background_colorflag| {
        result += @sizeOf(@TypeOf(paramfourth_background_colorflag));        }

        // intensity
        const paramintensity = self.intensity;
        if (paramintensity) |paramintensityflag| {
        result += @sizeOf(@TypeOf(paramintensityflag));        }

        // rotation
        const paramrotation = self.rotation;
        if (paramrotation) |paramrotationflag| {
        result += @sizeOf(@TypeOf(paramrotationflag));        }

        // emoticon
        const paramemoticon = self.emoticon;
        if (paramemoticon) |paramemoticonflag| {
        result += base.strEncodedSize(paramemoticonflag);        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 6;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 7;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AutoDownloadSettings= struct {
    disabled: ?bool,
    video_preload_large: ?bool,
    audio_preload_next: ?bool,
    phonecalls_less_data: ?bool,
    stories_preload: ?bool,
    photo_size_max: i32,
    video_size_max: i64,
    file_size_max: i64,
    video_upload_maxbitrate: i32,
    small_queue_active_operations_max: i32,
    large_queue_active_operations_max: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // disabled
        // true flag

        // video_preload_large
        // true flag

        // audio_preload_next
        // true flag

        // phonecalls_less_data
        // true flag

        // stories_preload
        // true flag

        // photo_size_max
        const paramphoto_size_max = self.photo_size_max;
        result += @sizeOf(@TypeOf(paramphoto_size_max));
        // video_size_max
        const paramvideo_size_max = self.video_size_max;
        result += @sizeOf(@TypeOf(paramvideo_size_max));
        // file_size_max
        const paramfile_size_max = self.file_size_max;
        result += @sizeOf(@TypeOf(paramfile_size_max));
        // video_upload_maxbitrate
        const paramvideo_upload_maxbitrate = self.video_upload_maxbitrate;
        result += @sizeOf(@TypeOf(paramvideo_upload_maxbitrate));
        // small_queue_active_operations_max
        const paramsmall_queue_active_operations_max = self.small_queue_active_operations_max;
        result += @sizeOf(@TypeOf(paramsmall_queue_active_operations_max));
        // large_queue_active_operations_max
        const paramlarge_queue_active_operations_max = self.large_queue_active_operations_max;
        result += @sizeOf(@TypeOf(paramlarge_queue_active_operations_max));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AccountAutoDownloadSettings= struct {
    low: IAutoDownloadSettings,
    medium: IAutoDownloadSettings,
    high: IAutoDownloadSettings,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // low
        const paramlow = self.low;
        result += paramlow.size();

        // medium
        const parammedium = self.medium;
        result += parammedium.size();

        // high
        const paramhigh = self.high;
        result += paramhigh.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const EmojiKeyword= struct {
    keyword: []const u8,
    emoticons: []const []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // keyword
        const paramkeyword = self.keyword;
        result += base.strEncodedSize(paramkeyword);
        // emoticons
        const paramemoticons = self.emoticons;
        result += 4; // vector id
        result += 4; // vector size
        for (paramemoticons) |paramemoticonsitem| {
        result += base.strEncodedSize(paramemoticonsitem);        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const EmojiKeywordDeleted= struct {
    keyword: []const u8,
    emoticons: []const []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // keyword
        const paramkeyword = self.keyword;
        result += base.strEncodedSize(paramkeyword);
        // emoticons
        const paramemoticons = self.emoticons;
        result += 4; // vector id
        result += 4; // vector size
        for (paramemoticons) |paramemoticonsitem| {
        result += base.strEncodedSize(paramemoticonsitem);        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const EmojiKeywordsDifference= struct {
    lang_code: []const u8,
    from_version: i32,
    version: i32,
    keywords: []const IEmojiKeyword,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // lang_code
        const paramlang_code = self.lang_code;
        result += base.strEncodedSize(paramlang_code);
        // from_version
        const paramfrom_version = self.from_version;
        result += @sizeOf(@TypeOf(paramfrom_version));
        // version
        const paramversion = self.version;
        result += @sizeOf(@TypeOf(paramversion));
        // keywords
        const paramkeywords = self.keywords;
        result += 4; // vector id
        result += 4; // vector size
        for (paramkeywords) |paramkeywordsitem| {
        result += paramkeywordsitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const EmojiURL= struct {
    url: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // url
        const paramurl = self.url;
        result += base.strEncodedSize(paramurl);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const EmojiLanguage= struct {
    lang_code: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // lang_code
        const paramlang_code = self.lang_code;
        result += base.strEncodedSize(paramlang_code);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const Folder= struct {
    autofill_new_broadcasts: ?bool,
    autofill_public_groups: ?bool,
    autofill_new_correspondents: ?bool,
    id: i32,
    title: []const u8,
    photo: ?IChatPhoto,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // autofill_new_broadcasts
        // true flag

        // autofill_public_groups
        // true flag

        // autofill_new_correspondents
        // true flag

        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // title
        const paramtitle = self.title;
        result += base.strEncodedSize(paramtitle);
        // photo
        const paramphoto = self.photo;
        if (paramphoto) |paramphotoflag| {
        result += paramphotoflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputFolderPeer= struct {
    peer: IInputPeer,
    folder_id: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // folder_id
        const paramfolder_id = self.folder_id;
        result += @sizeOf(@TypeOf(paramfolder_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const FolderPeer= struct {
    peer: IPeer,
    folder_id: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // folder_id
        const paramfolder_id = self.folder_id;
        result += @sizeOf(@TypeOf(paramfolder_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesSearchCounter= struct {
    inexact: ?bool,
    filter: IMessagesFilter,
    count: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // inexact
        // true flag

        // filter
        const paramfilter = self.filter;
        result += paramfilter.size();

        // count
        const paramcount = self.count;
        result += @sizeOf(@TypeOf(paramcount));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UrlAuthResultRequest= struct {
    request_write_access: ?bool,
    bot: IUser,
    domain: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // request_write_access
        // true flag

        // bot
        const parambot = self.bot;
        result += parambot.size();

        // domain
        const paramdomain = self.domain;
        result += base.strEncodedSize(paramdomain);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UrlAuthResultAccepted= struct {
    url: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // url
        const paramurl = self.url;
        result += base.strEncodedSize(paramurl);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const UrlAuthResultDefault= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const ChannelLocationEmpty= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const ChannelLocation= struct {
    geo_point: IGeoPoint,
    address: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // geo_point
        const paramgeo_point = self.geo_point;
        result += paramgeo_point.size();

        // address
        const paramaddress = self.address;
        result += base.strEncodedSize(paramaddress);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PeerLocated= struct {
    peer: IPeer,
    expires: i32,
    distance: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // expires
        const paramexpires = self.expires;
        result += @sizeOf(@TypeOf(paramexpires));
        // distance
        const paramdistance = self.distance;
        result += @sizeOf(@TypeOf(paramdistance));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PeerSelfLocated= struct {
    expires: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // expires
        const paramexpires = self.expires;
        result += @sizeOf(@TypeOf(paramexpires));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const RestrictionReason= struct {
    platform: []const u8,
    reason: []const u8,
    text: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // platform
        const paramplatform = self.platform;
        result += base.strEncodedSize(paramplatform);
        // reason
        const paramreason = self.reason;
        result += base.strEncodedSize(paramreason);
        // text
        const paramtext = self.text;
        result += base.strEncodedSize(paramtext);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputTheme= struct {
    id: i64,
    access_hash: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // access_hash
        const paramaccess_hash = self.access_hash;
        result += @sizeOf(@TypeOf(paramaccess_hash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputThemeSlug= struct {
    slug: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // slug
        const paramslug = self.slug;
        result += base.strEncodedSize(paramslug);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const Theme= struct {
    creator: ?bool,
    default: ?bool,
    for_chat: ?bool,
    id: i64,
    access_hash: i64,
    slug: []const u8,
    title: []const u8,
    document: ?IDocument,
    settings: ?[]const IThemeSettings,
    emoticon: ?[]const u8,
    installs_count: ?i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // creator
        // true flag

        // default
        // true flag

        // for_chat
        // true flag

        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // access_hash
        const paramaccess_hash = self.access_hash;
        result += @sizeOf(@TypeOf(paramaccess_hash));
        // slug
        const paramslug = self.slug;
        result += base.strEncodedSize(paramslug);
        // title
        const paramtitle = self.title;
        result += base.strEncodedSize(paramtitle);
        // document
        const paramdocument = self.document;
        if (paramdocument) |paramdocumentflag| {
        result += paramdocumentflag.size();
        }

        // settings
        const paramsettings = self.settings;
        if (paramsettings) |paramsettingsflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramsettingsflag) |paramsettingsflagitem| {
        result += paramsettingsflagitem.size();
        }
        }

        // emoticon
        const paramemoticon = self.emoticon;
        if (paramemoticon) |paramemoticonflag| {
        result += base.strEncodedSize(paramemoticonflag);        }

        // installs_count
        const paraminstalls_count = self.installs_count;
        if (paraminstalls_count) |paraminstalls_countflag| {
        result += @sizeOf(@TypeOf(paraminstalls_countflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 6;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AccountThemesNotModified= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const AccountThemes= struct {
    hash: i64,
    themes: []const ITheme,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        // themes
        const paramthemes = self.themes;
        result += 4; // vector id
        result += 4; // vector size
        for (paramthemes) |paramthemesitem| {
        result += paramthemesitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AuthLoginToken= struct {
    expires: i32,
    token: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // expires
        const paramexpires = self.expires;
        result += @sizeOf(@TypeOf(paramexpires));
        // token
        const paramtoken = self.token;
        result += base.strEncodedSize(paramtoken);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AuthLoginTokenMigrateTo= struct {
    dc_id: i32,
    token: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // dc_id
        const paramdc_id = self.dc_id;
        result += @sizeOf(@TypeOf(paramdc_id));
        // token
        const paramtoken = self.token;
        result += base.strEncodedSize(paramtoken);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AuthLoginTokenSuccess= struct {
    authorization: IAuthAuthorization,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // authorization
        const paramauthorization = self.authorization;
        result += paramauthorization.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const AccountContentSettings= struct {
    sensitive_enabled: ?bool,
    sensitive_can_change: ?bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // sensitive_enabled
        // true flag

        // sensitive_can_change
        // true flag


        _ = self;
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesInactiveChats= struct {
    dates: []const i32,
    chats: []const IChat,
    users: []const IUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // dates
        const paramdates = self.dates;
        result += 4; // vector id
        result += 4; // vector size
        for (paramdates) |paramdatesitem| {
        result += @sizeOf(@TypeOf(paramdatesitem));        }

        // chats
        const paramchats = self.chats;
        result += 4; // vector id
        result += 4; // vector size
        for (paramchats) |paramchatsitem| {
        result += paramchatsitem.size();
        }

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const BaseThemeClassic= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const BaseThemeDay= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const BaseThemeNight= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const BaseThemeTinted= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const BaseThemeArctic= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const InputThemeSettings= struct {
    message_colors_animated: ?bool,
    base_theme: IBaseTheme,
    accent_color: i32,
    outbox_accent_color: ?i32,
    message_colors: ?[]const i32,
    wallpaper: ?IInputWallPaper,
    wallpaper_settings: ?IWallPaperSettings,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // message_colors_animated
        // true flag

        // base_theme
        const parambase_theme = self.base_theme;
        result += parambase_theme.size();

        // accent_color
        const paramaccent_color = self.accent_color;
        result += @sizeOf(@TypeOf(paramaccent_color));
        // outbox_accent_color
        const paramoutbox_accent_color = self.outbox_accent_color;
        if (paramoutbox_accent_color) |paramoutbox_accent_colorflag| {
        result += @sizeOf(@TypeOf(paramoutbox_accent_colorflag));        }

        // message_colors
        const parammessage_colors = self.message_colors;
        if (parammessage_colors) |parammessage_colorsflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (parammessage_colorsflag) |parammessage_colorsflagitem| {
        result += @sizeOf(@TypeOf(parammessage_colorsflagitem));        }
        }

        // wallpaper
        const paramwallpaper = self.wallpaper;
        if (paramwallpaper) |paramwallpaperflag| {
        result += paramwallpaperflag.size();
        }

        // wallpaper_settings
        const paramwallpaper_settings = self.wallpaper_settings;
        if (paramwallpaper_settings) |paramwallpaper_settingsflag| {
        result += paramwallpaper_settingsflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ThemeSettings= struct {
    message_colors_animated: ?bool,
    base_theme: IBaseTheme,
    accent_color: i32,
    outbox_accent_color: ?i32,
    message_colors: ?[]const i32,
    wallpaper: ?IWallPaper,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // message_colors_animated
        // true flag

        // base_theme
        const parambase_theme = self.base_theme;
        result += parambase_theme.size();

        // accent_color
        const paramaccent_color = self.accent_color;
        result += @sizeOf(@TypeOf(paramaccent_color));
        // outbox_accent_color
        const paramoutbox_accent_color = self.outbox_accent_color;
        if (paramoutbox_accent_color) |paramoutbox_accent_colorflag| {
        result += @sizeOf(@TypeOf(paramoutbox_accent_colorflag));        }

        // message_colors
        const parammessage_colors = self.message_colors;
        if (parammessage_colors) |parammessage_colorsflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (parammessage_colorsflag) |parammessage_colorsflagitem| {
        result += @sizeOf(@TypeOf(parammessage_colorsflagitem));        }
        }

        // wallpaper
        const paramwallpaper = self.wallpaper;
        if (paramwallpaper) |paramwallpaperflag| {
        result += paramwallpaperflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const WebPageAttributeTheme= struct {
    documents: ?[]const IDocument,
    settings: ?IThemeSettings,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // documents
        const paramdocuments = self.documents;
        if (paramdocuments) |paramdocumentsflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramdocumentsflag) |paramdocumentsflagitem| {
        result += paramdocumentsflagitem.size();
        }
        }

        // settings
        const paramsettings = self.settings;
        if (paramsettings) |paramsettingsflag| {
        result += paramsettingsflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const WebPageAttributeStory= struct {
    peer: IPeer,
    id: i32,
    story: ?IStoryItem,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // story
        const paramstory = self.story;
        if (paramstory) |paramstoryflag| {
        result += paramstoryflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const WebPageAttributeStickerSet= struct {
    emojis: ?bool,
    text_color: ?bool,
    stickers: []const IDocument,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // emojis
        // true flag

        // text_color
        // true flag

        // stickers
        const paramstickers = self.stickers;
        result += 4; // vector id
        result += 4; // vector size
        for (paramstickers) |paramstickersitem| {
        result += paramstickersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesVotesList= struct {
    count: i32,
    votes: []const IMessagePeerVote,
    chats: []const IChat,
    users: []const IUser,
    next_offset: ?[]const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // count
        const paramcount = self.count;
        result += @sizeOf(@TypeOf(paramcount));
        // votes
        const paramvotes = self.votes;
        result += 4; // vector id
        result += 4; // vector size
        for (paramvotes) |paramvotesitem| {
        result += paramvotesitem.size();
        }

        // chats
        const paramchats = self.chats;
        result += 4; // vector id
        result += 4; // vector size
        for (paramchats) |paramchatsitem| {
        result += paramchatsitem.size();
        }

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        // next_offset
        const paramnext_offset = self.next_offset;
        if (paramnext_offset) |paramnext_offsetflag| {
        result += base.strEncodedSize(paramnext_offsetflag);        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const BankCardOpenUrl= struct {
    url: []const u8,
    name: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // url
        const paramurl = self.url;
        result += base.strEncodedSize(paramurl);
        // name
        const paramname = self.name;
        result += base.strEncodedSize(paramname);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PaymentsBankCardData= struct {
    title: []const u8,
    open_urls: []const IBankCardOpenUrl,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // title
        const paramtitle = self.title;
        result += base.strEncodedSize(paramtitle);
        // open_urls
        const paramopen_urls = self.open_urls;
        result += 4; // vector id
        result += 4; // vector size
        for (paramopen_urls) |paramopen_urlsitem| {
        result += paramopen_urlsitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const DialogFilter= struct {
    contacts: ?bool,
    non_contacts: ?bool,
    groups: ?bool,
    broadcasts: ?bool,
    bots: ?bool,
    exclude_muted: ?bool,
    exclude_read: ?bool,
    exclude_archived: ?bool,
    id: i32,
    title: []const u8,
    emoticon: ?[]const u8,
    color: ?i32,
    pinned_peers: []const IInputPeer,
    include_peers: []const IInputPeer,
    exclude_peers: []const IInputPeer,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // contacts
        // true flag

        // non_contacts
        // true flag

        // groups
        // true flag

        // broadcasts
        // true flag

        // bots
        // true flag

        // exclude_muted
        // true flag

        // exclude_read
        // true flag

        // exclude_archived
        // true flag

        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // title
        const paramtitle = self.title;
        result += base.strEncodedSize(paramtitle);
        // emoticon
        const paramemoticon = self.emoticon;
        if (paramemoticon) |paramemoticonflag| {
        result += base.strEncodedSize(paramemoticonflag);        }

        // color
        const paramcolor = self.color;
        if (paramcolor) |paramcolorflag| {
        result += @sizeOf(@TypeOf(paramcolorflag));        }

        // pinned_peers
        const parampinned_peers = self.pinned_peers;
        result += 4; // vector id
        result += 4; // vector size
        for (parampinned_peers) |parampinned_peersitem| {
        result += parampinned_peersitem.size();
        }

        // include_peers
        const paraminclude_peers = self.include_peers;
        result += 4; // vector id
        result += 4; // vector size
        for (paraminclude_peers) |paraminclude_peersitem| {
        result += paraminclude_peersitem.size();
        }

        // exclude_peers
        const paramexclude_peers = self.exclude_peers;
        result += 4; // vector id
        result += 4; // vector size
        for (paramexclude_peers) |paramexclude_peersitem| {
        result += paramexclude_peersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 11;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 12;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 13;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 25;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 27;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const DialogFilterDefault= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const DialogFilterChatlist= struct {
    has_my_invites: ?bool,
    id: i32,
    title: []const u8,
    emoticon: ?[]const u8,
    color: ?i32,
    pinned_peers: []const IInputPeer,
    include_peers: []const IInputPeer,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // has_my_invites
        // true flag

        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // title
        const paramtitle = self.title;
        result += base.strEncodedSize(paramtitle);
        // emoticon
        const paramemoticon = self.emoticon;
        if (paramemoticon) |paramemoticonflag| {
        result += base.strEncodedSize(paramemoticonflag);        }

        // color
        const paramcolor = self.color;
        if (paramcolor) |paramcolorflag| {
        result += @sizeOf(@TypeOf(paramcolorflag));        }

        // pinned_peers
        const parampinned_peers = self.pinned_peers;
        result += 4; // vector id
        result += 4; // vector size
        for (parampinned_peers) |parampinned_peersitem| {
        result += parampinned_peersitem.size();
        }

        // include_peers
        const paraminclude_peers = self.include_peers;
        result += 4; // vector id
        result += 4; // vector size
        for (paraminclude_peers) |paraminclude_peersitem| {
        result += paraminclude_peersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 26;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 25;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 27;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const DialogFilterSuggested= struct {
    filter: IDialogFilter,
    description: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // filter
        const paramfilter = self.filter;
        result += paramfilter.size();

        // description
        const paramdescription = self.description;
        result += base.strEncodedSize(paramdescription);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StatsDateRangeDays= struct {
    min_date: i32,
    max_date: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // min_date
        const parammin_date = self.min_date;
        result += @sizeOf(@TypeOf(parammin_date));
        // max_date
        const parammax_date = self.max_date;
        result += @sizeOf(@TypeOf(parammax_date));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StatsAbsValueAndPrev= struct {
    current: f64,
    previous: f64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // current
        const paramcurrent = self.current;
        result += @sizeOf(@TypeOf(paramcurrent));
        // previous
        const paramprevious = self.previous;
        result += @sizeOf(@TypeOf(paramprevious));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StatsPercentValue= struct {
    part: f64,
    total: f64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // part
        const parampart = self.part;
        result += @sizeOf(@TypeOf(parampart));
        // total
        const paramtotal = self.total;
        result += @sizeOf(@TypeOf(paramtotal));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StatsGraphAsync= struct {
    token: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // token
        const paramtoken = self.token;
        result += base.strEncodedSize(paramtoken);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const StatsGraphError= struct {
    Error: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // error
        const paramerror = self.Error;
        result += base.strEncodedSize(paramerror);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const StatsGraph= struct {
    json: IDataJSON,
    zoom_token: ?[]const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // json
        const paramjson = self.json;
        result += paramjson.size();

        // zoom_token
        const paramzoom_token = self.zoom_token;
        if (paramzoom_token) |paramzoom_tokenflag| {
        result += base.strEncodedSize(paramzoom_tokenflag);        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StatsBroadcastStats= struct {
    period: IStatsDateRangeDays,
    followers: IStatsAbsValueAndPrev,
    views_per_post: IStatsAbsValueAndPrev,
    shares_per_post: IStatsAbsValueAndPrev,
    reactions_per_post: IStatsAbsValueAndPrev,
    views_per_story: IStatsAbsValueAndPrev,
    shares_per_story: IStatsAbsValueAndPrev,
    reactions_per_story: IStatsAbsValueAndPrev,
    enabled_notifications: IStatsPercentValue,
    growth_graph: IStatsGraph,
    followers_graph: IStatsGraph,
    mute_graph: IStatsGraph,
    top_hours_graph: IStatsGraph,
    interactions_graph: IStatsGraph,
    iv_interactions_graph: IStatsGraph,
    views_by_source_graph: IStatsGraph,
    new_followers_by_source_graph: IStatsGraph,
    languages_graph: IStatsGraph,
    reactions_by_emotion_graph: IStatsGraph,
    story_interactions_graph: IStatsGraph,
    story_reactions_by_emotion_graph: IStatsGraph,
    recent_posts_interactions: []const IPostInteractionCounters,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // period
        const paramperiod = self.period;
        result += paramperiod.size();

        // followers
        const paramfollowers = self.followers;
        result += paramfollowers.size();

        // views_per_post
        const paramviews_per_post = self.views_per_post;
        result += paramviews_per_post.size();

        // shares_per_post
        const paramshares_per_post = self.shares_per_post;
        result += paramshares_per_post.size();

        // reactions_per_post
        const paramreactions_per_post = self.reactions_per_post;
        result += paramreactions_per_post.size();

        // views_per_story
        const paramviews_per_story = self.views_per_story;
        result += paramviews_per_story.size();

        // shares_per_story
        const paramshares_per_story = self.shares_per_story;
        result += paramshares_per_story.size();

        // reactions_per_story
        const paramreactions_per_story = self.reactions_per_story;
        result += paramreactions_per_story.size();

        // enabled_notifications
        const paramenabled_notifications = self.enabled_notifications;
        result += paramenabled_notifications.size();

        // growth_graph
        const paramgrowth_graph = self.growth_graph;
        result += paramgrowth_graph.size();

        // followers_graph
        const paramfollowers_graph = self.followers_graph;
        result += paramfollowers_graph.size();

        // mute_graph
        const parammute_graph = self.mute_graph;
        result += parammute_graph.size();

        // top_hours_graph
        const paramtop_hours_graph = self.top_hours_graph;
        result += paramtop_hours_graph.size();

        // interactions_graph
        const paraminteractions_graph = self.interactions_graph;
        result += paraminteractions_graph.size();

        // iv_interactions_graph
        const paramiv_interactions_graph = self.iv_interactions_graph;
        result += paramiv_interactions_graph.size();

        // views_by_source_graph
        const paramviews_by_source_graph = self.views_by_source_graph;
        result += paramviews_by_source_graph.size();

        // new_followers_by_source_graph
        const paramnew_followers_by_source_graph = self.new_followers_by_source_graph;
        result += paramnew_followers_by_source_graph.size();

        // languages_graph
        const paramlanguages_graph = self.languages_graph;
        result += paramlanguages_graph.size();

        // reactions_by_emotion_graph
        const paramreactions_by_emotion_graph = self.reactions_by_emotion_graph;
        result += paramreactions_by_emotion_graph.size();

        // story_interactions_graph
        const paramstory_interactions_graph = self.story_interactions_graph;
        result += paramstory_interactions_graph.size();

        // story_reactions_by_emotion_graph
        const paramstory_reactions_by_emotion_graph = self.story_reactions_by_emotion_graph;
        result += paramstory_reactions_by_emotion_graph.size();

        // recent_posts_interactions
        const paramrecent_posts_interactions = self.recent_posts_interactions;
        result += 4; // vector id
        result += 4; // vector size
        for (paramrecent_posts_interactions) |paramrecent_posts_interactionsitem| {
        result += paramrecent_posts_interactionsitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const HelpPromoDataEmpty= struct {
    expires: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // expires
        const paramexpires = self.expires;
        result += @sizeOf(@TypeOf(paramexpires));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const HelpPromoData= struct {
    proxy: ?bool,
    expires: i32,
    peer: IPeer,
    chats: []const IChat,
    users: []const IUser,
    psa_type: ?[]const u8,
    psa_message: ?[]const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // proxy
        // true flag

        // expires
        const paramexpires = self.expires;
        result += @sizeOf(@TypeOf(paramexpires));
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // chats
        const paramchats = self.chats;
        result += 4; // vector id
        result += 4; // vector size
        for (paramchats) |paramchatsitem| {
        result += paramchatsitem.size();
        }

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        // psa_type
        const parampsa_type = self.psa_type;
        if (parampsa_type) |parampsa_typeflag| {
        result += base.strEncodedSize(parampsa_typeflag);        }

        // psa_message
        const parampsa_message = self.psa_message;
        if (parampsa_message) |parampsa_messageflag| {
        result += base.strEncodedSize(parampsa_messageflag);        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const VideoSize= struct {
    type: []const u8,
    w: i32,
    h: i32,
    size: i32,
    video_start_ts: ?f64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // type
        const paramtype = self.Type;
        result += base.strEncodedSize(paramtype);
        // w
        const paramw = self.w;
        result += @sizeOf(@TypeOf(paramw));
        // h
        const paramh = self.h;
        result += @sizeOf(@TypeOf(paramh));
        // size
        const paramsize = self.size;
        result += @sizeOf(@TypeOf(paramsize));
        // video_start_ts
        const paramvideo_start_ts = self.video_start_ts;
        if (paramvideo_start_ts) |paramvideo_start_tsflag| {
        result += @sizeOf(@TypeOf(paramvideo_start_tsflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const VideoSizeEmojiMarkup= struct {
    emoji_id: i64,
    background_colors: []const i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // emoji_id
        const paramemoji_id = self.emoji_id;
        result += @sizeOf(@TypeOf(paramemoji_id));
        // background_colors
        const parambackground_colors = self.background_colors;
        result += 4; // vector id
        result += 4; // vector size
        for (parambackground_colors) |parambackground_colorsitem| {
        result += @sizeOf(@TypeOf(parambackground_colorsitem));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const VideoSizeStickerMarkup= struct {
    stickerset: IInputStickerSet,
    sticker_id: i64,
    background_colors: []const i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // stickerset
        const paramstickerset = self.stickerset;
        result += paramstickerset.size();

        // sticker_id
        const paramsticker_id = self.sticker_id;
        result += @sizeOf(@TypeOf(paramsticker_id));
        // background_colors
        const parambackground_colors = self.background_colors;
        result += 4; // vector id
        result += 4; // vector size
        for (parambackground_colors) |parambackground_colorsitem| {
        result += @sizeOf(@TypeOf(parambackground_colorsitem));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StatsGroupTopPoster= struct {
    user_id: i64,
    messages: i32,
    avg_chars: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // user_id
        const paramuser_id = self.user_id;
        result += @sizeOf(@TypeOf(paramuser_id));
        // messages
        const parammessages = self.messages;
        result += @sizeOf(@TypeOf(parammessages));
        // avg_chars
        const paramavg_chars = self.avg_chars;
        result += @sizeOf(@TypeOf(paramavg_chars));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StatsGroupTopAdmin= struct {
    user_id: i64,
    deleted: i32,
    kicked: i32,
    banned: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // user_id
        const paramuser_id = self.user_id;
        result += @sizeOf(@TypeOf(paramuser_id));
        // deleted
        const paramdeleted = self.deleted;
        result += @sizeOf(@TypeOf(paramdeleted));
        // kicked
        const paramkicked = self.kicked;
        result += @sizeOf(@TypeOf(paramkicked));
        // banned
        const parambanned = self.banned;
        result += @sizeOf(@TypeOf(parambanned));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StatsGroupTopInviter= struct {
    user_id: i64,
    invitations: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // user_id
        const paramuser_id = self.user_id;
        result += @sizeOf(@TypeOf(paramuser_id));
        // invitations
        const paraminvitations = self.invitations;
        result += @sizeOf(@TypeOf(paraminvitations));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StatsMegagroupStats= struct {
    period: IStatsDateRangeDays,
    members: IStatsAbsValueAndPrev,
    messages: IStatsAbsValueAndPrev,
    viewers: IStatsAbsValueAndPrev,
    posters: IStatsAbsValueAndPrev,
    growth_graph: IStatsGraph,
    members_graph: IStatsGraph,
    new_members_by_source_graph: IStatsGraph,
    languages_graph: IStatsGraph,
    messages_graph: IStatsGraph,
    actions_graph: IStatsGraph,
    top_hours_graph: IStatsGraph,
    weekdays_graph: IStatsGraph,
    top_posters: []const IStatsGroupTopPoster,
    top_admins: []const IStatsGroupTopAdmin,
    top_inviters: []const IStatsGroupTopInviter,
    users: []const IUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // period
        const paramperiod = self.period;
        result += paramperiod.size();

        // members
        const parammembers = self.members;
        result += parammembers.size();

        // messages
        const parammessages = self.messages;
        result += parammessages.size();

        // viewers
        const paramviewers = self.viewers;
        result += paramviewers.size();

        // posters
        const paramposters = self.posters;
        result += paramposters.size();

        // growth_graph
        const paramgrowth_graph = self.growth_graph;
        result += paramgrowth_graph.size();

        // members_graph
        const parammembers_graph = self.members_graph;
        result += parammembers_graph.size();

        // new_members_by_source_graph
        const paramnew_members_by_source_graph = self.new_members_by_source_graph;
        result += paramnew_members_by_source_graph.size();

        // languages_graph
        const paramlanguages_graph = self.languages_graph;
        result += paramlanguages_graph.size();

        // messages_graph
        const parammessages_graph = self.messages_graph;
        result += parammessages_graph.size();

        // actions_graph
        const paramactions_graph = self.actions_graph;
        result += paramactions_graph.size();

        // top_hours_graph
        const paramtop_hours_graph = self.top_hours_graph;
        result += paramtop_hours_graph.size();

        // weekdays_graph
        const paramweekdays_graph = self.weekdays_graph;
        result += paramweekdays_graph.size();

        // top_posters
        const paramtop_posters = self.top_posters;
        result += 4; // vector id
        result += 4; // vector size
        for (paramtop_posters) |paramtop_postersitem| {
        result += paramtop_postersitem.size();
        }

        // top_admins
        const paramtop_admins = self.top_admins;
        result += 4; // vector id
        result += 4; // vector size
        for (paramtop_admins) |paramtop_adminsitem| {
        result += paramtop_adminsitem.size();
        }

        // top_inviters
        const paramtop_inviters = self.top_inviters;
        result += 4; // vector id
        result += 4; // vector size
        for (paramtop_inviters) |paramtop_invitersitem| {
        result += paramtop_invitersitem.size();
        }

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const GlobalPrivacySettings= struct {
    archive_and_mute_new_noncontact_peers: ?bool,
    keep_archived_unmuted: ?bool,
    keep_archived_folders: ?bool,
    hide_read_marks: ?bool,
    new_noncontact_peers_require_premium: ?bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // archive_and_mute_new_noncontact_peers
        // true flag

        // keep_archived_unmuted
        // true flag

        // keep_archived_folders
        // true flag

        // hide_read_marks
        // true flag

        // new_noncontact_peers_require_premium
        // true flag


        _ = self;
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const HelpCountryCode= struct {
    country_code: []const u8,
    prefixes: ?[]const []const u8,
    patterns: ?[]const []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // country_code
        const paramcountry_code = self.country_code;
        result += base.strEncodedSize(paramcountry_code);
        // prefixes
        const paramprefixes = self.prefixes;
        if (paramprefixes) |paramprefixesflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramprefixesflag) |paramprefixesflagitem| {
        result += base.strEncodedSize(paramprefixesflagitem);        }
        }

        // patterns
        const parampatterns = self.patterns;
        if (parampatterns) |parampatternsflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (parampatternsflag) |parampatternsflagitem| {
        result += base.strEncodedSize(parampatternsflagitem);        }
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const HelpCountry= struct {
    hidden: ?bool,
    iso2: []const u8,
    default_name: []const u8,
    name: ?[]const u8,
    country_codes: []const IHelpCountryCode,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // hidden
        // true flag

        // iso2
        const paramiso2 = self.iso2;
        result += base.strEncodedSize(paramiso2);
        // default_name
        const paramdefault_name = self.default_name;
        result += base.strEncodedSize(paramdefault_name);
        // name
        const paramname = self.name;
        if (paramname) |paramnameflag| {
        result += base.strEncodedSize(paramnameflag);        }

        // country_codes
        const paramcountry_codes = self.country_codes;
        result += 4; // vector id
        result += 4; // vector size
        for (paramcountry_codes) |paramcountry_codesitem| {
        result += paramcountry_codesitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const HelpCountriesListNotModified= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const HelpCountriesList= struct {
    countries: []const IHelpCountry,
    hash: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // countries
        const paramcountries = self.countries;
        result += 4; // vector id
        result += 4; // vector size
        for (paramcountries) |paramcountriesitem| {
        result += paramcountriesitem.size();
        }

        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessageViews= struct {
    views: ?i32,
    forwards: ?i32,
    replies: ?IMessageReplies,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // views
        const paramviews = self.views;
        if (paramviews) |paramviewsflag| {
        result += @sizeOf(@TypeOf(paramviewsflag));        }

        // forwards
        const paramforwards = self.forwards;
        if (paramforwards) |paramforwardsflag| {
        result += @sizeOf(@TypeOf(paramforwardsflag));        }

        // replies
        const paramreplies = self.replies;
        if (paramreplies) |paramrepliesflag| {
        result += paramrepliesflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesMessageViews= struct {
    views: []const IMessageViews,
    chats: []const IChat,
    users: []const IUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // views
        const paramviews = self.views;
        result += 4; // vector id
        result += 4; // vector size
        for (paramviews) |paramviewsitem| {
        result += paramviewsitem.size();
        }

        // chats
        const paramchats = self.chats;
        result += 4; // vector id
        result += 4; // vector size
        for (paramchats) |paramchatsitem| {
        result += paramchatsitem.size();
        }

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesDiscussionMessage= struct {
    messages: []const IMessage,
    max_id: ?i32,
    read_inbox_max_id: ?i32,
    read_outbox_max_id: ?i32,
    unread_count: i32,
    chats: []const IChat,
    users: []const IUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // messages
        const parammessages = self.messages;
        result += 4; // vector id
        result += 4; // vector size
        for (parammessages) |parammessagesitem| {
        result += parammessagesitem.size();
        }

        // max_id
        const parammax_id = self.max_id;
        if (parammax_id) |parammax_idflag| {
        result += @sizeOf(@TypeOf(parammax_idflag));        }

        // read_inbox_max_id
        const paramread_inbox_max_id = self.read_inbox_max_id;
        if (paramread_inbox_max_id) |paramread_inbox_max_idflag| {
        result += @sizeOf(@TypeOf(paramread_inbox_max_idflag));        }

        // read_outbox_max_id
        const paramread_outbox_max_id = self.read_outbox_max_id;
        if (paramread_outbox_max_id) |paramread_outbox_max_idflag| {
        result += @sizeOf(@TypeOf(paramread_outbox_max_idflag));        }

        // unread_count
        const paramunread_count = self.unread_count;
        result += @sizeOf(@TypeOf(paramunread_count));
        // chats
        const paramchats = self.chats;
        result += 4; // vector id
        result += 4; // vector size
        for (paramchats) |paramchatsitem| {
        result += paramchatsitem.size();
        }

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessageReplyHeader= struct {
    reply_to_scheduled: ?bool,
    forum_topic: ?bool,
    quote: ?bool,
    reply_to_msg_id: ?i32,
    reply_to_peer_id: ?IPeer,
    reply_from: ?IMessageFwdHeader,
    reply_media: ?IMessageMedia,
    reply_to_top_id: ?i32,
    quote_text: ?[]const u8,
    quote_entities: ?[]const IMessageEntity,
    quote_offset: ?i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // reply_to_scheduled
        // true flag

        // forum_topic
        // true flag

        // quote
        // true flag

        // reply_to_msg_id
        const paramreply_to_msg_id = self.reply_to_msg_id;
        if (paramreply_to_msg_id) |paramreply_to_msg_idflag| {
        result += @sizeOf(@TypeOf(paramreply_to_msg_idflag));        }

        // reply_to_peer_id
        const paramreply_to_peer_id = self.reply_to_peer_id;
        if (paramreply_to_peer_id) |paramreply_to_peer_idflag| {
        result += paramreply_to_peer_idflag.size();
        }

        // reply_from
        const paramreply_from = self.reply_from;
        if (paramreply_from) |paramreply_fromflag| {
        result += paramreply_fromflag.size();
        }

        // reply_media
        const paramreply_media = self.reply_media;
        if (paramreply_media) |paramreply_mediaflag| {
        result += paramreply_mediaflag.size();
        }

        // reply_to_top_id
        const paramreply_to_top_id = self.reply_to_top_id;
        if (paramreply_to_top_id) |paramreply_to_top_idflag| {
        result += @sizeOf(@TypeOf(paramreply_to_top_idflag));        }

        // quote_text
        const paramquote_text = self.quote_text;
        if (paramquote_text) |paramquote_textflag| {
        result += base.strEncodedSize(paramquote_textflag);        }

        // quote_entities
        const paramquote_entities = self.quote_entities;
        if (paramquote_entities) |paramquote_entitiesflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramquote_entitiesflag) |paramquote_entitiesflagitem| {
        result += paramquote_entitiesflagitem.size();
        }
        }

        // quote_offset
        const paramquote_offset = self.quote_offset;
        if (paramquote_offset) |paramquote_offsetflag| {
        result += @sizeOf(@TypeOf(paramquote_offsetflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 9;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 8;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 6;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 7;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 10;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessageReplyStoryHeader= struct {
    peer: IPeer,
    story_id: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // story_id
        const paramstory_id = self.story_id;
        result += @sizeOf(@TypeOf(paramstory_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessageReplies= struct {
    comments: ?bool,
    replies: i32,
    replies_pts: i32,
    recent_repliers: ?[]const IPeer,
    channel_id: ?i64,
    max_id: ?i32,
    read_max_id: ?i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // comments
        // true flag

        // replies
        const paramreplies = self.replies;
        result += @sizeOf(@TypeOf(paramreplies));
        // replies_pts
        const paramreplies_pts = self.replies_pts;
        result += @sizeOf(@TypeOf(paramreplies_pts));
        // recent_repliers
        const paramrecent_repliers = self.recent_repliers;
        if (paramrecent_repliers) |paramrecent_repliersflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramrecent_repliersflag) |paramrecent_repliersflagitem| {
        result += paramrecent_repliersflagitem.size();
        }
        }

        // channel_id
        const paramchannel_id = self.channel_id;
        if (paramchannel_id) |paramchannel_idflag| {
        result += @sizeOf(@TypeOf(paramchannel_idflag));        }

        // max_id
        const parammax_id = self.max_id;
        if (parammax_id) |parammax_idflag| {
        result += @sizeOf(@TypeOf(parammax_idflag));        }

        // read_max_id
        const paramread_max_id = self.read_max_id;
        if (paramread_max_id) |paramread_max_idflag| {
        result += @sizeOf(@TypeOf(paramread_max_idflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PeerBlocked= struct {
    peer_id: IPeer,
    date: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer_id
        const parampeer_id = self.peer_id;
        result += parampeer_id.size();

        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StatsMessageStats= struct {
    views_graph: IStatsGraph,
    reactions_by_emotion_graph: IStatsGraph,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // views_graph
        const paramviews_graph = self.views_graph;
        result += paramviews_graph.size();

        // reactions_by_emotion_graph
        const paramreactions_by_emotion_graph = self.reactions_by_emotion_graph;
        result += paramreactions_by_emotion_graph.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const GroupCallDiscarded= struct {
    id: i64,
    access_hash: i64,
    duration: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // access_hash
        const paramaccess_hash = self.access_hash;
        result += @sizeOf(@TypeOf(paramaccess_hash));
        // duration
        const paramduration = self.duration;
        result += @sizeOf(@TypeOf(paramduration));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const GroupCall= struct {
    join_muted: ?bool,
    can_change_join_muted: ?bool,
    join_date_asc: ?bool,
    schedule_start_subscribed: ?bool,
    can_start_video: ?bool,
    record_video_active: ?bool,
    rtmp_stream: ?bool,
    listeners_hidden: ?bool,
    id: i64,
    access_hash: i64,
    participants_count: i32,
    title: ?[]const u8,
    stream_dc_id: ?i32,
    record_start_date: ?i32,
    schedule_date: ?i32,
    unmuted_video_count: ?i32,
    unmuted_video_limit: i32,
    version: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // join_muted
        // true flag

        // can_change_join_muted
        // true flag

        // join_date_asc
        // true flag

        // schedule_start_subscribed
        // true flag

        // can_start_video
        // true flag

        // record_video_active
        // true flag

        // rtmp_stream
        // true flag

        // listeners_hidden
        // true flag

        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // access_hash
        const paramaccess_hash = self.access_hash;
        result += @sizeOf(@TypeOf(paramaccess_hash));
        // participants_count
        const paramparticipants_count = self.participants_count;
        result += @sizeOf(@TypeOf(paramparticipants_count));
        // title
        const paramtitle = self.title;
        if (paramtitle) |paramtitleflag| {
        result += base.strEncodedSize(paramtitleflag);        }

        // stream_dc_id
        const paramstream_dc_id = self.stream_dc_id;
        if (paramstream_dc_id) |paramstream_dc_idflag| {
        result += @sizeOf(@TypeOf(paramstream_dc_idflag));        }

        // record_start_date
        const paramrecord_start_date = self.record_start_date;
        if (paramrecord_start_date) |paramrecord_start_dateflag| {
        result += @sizeOf(@TypeOf(paramrecord_start_dateflag));        }

        // schedule_date
        const paramschedule_date = self.schedule_date;
        if (paramschedule_date) |paramschedule_dateflag| {
        result += @sizeOf(@TypeOf(paramschedule_dateflag));        }

        // unmuted_video_count
        const paramunmuted_video_count = self.unmuted_video_count;
        if (paramunmuted_video_count) |paramunmuted_video_countflag| {
        result += @sizeOf(@TypeOf(paramunmuted_video_countflag));        }

        // unmuted_video_limit
        const paramunmuted_video_limit = self.unmuted_video_limit;
        result += @sizeOf(@TypeOf(paramunmuted_video_limit));
        // version
        const paramversion = self.version;
        result += @sizeOf(@TypeOf(paramversion));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 6;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 8;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 9;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 11;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 12;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 13;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 7;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 10;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputGroupCall= struct {
    id: i64,
    access_hash: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // access_hash
        const paramaccess_hash = self.access_hash;
        result += @sizeOf(@TypeOf(paramaccess_hash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const GroupCallParticipant= struct {
    muted: ?bool,
    left: ?bool,
    can_self_unmute: ?bool,
    just_joined: ?bool,
    versioned: ?bool,
    min: ?bool,
    muted_by_you: ?bool,
    volume_by_admin: ?bool,
    self: ?bool,
    video_joined: ?bool,
    peer: IPeer,
    date: i32,
    active_date: ?i32,
    source: i32,
    volume: ?i32,
    about: ?[]const u8,
    raise_hand_rating: ?i64,
    video: ?IGroupCallParticipantVideo,
    presentation: ?IGroupCallParticipantVideo,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // muted
        // true flag

        // left
        // true flag

        // can_self_unmute
        // true flag

        // just_joined
        // true flag

        // versioned
        // true flag

        // min
        // true flag

        // muted_by_you
        // true flag

        // volume_by_admin
        // true flag

        // self
        // true flag

        // video_joined
        // true flag

        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        // active_date
        const paramactive_date = self.active_date;
        if (paramactive_date) |paramactive_dateflag| {
        result += @sizeOf(@TypeOf(paramactive_dateflag));        }

        // source
        const paramsource = self.source;
        result += @sizeOf(@TypeOf(paramsource));
        // volume
        const paramvolume = self.volume;
        if (paramvolume) |paramvolumeflag| {
        result += @sizeOf(@TypeOf(paramvolumeflag));        }

        // about
        const paramabout = self.about;
        if (paramabout) |paramaboutflag| {
        result += base.strEncodedSize(paramaboutflag);        }

        // raise_hand_rating
        const paramraise_hand_rating = self.raise_hand_rating;
        if (paramraise_hand_rating) |paramraise_hand_ratingflag| {
        result += @sizeOf(@TypeOf(paramraise_hand_ratingflag));        }

        // video
        const paramvideo = self.video;
        if (paramvideo) |paramvideoflag| {
        result += paramvideoflag.size();
        }

        // presentation
        const parampresentation = self.presentation;
        if (parampresentation) |parampresentationflag| {
        result += parampresentationflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 8;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 9;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 10;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 12;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 15;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 7;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 11;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 13;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 6;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 14;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PhoneGroupCall= struct {
    call: IGroupCall,
    participants: []const IGroupCallParticipant,
    participants_next_offset: []const u8,
    chats: []const IChat,
    users: []const IUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // call
        const paramcall = self.call;
        result += paramcall.size();

        // participants
        const paramparticipants = self.participants;
        result += 4; // vector id
        result += 4; // vector size
        for (paramparticipants) |paramparticipantsitem| {
        result += paramparticipantsitem.size();
        }

        // participants_next_offset
        const paramparticipants_next_offset = self.participants_next_offset;
        result += base.strEncodedSize(paramparticipants_next_offset);
        // chats
        const paramchats = self.chats;
        result += 4; // vector id
        result += 4; // vector size
        for (paramchats) |paramchatsitem| {
        result += paramchatsitem.size();
        }

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PhoneGroupParticipants= struct {
    count: i32,
    participants: []const IGroupCallParticipant,
    next_offset: []const u8,
    chats: []const IChat,
    users: []const IUser,
    version: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // count
        const paramcount = self.count;
        result += @sizeOf(@TypeOf(paramcount));
        // participants
        const paramparticipants = self.participants;
        result += 4; // vector id
        result += 4; // vector size
        for (paramparticipants) |paramparticipantsitem| {
        result += paramparticipantsitem.size();
        }

        // next_offset
        const paramnext_offset = self.next_offset;
        result += base.strEncodedSize(paramnext_offset);
        // chats
        const paramchats = self.chats;
        result += 4; // vector id
        result += 4; // vector size
        for (paramchats) |paramchatsitem| {
        result += paramchatsitem.size();
        }

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        // version
        const paramversion = self.version;
        result += @sizeOf(@TypeOf(paramversion));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InlineQueryPeerTypeSameBotPM= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const InlineQueryPeerTypePM= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const InlineQueryPeerTypeChat= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const InlineQueryPeerTypeMegagroup= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const InlineQueryPeerTypeBroadcast= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const InlineQueryPeerTypeBotPM= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const MessagesHistoryImport= struct {
    id: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MessagesHistoryImportParsed= struct {
    pm: ?bool,
    group: ?bool,
    title: ?[]const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // pm
        // true flag

        // group
        // true flag

        // title
        const paramtitle = self.title;
        if (paramtitle) |paramtitleflag| {
        result += base.strEncodedSize(paramtitleflag);        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesAffectedFoundMessages= struct {
    pts: i32,
    pts_count: i32,
    offset: i32,
    messages: []const i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // pts
        const parampts = self.pts;
        result += @sizeOf(@TypeOf(parampts));
        // pts_count
        const parampts_count = self.pts_count;
        result += @sizeOf(@TypeOf(parampts_count));
        // offset
        const paramoffset = self.offset;
        result += @sizeOf(@TypeOf(paramoffset));
        // messages
        const parammessages = self.messages;
        result += 4; // vector id
        result += 4; // vector size
        for (parammessages) |parammessagesitem| {
        result += @sizeOf(@TypeOf(parammessagesitem));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChatInviteImporter= struct {
    requested: ?bool,
    via_chatlist: ?bool,
    user_id: i64,
    date: i32,
    about: ?[]const u8,
    approved_by: ?i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // requested
        // true flag

        // via_chatlist
        // true flag

        // user_id
        const paramuser_id = self.user_id;
        result += @sizeOf(@TypeOf(paramuser_id));
        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        // about
        const paramabout = self.about;
        if (paramabout) |paramaboutflag| {
        result += base.strEncodedSize(paramaboutflag);        }

        // approved_by
        const paramapproved_by = self.approved_by;
        if (paramapproved_by) |paramapproved_byflag| {
        result += @sizeOf(@TypeOf(paramapproved_byflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesExportedChatInvites= struct {
    count: i32,
    invites: []const IExportedChatInvite,
    users: []const IUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // count
        const paramcount = self.count;
        result += @sizeOf(@TypeOf(paramcount));
        // invites
        const paraminvites = self.invites;
        result += 4; // vector id
        result += 4; // vector size
        for (paraminvites) |paraminvitesitem| {
        result += paraminvitesitem.size();
        }

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesExportedChatInvite= struct {
    invite: IExportedChatInvite,
    users: []const IUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // invite
        const paraminvite = self.invite;
        result += paraminvite.size();

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesExportedChatInviteReplaced= struct {
    invite: IExportedChatInvite,
    new_invite: IExportedChatInvite,
    users: []const IUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // invite
        const paraminvite = self.invite;
        result += paraminvite.size();

        // new_invite
        const paramnew_invite = self.new_invite;
        result += paramnew_invite.size();

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesChatInviteImporters= struct {
    count: i32,
    importers: []const IChatInviteImporter,
    users: []const IUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // count
        const paramcount = self.count;
        result += @sizeOf(@TypeOf(paramcount));
        // importers
        const paramimporters = self.importers;
        result += 4; // vector id
        result += 4; // vector size
        for (paramimporters) |paramimportersitem| {
        result += paramimportersitem.size();
        }

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChatAdminWithInvites= struct {
    admin_id: i64,
    invites_count: i32,
    revoked_invites_count: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // admin_id
        const paramadmin_id = self.admin_id;
        result += @sizeOf(@TypeOf(paramadmin_id));
        // invites_count
        const paraminvites_count = self.invites_count;
        result += @sizeOf(@TypeOf(paraminvites_count));
        // revoked_invites_count
        const paramrevoked_invites_count = self.revoked_invites_count;
        result += @sizeOf(@TypeOf(paramrevoked_invites_count));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesChatAdminsWithInvites= struct {
    admins: []const IChatAdminWithInvites,
    users: []const IUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // admins
        const paramadmins = self.admins;
        result += 4; // vector id
        result += 4; // vector size
        for (paramadmins) |paramadminsitem| {
        result += paramadminsitem.size();
        }

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesCheckedHistoryImportPeer= struct {
    confirm_text: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // confirm_text
        const paramconfirm_text = self.confirm_text;
        result += base.strEncodedSize(paramconfirm_text);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const PhoneJoinAsPeers= struct {
    peers: []const IPeer,
    chats: []const IChat,
    users: []const IUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peers
        const parampeers = self.peers;
        result += 4; // vector id
        result += 4; // vector size
        for (parampeers) |parampeersitem| {
        result += parampeersitem.size();
        }

        // chats
        const paramchats = self.chats;
        result += 4; // vector id
        result += 4; // vector size
        for (paramchats) |paramchatsitem| {
        result += paramchatsitem.size();
        }

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PhoneExportedGroupCallInvite= struct {
    link: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // link
        const paramlink = self.link;
        result += base.strEncodedSize(paramlink);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const GroupCallParticipantVideoSourceGroup= struct {
    semantics: []const u8,
    sources: []const i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // semantics
        const paramsemantics = self.semantics;
        result += base.strEncodedSize(paramsemantics);
        // sources
        const paramsources = self.sources;
        result += 4; // vector id
        result += 4; // vector size
        for (paramsources) |paramsourcesitem| {
        result += @sizeOf(@TypeOf(paramsourcesitem));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const GroupCallParticipantVideo= struct {
    paused: ?bool,
    endpoint: []const u8,
    source_groups: []const IGroupCallParticipantVideoSourceGroup,
    audio_source: ?i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // paused
        // true flag

        // endpoint
        const paramendpoint = self.endpoint;
        result += base.strEncodedSize(paramendpoint);
        // source_groups
        const paramsource_groups = self.source_groups;
        result += 4; // vector id
        result += 4; // vector size
        for (paramsource_groups) |paramsource_groupsitem| {
        result += paramsource_groupsitem.size();
        }

        // audio_source
        const paramaudio_source = self.audio_source;
        if (paramaudio_source) |paramaudio_sourceflag| {
        result += @sizeOf(@TypeOf(paramaudio_sourceflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StickersSuggestedShortName= struct {
    short_name: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // short_name
        const paramshort_name = self.short_name;
        result += base.strEncodedSize(paramshort_name);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const BotCommandScopeDefault= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const BotCommandScopeUsers= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const BotCommandScopeChats= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const BotCommandScopeChatAdmins= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const BotCommandScopePeer= struct {
    peer: IInputPeer,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const BotCommandScopePeerAdmins= struct {
    peer: IInputPeer,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const BotCommandScopePeerUser= struct {
    peer: IInputPeer,
    user_id: IInputUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // user_id
        const paramuser_id = self.user_id;
        result += paramuser_id.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AccountResetPasswordFailedWait= struct {
    retry_date: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // retry_date
        const paramretry_date = self.retry_date;
        result += @sizeOf(@TypeOf(paramretry_date));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const AccountResetPasswordRequestedWait= struct {
    until_date: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // until_date
        const paramuntil_date = self.until_date;
        result += @sizeOf(@TypeOf(paramuntil_date));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const AccountResetPasswordOk= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const SponsoredMessage= struct {
    recommended: ?bool,
    can_report: ?bool,
    random_id: []const u8,
    url: []const u8,
    title: []const u8,
    message: []const u8,
    entities: ?[]const IMessageEntity,
    photo: ?IPhoto,
    media: ?IMessageMedia,
    color: ?IPeerColor,
    button_text: []const u8,
    sponsor_info: ?[]const u8,
    additional_info: ?[]const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // recommended
        // true flag

        // can_report
        // true flag

        // random_id
        const paramrandom_id = self.random_id;
        result += base.strEncodedSize(paramrandom_id);
        // url
        const paramurl = self.url;
        result += base.strEncodedSize(paramurl);
        // title
        const paramtitle = self.title;
        result += base.strEncodedSize(paramtitle);
        // message
        const parammessage = self.message;
        result += base.strEncodedSize(parammessage);
        // entities
        const paramentities = self.entities;
        if (paramentities) |paramentitiesflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramentitiesflag) |paramentitiesflagitem| {
        result += paramentitiesflagitem.size();
        }
        }

        // photo
        const paramphoto = self.photo;
        if (paramphoto) |paramphotoflag| {
        result += paramphotoflag.size();
        }

        // media
        const parammedia = self.media;
        if (parammedia) |parammediaflag| {
        result += parammediaflag.size();
        }

        // color
        const paramcolor = self.color;
        if (paramcolor) |paramcolorflag| {
        result += paramcolorflag.size();
        }

        // button_text
        const parambutton_text = self.button_text;
        result += base.strEncodedSize(parambutton_text);
        // sponsor_info
        const paramsponsor_info = self.sponsor_info;
        if (paramsponsor_info) |paramsponsor_infoflag| {
        result += base.strEncodedSize(paramsponsor_infoflag);        }

        // additional_info
        const paramadditional_info = self.additional_info;
        if (paramadditional_info) |paramadditional_infoflag| {
        result += base.strEncodedSize(paramadditional_infoflag);        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 12;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 6;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 14;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 13;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 7;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 8;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesSponsoredMessages= struct {
    posts_between: ?i32,
    messages: []const ISponsoredMessage,
    chats: []const IChat,
    users: []const IUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // posts_between
        const paramposts_between = self.posts_between;
        if (paramposts_between) |paramposts_betweenflag| {
        result += @sizeOf(@TypeOf(paramposts_betweenflag));        }

        // messages
        const parammessages = self.messages;
        result += 4; // vector id
        result += 4; // vector size
        for (parammessages) |parammessagesitem| {
        result += parammessagesitem.size();
        }

        // chats
        const paramchats = self.chats;
        result += 4; // vector id
        result += 4; // vector size
        for (paramchats) |paramchatsitem| {
        result += paramchatsitem.size();
        }

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesSponsoredMessagesEmpty= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const SearchResultsCalendarPeriod= struct {
    date: i32,
    min_msg_id: i32,
    max_msg_id: i32,
    count: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        // min_msg_id
        const parammin_msg_id = self.min_msg_id;
        result += @sizeOf(@TypeOf(parammin_msg_id));
        // max_msg_id
        const parammax_msg_id = self.max_msg_id;
        result += @sizeOf(@TypeOf(parammax_msg_id));
        // count
        const paramcount = self.count;
        result += @sizeOf(@TypeOf(paramcount));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesSearchResultsCalendar= struct {
    inexact: ?bool,
    count: i32,
    min_date: i32,
    min_msg_id: i32,
    offset_id_offset: ?i32,
    periods: []const ISearchResultsCalendarPeriod,
    messages: []const IMessage,
    chats: []const IChat,
    users: []const IUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // inexact
        // true flag

        // count
        const paramcount = self.count;
        result += @sizeOf(@TypeOf(paramcount));
        // min_date
        const parammin_date = self.min_date;
        result += @sizeOf(@TypeOf(parammin_date));
        // min_msg_id
        const parammin_msg_id = self.min_msg_id;
        result += @sizeOf(@TypeOf(parammin_msg_id));
        // offset_id_offset
        const paramoffset_id_offset = self.offset_id_offset;
        if (paramoffset_id_offset) |paramoffset_id_offsetflag| {
        result += @sizeOf(@TypeOf(paramoffset_id_offsetflag));        }

        // periods
        const paramperiods = self.periods;
        result += 4; // vector id
        result += 4; // vector size
        for (paramperiods) |paramperiodsitem| {
        result += paramperiodsitem.size();
        }

        // messages
        const parammessages = self.messages;
        result += 4; // vector id
        result += 4; // vector size
        for (parammessages) |parammessagesitem| {
        result += parammessagesitem.size();
        }

        // chats
        const paramchats = self.chats;
        result += 4; // vector id
        result += 4; // vector size
        for (paramchats) |paramchatsitem| {
        result += paramchatsitem.size();
        }

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const SearchResultPosition= struct {
    msg_id: i32,
    date: i32,
    offset: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // msg_id
        const parammsg_id = self.msg_id;
        result += @sizeOf(@TypeOf(parammsg_id));
        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        // offset
        const paramoffset = self.offset;
        result += @sizeOf(@TypeOf(paramoffset));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesSearchResultsPositions= struct {
    count: i32,
    positions: []const ISearchResultsPosition,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // count
        const paramcount = self.count;
        result += @sizeOf(@TypeOf(paramcount));
        // positions
        const parampositions = self.positions;
        result += 4; // vector id
        result += 4; // vector size
        for (parampositions) |parampositionsitem| {
        result += parampositionsitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelsSendAsPeers= struct {
    peers: []const ISendAsPeer,
    chats: []const IChat,
    users: []const IUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peers
        const parampeers = self.peers;
        result += 4; // vector id
        result += 4; // vector size
        for (parampeers) |parampeersitem| {
        result += parampeersitem.size();
        }

        // chats
        const paramchats = self.chats;
        result += 4; // vector id
        result += 4; // vector size
        for (paramchats) |paramchatsitem| {
        result += paramchatsitem.size();
        }

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UsersUserFull= struct {
    full_user: IUserFull,
    chats: []const IChat,
    users: []const IUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // full_user
        const paramfull_user = self.full_user;
        result += paramfull_user.size();

        // chats
        const paramchats = self.chats;
        result += 4; // vector id
        result += 4; // vector size
        for (paramchats) |paramchatsitem| {
        result += paramchatsitem.size();
        }

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesPeerSettings= struct {
    settings: IPeerSettings,
    chats: []const IChat,
    users: []const IUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // settings
        const paramsettings = self.settings;
        result += paramsettings.size();

        // chats
        const paramchats = self.chats;
        result += 4; // vector id
        result += 4; // vector size
        for (paramchats) |paramchatsitem| {
        result += paramchatsitem.size();
        }

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AuthLoggedOut= struct {
    future_auth_token: ?[]const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // future_auth_token
        const paramfuture_auth_token = self.future_auth_token;
        if (paramfuture_auth_token) |paramfuture_auth_tokenflag| {
        result += base.strEncodedSize(paramfuture_auth_tokenflag);        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        }
};
const ReactionCount= struct {
    chosen_order: ?i32,
    reaction: IReaction,
    count: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // chosen_order
        const paramchosen_order = self.chosen_order;
        if (paramchosen_order) |paramchosen_orderflag| {
        result += @sizeOf(@TypeOf(paramchosen_orderflag));        }

        // reaction
        const paramreaction = self.reaction;
        result += paramreaction.size();

        // count
        const paramcount = self.count;
        result += @sizeOf(@TypeOf(paramcount));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessageReactions= struct {
    min: ?bool,
    can_see_list: ?bool,
    reactions_as_tags: ?bool,
    results: []const IReactionCount,
    recent_reactions: ?[]const IMessagePeerReaction,
    top_reactors: ?[]const IMessageReactor,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // min
        // true flag

        // can_see_list
        // true flag

        // reactions_as_tags
        // true flag

        // results
        const paramresults = self.results;
        result += 4; // vector id
        result += 4; // vector size
        for (paramresults) |paramresultsitem| {
        result += paramresultsitem.size();
        }

        // recent_reactions
        const paramrecent_reactions = self.recent_reactions;
        if (paramrecent_reactions) |paramrecent_reactionsflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramrecent_reactionsflag) |paramrecent_reactionsflagitem| {
        result += paramrecent_reactionsflagitem.size();
        }
        }

        // top_reactors
        const paramtop_reactors = self.top_reactors;
        if (paramtop_reactors) |paramtop_reactorsflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramtop_reactorsflag) |paramtop_reactorsflagitem| {
        result += paramtop_reactorsflagitem.size();
        }
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesMessageReactionsList= struct {
    count: i32,
    reactions: []const IMessagePeerReaction,
    chats: []const IChat,
    users: []const IUser,
    next_offset: ?[]const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // count
        const paramcount = self.count;
        result += @sizeOf(@TypeOf(paramcount));
        // reactions
        const paramreactions = self.reactions;
        result += 4; // vector id
        result += 4; // vector size
        for (paramreactions) |paramreactionsitem| {
        result += paramreactionsitem.size();
        }

        // chats
        const paramchats = self.chats;
        result += 4; // vector id
        result += 4; // vector size
        for (paramchats) |paramchatsitem| {
        result += paramchatsitem.size();
        }

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        // next_offset
        const paramnext_offset = self.next_offset;
        if (paramnext_offset) |paramnext_offsetflag| {
        result += base.strEncodedSize(paramnext_offsetflag);        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AvailableReaction= struct {
    inactive: ?bool,
    premium: ?bool,
    reaction: []const u8,
    title: []const u8,
    static_icon: IDocument,
    appear_animation: IDocument,
    select_animation: IDocument,
    activate_animation: IDocument,
    effect_animation: IDocument,
    around_animation: ?IDocument,
    center_icon: ?IDocument,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // inactive
        // true flag

        // premium
        // true flag

        // reaction
        const paramreaction = self.reaction;
        result += base.strEncodedSize(paramreaction);
        // title
        const paramtitle = self.title;
        result += base.strEncodedSize(paramtitle);
        // static_icon
        const paramstatic_icon = self.static_icon;
        result += paramstatic_icon.size();

        // appear_animation
        const paramappear_animation = self.appear_animation;
        result += paramappear_animation.size();

        // select_animation
        const paramselect_animation = self.select_animation;
        result += paramselect_animation.size();

        // activate_animation
        const paramactivate_animation = self.activate_animation;
        result += paramactivate_animation.size();

        // effect_animation
        const parameffect_animation = self.effect_animation;
        result += parameffect_animation.size();

        // around_animation
        const paramaround_animation = self.around_animation;
        if (paramaround_animation) |paramaround_animationflag| {
        result += paramaround_animationflag.size();
        }

        // center_icon
        const paramcenter_icon = self.center_icon;
        if (paramcenter_icon) |paramcenter_iconflag| {
        result += paramcenter_iconflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesAvailableReactionsNotModified= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const MessagesAvailableReactions= struct {
    hash: i32,
    reactions: []const IAvailableReaction,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        // reactions
        const paramreactions = self.reactions;
        result += 4; // vector id
        result += 4; // vector size
        for (paramreactions) |paramreactionsitem| {
        result += paramreactionsitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagePeerReaction= struct {
    big: ?bool,
    unread: ?bool,
    my: ?bool,
    peer_id: IPeer,
    date: i32,
    reaction: IReaction,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // big
        // true flag

        // unread
        // true flag

        // my
        // true flag

        // peer_id
        const parampeer_id = self.peer_id;
        result += parampeer_id.size();

        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        // reaction
        const paramreaction = self.reaction;
        result += paramreaction.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const GroupCallStreamChannel= struct {
    channel: i32,
    scale: i32,
    last_timestamp_ms: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // channel
        const paramchannel = self.channel;
        result += @sizeOf(@TypeOf(paramchannel));
        // scale
        const paramscale = self.scale;
        result += @sizeOf(@TypeOf(paramscale));
        // last_timestamp_ms
        const paramlast_timestamp_ms = self.last_timestamp_ms;
        result += @sizeOf(@TypeOf(paramlast_timestamp_ms));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PhoneGroupCallStreamChannels= struct {
    channels: []const IGroupCallStreamChannel,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // channels
        const paramchannels = self.channels;
        result += 4; // vector id
        result += 4; // vector size
        for (paramchannels) |paramchannelsitem| {
        result += paramchannelsitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const PhoneGroupCallStreamRtmpUrl= struct {
    url: []const u8,
    key: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // url
        const paramurl = self.url;
        result += base.strEncodedSize(paramurl);
        // key
        const paramkey = self.key;
        result += base.strEncodedSize(paramkey);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AttachMenuBotIconColor= struct {
    name: []const u8,
    color: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // name
        const paramname = self.name;
        result += base.strEncodedSize(paramname);
        // color
        const paramcolor = self.color;
        result += @sizeOf(@TypeOf(paramcolor));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AttachMenuBotIcon= struct {
    name: []const u8,
    icon: IDocument,
    colors: ?[]const IAttachMenuBotIconColor,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // name
        const paramname = self.name;
        result += base.strEncodedSize(paramname);
        // icon
        const paramicon = self.icon;
        result += paramicon.size();

        // colors
        const paramcolors = self.colors;
        if (paramcolors) |paramcolorsflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramcolorsflag) |paramcolorsflagitem| {
        result += paramcolorsflagitem.size();
        }
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AttachMenuBot= struct {
    inactive: ?bool,
    has_settings: ?bool,
    request_write_access: ?bool,
    show_in_attach_menu: ?bool,
    show_in_side_menu: ?bool,
    side_menu_disclaimer_needed: ?bool,
    bot_id: i64,
    short_name: []const u8,
    peer_types: ?[]const IAttachMenuPeerType,
    icons: []const IAttachMenuBotIcon,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // inactive
        // true flag

        // has_settings
        // true flag

        // request_write_access
        // true flag

        // show_in_attach_menu
        // true flag

        // show_in_side_menu
        // true flag

        // side_menu_disclaimer_needed
        // true flag

        // bot_id
        const parambot_id = self.bot_id;
        result += @sizeOf(@TypeOf(parambot_id));
        // short_name
        const paramshort_name = self.short_name;
        result += base.strEncodedSize(paramshort_name);
        // peer_types
        const parampeer_types = self.peer_types;
        if (parampeer_types) |parampeer_typesflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (parampeer_typesflag) |parampeer_typesflagitem| {
        result += parampeer_typesflagitem.size();
        }
        }

        // icons
        const paramicons = self.icons;
        result += 4; // vector id
        result += 4; // vector size
        for (paramicons) |paramiconsitem| {
        result += paramiconsitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AttachMenuBotsNotModified= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const AttachMenuBots= struct {
    hash: i64,
    bots: []const IAttachMenuBot,
    users: []const IUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        // bots
        const parambots = self.bots;
        result += 4; // vector id
        result += 4; // vector size
        for (parambots) |parambotsitem| {
        result += parambotsitem.size();
        }

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AttachMenuBotsBot= struct {
    bot: IAttachMenuBot,
    users: []const IUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // bot
        const parambot = self.bot;
        result += parambot.size();

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const WebViewResultUrl= struct {
    fullsize: ?bool,
    query_id: ?i64,
    url: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // fullsize
        // true flag

        // query_id
        const paramquery_id = self.query_id;
        if (paramquery_id) |paramquery_idflag| {
        result += @sizeOf(@TypeOf(paramquery_idflag));        }

        // url
        const paramurl = self.url;
        result += base.strEncodedSize(paramurl);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const WebViewMessageSent= struct {
    msg_id: ?IInputBotInlineMessageID,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // msg_id
        const parammsg_id = self.msg_id;
        if (parammsg_id) |parammsg_idflag| {
        result += parammsg_idflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        }
};
const BotMenuButtonDefault= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const BotMenuButtonCommands= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const BotMenuButton= struct {
    text: []const u8,
    url: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // text
        const paramtext = self.text;
        result += base.strEncodedSize(paramtext);
        // url
        const paramurl = self.url;
        result += base.strEncodedSize(paramurl);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AccountSavedRingtonesNotModified= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const AccountSavedRingtones= struct {
    hash: i64,
    ringtones: []const IDocument,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        // ringtones
        const paramringtones = self.ringtones;
        result += 4; // vector id
        result += 4; // vector size
        for (paramringtones) |paramringtonesitem| {
        result += paramringtonesitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const NotificationSoundDefault= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const NotificationSoundNone= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const NotificationSoundLocal= struct {
    title: []const u8,
    data: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // title
        const paramtitle = self.title;
        result += base.strEncodedSize(paramtitle);
        // data
        const paramdata = self.data;
        result += base.strEncodedSize(paramdata);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const NotificationSoundRingtone= struct {
    id: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const AccountSavedRingtone= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const AccountSavedRingtoneConverted= struct {
    document: IDocument,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // document
        const paramdocument = self.document;
        result += paramdocument.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const AttachMenuPeerTypeSameBotPM= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const AttachMenuPeerTypeBotPM= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const AttachMenuPeerTypePM= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const AttachMenuPeerTypeChat= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const AttachMenuPeerTypeBroadcast= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const InputInvoiceMessage= struct {
    peer: IInputPeer,
    msg_id: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // msg_id
        const parammsg_id = self.msg_id;
        result += @sizeOf(@TypeOf(parammsg_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputInvoiceSlug= struct {
    slug: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // slug
        const paramslug = self.slug;
        result += base.strEncodedSize(paramslug);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const InputInvoicePremiumGiftCode= struct {
    purpose: IInputStorePaymentPurpose,
    option: IPremiumGiftCodeOption,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // purpose
        const parampurpose = self.purpose;
        result += parampurpose.size();

        // option
        const paramoption = self.option;
        result += paramoption.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputInvoiceStars= struct {
    purpose: IInputStorePaymentPurpose,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // purpose
        const parampurpose = self.purpose;
        result += parampurpose.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const InputInvoiceChatInviteSubscription= struct {
    hash: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // hash
        const paramhash = self.hash;
        result += base.strEncodedSize(paramhash);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const InputInvoiceStarGift= struct {
    hide_name: ?bool,
    user_id: IInputUser,
    gift_id: i64,
    message: ?ITextWithEntities,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // hide_name
        // true flag

        // user_id
        const paramuser_id = self.user_id;
        result += paramuser_id.size();

        // gift_id
        const paramgift_id = self.gift_id;
        result += @sizeOf(@TypeOf(paramgift_id));
        // message
        const parammessage = self.message;
        if (parammessage) |parammessageflag| {
        result += parammessageflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PaymentsExportedInvoice= struct {
    url: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // url
        const paramurl = self.url;
        result += base.strEncodedSize(paramurl);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MessagesTranscribedAudio= struct {
    pending: ?bool,
    transcription_id: i64,
    text: []const u8,
    trial_remains_num: ?i32,
    trial_remains_until_date: ?i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // pending
        // true flag

        // transcription_id
        const paramtranscription_id = self.transcription_id;
        result += @sizeOf(@TypeOf(paramtranscription_id));
        // text
        const paramtext = self.text;
        result += base.strEncodedSize(paramtext);
        // trial_remains_num
        const paramtrial_remains_num = self.trial_remains_num;
        if (paramtrial_remains_num) |paramtrial_remains_numflag| {
        result += @sizeOf(@TypeOf(paramtrial_remains_numflag));        }

        // trial_remains_until_date
        const paramtrial_remains_until_date = self.trial_remains_until_date;
        if (paramtrial_remains_until_date) |paramtrial_remains_until_dateflag| {
        result += @sizeOf(@TypeOf(paramtrial_remains_until_dateflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const HelpPremiumPromo= struct {
    status_text: []const u8,
    status_entities: []const IMessageEntity,
    video_sections: []const []const u8,
    videos: []const IDocument,
    period_options: []const IPremiumSubscriptionOption,
    users: []const IUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // status_text
        const paramstatus_text = self.status_text;
        result += base.strEncodedSize(paramstatus_text);
        // status_entities
        const paramstatus_entities = self.status_entities;
        result += 4; // vector id
        result += 4; // vector size
        for (paramstatus_entities) |paramstatus_entitiesitem| {
        result += paramstatus_entitiesitem.size();
        }

        // video_sections
        const paramvideo_sections = self.video_sections;
        result += 4; // vector id
        result += 4; // vector size
        for (paramvideo_sections) |paramvideo_sectionsitem| {
        result += base.strEncodedSize(paramvideo_sectionsitem);        }

        // videos
        const paramvideos = self.videos;
        result += 4; // vector id
        result += 4; // vector size
        for (paramvideos) |paramvideositem| {
        result += paramvideositem.size();
        }

        // period_options
        const paramperiod_options = self.period_options;
        result += 4; // vector id
        result += 4; // vector size
        for (paramperiod_options) |paramperiod_optionsitem| {
        result += paramperiod_optionsitem.size();
        }

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputStorePaymentPremiumSubscription= struct {
    restore: ?bool,
    upgrade: ?bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // restore
        // true flag

        // upgrade
        // true flag


        _ = self;
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputStorePaymentGiftPremium= struct {
    user_id: IInputUser,
    currency: []const u8,
    amount: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // user_id
        const paramuser_id = self.user_id;
        result += paramuser_id.size();

        // currency
        const paramcurrency = self.currency;
        result += base.strEncodedSize(paramcurrency);
        // amount
        const paramamount = self.amount;
        result += @sizeOf(@TypeOf(paramamount));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputStorePaymentPremiumGiftCode= struct {
    users: []const IInputUser,
    boost_peer: ?IInputPeer,
    currency: []const u8,
    amount: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        // boost_peer
        const paramboost_peer = self.boost_peer;
        if (paramboost_peer) |paramboost_peerflag| {
        result += paramboost_peerflag.size();
        }

        // currency
        const paramcurrency = self.currency;
        result += base.strEncodedSize(paramcurrency);
        // amount
        const paramamount = self.amount;
        result += @sizeOf(@TypeOf(paramamount));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputStorePaymentPremiumGiveaway= struct {
    only_new_subscribers: ?bool,
    winners_are_visible: ?bool,
    boost_peer: IInputPeer,
    additional_peers: ?[]const IInputPeer,
    countries_iso2: ?[]const []const u8,
    prize_description: ?[]const u8,
    random_id: i64,
    until_date: i32,
    currency: []const u8,
    amount: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // only_new_subscribers
        // true flag

        // winners_are_visible
        // true flag

        // boost_peer
        const paramboost_peer = self.boost_peer;
        result += paramboost_peer.size();

        // additional_peers
        const paramadditional_peers = self.additional_peers;
        if (paramadditional_peers) |paramadditional_peersflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramadditional_peersflag) |paramadditional_peersflagitem| {
        result += paramadditional_peersflagitem.size();
        }
        }

        // countries_iso2
        const paramcountries_iso2 = self.countries_iso2;
        if (paramcountries_iso2) |paramcountries_iso2flag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramcountries_iso2flag) |paramcountries_iso2flagitem| {
        result += base.strEncodedSize(paramcountries_iso2flagitem);        }
        }

        // prize_description
        const paramprize_description = self.prize_description;
        if (paramprize_description) |paramprize_descriptionflag| {
        result += base.strEncodedSize(paramprize_descriptionflag);        }

        // random_id
        const paramrandom_id = self.random_id;
        result += @sizeOf(@TypeOf(paramrandom_id));
        // until_date
        const paramuntil_date = self.until_date;
        result += @sizeOf(@TypeOf(paramuntil_date));
        // currency
        const paramcurrency = self.currency;
        result += base.strEncodedSize(paramcurrency);
        // amount
        const paramamount = self.amount;
        result += @sizeOf(@TypeOf(paramamount));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputStorePaymentStarsTopup= struct {
    stars: i64,
    currency: []const u8,
    amount: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // stars
        const paramstars = self.stars;
        result += @sizeOf(@TypeOf(paramstars));
        // currency
        const paramcurrency = self.currency;
        result += base.strEncodedSize(paramcurrency);
        // amount
        const paramamount = self.amount;
        result += @sizeOf(@TypeOf(paramamount));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputStorePaymentStarsGift= struct {
    user_id: IInputUser,
    stars: i64,
    currency: []const u8,
    amount: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // user_id
        const paramuser_id = self.user_id;
        result += paramuser_id.size();

        // stars
        const paramstars = self.stars;
        result += @sizeOf(@TypeOf(paramstars));
        // currency
        const paramcurrency = self.currency;
        result += base.strEncodedSize(paramcurrency);
        // amount
        const paramamount = self.amount;
        result += @sizeOf(@TypeOf(paramamount));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputStorePaymentStarsGiveaway= struct {
    only_new_subscribers: ?bool,
    winners_are_visible: ?bool,
    stars: i64,
    boost_peer: IInputPeer,
    additional_peers: ?[]const IInputPeer,
    countries_iso2: ?[]const []const u8,
    prize_description: ?[]const u8,
    random_id: i64,
    until_date: i32,
    currency: []const u8,
    amount: i64,
    users: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // only_new_subscribers
        // true flag

        // winners_are_visible
        // true flag

        // stars
        const paramstars = self.stars;
        result += @sizeOf(@TypeOf(paramstars));
        // boost_peer
        const paramboost_peer = self.boost_peer;
        result += paramboost_peer.size();

        // additional_peers
        const paramadditional_peers = self.additional_peers;
        if (paramadditional_peers) |paramadditional_peersflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramadditional_peersflag) |paramadditional_peersflagitem| {
        result += paramadditional_peersflagitem.size();
        }
        }

        // countries_iso2
        const paramcountries_iso2 = self.countries_iso2;
        if (paramcountries_iso2) |paramcountries_iso2flag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramcountries_iso2flag) |paramcountries_iso2flagitem| {
        result += base.strEncodedSize(paramcountries_iso2flagitem);        }
        }

        // prize_description
        const paramprize_description = self.prize_description;
        if (paramprize_description) |paramprize_descriptionflag| {
        result += base.strEncodedSize(paramprize_descriptionflag);        }

        // random_id
        const paramrandom_id = self.random_id;
        result += @sizeOf(@TypeOf(paramrandom_id));
        // until_date
        const paramuntil_date = self.until_date;
        result += @sizeOf(@TypeOf(paramuntil_date));
        // currency
        const paramcurrency = self.currency;
        result += base.strEncodedSize(paramcurrency);
        // amount
        const paramamount = self.amount;
        result += @sizeOf(@TypeOf(paramamount));
        // users
        const paramusers = self.users;
        result += @sizeOf(@TypeOf(paramusers));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PremiumGiftOption= struct {
    months: i32,
    currency: []const u8,
    amount: i64,
    bot_url: []const u8,
    store_product: ?[]const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // months
        const parammonths = self.months;
        result += @sizeOf(@TypeOf(parammonths));
        // currency
        const paramcurrency = self.currency;
        result += base.strEncodedSize(paramcurrency);
        // amount
        const paramamount = self.amount;
        result += @sizeOf(@TypeOf(paramamount));
        // bot_url
        const parambot_url = self.bot_url;
        result += base.strEncodedSize(parambot_url);
        // store_product
        const paramstore_product = self.store_product;
        if (paramstore_product) |paramstore_productflag| {
        result += base.strEncodedSize(paramstore_productflag);        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PaymentFormMethod= struct {
    url: []const u8,
    title: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // url
        const paramurl = self.url;
        result += base.strEncodedSize(paramurl);
        // title
        const paramtitle = self.title;
        result += base.strEncodedSize(paramtitle);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const EmojiStatusEmpty= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const EmojiStatus= struct {
    document_id: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // document_id
        const paramdocument_id = self.document_id;
        result += @sizeOf(@TypeOf(paramdocument_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const EmojiStatusUntil= struct {
    document_id: i64,
    until: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // document_id
        const paramdocument_id = self.document_id;
        result += @sizeOf(@TypeOf(paramdocument_id));
        // until
        const paramuntil = self.until;
        result += @sizeOf(@TypeOf(paramuntil));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AccountEmojiStatusesNotModified= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const AccountEmojiStatuses= struct {
    hash: i64,
    statuses: []const IEmojiStatus,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        // statuses
        const paramstatuses = self.statuses;
        result += 4; // vector id
        result += 4; // vector size
        for (paramstatuses) |paramstatusesitem| {
        result += paramstatusesitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ReactionEmpty= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const ReactionEmoji= struct {
    emoticon: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // emoticon
        const paramemoticon = self.emoticon;
        result += base.strEncodedSize(paramemoticon);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const ReactionCustomEmoji= struct {
    document_id: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // document_id
        const paramdocument_id = self.document_id;
        result += @sizeOf(@TypeOf(paramdocument_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const ReactionPaid= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const ChatReactionsNone= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const ChatReactionsAll= struct {
    allow_custom: ?bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // allow_custom
        // true flag


        _ = self;
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        }
};
const ChatReactionsSome= struct {
    reactions: []const IReaction,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // reactions
        const paramreactions = self.reactions;
        result += 4; // vector id
        result += 4; // vector size
        for (paramreactions) |paramreactionsitem| {
        result += paramreactionsitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MessagesReactionsNotModified= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const MessagesReactions= struct {
    hash: i64,
    reactions: []const IReaction,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        // reactions
        const paramreactions = self.reactions;
        result += 4; // vector id
        result += 4; // vector size
        for (paramreactions) |paramreactionsitem| {
        result += paramreactionsitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const EmailVerifyPurposeLoginSetup= struct {
    phone_number: []const u8,
    phone_code_hash: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // phone_number
        const paramphone_number = self.phone_number;
        result += base.strEncodedSize(paramphone_number);
        // phone_code_hash
        const paramphone_code_hash = self.phone_code_hash;
        result += base.strEncodedSize(paramphone_code_hash);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const EmailVerifyPurposeLoginChange= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const EmailVerifyPurposePassport= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const EmailVerificationCode= struct {
    code: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // code
        const paramcode = self.code;
        result += base.strEncodedSize(paramcode);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const EmailVerificationGoogle= struct {
    token: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // token
        const paramtoken = self.token;
        result += base.strEncodedSize(paramtoken);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const EmailVerificationApple= struct {
    token: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // token
        const paramtoken = self.token;
        result += base.strEncodedSize(paramtoken);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const AccountEmailVerified= struct {
    email: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // email
        const paramemail = self.email;
        result += base.strEncodedSize(paramemail);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const AccountEmailVerifiedLogin= struct {
    email: []const u8,
    sent_code: IAuthSentCode,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // email
        const paramemail = self.email;
        result += base.strEncodedSize(paramemail);
        // sent_code
        const paramsent_code = self.sent_code;
        result += paramsent_code.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PremiumSubscriptionOption= struct {
    current: ?bool,
    can_purchase_upgrade: ?bool,
    transaction: ?[]const u8,
    months: i32,
    currency: []const u8,
    amount: i64,
    bot_url: []const u8,
    store_product: ?[]const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // current
        // true flag

        // can_purchase_upgrade
        // true flag

        // transaction
        const paramtransaction = self.transaction;
        if (paramtransaction) |paramtransactionflag| {
        result += base.strEncodedSize(paramtransactionflag);        }

        // months
        const parammonths = self.months;
        result += @sizeOf(@TypeOf(parammonths));
        // currency
        const paramcurrency = self.currency;
        result += base.strEncodedSize(paramcurrency);
        // amount
        const paramamount = self.amount;
        result += @sizeOf(@TypeOf(paramamount));
        // bot_url
        const parambot_url = self.bot_url;
        result += base.strEncodedSize(parambot_url);
        // store_product
        const paramstore_product = self.store_product;
        if (paramstore_product) |paramstore_productflag| {
        result += base.strEncodedSize(paramstore_productflag);        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const SendAsPeer= struct {
    premium_required: ?bool,
    peer: IPeer,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // premium_required
        // true flag

        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessageExtendedMediaPreview= struct {
    w: ?i32,
    h: ?i32,
    thumb: ?IPhotoSize,
    video_duration: ?i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // w
        const paramw = self.w;
        if (paramw) |paramwflag| {
        result += @sizeOf(@TypeOf(paramwflag));        }

        // h
        const paramh = self.h;
        if (paramh) |paramhflag| {
        result += @sizeOf(@TypeOf(paramhflag));        }

        // thumb
        const paramthumb = self.thumb;
        if (paramthumb) |paramthumbflag| {
        result += paramthumbflag.size();
        }

        // video_duration
        const paramvideo_duration = self.video_duration;
        if (paramvideo_duration) |paramvideo_durationflag| {
        result += @sizeOf(@TypeOf(paramvideo_durationflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessageExtendedMedia= struct {
    media: IMessageMedia,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // media
        const parammedia = self.media;
        result += parammedia.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const StickerKeyword= struct {
    document_id: i64,
    keyword: []const []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // document_id
        const paramdocument_id = self.document_id;
        result += @sizeOf(@TypeOf(paramdocument_id));
        // keyword
        const paramkeyword = self.keyword;
        result += 4; // vector id
        result += 4; // vector size
        for (paramkeyword) |paramkeyworditem| {
        result += base.strEncodedSize(paramkeyworditem);        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const Username= struct {
    editable: ?bool,
    active: ?bool,
    username: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // editable
        // true flag

        // active
        // true flag

        // username
        const paramusername = self.username;
        result += base.strEncodedSize(paramusername);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ForumTopicDeleted= struct {
    id: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const ForumTopic= struct {
    my: ?bool,
    closed: ?bool,
    pinned: ?bool,
    short: ?bool,
    hidden: ?bool,
    id: i32,
    date: i32,
    title: []const u8,
    icon_color: i32,
    icon_emoji_id: ?i64,
    top_message: i32,
    read_inbox_max_id: i32,
    read_outbox_max_id: i32,
    unread_count: i32,
    unread_mentions_count: i32,
    unread_reactions_count: i32,
    from_id: IPeer,
    notify_settings: IPeerNotifySettings,
    draft: ?IDraftMessage,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // my
        // true flag

        // closed
        // true flag

        // pinned
        // true flag

        // short
        // true flag

        // hidden
        // true flag

        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        // title
        const paramtitle = self.title;
        result += base.strEncodedSize(paramtitle);
        // icon_color
        const paramicon_color = self.icon_color;
        result += @sizeOf(@TypeOf(paramicon_color));
        // icon_emoji_id
        const paramicon_emoji_id = self.icon_emoji_id;
        if (paramicon_emoji_id) |paramicon_emoji_idflag| {
        result += @sizeOf(@TypeOf(paramicon_emoji_idflag));        }

        // top_message
        const paramtop_message = self.top_message;
        result += @sizeOf(@TypeOf(paramtop_message));
        // read_inbox_max_id
        const paramread_inbox_max_id = self.read_inbox_max_id;
        result += @sizeOf(@TypeOf(paramread_inbox_max_id));
        // read_outbox_max_id
        const paramread_outbox_max_id = self.read_outbox_max_id;
        result += @sizeOf(@TypeOf(paramread_outbox_max_id));
        // unread_count
        const paramunread_count = self.unread_count;
        result += @sizeOf(@TypeOf(paramunread_count));
        // unread_mentions_count
        const paramunread_mentions_count = self.unread_mentions_count;
        result += @sizeOf(@TypeOf(paramunread_mentions_count));
        // unread_reactions_count
        const paramunread_reactions_count = self.unread_reactions_count;
        result += @sizeOf(@TypeOf(paramunread_reactions_count));
        // from_id
        const paramfrom_id = self.from_id;
        result += paramfrom_id.size();

        // notify_settings
        const paramnotify_settings = self.notify_settings;
        result += paramnotify_settings.size();

        // draft
        const paramdraft = self.draft;
        if (paramdraft) |paramdraftflag| {
        result += paramdraftflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 6;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesForumTopics= struct {
    order_by_create_date: ?bool,
    count: i32,
    topics: []const IForumTopic,
    messages: []const IMessage,
    chats: []const IChat,
    users: []const IUser,
    pts: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // order_by_create_date
        // true flag

        // count
        const paramcount = self.count;
        result += @sizeOf(@TypeOf(paramcount));
        // topics
        const paramtopics = self.topics;
        result += 4; // vector id
        result += 4; // vector size
        for (paramtopics) |paramtopicsitem| {
        result += paramtopicsitem.size();
        }

        // messages
        const parammessages = self.messages;
        result += 4; // vector id
        result += 4; // vector size
        for (parammessages) |parammessagesitem| {
        result += parammessagesitem.size();
        }

        // chats
        const paramchats = self.chats;
        result += 4; // vector id
        result += 4; // vector size
        for (paramchats) |paramchatsitem| {
        result += paramchatsitem.size();
        }

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        // pts
        const parampts = self.pts;
        result += @sizeOf(@TypeOf(parampts));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const DefaultHistoryTTL= struct {
    period: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // period
        const paramperiod = self.period;
        result += @sizeOf(@TypeOf(paramperiod));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const ExportedContactToken= struct {
    url: []const u8,
    expires: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // url
        const paramurl = self.url;
        result += base.strEncodedSize(paramurl);
        // expires
        const paramexpires = self.expires;
        result += @sizeOf(@TypeOf(paramexpires));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const RequestPeerTypeUser= struct {
    bot: ?bool,
    premium: ?bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // bot
        const parambot = self.bot;
        if (parambot) |parambotflag| {
        _ = parambotflag;
        result += 4;        }

        // premium
        const parampremium = self.premium;
        if (parampremium) |parampremiumflag| {
        _ = parampremiumflag;
        result += 4;        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const RequestPeerTypeChat= struct {
    creator: ?bool,
    bot_participant: ?bool,
    has_username: ?bool,
    forum: ?bool,
    user_admin_rights: ?IChatAdminRights,
    bot_admin_rights: ?IChatAdminRights,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // creator
        // true flag

        // bot_participant
        // true flag

        // has_username
        const paramhas_username = self.has_username;
        if (paramhas_username) |paramhas_usernameflag| {
        _ = paramhas_usernameflag;
        result += 4;        }

        // forum
        const paramforum = self.forum;
        if (paramforum) |paramforumflag| {
        _ = paramforumflag;
        result += 4;        }

        // user_admin_rights
        const paramuser_admin_rights = self.user_admin_rights;
        if (paramuser_admin_rights) |paramuser_admin_rightsflag| {
        result += paramuser_admin_rightsflag.size();
        }

        // bot_admin_rights
        const parambot_admin_rights = self.bot_admin_rights;
        if (parambot_admin_rights) |parambot_admin_rightsflag| {
        result += parambot_admin_rightsflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const RequestPeerTypeBroadcast= struct {
    creator: ?bool,
    has_username: ?bool,
    user_admin_rights: ?IChatAdminRights,
    bot_admin_rights: ?IChatAdminRights,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // creator
        // true flag

        // has_username
        const paramhas_username = self.has_username;
        if (paramhas_username) |paramhas_usernameflag| {
        _ = paramhas_usernameflag;
        result += 4;        }

        // user_admin_rights
        const paramuser_admin_rights = self.user_admin_rights;
        if (paramuser_admin_rights) |paramuser_admin_rightsflag| {
        result += paramuser_admin_rightsflag.size();
        }

        // bot_admin_rights
        const parambot_admin_rights = self.bot_admin_rights;
        if (parambot_admin_rights) |parambot_admin_rightsflag| {
        result += parambot_admin_rightsflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const EmojiListNotModified= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const EmojiList= struct {
    hash: i64,
    document_id: []const i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        // document_id
        const paramdocument_id = self.document_id;
        result += 4; // vector id
        result += 4; // vector size
        for (paramdocument_id) |paramdocument_iditem| {
        result += @sizeOf(@TypeOf(paramdocument_iditem));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const EmojiGroup= struct {
    title: []const u8,
    icon_emoji_id: i64,
    emoticons: []const []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // title
        const paramtitle = self.title;
        result += base.strEncodedSize(paramtitle);
        // icon_emoji_id
        const paramicon_emoji_id = self.icon_emoji_id;
        result += @sizeOf(@TypeOf(paramicon_emoji_id));
        // emoticons
        const paramemoticons = self.emoticons;
        result += 4; // vector id
        result += 4; // vector size
        for (paramemoticons) |paramemoticonsitem| {
        result += base.strEncodedSize(paramemoticonsitem);        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const EmojiGroupGreeting= struct {
    title: []const u8,
    icon_emoji_id: i64,
    emoticons: []const []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // title
        const paramtitle = self.title;
        result += base.strEncodedSize(paramtitle);
        // icon_emoji_id
        const paramicon_emoji_id = self.icon_emoji_id;
        result += @sizeOf(@TypeOf(paramicon_emoji_id));
        // emoticons
        const paramemoticons = self.emoticons;
        result += 4; // vector id
        result += 4; // vector size
        for (paramemoticons) |paramemoticonsitem| {
        result += base.strEncodedSize(paramemoticonsitem);        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const EmojiGroupPremium= struct {
    title: []const u8,
    icon_emoji_id: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // title
        const paramtitle = self.title;
        result += base.strEncodedSize(paramtitle);
        // icon_emoji_id
        const paramicon_emoji_id = self.icon_emoji_id;
        result += @sizeOf(@TypeOf(paramicon_emoji_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesEmojiGroupsNotModified= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const MessagesEmojiGroups= struct {
    hash: i32,
    groups: []const IEmojiGroup,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        // groups
        const paramgroups = self.groups;
        result += 4; // vector id
        result += 4; // vector size
        for (paramgroups) |paramgroupsitem| {
        result += paramgroupsitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const TextWithEntities= struct {
    text: []const u8,
    entities: []const IMessageEntity,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // text
        const paramtext = self.text;
        result += base.strEncodedSize(paramtext);
        // entities
        const paramentities = self.entities;
        result += 4; // vector id
        result += 4; // vector size
        for (paramentities) |paramentitiesitem| {
        result += paramentitiesitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesTranslateResult= struct {
    result: []const ITextWithEntities,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // result
        const paramresult = self.result;
        result += 4; // vector id
        result += 4; // vector size
        for (paramresult) |paramresultitem| {
        result += paramresultitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const AutoSaveSettings= struct {
    photos: ?bool,
    videos: ?bool,
    video_max_size: ?i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // photos
        // true flag

        // videos
        // true flag

        // video_max_size
        const paramvideo_max_size = self.video_max_size;
        if (paramvideo_max_size) |paramvideo_max_sizeflag| {
        result += @sizeOf(@TypeOf(paramvideo_max_sizeflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AutoSaveException= struct {
    peer: IPeer,
    settings: IAutoSaveSettings,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // settings
        const paramsettings = self.settings;
        result += paramsettings.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AccountAutoSaveSettings= struct {
    users_settings: IAutoSaveSettings,
    chats_settings: IAutoSaveSettings,
    broadcasts_settings: IAutoSaveSettings,
    exceptions: []const IAutoSaveException,
    chats: []const IChat,
    users: []const IUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // users_settings
        const paramusers_settings = self.users_settings;
        result += paramusers_settings.size();

        // chats_settings
        const paramchats_settings = self.chats_settings;
        result += paramchats_settings.size();

        // broadcasts_settings
        const parambroadcasts_settings = self.broadcasts_settings;
        result += parambroadcasts_settings.size();

        // exceptions
        const paramexceptions = self.exceptions;
        result += 4; // vector id
        result += 4; // vector size
        for (paramexceptions) |paramexceptionsitem| {
        result += paramexceptionsitem.size();
        }

        // chats
        const paramchats = self.chats;
        result += 4; // vector id
        result += 4; // vector size
        for (paramchats) |paramchatsitem| {
        result += paramchatsitem.size();
        }

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const HelpAppConfigNotModified= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const HelpAppConfig= struct {
    hash: i32,
    config: IJSONValue,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        // config
        const paramconfig = self.config;
        result += paramconfig.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputBotAppID= struct {
    id: i64,
    access_hash: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // access_hash
        const paramaccess_hash = self.access_hash;
        result += @sizeOf(@TypeOf(paramaccess_hash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputBotAppShortName= struct {
    bot_id: IInputUser,
    short_name: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // bot_id
        const parambot_id = self.bot_id;
        result += parambot_id.size();

        // short_name
        const paramshort_name = self.short_name;
        result += base.strEncodedSize(paramshort_name);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const BotAppNotModified= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const BotApp= struct {
    id: i64,
    access_hash: i64,
    short_name: []const u8,
    title: []const u8,
    description: []const u8,
    photo: IPhoto,
    document: ?IDocument,
    hash: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // access_hash
        const paramaccess_hash = self.access_hash;
        result += @sizeOf(@TypeOf(paramaccess_hash));
        // short_name
        const paramshort_name = self.short_name;
        result += base.strEncodedSize(paramshort_name);
        // title
        const paramtitle = self.title;
        result += base.strEncodedSize(paramtitle);
        // description
        const paramdescription = self.description;
        result += base.strEncodedSize(paramdescription);
        // photo
        const paramphoto = self.photo;
        result += paramphoto.size();

        // document
        const paramdocument = self.document;
        if (paramdocument) |paramdocumentflag| {
        result += paramdocumentflag.size();
        }

        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesBotApp= struct {
    inactive: ?bool,
    request_write_access: ?bool,
    has_settings: ?bool,
    app: IBotApp,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // inactive
        // true flag

        // request_write_access
        // true flag

        // has_settings
        // true flag

        // app
        const paramapp = self.app;
        result += paramapp.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InlineBotWebView= struct {
    text: []const u8,
    url: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // text
        const paramtext = self.text;
        result += base.strEncodedSize(paramtext);
        // url
        const paramurl = self.url;
        result += base.strEncodedSize(paramurl);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ReadParticipantDate= struct {
    user_id: i64,
    date: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // user_id
        const paramuser_id = self.user_id;
        result += @sizeOf(@TypeOf(paramuser_id));
        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputChatlistDialogFilter= struct {
    filter_id: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // filter_id
        const paramfilter_id = self.filter_id;
        result += @sizeOf(@TypeOf(paramfilter_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const ExportedChatlistInvite= struct {
    title: []const u8,
    url: []const u8,
    peers: []const IPeer,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // title
        const paramtitle = self.title;
        result += base.strEncodedSize(paramtitle);
        // url
        const paramurl = self.url;
        result += base.strEncodedSize(paramurl);
        // peers
        const parampeers = self.peers;
        result += 4; // vector id
        result += 4; // vector size
        for (parampeers) |parampeersitem| {
        result += parampeersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChatlistsExportedChatlistInvite= struct {
    filter: IDialogFilter,
    invite: IExportedChatlistInvite,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // filter
        const paramfilter = self.filter;
        result += paramfilter.size();

        // invite
        const paraminvite = self.invite;
        result += paraminvite.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChatlistsExportedInvites= struct {
    invites: []const IExportedChatlistInvite,
    chats: []const IChat,
    users: []const IUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // invites
        const paraminvites = self.invites;
        result += 4; // vector id
        result += 4; // vector size
        for (paraminvites) |paraminvitesitem| {
        result += paraminvitesitem.size();
        }

        // chats
        const paramchats = self.chats;
        result += 4; // vector id
        result += 4; // vector size
        for (paramchats) |paramchatsitem| {
        result += paramchatsitem.size();
        }

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChatlistsChatlistInviteAlready= struct {
    filter_id: i32,
    missing_peers: []const IPeer,
    already_peers: []const IPeer,
    chats: []const IChat,
    users: []const IUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // filter_id
        const paramfilter_id = self.filter_id;
        result += @sizeOf(@TypeOf(paramfilter_id));
        // missing_peers
        const parammissing_peers = self.missing_peers;
        result += 4; // vector id
        result += 4; // vector size
        for (parammissing_peers) |parammissing_peersitem| {
        result += parammissing_peersitem.size();
        }

        // already_peers
        const paramalready_peers = self.already_peers;
        result += 4; // vector id
        result += 4; // vector size
        for (paramalready_peers) |paramalready_peersitem| {
        result += paramalready_peersitem.size();
        }

        // chats
        const paramchats = self.chats;
        result += 4; // vector id
        result += 4; // vector size
        for (paramchats) |paramchatsitem| {
        result += paramchatsitem.size();
        }

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChatlistsChatlistInvite= struct {
    title: []const u8,
    emoticon: ?[]const u8,
    peers: []const IPeer,
    chats: []const IChat,
    users: []const IUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // title
        const paramtitle = self.title;
        result += base.strEncodedSize(paramtitle);
        // emoticon
        const paramemoticon = self.emoticon;
        if (paramemoticon) |paramemoticonflag| {
        result += base.strEncodedSize(paramemoticonflag);        }

        // peers
        const parampeers = self.peers;
        result += 4; // vector id
        result += 4; // vector size
        for (parampeers) |parampeersitem| {
        result += parampeersitem.size();
        }

        // chats
        const paramchats = self.chats;
        result += 4; // vector id
        result += 4; // vector size
        for (paramchats) |paramchatsitem| {
        result += paramchatsitem.size();
        }

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChatlistsChatlistUpdates= struct {
    missing_peers: []const IPeer,
    chats: []const IChat,
    users: []const IUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // missing_peers
        const parammissing_peers = self.missing_peers;
        result += 4; // vector id
        result += 4; // vector size
        for (parammissing_peers) |parammissing_peersitem| {
        result += parammissing_peersitem.size();
        }

        // chats
        const paramchats = self.chats;
        result += 4; // vector id
        result += 4; // vector size
        for (paramchats) |paramchatsitem| {
        result += paramchatsitem.size();
        }

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const BotsBotInfo= struct {
    name: []const u8,
    about: []const u8,
    description: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // name
        const paramname = self.name;
        result += base.strEncodedSize(paramname);
        // about
        const paramabout = self.about;
        result += base.strEncodedSize(paramabout);
        // description
        const paramdescription = self.description;
        result += base.strEncodedSize(paramdescription);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagePeerVote= struct {
    peer: IPeer,
    option: []const u8,
    date: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // option
        const paramoption = self.option;
        result += base.strEncodedSize(paramoption);
        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagePeerVoteInputOption= struct {
    peer: IPeer,
    date: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagePeerVoteMultiple= struct {
    peer: IPeer,
    options: []const []const u8,
    date: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // options
        const paramoptions = self.options;
        result += 4; // vector id
        result += 4; // vector size
        for (paramoptions) |paramoptionsitem| {
        result += base.strEncodedSize(paramoptionsitem);        }

        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StoryViews= struct {
    has_viewers: ?bool,
    views_count: i32,
    forwards_count: ?i32,
    reactions: ?[]const IReactionCount,
    reactions_count: ?i32,
    recent_viewers: ?[]const i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // has_viewers
        // true flag

        // views_count
        const paramviews_count = self.views_count;
        result += @sizeOf(@TypeOf(paramviews_count));
        // forwards_count
        const paramforwards_count = self.forwards_count;
        if (paramforwards_count) |paramforwards_countflag| {
        result += @sizeOf(@TypeOf(paramforwards_countflag));        }

        // reactions
        const paramreactions = self.reactions;
        if (paramreactions) |paramreactionsflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramreactionsflag) |paramreactionsflagitem| {
        result += paramreactionsflagitem.size();
        }
        }

        // reactions_count
        const paramreactions_count = self.reactions_count;
        if (paramreactions_count) |paramreactions_countflag| {
        result += @sizeOf(@TypeOf(paramreactions_countflag));        }

        // recent_viewers
        const paramrecent_viewers = self.recent_viewers;
        if (paramrecent_viewers) |paramrecent_viewersflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramrecent_viewersflag) |paramrecent_viewersflagitem| {
        result += @sizeOf(@TypeOf(paramrecent_viewersflagitem));        }
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StoryItemDeleted= struct {
    id: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const StoryItemSkipped= struct {
    close_friends: ?bool,
    id: i32,
    date: i32,
    expire_date: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // close_friends
        // true flag

        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        // expire_date
        const paramexpire_date = self.expire_date;
        result += @sizeOf(@TypeOf(paramexpire_date));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 8;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StoryItem= struct {
    pinned: ?bool,
    public: ?bool,
    close_friends: ?bool,
    min: ?bool,
    noforwards: ?bool,
    edited: ?bool,
    contacts: ?bool,
    selected_contacts: ?bool,
    out: ?bool,
    id: i32,
    date: i32,
    from_id: ?IPeer,
    fwd_from: ?IStoryFwdHeader,
    expire_date: i32,
    caption: ?[]const u8,
    entities: ?[]const IMessageEntity,
    media: IMessageMedia,
    media_areas: ?[]const IMediaArea,
    privacy: ?[]const IPrivacyRule,
    views: ?IStoryViews,
    sent_reaction: ?IReaction,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // pinned
        // true flag

        // public
        // true flag

        // close_friends
        // true flag

        // min
        // true flag

        // noforwards
        // true flag

        // edited
        // true flag

        // contacts
        // true flag

        // selected_contacts
        // true flag

        // out
        // true flag

        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        // from_id
        const paramfrom_id = self.from_id;
        if (paramfrom_id) |paramfrom_idflag| {
        result += paramfrom_idflag.size();
        }

        // fwd_from
        const paramfwd_from = self.fwd_from;
        if (paramfwd_from) |paramfwd_fromflag| {
        result += paramfwd_fromflag.size();
        }

        // expire_date
        const paramexpire_date = self.expire_date;
        result += @sizeOf(@TypeOf(paramexpire_date));
        // caption
        const paramcaption = self.caption;
        if (paramcaption) |paramcaptionflag| {
        result += base.strEncodedSize(paramcaptionflag);        }

        // entities
        const paramentities = self.entities;
        if (paramentities) |paramentitiesflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramentitiesflag) |paramentitiesflagitem| {
        result += paramentitiesflagitem.size();
        }
        }

        // media
        const parammedia = self.media;
        result += parammedia.size();

        // media_areas
        const parammedia_areas = self.media_areas;
        if (parammedia_areas) |parammedia_areasflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (parammedia_areasflag) |parammedia_areasflagitem| {
        result += parammedia_areasflagitem.size();
        }
        }

        // privacy
        const paramprivacy = self.privacy;
        if (paramprivacy) |paramprivacyflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramprivacyflag) |paramprivacyflagitem| {
        result += paramprivacyflagitem.size();
        }
        }

        // views
        const paramviews = self.views;
        if (paramviews) |paramviewsflag| {
        result += paramviewsflag.size();
        }

        // sent_reaction
        const paramsent_reaction = self.sent_reaction;
        if (paramsent_reaction) |paramsent_reactionflag| {
        result += paramsent_reactionflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 7;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 8;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 9;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 10;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 11;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 12;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 13;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 16;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 18;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 17;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 14;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 15;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StoriesAllStoriesNotModified= struct {
    state: []const u8,
    stealth_mode: IStoriesStealthMode,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // state
        const paramstate = self.state;
        result += base.strEncodedSize(paramstate);
        // stealth_mode
        const paramstealth_mode = self.stealth_mode;
        result += paramstealth_mode.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StoriesAllStories= struct {
    has_more: ?bool,
    count: i32,
    state: []const u8,
    peer_stories: []const IPeerStories,
    chats: []const IChat,
    users: []const IUser,
    stealth_mode: IStoriesStealthMode,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // has_more
        // true flag

        // count
        const paramcount = self.count;
        result += @sizeOf(@TypeOf(paramcount));
        // state
        const paramstate = self.state;
        result += base.strEncodedSize(paramstate);
        // peer_stories
        const parampeer_stories = self.peer_stories;
        result += 4; // vector id
        result += 4; // vector size
        for (parampeer_stories) |parampeer_storiesitem| {
        result += parampeer_storiesitem.size();
        }

        // chats
        const paramchats = self.chats;
        result += 4; // vector id
        result += 4; // vector size
        for (paramchats) |paramchatsitem| {
        result += paramchatsitem.size();
        }

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        // stealth_mode
        const paramstealth_mode = self.stealth_mode;
        result += paramstealth_mode.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StoriesStories= struct {
    count: i32,
    stories: []const IStoryItem,
    pinned_to_top: ?[]const i32,
    chats: []const IChat,
    users: []const IUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // count
        const paramcount = self.count;
        result += @sizeOf(@TypeOf(paramcount));
        // stories
        const paramstories = self.stories;
        result += 4; // vector id
        result += 4; // vector size
        for (paramstories) |paramstoriesitem| {
        result += paramstoriesitem.size();
        }

        // pinned_to_top
        const parampinned_to_top = self.pinned_to_top;
        if (parampinned_to_top) |parampinned_to_topflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (parampinned_to_topflag) |parampinned_to_topflagitem| {
        result += @sizeOf(@TypeOf(parampinned_to_topflagitem));        }
        }

        // chats
        const paramchats = self.chats;
        result += 4; // vector id
        result += 4; // vector size
        for (paramchats) |paramchatsitem| {
        result += paramchatsitem.size();
        }

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StoryView= struct {
    blocked: ?bool,
    blocked_my_stories_from: ?bool,
    user_id: i64,
    date: i32,
    reaction: ?IReaction,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // blocked
        // true flag

        // blocked_my_stories_from
        // true flag

        // user_id
        const paramuser_id = self.user_id;
        result += @sizeOf(@TypeOf(paramuser_id));
        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        // reaction
        const paramreaction = self.reaction;
        if (paramreaction) |paramreactionflag| {
        result += paramreactionflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StoryViewPublicForward= struct {
    blocked: ?bool,
    blocked_my_stories_from: ?bool,
    message: IMessage,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // blocked
        // true flag

        // blocked_my_stories_from
        // true flag

        // message
        const parammessage = self.message;
        result += parammessage.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StoryViewPublicRepost= struct {
    blocked: ?bool,
    blocked_my_stories_from: ?bool,
    peer_id: IPeer,
    story: IStoryItem,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // blocked
        // true flag

        // blocked_my_stories_from
        // true flag

        // peer_id
        const parampeer_id = self.peer_id;
        result += parampeer_id.size();

        // story
        const paramstory = self.story;
        result += paramstory.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StoriesStoryViewsList= struct {
    count: i32,
    views_count: i32,
    forwards_count: i32,
    reactions_count: i32,
    views: []const IStoryView,
    chats: []const IChat,
    users: []const IUser,
    next_offset: ?[]const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // count
        const paramcount = self.count;
        result += @sizeOf(@TypeOf(paramcount));
        // views_count
        const paramviews_count = self.views_count;
        result += @sizeOf(@TypeOf(paramviews_count));
        // forwards_count
        const paramforwards_count = self.forwards_count;
        result += @sizeOf(@TypeOf(paramforwards_count));
        // reactions_count
        const paramreactions_count = self.reactions_count;
        result += @sizeOf(@TypeOf(paramreactions_count));
        // views
        const paramviews = self.views;
        result += 4; // vector id
        result += 4; // vector size
        for (paramviews) |paramviewsitem| {
        result += paramviewsitem.size();
        }

        // chats
        const paramchats = self.chats;
        result += 4; // vector id
        result += 4; // vector size
        for (paramchats) |paramchatsitem| {
        result += paramchatsitem.size();
        }

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        // next_offset
        const paramnext_offset = self.next_offset;
        if (paramnext_offset) |paramnext_offsetflag| {
        result += base.strEncodedSize(paramnext_offsetflag);        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StoriesStoryViews= struct {
    views: []const IStoryViews,
    users: []const IUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // views
        const paramviews = self.views;
        result += 4; // vector id
        result += 4; // vector size
        for (paramviews) |paramviewsitem| {
        result += paramviewsitem.size();
        }

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputReplyToMessage= struct {
    reply_to_msg_id: i32,
    top_msg_id: ?i32,
    reply_to_peer_id: ?IInputPeer,
    quote_text: ?[]const u8,
    quote_entities: ?[]const IMessageEntity,
    quote_offset: ?i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // reply_to_msg_id
        const paramreply_to_msg_id = self.reply_to_msg_id;
        result += @sizeOf(@TypeOf(paramreply_to_msg_id));
        // top_msg_id
        const paramtop_msg_id = self.top_msg_id;
        if (paramtop_msg_id) |paramtop_msg_idflag| {
        result += @sizeOf(@TypeOf(paramtop_msg_idflag));        }

        // reply_to_peer_id
        const paramreply_to_peer_id = self.reply_to_peer_id;
        if (paramreply_to_peer_id) |paramreply_to_peer_idflag| {
        result += paramreply_to_peer_idflag.size();
        }

        // quote_text
        const paramquote_text = self.quote_text;
        if (paramquote_text) |paramquote_textflag| {
        result += base.strEncodedSize(paramquote_textflag);        }

        // quote_entities
        const paramquote_entities = self.quote_entities;
        if (paramquote_entities) |paramquote_entitiesflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramquote_entitiesflag) |paramquote_entitiesflagitem| {
        result += paramquote_entitiesflagitem.size();
        }
        }

        // quote_offset
        const paramquote_offset = self.quote_offset;
        if (paramquote_offset) |paramquote_offsetflag| {
        result += @sizeOf(@TypeOf(paramquote_offsetflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputReplyToStory= struct {
    peer: IInputPeer,
    story_id: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // story_id
        const paramstory_id = self.story_id;
        result += @sizeOf(@TypeOf(paramstory_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ExportedStoryLink= struct {
    link: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // link
        const paramlink = self.link;
        result += base.strEncodedSize(paramlink);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const StoriesStealthMode= struct {
    active_until_date: ?i32,
    cooldown_until_date: ?i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // active_until_date
        const paramactive_until_date = self.active_until_date;
        if (paramactive_until_date) |paramactive_until_dateflag| {
        result += @sizeOf(@TypeOf(paramactive_until_dateflag));        }

        // cooldown_until_date
        const paramcooldown_until_date = self.cooldown_until_date;
        if (paramcooldown_until_date) |paramcooldown_until_dateflag| {
        result += @sizeOf(@TypeOf(paramcooldown_until_dateflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MediaAreaCoordinates= struct {
    x: f64,
    y: f64,
    w: f64,
    h: f64,
    rotation: f64,
    radius: ?f64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // x
        const paramx = self.x;
        result += @sizeOf(@TypeOf(paramx));
        // y
        const paramy = self.y;
        result += @sizeOf(@TypeOf(paramy));
        // w
        const paramw = self.w;
        result += @sizeOf(@TypeOf(paramw));
        // h
        const paramh = self.h;
        result += @sizeOf(@TypeOf(paramh));
        // rotation
        const paramrotation = self.rotation;
        result += @sizeOf(@TypeOf(paramrotation));
        // radius
        const paramradius = self.radius;
        if (paramradius) |paramradiusflag| {
        result += @sizeOf(@TypeOf(paramradiusflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MediaAreaVenue= struct {
    coordinates: IMediaAreaCoordinates,
    geo: IGeoPoint,
    title: []const u8,
    address: []const u8,
    provider: []const u8,
    venue_id: []const u8,
    venue_type: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // coordinates
        const paramcoordinates = self.coordinates;
        result += paramcoordinates.size();

        // geo
        const paramgeo = self.geo;
        result += paramgeo.size();

        // title
        const paramtitle = self.title;
        result += base.strEncodedSize(paramtitle);
        // address
        const paramaddress = self.address;
        result += base.strEncodedSize(paramaddress);
        // provider
        const paramprovider = self.provider;
        result += base.strEncodedSize(paramprovider);
        // venue_id
        const paramvenue_id = self.venue_id;
        result += base.strEncodedSize(paramvenue_id);
        // venue_type
        const paramvenue_type = self.venue_type;
        result += base.strEncodedSize(paramvenue_type);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputMediaAreaVenue= struct {
    coordinates: IMediaAreaCoordinates,
    query_id: i64,
    result_id: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // coordinates
        const paramcoordinates = self.coordinates;
        result += paramcoordinates.size();

        // query_id
        const paramquery_id = self.query_id;
        result += @sizeOf(@TypeOf(paramquery_id));
        // result_id
        const paramresult_id = self.result_id;
        result += base.strEncodedSize(paramresult_id);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MediaAreaGeoPoint= struct {
    coordinates: IMediaAreaCoordinates,
    geo: IGeoPoint,
    address: ?IGeoPointAddress,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // coordinates
        const paramcoordinates = self.coordinates;
        result += paramcoordinates.size();

        // geo
        const paramgeo = self.geo;
        result += paramgeo.size();

        // address
        const paramaddress = self.address;
        if (paramaddress) |paramaddressflag| {
        result += paramaddressflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MediaAreaSuggestedReaction= struct {
    dark: ?bool,
    flipped: ?bool,
    coordinates: IMediaAreaCoordinates,
    reaction: IReaction,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // dark
        // true flag

        // flipped
        // true flag

        // coordinates
        const paramcoordinates = self.coordinates;
        result += paramcoordinates.size();

        // reaction
        const paramreaction = self.reaction;
        result += paramreaction.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MediaAreaChannelPost= struct {
    coordinates: IMediaAreaCoordinates,
    channel_id: i64,
    msg_id: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // coordinates
        const paramcoordinates = self.coordinates;
        result += paramcoordinates.size();

        // channel_id
        const paramchannel_id = self.channel_id;
        result += @sizeOf(@TypeOf(paramchannel_id));
        // msg_id
        const parammsg_id = self.msg_id;
        result += @sizeOf(@TypeOf(parammsg_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputMediaAreaChannelPost= struct {
    coordinates: IMediaAreaCoordinates,
    channel: IInputChannel,
    msg_id: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // coordinates
        const paramcoordinates = self.coordinates;
        result += paramcoordinates.size();

        // channel
        const paramchannel = self.channel;
        result += paramchannel.size();

        // msg_id
        const parammsg_id = self.msg_id;
        result += @sizeOf(@TypeOf(parammsg_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MediaAreaUrl= struct {
    coordinates: IMediaAreaCoordinates,
    url: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // coordinates
        const paramcoordinates = self.coordinates;
        result += paramcoordinates.size();

        // url
        const paramurl = self.url;
        result += base.strEncodedSize(paramurl);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MediaAreaWeather= struct {
    coordinates: IMediaAreaCoordinates,
    emoji: []const u8,
    temperature_c: f64,
    color: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // coordinates
        const paramcoordinates = self.coordinates;
        result += paramcoordinates.size();

        // emoji
        const paramemoji = self.emoji;
        result += base.strEncodedSize(paramemoji);
        // temperature_c
        const paramtemperature_c = self.temperature_c;
        result += @sizeOf(@TypeOf(paramtemperature_c));
        // color
        const paramcolor = self.color;
        result += @sizeOf(@TypeOf(paramcolor));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PeerStories= struct {
    peer: IPeer,
    max_read_id: ?i32,
    stories: []const IStoryItem,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // max_read_id
        const parammax_read_id = self.max_read_id;
        if (parammax_read_id) |parammax_read_idflag| {
        result += @sizeOf(@TypeOf(parammax_read_idflag));        }

        // stories
        const paramstories = self.stories;
        result += 4; // vector id
        result += 4; // vector size
        for (paramstories) |paramstoriesitem| {
        result += paramstoriesitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StoriesPeerStories= struct {
    stories: IPeerStories,
    chats: []const IChat,
    users: []const IUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // stories
        const paramstories = self.stories;
        result += paramstories.size();

        // chats
        const paramchats = self.chats;
        result += 4; // vector id
        result += 4; // vector size
        for (paramchats) |paramchatsitem| {
        result += paramchatsitem.size();
        }

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesWebPage= struct {
    webpage: IWebPage,
    chats: []const IChat,
    users: []const IUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // webpage
        const paramwebpage = self.webpage;
        result += paramwebpage.size();

        // chats
        const paramchats = self.chats;
        result += 4; // vector id
        result += 4; // vector size
        for (paramchats) |paramchatsitem| {
        result += paramchatsitem.size();
        }

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PremiumGiftCodeOption= struct {
    users: i32,
    months: i32,
    store_product: ?[]const u8,
    store_quantity: ?i32,
    currency: []const u8,
    amount: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // users
        const paramusers = self.users;
        result += @sizeOf(@TypeOf(paramusers));
        // months
        const parammonths = self.months;
        result += @sizeOf(@TypeOf(parammonths));
        // store_product
        const paramstore_product = self.store_product;
        if (paramstore_product) |paramstore_productflag| {
        result += base.strEncodedSize(paramstore_productflag);        }

        // store_quantity
        const paramstore_quantity = self.store_quantity;
        if (paramstore_quantity) |paramstore_quantityflag| {
        result += @sizeOf(@TypeOf(paramstore_quantityflag));        }

        // currency
        const paramcurrency = self.currency;
        result += base.strEncodedSize(paramcurrency);
        // amount
        const paramamount = self.amount;
        result += @sizeOf(@TypeOf(paramamount));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PaymentsCheckedGiftCode= struct {
    via_giveaway: ?bool,
    from_id: ?IPeer,
    giveaway_msg_id: ?i32,
    to_id: ?i64,
    date: i32,
    months: i32,
    used_date: ?i32,
    chats: []const IChat,
    users: []const IUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // via_giveaway
        // true flag

        // from_id
        const paramfrom_id = self.from_id;
        if (paramfrom_id) |paramfrom_idflag| {
        result += paramfrom_idflag.size();
        }

        // giveaway_msg_id
        const paramgiveaway_msg_id = self.giveaway_msg_id;
        if (paramgiveaway_msg_id) |paramgiveaway_msg_idflag| {
        result += @sizeOf(@TypeOf(paramgiveaway_msg_idflag));        }

        // to_id
        const paramto_id = self.to_id;
        if (paramto_id) |paramto_idflag| {
        result += @sizeOf(@TypeOf(paramto_idflag));        }

        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        // months
        const parammonths = self.months;
        result += @sizeOf(@TypeOf(parammonths));
        // used_date
        const paramused_date = self.used_date;
        if (paramused_date) |paramused_dateflag| {
        result += @sizeOf(@TypeOf(paramused_dateflag));        }

        // chats
        const paramchats = self.chats;
        result += 4; // vector id
        result += 4; // vector size
        for (paramchats) |paramchatsitem| {
        result += paramchatsitem.size();
        }

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PaymentsGiveawayInfo= struct {
    participating: ?bool,
    preparing_results: ?bool,
    start_date: i32,
    joined_too_early_date: ?i32,
    admin_disallowed_chat_id: ?i64,
    disallowed_country: ?[]const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // participating
        // true flag

        // preparing_results
        // true flag

        // start_date
        const paramstart_date = self.start_date;
        result += @sizeOf(@TypeOf(paramstart_date));
        // joined_too_early_date
        const paramjoined_too_early_date = self.joined_too_early_date;
        if (paramjoined_too_early_date) |paramjoined_too_early_dateflag| {
        result += @sizeOf(@TypeOf(paramjoined_too_early_dateflag));        }

        // admin_disallowed_chat_id
        const paramadmin_disallowed_chat_id = self.admin_disallowed_chat_id;
        if (paramadmin_disallowed_chat_id) |paramadmin_disallowed_chat_idflag| {
        result += @sizeOf(@TypeOf(paramadmin_disallowed_chat_idflag));        }

        // disallowed_country
        const paramdisallowed_country = self.disallowed_country;
        if (paramdisallowed_country) |paramdisallowed_countryflag| {
        result += base.strEncodedSize(paramdisallowed_countryflag);        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PaymentsGiveawayInfoResults= struct {
    winner: ?bool,
    refunded: ?bool,
    start_date: i32,
    gift_code_slug: ?[]const u8,
    stars_prize: ?i64,
    finish_date: i32,
    winners_count: i32,
    activated_count: ?i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // winner
        // true flag

        // refunded
        // true flag

        // start_date
        const paramstart_date = self.start_date;
        result += @sizeOf(@TypeOf(paramstart_date));
        // gift_code_slug
        const paramgift_code_slug = self.gift_code_slug;
        if (paramgift_code_slug) |paramgift_code_slugflag| {
        result += base.strEncodedSize(paramgift_code_slugflag);        }

        // stars_prize
        const paramstars_prize = self.stars_prize;
        if (paramstars_prize) |paramstars_prizeflag| {
        result += @sizeOf(@TypeOf(paramstars_prizeflag));        }

        // finish_date
        const paramfinish_date = self.finish_date;
        result += @sizeOf(@TypeOf(paramfinish_date));
        // winners_count
        const paramwinners_count = self.winners_count;
        result += @sizeOf(@TypeOf(paramwinners_count));
        // activated_count
        const paramactivated_count = self.activated_count;
        if (paramactivated_count) |paramactivated_countflag| {
        result += @sizeOf(@TypeOf(paramactivated_countflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PrepaidGiveaway= struct {
    id: i64,
    months: i32,
    quantity: i32,
    date: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // months
        const parammonths = self.months;
        result += @sizeOf(@TypeOf(parammonths));
        // quantity
        const paramquantity = self.quantity;
        result += @sizeOf(@TypeOf(paramquantity));
        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PrepaidStarsGiveaway= struct {
    id: i64,
    stars: i64,
    quantity: i32,
    boosts: i32,
    date: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // stars
        const paramstars = self.stars;
        result += @sizeOf(@TypeOf(paramstars));
        // quantity
        const paramquantity = self.quantity;
        result += @sizeOf(@TypeOf(paramquantity));
        // boosts
        const paramboosts = self.boosts;
        result += @sizeOf(@TypeOf(paramboosts));
        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const Boost= struct {
    gift: ?bool,
    giveaway: ?bool,
    unclaimed: ?bool,
    id: []const u8,
    user_id: ?i64,
    giveaway_msg_id: ?i32,
    date: i32,
    expires: i32,
    used_gift_slug: ?[]const u8,
    multiplier: ?i32,
    stars: ?i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // gift
        // true flag

        // giveaway
        // true flag

        // unclaimed
        // true flag

        // id
        const paramid = self.id;
        result += base.strEncodedSize(paramid);
        // user_id
        const paramuser_id = self.user_id;
        if (paramuser_id) |paramuser_idflag| {
        result += @sizeOf(@TypeOf(paramuser_idflag));        }

        // giveaway_msg_id
        const paramgiveaway_msg_id = self.giveaway_msg_id;
        if (paramgiveaway_msg_id) |paramgiveaway_msg_idflag| {
        result += @sizeOf(@TypeOf(paramgiveaway_msg_idflag));        }

        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        // expires
        const paramexpires = self.expires;
        result += @sizeOf(@TypeOf(paramexpires));
        // used_gift_slug
        const paramused_gift_slug = self.used_gift_slug;
        if (paramused_gift_slug) |paramused_gift_slugflag| {
        result += base.strEncodedSize(paramused_gift_slugflag);        }

        // multiplier
        const parammultiplier = self.multiplier;
        if (parammultiplier) |parammultiplierflag| {
        result += @sizeOf(@TypeOf(parammultiplierflag));        }

        // stars
        const paramstars = self.stars;
        if (paramstars) |paramstarsflag| {
        result += @sizeOf(@TypeOf(paramstarsflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 6;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PremiumBoostsList= struct {
    count: i32,
    boosts: []const IBoost,
    next_offset: ?[]const u8,
    users: []const IUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // count
        const paramcount = self.count;
        result += @sizeOf(@TypeOf(paramcount));
        // boosts
        const paramboosts = self.boosts;
        result += 4; // vector id
        result += 4; // vector size
        for (paramboosts) |paramboostsitem| {
        result += paramboostsitem.size();
        }

        // next_offset
        const paramnext_offset = self.next_offset;
        if (paramnext_offset) |paramnext_offsetflag| {
        result += base.strEncodedSize(paramnext_offsetflag);        }

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MyBoost= struct {
    slot: i32,
    peer: ?IPeer,
    date: i32,
    expires: i32,
    cooldown_until_date: ?i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // slot
        const paramslot = self.slot;
        result += @sizeOf(@TypeOf(paramslot));
        // peer
        const parampeer = self.peer;
        if (parampeer) |parampeerflag| {
        result += parampeerflag.size();
        }

        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        // expires
        const paramexpires = self.expires;
        result += @sizeOf(@TypeOf(paramexpires));
        // cooldown_until_date
        const paramcooldown_until_date = self.cooldown_until_date;
        if (paramcooldown_until_date) |paramcooldown_until_dateflag| {
        result += @sizeOf(@TypeOf(paramcooldown_until_dateflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PremiumMyBoosts= struct {
    my_boosts: []const IMyBoost,
    chats: []const IChat,
    users: []const IUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // my_boosts
        const parammy_boosts = self.my_boosts;
        result += 4; // vector id
        result += 4; // vector size
        for (parammy_boosts) |parammy_boostsitem| {
        result += parammy_boostsitem.size();
        }

        // chats
        const paramchats = self.chats;
        result += 4; // vector id
        result += 4; // vector size
        for (paramchats) |paramchatsitem| {
        result += paramchatsitem.size();
        }

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PremiumBoostsStatus= struct {
    my_boost: ?bool,
    level: i32,
    current_level_boosts: i32,
    boosts: i32,
    gift_boosts: ?i32,
    next_level_boosts: ?i32,
    premium_audience: ?IStatsPercentValue,
    boost_url: []const u8,
    prepaid_giveaways: ?[]const IPrepaidGiveaway,
    my_boost_slots: ?[]const i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // my_boost
        // true flag

        // level
        const paramlevel = self.level;
        result += @sizeOf(@TypeOf(paramlevel));
        // current_level_boosts
        const paramcurrent_level_boosts = self.current_level_boosts;
        result += @sizeOf(@TypeOf(paramcurrent_level_boosts));
        // boosts
        const paramboosts = self.boosts;
        result += @sizeOf(@TypeOf(paramboosts));
        // gift_boosts
        const paramgift_boosts = self.gift_boosts;
        if (paramgift_boosts) |paramgift_boostsflag| {
        result += @sizeOf(@TypeOf(paramgift_boostsflag));        }

        // next_level_boosts
        const paramnext_level_boosts = self.next_level_boosts;
        if (paramnext_level_boosts) |paramnext_level_boostsflag| {
        result += @sizeOf(@TypeOf(paramnext_level_boostsflag));        }

        // premium_audience
        const parampremium_audience = self.premium_audience;
        if (parampremium_audience) |parampremium_audienceflag| {
        result += parampremium_audienceflag.size();
        }

        // boost_url
        const paramboost_url = self.boost_url;
        result += base.strEncodedSize(paramboost_url);
        // prepaid_giveaways
        const paramprepaid_giveaways = self.prepaid_giveaways;
        if (paramprepaid_giveaways) |paramprepaid_giveawaysflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramprepaid_giveawaysflag) |paramprepaid_giveawaysflagitem| {
        result += paramprepaid_giveawaysflagitem.size();
        }
        }

        // my_boost_slots
        const parammy_boost_slots = self.my_boost_slots;
        if (parammy_boost_slots) |parammy_boost_slotsflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (parammy_boost_slotsflag) |parammy_boost_slotsflagitem| {
        result += @sizeOf(@TypeOf(parammy_boost_slotsflagitem));        }
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StoryFwdHeader= struct {
    modified: ?bool,
    from: ?IPeer,
    from_name: ?[]const u8,
    story_id: ?i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // modified
        // true flag

        // from
        const paramfrom = self.from;
        if (paramfrom) |paramfromflag| {
        result += paramfromflag.size();
        }

        // from_name
        const paramfrom_name = self.from_name;
        if (paramfrom_name) |paramfrom_nameflag| {
        result += base.strEncodedSize(paramfrom_nameflag);        }

        // story_id
        const paramstory_id = self.story_id;
        if (paramstory_id) |paramstory_idflag| {
        result += @sizeOf(@TypeOf(paramstory_idflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PostInteractionCountersMessage= struct {
    msg_id: i32,
    views: i32,
    forwards: i32,
    reactions: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // msg_id
        const parammsg_id = self.msg_id;
        result += @sizeOf(@TypeOf(parammsg_id));
        // views
        const paramviews = self.views;
        result += @sizeOf(@TypeOf(paramviews));
        // forwards
        const paramforwards = self.forwards;
        result += @sizeOf(@TypeOf(paramforwards));
        // reactions
        const paramreactions = self.reactions;
        result += @sizeOf(@TypeOf(paramreactions));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PostInteractionCountersStory= struct {
    story_id: i32,
    views: i32,
    forwards: i32,
    reactions: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // story_id
        const paramstory_id = self.story_id;
        result += @sizeOf(@TypeOf(paramstory_id));
        // views
        const paramviews = self.views;
        result += @sizeOf(@TypeOf(paramviews));
        // forwards
        const paramforwards = self.forwards;
        result += @sizeOf(@TypeOf(paramforwards));
        // reactions
        const paramreactions = self.reactions;
        result += @sizeOf(@TypeOf(paramreactions));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StatsStoryStats= struct {
    views_graph: IStatsGraph,
    reactions_by_emotion_graph: IStatsGraph,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // views_graph
        const paramviews_graph = self.views_graph;
        result += paramviews_graph.size();

        // reactions_by_emotion_graph
        const paramreactions_by_emotion_graph = self.reactions_by_emotion_graph;
        result += paramreactions_by_emotion_graph.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PublicForwardMessage= struct {
    message: IMessage,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // message
        const parammessage = self.message;
        result += parammessage.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const PublicForwardStory= struct {
    peer: IPeer,
    story: IStoryItem,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // story
        const paramstory = self.story;
        result += paramstory.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StatsPublicForwards= struct {
    count: i32,
    forwards: []const IPublicForward,
    next_offset: ?[]const u8,
    chats: []const IChat,
    users: []const IUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // count
        const paramcount = self.count;
        result += @sizeOf(@TypeOf(paramcount));
        // forwards
        const paramforwards = self.forwards;
        result += 4; // vector id
        result += 4; // vector size
        for (paramforwards) |paramforwardsitem| {
        result += paramforwardsitem.size();
        }

        // next_offset
        const paramnext_offset = self.next_offset;
        if (paramnext_offset) |paramnext_offsetflag| {
        result += base.strEncodedSize(paramnext_offsetflag);        }

        // chats
        const paramchats = self.chats;
        result += 4; // vector id
        result += 4; // vector size
        for (paramchats) |paramchatsitem| {
        result += paramchatsitem.size();
        }

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PeerColor= struct {
    color: ?i32,
    background_emoji_id: ?i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // color
        const paramcolor = self.color;
        if (paramcolor) |paramcolorflag| {
        result += @sizeOf(@TypeOf(paramcolorflag));        }

        // background_emoji_id
        const parambackground_emoji_id = self.background_emoji_id;
        if (parambackground_emoji_id) |parambackground_emoji_idflag| {
        result += @sizeOf(@TypeOf(parambackground_emoji_idflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const HelpPeerColorSet= struct {
    colors: []const i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // colors
        const paramcolors = self.colors;
        result += 4; // vector id
        result += 4; // vector size
        for (paramcolors) |paramcolorsitem| {
        result += @sizeOf(@TypeOf(paramcolorsitem));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const HelpPeerColorProfileSet= struct {
    palette_colors: []const i32,
    bg_colors: []const i32,
    story_colors: []const i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // palette_colors
        const parampalette_colors = self.palette_colors;
        result += 4; // vector id
        result += 4; // vector size
        for (parampalette_colors) |parampalette_colorsitem| {
        result += @sizeOf(@TypeOf(parampalette_colorsitem));        }

        // bg_colors
        const parambg_colors = self.bg_colors;
        result += 4; // vector id
        result += 4; // vector size
        for (parambg_colors) |parambg_colorsitem| {
        result += @sizeOf(@TypeOf(parambg_colorsitem));        }

        // story_colors
        const paramstory_colors = self.story_colors;
        result += 4; // vector id
        result += 4; // vector size
        for (paramstory_colors) |paramstory_colorsitem| {
        result += @sizeOf(@TypeOf(paramstory_colorsitem));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const HelpPeerColorOption= struct {
    hidden: ?bool,
    color_id: i32,
    colors: ?IHelpPeerColorSet,
    dark_colors: ?IHelpPeerColorSet,
    channel_min_level: ?i32,
    group_min_level: ?i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // hidden
        // true flag

        // color_id
        const paramcolor_id = self.color_id;
        result += @sizeOf(@TypeOf(paramcolor_id));
        // colors
        const paramcolors = self.colors;
        if (paramcolors) |paramcolorsflag| {
        result += paramcolorsflag.size();
        }

        // dark_colors
        const paramdark_colors = self.dark_colors;
        if (paramdark_colors) |paramdark_colorsflag| {
        result += paramdark_colorsflag.size();
        }

        // channel_min_level
        const paramchannel_min_level = self.channel_min_level;
        if (paramchannel_min_level) |paramchannel_min_levelflag| {
        result += @sizeOf(@TypeOf(paramchannel_min_levelflag));        }

        // group_min_level
        const paramgroup_min_level = self.group_min_level;
        if (paramgroup_min_level) |paramgroup_min_levelflag| {
        result += @sizeOf(@TypeOf(paramgroup_min_levelflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const HelpPeerColorsNotModified= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const HelpPeerColors= struct {
    hash: i32,
    colors: []const IHelpPeerColorOption,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        // colors
        const paramcolors = self.colors;
        result += 4; // vector id
        result += 4; // vector size
        for (paramcolors) |paramcolorsitem| {
        result += paramcolorsitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StoryReaction= struct {
    peer_id: IPeer,
    date: i32,
    reaction: IReaction,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer_id
        const parampeer_id = self.peer_id;
        result += parampeer_id.size();

        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        // reaction
        const paramreaction = self.reaction;
        result += paramreaction.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StoryReactionPublicForward= struct {
    message: IMessage,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // message
        const parammessage = self.message;
        result += parammessage.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const StoryReactionPublicRepost= struct {
    peer_id: IPeer,
    story: IStoryItem,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer_id
        const parampeer_id = self.peer_id;
        result += parampeer_id.size();

        // story
        const paramstory = self.story;
        result += paramstory.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StoriesStoryReactionsList= struct {
    count: i32,
    reactions: []const IStoryReaction,
    chats: []const IChat,
    users: []const IUser,
    next_offset: ?[]const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // count
        const paramcount = self.count;
        result += @sizeOf(@TypeOf(paramcount));
        // reactions
        const paramreactions = self.reactions;
        result += 4; // vector id
        result += 4; // vector size
        for (paramreactions) |paramreactionsitem| {
        result += paramreactionsitem.size();
        }

        // chats
        const paramchats = self.chats;
        result += 4; // vector id
        result += 4; // vector size
        for (paramchats) |paramchatsitem| {
        result += paramchatsitem.size();
        }

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        // next_offset
        const paramnext_offset = self.next_offset;
        if (paramnext_offset) |paramnext_offsetflag| {
        result += base.strEncodedSize(paramnext_offsetflag);        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const SavedDialog= struct {
    pinned: ?bool,
    peer: IPeer,
    top_message: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // pinned
        // true flag

        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // top_message
        const paramtop_message = self.top_message;
        result += @sizeOf(@TypeOf(paramtop_message));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesSavedDialogs= struct {
    dialogs: []const ISavedDialog,
    messages: []const IMessage,
    chats: []const IChat,
    users: []const IUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // dialogs
        const paramdialogs = self.dialogs;
        result += 4; // vector id
        result += 4; // vector size
        for (paramdialogs) |paramdialogsitem| {
        result += paramdialogsitem.size();
        }

        // messages
        const parammessages = self.messages;
        result += 4; // vector id
        result += 4; // vector size
        for (parammessages) |parammessagesitem| {
        result += parammessagesitem.size();
        }

        // chats
        const paramchats = self.chats;
        result += 4; // vector id
        result += 4; // vector size
        for (paramchats) |paramchatsitem| {
        result += paramchatsitem.size();
        }

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesSavedDialogsSlice= struct {
    count: i32,
    dialogs: []const ISavedDialog,
    messages: []const IMessage,
    chats: []const IChat,
    users: []const IUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // count
        const paramcount = self.count;
        result += @sizeOf(@TypeOf(paramcount));
        // dialogs
        const paramdialogs = self.dialogs;
        result += 4; // vector id
        result += 4; // vector size
        for (paramdialogs) |paramdialogsitem| {
        result += paramdialogsitem.size();
        }

        // messages
        const parammessages = self.messages;
        result += 4; // vector id
        result += 4; // vector size
        for (parammessages) |parammessagesitem| {
        result += parammessagesitem.size();
        }

        // chats
        const paramchats = self.chats;
        result += 4; // vector id
        result += 4; // vector size
        for (paramchats) |paramchatsitem| {
        result += paramchatsitem.size();
        }

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesSavedDialogsNotModified= struct {
    count: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // count
        const paramcount = self.count;
        result += @sizeOf(@TypeOf(paramcount));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const SavedReactionTag= struct {
    reaction: IReaction,
    title: ?[]const u8,
    count: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // reaction
        const paramreaction = self.reaction;
        result += paramreaction.size();

        // title
        const paramtitle = self.title;
        if (paramtitle) |paramtitleflag| {
        result += base.strEncodedSize(paramtitleflag);        }

        // count
        const paramcount = self.count;
        result += @sizeOf(@TypeOf(paramcount));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesSavedReactionTagsNotModified= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const MessagesSavedReactionTags= struct {
    tags: []const ISavedReactionTag,
    hash: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // tags
        const paramtags = self.tags;
        result += 4; // vector id
        result += 4; // vector size
        for (paramtags) |paramtagsitem| {
        result += paramtagsitem.size();
        }

        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const OutboxReadDate= struct {
    date: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const SmsjobsEligibleToJoin= struct {
    terms_url: []const u8,
    monthly_sent_sms: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // terms_url
        const paramterms_url = self.terms_url;
        result += base.strEncodedSize(paramterms_url);
        // monthly_sent_sms
        const parammonthly_sent_sms = self.monthly_sent_sms;
        result += @sizeOf(@TypeOf(parammonthly_sent_sms));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const SmsjobsStatus= struct {
    allow_international: ?bool,
    recent_sent: i32,
    recent_since: i32,
    recent_remains: i32,
    total_sent: i32,
    total_since: i32,
    last_gift_slug: ?[]const u8,
    terms_url: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // allow_international
        // true flag

        // recent_sent
        const paramrecent_sent = self.recent_sent;
        result += @sizeOf(@TypeOf(paramrecent_sent));
        // recent_since
        const paramrecent_since = self.recent_since;
        result += @sizeOf(@TypeOf(paramrecent_since));
        // recent_remains
        const paramrecent_remains = self.recent_remains;
        result += @sizeOf(@TypeOf(paramrecent_remains));
        // total_sent
        const paramtotal_sent = self.total_sent;
        result += @sizeOf(@TypeOf(paramtotal_sent));
        // total_since
        const paramtotal_since = self.total_since;
        result += @sizeOf(@TypeOf(paramtotal_since));
        // last_gift_slug
        const paramlast_gift_slug = self.last_gift_slug;
        if (paramlast_gift_slug) |paramlast_gift_slugflag| {
        result += base.strEncodedSize(paramlast_gift_slugflag);        }

        // terms_url
        const paramterms_url = self.terms_url;
        result += base.strEncodedSize(paramterms_url);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const SmsJob= struct {
    job_id: []const u8,
    phone_number: []const u8,
    text: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // job_id
        const paramjob_id = self.job_id;
        result += base.strEncodedSize(paramjob_id);
        // phone_number
        const paramphone_number = self.phone_number;
        result += base.strEncodedSize(paramphone_number);
        // text
        const paramtext = self.text;
        result += base.strEncodedSize(paramtext);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const BusinessWeeklyOpen= struct {
    start_minute: i32,
    end_minute: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // start_minute
        const paramstart_minute = self.start_minute;
        result += @sizeOf(@TypeOf(paramstart_minute));
        // end_minute
        const paramend_minute = self.end_minute;
        result += @sizeOf(@TypeOf(paramend_minute));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const BusinessWorkHours= struct {
    open_now: ?bool,
    timezone_id: []const u8,
    weekly_open: []const IBusinessWeeklyOpen,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // open_now
        // true flag

        // timezone_id
        const paramtimezone_id = self.timezone_id;
        result += base.strEncodedSize(paramtimezone_id);
        // weekly_open
        const paramweekly_open = self.weekly_open;
        result += 4; // vector id
        result += 4; // vector size
        for (paramweekly_open) |paramweekly_openitem| {
        result += paramweekly_openitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const BusinessLocation= struct {
    geo_point: ?IGeoPoint,
    address: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // geo_point
        const paramgeo_point = self.geo_point;
        if (paramgeo_point) |paramgeo_pointflag| {
        result += paramgeo_pointflag.size();
        }

        // address
        const paramaddress = self.address;
        result += base.strEncodedSize(paramaddress);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputBusinessRecipients= struct {
    existing_chats: ?bool,
    new_chats: ?bool,
    contacts: ?bool,
    non_contacts: ?bool,
    exclude_selected: ?bool,
    users: ?[]const IInputUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // existing_chats
        // true flag

        // new_chats
        // true flag

        // contacts
        // true flag

        // non_contacts
        // true flag

        // exclude_selected
        // true flag

        // users
        const paramusers = self.users;
        if (paramusers) |paramusersflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramusersflag) |paramusersflagitem| {
        result += paramusersflagitem.size();
        }
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const BusinessRecipients= struct {
    existing_chats: ?bool,
    new_chats: ?bool,
    contacts: ?bool,
    non_contacts: ?bool,
    exclude_selected: ?bool,
    users: ?[]const i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // existing_chats
        // true flag

        // new_chats
        // true flag

        // contacts
        // true flag

        // non_contacts
        // true flag

        // exclude_selected
        // true flag

        // users
        const paramusers = self.users;
        if (paramusers) |paramusersflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramusersflag) |paramusersflagitem| {
        result += @sizeOf(@TypeOf(paramusersflagitem));        }
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const BusinessAwayMessageScheduleAlways= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const BusinessAwayMessageScheduleOutsideWorkHours= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const BusinessAwayMessageScheduleCustom= struct {
    start_date: i32,
    end_date: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // start_date
        const paramstart_date = self.start_date;
        result += @sizeOf(@TypeOf(paramstart_date));
        // end_date
        const paramend_date = self.end_date;
        result += @sizeOf(@TypeOf(paramend_date));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputBusinessGreetingMessage= struct {
    shortcut_id: i32,
    recipients: IInputBusinessRecipients,
    no_activity_days: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // shortcut_id
        const paramshortcut_id = self.shortcut_id;
        result += @sizeOf(@TypeOf(paramshortcut_id));
        // recipients
        const paramrecipients = self.recipients;
        result += paramrecipients.size();

        // no_activity_days
        const paramno_activity_days = self.no_activity_days;
        result += @sizeOf(@TypeOf(paramno_activity_days));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const BusinessGreetingMessage= struct {
    shortcut_id: i32,
    recipients: IBusinessRecipients,
    no_activity_days: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // shortcut_id
        const paramshortcut_id = self.shortcut_id;
        result += @sizeOf(@TypeOf(paramshortcut_id));
        // recipients
        const paramrecipients = self.recipients;
        result += paramrecipients.size();

        // no_activity_days
        const paramno_activity_days = self.no_activity_days;
        result += @sizeOf(@TypeOf(paramno_activity_days));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputBusinessAwayMessage= struct {
    offline_only: ?bool,
    shortcut_id: i32,
    schedule: IBusinessAwayMessageSchedule,
    recipients: IInputBusinessRecipients,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // offline_only
        // true flag

        // shortcut_id
        const paramshortcut_id = self.shortcut_id;
        result += @sizeOf(@TypeOf(paramshortcut_id));
        // schedule
        const paramschedule = self.schedule;
        result += paramschedule.size();

        // recipients
        const paramrecipients = self.recipients;
        result += paramrecipients.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const BusinessAwayMessage= struct {
    offline_only: ?bool,
    shortcut_id: i32,
    schedule: IBusinessAwayMessageSchedule,
    recipients: IBusinessRecipients,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // offline_only
        // true flag

        // shortcut_id
        const paramshortcut_id = self.shortcut_id;
        result += @sizeOf(@TypeOf(paramshortcut_id));
        // schedule
        const paramschedule = self.schedule;
        result += paramschedule.size();

        // recipients
        const paramrecipients = self.recipients;
        result += paramrecipients.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const Timezone= struct {
    id: []const u8,
    name: []const u8,
    utc_offset: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += base.strEncodedSize(paramid);
        // name
        const paramname = self.name;
        result += base.strEncodedSize(paramname);
        // utc_offset
        const paramutc_offset = self.utc_offset;
        result += @sizeOf(@TypeOf(paramutc_offset));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const HelpTimezonesListNotModified= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const HelpTimezonesList= struct {
    timezones: []const ITimezone,
    hash: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // timezones
        const paramtimezones = self.timezones;
        result += 4; // vector id
        result += 4; // vector size
        for (paramtimezones) |paramtimezonesitem| {
        result += paramtimezonesitem.size();
        }

        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const QuickReply= struct {
    shortcut_id: i32,
    shortcut: []const u8,
    top_message: i32,
    count: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // shortcut_id
        const paramshortcut_id = self.shortcut_id;
        result += @sizeOf(@TypeOf(paramshortcut_id));
        // shortcut
        const paramshortcut = self.shortcut;
        result += base.strEncodedSize(paramshortcut);
        // top_message
        const paramtop_message = self.top_message;
        result += @sizeOf(@TypeOf(paramtop_message));
        // count
        const paramcount = self.count;
        result += @sizeOf(@TypeOf(paramcount));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputQuickReplyShortcut= struct {
    shortcut: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // shortcut
        const paramshortcut = self.shortcut;
        result += base.strEncodedSize(paramshortcut);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const InputQuickReplyShortcutId= struct {
    shortcut_id: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // shortcut_id
        const paramshortcut_id = self.shortcut_id;
        result += @sizeOf(@TypeOf(paramshortcut_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MessagesQuickReplies= struct {
    quick_replies: []const IQuickReply,
    messages: []const IMessage,
    chats: []const IChat,
    users: []const IUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // quick_replies
        const paramquick_replies = self.quick_replies;
        result += 4; // vector id
        result += 4; // vector size
        for (paramquick_replies) |paramquick_repliesitem| {
        result += paramquick_repliesitem.size();
        }

        // messages
        const parammessages = self.messages;
        result += 4; // vector id
        result += 4; // vector size
        for (parammessages) |parammessagesitem| {
        result += parammessagesitem.size();
        }

        // chats
        const paramchats = self.chats;
        result += 4; // vector id
        result += 4; // vector size
        for (paramchats) |paramchatsitem| {
        result += paramchatsitem.size();
        }

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesQuickRepliesNotModified= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const ConnectedBot= struct {
    can_reply: ?bool,
    bot_id: i64,
    recipients: IBusinessBotRecipients,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // can_reply
        // true flag

        // bot_id
        const parambot_id = self.bot_id;
        result += @sizeOf(@TypeOf(parambot_id));
        // recipients
        const paramrecipients = self.recipients;
        result += paramrecipients.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AccountConnectedBots= struct {
    connected_bots: []const IConnectedBot,
    users: []const IUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // connected_bots
        const paramconnected_bots = self.connected_bots;
        result += 4; // vector id
        result += 4; // vector size
        for (paramconnected_bots) |paramconnected_botsitem| {
        result += paramconnected_botsitem.size();
        }

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesDialogFilters= struct {
    tags_enabled: ?bool,
    filters: []const IDialogFilter,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // tags_enabled
        // true flag

        // filters
        const paramfilters = self.filters;
        result += 4; // vector id
        result += 4; // vector size
        for (paramfilters) |paramfiltersitem| {
        result += paramfiltersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const Birthday= struct {
    day: i32,
    month: i32,
    year: ?i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // day
        const paramday = self.day;
        result += @sizeOf(@TypeOf(paramday));
        // month
        const parammonth = self.month;
        result += @sizeOf(@TypeOf(parammonth));
        // year
        const paramyear = self.year;
        if (paramyear) |paramyearflag| {
        result += @sizeOf(@TypeOf(paramyearflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const BotBusinessConnection= struct {
    can_reply: ?bool,
    disabled: ?bool,
    connection_id: []const u8,
    user_id: i64,
    dc_id: i32,
    date: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // can_reply
        // true flag

        // disabled
        // true flag

        // connection_id
        const paramconnection_id = self.connection_id;
        result += base.strEncodedSize(paramconnection_id);
        // user_id
        const paramuser_id = self.user_id;
        result += @sizeOf(@TypeOf(paramuser_id));
        // dc_id
        const paramdc_id = self.dc_id;
        result += @sizeOf(@TypeOf(paramdc_id));
        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputBusinessIntro= struct {
    title: []const u8,
    description: []const u8,
    sticker: ?IInputDocument,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // title
        const paramtitle = self.title;
        result += base.strEncodedSize(paramtitle);
        // description
        const paramdescription = self.description;
        result += base.strEncodedSize(paramdescription);
        // sticker
        const paramsticker = self.sticker;
        if (paramsticker) |paramstickerflag| {
        result += paramstickerflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const BusinessIntro= struct {
    title: []const u8,
    description: []const u8,
    sticker: ?IDocument,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // title
        const paramtitle = self.title;
        result += base.strEncodedSize(paramtitle);
        // description
        const paramdescription = self.description;
        result += base.strEncodedSize(paramdescription);
        // sticker
        const paramsticker = self.sticker;
        if (paramsticker) |paramstickerflag| {
        result += paramstickerflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesMyStickers= struct {
    count: i32,
    sets: []const IStickerSetCovered,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // count
        const paramcount = self.count;
        result += @sizeOf(@TypeOf(paramcount));
        // sets
        const paramsets = self.sets;
        result += 4; // vector id
        result += 4; // vector size
        for (paramsets) |paramsetsitem| {
        result += paramsetsitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputCollectibleUsername= struct {
    username: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // username
        const paramusername = self.username;
        result += base.strEncodedSize(paramusername);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const InputCollectiblePhone= struct {
    phone: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // phone
        const paramphone = self.phone;
        result += base.strEncodedSize(paramphone);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const FragmentCollectibleInfo= struct {
    purchase_date: i32,
    currency: []const u8,
    amount: i64,
    crypto_currency: []const u8,
    crypto_amount: i64,
    url: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // purchase_date
        const parampurchase_date = self.purchase_date;
        result += @sizeOf(@TypeOf(parampurchase_date));
        // currency
        const paramcurrency = self.currency;
        result += base.strEncodedSize(paramcurrency);
        // amount
        const paramamount = self.amount;
        result += @sizeOf(@TypeOf(paramamount));
        // crypto_currency
        const paramcrypto_currency = self.crypto_currency;
        result += base.strEncodedSize(paramcrypto_currency);
        // crypto_amount
        const paramcrypto_amount = self.crypto_amount;
        result += @sizeOf(@TypeOf(paramcrypto_amount));
        // url
        const paramurl = self.url;
        result += base.strEncodedSize(paramurl);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputBusinessBotRecipients= struct {
    existing_chats: ?bool,
    new_chats: ?bool,
    contacts: ?bool,
    non_contacts: ?bool,
    exclude_selected: ?bool,
    users: ?[]const IInputUser,
    exclude_users: ?[]const IInputUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // existing_chats
        // true flag

        // new_chats
        // true flag

        // contacts
        // true flag

        // non_contacts
        // true flag

        // exclude_selected
        // true flag

        // users
        const paramusers = self.users;
        if (paramusers) |paramusersflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramusersflag) |paramusersflagitem| {
        result += paramusersflagitem.size();
        }
        }

        // exclude_users
        const paramexclude_users = self.exclude_users;
        if (paramexclude_users) |paramexclude_usersflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramexclude_usersflag) |paramexclude_usersflagitem| {
        result += paramexclude_usersflagitem.size();
        }
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 6;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const BusinessBotRecipients= struct {
    existing_chats: ?bool,
    new_chats: ?bool,
    contacts: ?bool,
    non_contacts: ?bool,
    exclude_selected: ?bool,
    users: ?[]const i64,
    exclude_users: ?[]const i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // existing_chats
        // true flag

        // new_chats
        // true flag

        // contacts
        // true flag

        // non_contacts
        // true flag

        // exclude_selected
        // true flag

        // users
        const paramusers = self.users;
        if (paramusers) |paramusersflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramusersflag) |paramusersflagitem| {
        result += @sizeOf(@TypeOf(paramusersflagitem));        }
        }

        // exclude_users
        const paramexclude_users = self.exclude_users;
        if (paramexclude_users) |paramexclude_usersflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramexclude_usersflag) |paramexclude_usersflagitem| {
        result += @sizeOf(@TypeOf(paramexclude_usersflagitem));        }
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 6;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ContactBirthday= struct {
    contact_id: i64,
    birthday: IBirthday,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // contact_id
        const paramcontact_id = self.contact_id;
        result += @sizeOf(@TypeOf(paramcontact_id));
        // birthday
        const parambirthday = self.birthday;
        result += parambirthday.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ContactsContactBirthdays= struct {
    contacts: []const IContactBirthday,
    users: []const IUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // contacts
        const paramcontacts = self.contacts;
        result += 4; // vector id
        result += 4; // vector size
        for (paramcontacts) |paramcontactsitem| {
        result += paramcontactsitem.size();
        }

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MissingInvitee= struct {
    premium_would_allow_invite: ?bool,
    premium_required_for_pm: ?bool,
    user_id: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // premium_would_allow_invite
        // true flag

        // premium_required_for_pm
        // true flag

        // user_id
        const paramuser_id = self.user_id;
        result += @sizeOf(@TypeOf(paramuser_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesInvitedUsers= struct {
    updates: IUpdates,
    missing_invitees: []const IMissingInvitee,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // updates
        const paramupdates = self.updates;
        result += paramupdates.size();

        // missing_invitees
        const parammissing_invitees = self.missing_invitees;
        result += 4; // vector id
        result += 4; // vector size
        for (parammissing_invitees) |parammissing_inviteesitem| {
        result += parammissing_inviteesitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InputBusinessChatLink= struct {
    message: []const u8,
    entities: ?[]const IMessageEntity,
    title: ?[]const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // message
        const parammessage = self.message;
        result += base.strEncodedSize(parammessage);
        // entities
        const paramentities = self.entities;
        if (paramentities) |paramentitiesflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramentitiesflag) |paramentitiesflagitem| {
        result += paramentitiesflagitem.size();
        }
        }

        // title
        const paramtitle = self.title;
        if (paramtitle) |paramtitleflag| {
        result += base.strEncodedSize(paramtitleflag);        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const BusinessChatLink= struct {
    link: []const u8,
    message: []const u8,
    entities: ?[]const IMessageEntity,
    title: ?[]const u8,
    views: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // link
        const paramlink = self.link;
        result += base.strEncodedSize(paramlink);
        // message
        const parammessage = self.message;
        result += base.strEncodedSize(parammessage);
        // entities
        const paramentities = self.entities;
        if (paramentities) |paramentitiesflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramentitiesflag) |paramentitiesflagitem| {
        result += paramentitiesflagitem.size();
        }
        }

        // title
        const paramtitle = self.title;
        if (paramtitle) |paramtitleflag| {
        result += base.strEncodedSize(paramtitleflag);        }

        // views
        const paramviews = self.views;
        result += @sizeOf(@TypeOf(paramviews));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AccountBusinessChatLinks= struct {
    links: []const IBusinessChatLink,
    chats: []const IChat,
    users: []const IUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // links
        const paramlinks = self.links;
        result += 4; // vector id
        result += 4; // vector size
        for (paramlinks) |paramlinksitem| {
        result += paramlinksitem.size();
        }

        // chats
        const paramchats = self.chats;
        result += 4; // vector id
        result += 4; // vector size
        for (paramchats) |paramchatsitem| {
        result += paramchatsitem.size();
        }

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AccountResolvedBusinessChatLinks= struct {
    peer: IPeer,
    message: []const u8,
    entities: ?[]const IMessageEntity,
    chats: []const IChat,
    users: []const IUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // message
        const parammessage = self.message;
        result += base.strEncodedSize(parammessage);
        // entities
        const paramentities = self.entities;
        if (paramentities) |paramentitiesflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramentitiesflag) |paramentitiesflagitem| {
        result += paramentitiesflagitem.size();
        }
        }

        // chats
        const paramchats = self.chats;
        result += 4; // vector id
        result += 4; // vector size
        for (paramchats) |paramchatsitem| {
        result += paramchatsitem.size();
        }

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const RequestedPeerUser= struct {
    user_id: i64,
    first_name: ?[]const u8,
    last_name: ?[]const u8,
    username: ?[]const u8,
    photo: ?IPhoto,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // user_id
        const paramuser_id = self.user_id;
        result += @sizeOf(@TypeOf(paramuser_id));
        // first_name
        const paramfirst_name = self.first_name;
        if (paramfirst_name) |paramfirst_nameflag| {
        result += base.strEncodedSize(paramfirst_nameflag);        }

        // last_name
        const paramlast_name = self.last_name;
        if (paramlast_name) |paramlast_nameflag| {
        result += base.strEncodedSize(paramlast_nameflag);        }

        // username
        const paramusername = self.username;
        if (paramusername) |paramusernameflag| {
        result += base.strEncodedSize(paramusernameflag);        }

        // photo
        const paramphoto = self.photo;
        if (paramphoto) |paramphotoflag| {
        result += paramphotoflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const RequestedPeerChat= struct {
    chat_id: i64,
    title: ?[]const u8,
    photo: ?IPhoto,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // chat_id
        const paramchat_id = self.chat_id;
        result += @sizeOf(@TypeOf(paramchat_id));
        // title
        const paramtitle = self.title;
        if (paramtitle) |paramtitleflag| {
        result += base.strEncodedSize(paramtitleflag);        }

        // photo
        const paramphoto = self.photo;
        if (paramphoto) |paramphotoflag| {
        result += paramphotoflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const RequestedPeerChannel= struct {
    channel_id: i64,
    title: ?[]const u8,
    username: ?[]const u8,
    photo: ?IPhoto,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // channel_id
        const paramchannel_id = self.channel_id;
        result += @sizeOf(@TypeOf(paramchannel_id));
        // title
        const paramtitle = self.title;
        if (paramtitle) |paramtitleflag| {
        result += base.strEncodedSize(paramtitleflag);        }

        // username
        const paramusername = self.username;
        if (paramusername) |paramusernameflag| {
        result += base.strEncodedSize(paramusernameflag);        }

        // photo
        const paramphoto = self.photo;
        if (paramphoto) |paramphotoflag| {
        result += paramphotoflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const SponsoredMessageReportOption= struct {
    text: []const u8,
    option: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // text
        const paramtext = self.text;
        result += base.strEncodedSize(paramtext);
        // option
        const paramoption = self.option;
        result += base.strEncodedSize(paramoption);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelsSponsoredMessageReportResultChooseOption= struct {
    title: []const u8,
    options: []const ISponsoredMessageReportOption,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // title
        const paramtitle = self.title;
        result += base.strEncodedSize(paramtitle);
        // options
        const paramoptions = self.options;
        result += 4; // vector id
        result += 4; // vector size
        for (paramoptions) |paramoptionsitem| {
        result += paramoptionsitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelsSponsoredMessageReportResultAdsHidden= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const ChannelsSponsoredMessageReportResultReported= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const StatsBroadcastRevenueStats= struct {
    top_hours_graph: IStatsGraph,
    revenue_graph: IStatsGraph,
    balances: IBroadcastRevenueBalances,
    usd_rate: f64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // top_hours_graph
        const paramtop_hours_graph = self.top_hours_graph;
        result += paramtop_hours_graph.size();

        // revenue_graph
        const paramrevenue_graph = self.revenue_graph;
        result += paramrevenue_graph.size();

        // balances
        const parambalances = self.balances;
        result += parambalances.size();

        // usd_rate
        const paramusd_rate = self.usd_rate;
        result += @sizeOf(@TypeOf(paramusd_rate));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StatsBroadcastRevenueWithdrawalUrl= struct {
    url: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // url
        const paramurl = self.url;
        result += base.strEncodedSize(paramurl);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const BroadcastRevenueTransactionProceeds= struct {
    amount: i64,
    from_date: i32,
    to_date: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // amount
        const paramamount = self.amount;
        result += @sizeOf(@TypeOf(paramamount));
        // from_date
        const paramfrom_date = self.from_date;
        result += @sizeOf(@TypeOf(paramfrom_date));
        // to_date
        const paramto_date = self.to_date;
        result += @sizeOf(@TypeOf(paramto_date));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const BroadcastRevenueTransactionWithdrawal= struct {
    pending: ?bool,
    failed: ?bool,
    amount: i64,
    date: i32,
    provider: []const u8,
    transaction_date: ?i32,
    transaction_url: ?[]const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // pending
        // true flag

        // failed
        // true flag

        // amount
        const paramamount = self.amount;
        result += @sizeOf(@TypeOf(paramamount));
        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        // provider
        const paramprovider = self.provider;
        result += base.strEncodedSize(paramprovider);
        // transaction_date
        const paramtransaction_date = self.transaction_date;
        if (paramtransaction_date) |paramtransaction_dateflag| {
        result += @sizeOf(@TypeOf(paramtransaction_dateflag));        }

        // transaction_url
        const paramtransaction_url = self.transaction_url;
        if (paramtransaction_url) |paramtransaction_urlflag| {
        result += base.strEncodedSize(paramtransaction_urlflag);        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const BroadcastRevenueTransactionRefund= struct {
    amount: i64,
    date: i32,
    provider: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // amount
        const paramamount = self.amount;
        result += @sizeOf(@TypeOf(paramamount));
        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        // provider
        const paramprovider = self.provider;
        result += base.strEncodedSize(paramprovider);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StatsBroadcastRevenueTransactions= struct {
    count: i32,
    transactions: []const IBroadcastRevenueTransaction,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // count
        const paramcount = self.count;
        result += @sizeOf(@TypeOf(paramcount));
        // transactions
        const paramtransactions = self.transactions;
        result += 4; // vector id
        result += 4; // vector size
        for (paramtransactions) |paramtransactionsitem| {
        result += paramtransactionsitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ReactionNotificationsFromContacts= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const ReactionNotificationsFromAll= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const ReactionsNotifySettings= struct {
    messages_notify_from: ?IReactionNotificationsFrom,
    stories_notify_from: ?IReactionNotificationsFrom,
    sound: INotificationSound,
    show_previews: bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // messages_notify_from
        const parammessages_notify_from = self.messages_notify_from;
        if (parammessages_notify_from) |parammessages_notify_fromflag| {
        result += parammessages_notify_fromflag.size();
        }

        // stories_notify_from
        const paramstories_notify_from = self.stories_notify_from;
        if (paramstories_notify_from) |paramstories_notify_fromflag| {
        result += paramstories_notify_fromflag.size();
        }

        // sound
        const paramsound = self.sound;
        result += paramsound.size();

        // show_previews
        const paramshow_previews = self.show_previews;
        _ = paramshow_previews;
        result += 4;
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const BroadcastRevenueBalances= struct {
    withdrawal_enabled: ?bool,
    current_balance: i64,
    available_balance: i64,
    overall_revenue: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // withdrawal_enabled
        // true flag

        // current_balance
        const paramcurrent_balance = self.current_balance;
        result += @sizeOf(@TypeOf(paramcurrent_balance));
        // available_balance
        const paramavailable_balance = self.available_balance;
        result += @sizeOf(@TypeOf(paramavailable_balance));
        // overall_revenue
        const paramoverall_revenue = self.overall_revenue;
        result += @sizeOf(@TypeOf(paramoverall_revenue));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AvailableEffect= struct {
    premium_required: ?bool,
    id: i64,
    emoticon: []const u8,
    static_icon_id: ?i64,
    effect_sticker_id: i64,
    effect_animation_id: ?i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // premium_required
        // true flag

        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // emoticon
        const paramemoticon = self.emoticon;
        result += base.strEncodedSize(paramemoticon);
        // static_icon_id
        const paramstatic_icon_id = self.static_icon_id;
        if (paramstatic_icon_id) |paramstatic_icon_idflag| {
        result += @sizeOf(@TypeOf(paramstatic_icon_idflag));        }

        // effect_sticker_id
        const parameffect_sticker_id = self.effect_sticker_id;
        result += @sizeOf(@TypeOf(parameffect_sticker_id));
        // effect_animation_id
        const parameffect_animation_id = self.effect_animation_id;
        if (parameffect_animation_id) |parameffect_animation_idflag| {
        result += @sizeOf(@TypeOf(parameffect_animation_idflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesAvailableEffectsNotModified= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const MessagesAvailableEffects= struct {
    hash: i32,
    effects: []const IAvailableEffect,
    documents: []const IDocument,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        // effects
        const parameffects = self.effects;
        result += 4; // vector id
        result += 4; // vector size
        for (parameffects) |parameffectsitem| {
        result += parameffectsitem.size();
        }

        // documents
        const paramdocuments = self.documents;
        result += 4; // vector id
        result += 4; // vector size
        for (paramdocuments) |paramdocumentsitem| {
        result += paramdocumentsitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const FactCheck= struct {
    need_check: ?bool,
    country: ?[]const u8,
    text: ?ITextWithEntities,
    hash: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // need_check
        // true flag

        // country
        const paramcountry = self.country;
        if (paramcountry) |paramcountryflag| {
        result += base.strEncodedSize(paramcountryflag);        }

        // text
        const paramtext = self.text;
        if (paramtext) |paramtextflag| {
        result += paramtextflag.size();
        }

        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StarsTransactionPeerUnsupported= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const StarsTransactionPeerAppStore= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const StarsTransactionPeerPlayMarket= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const StarsTransactionPeerPremiumBot= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const StarsTransactionPeerFragment= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const StarsTransactionPeer= struct {
    peer: IPeer,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const StarsTransactionPeerAds= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const StarsTopupOption= struct {
    extended: ?bool,
    stars: i64,
    store_product: ?[]const u8,
    currency: []const u8,
    amount: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // extended
        // true flag

        // stars
        const paramstars = self.stars;
        result += @sizeOf(@TypeOf(paramstars));
        // store_product
        const paramstore_product = self.store_product;
        if (paramstore_product) |paramstore_productflag| {
        result += base.strEncodedSize(paramstore_productflag);        }

        // currency
        const paramcurrency = self.currency;
        result += base.strEncodedSize(paramcurrency);
        // amount
        const paramamount = self.amount;
        result += @sizeOf(@TypeOf(paramamount));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StarsTransaction= struct {
    refund: ?bool,
    pending: ?bool,
    failed: ?bool,
    gift: ?bool,
    reaction: ?bool,
    id: []const u8,
    stars: i64,
    date: i32,
    peer: IStarsTransactionPeer,
    title: ?[]const u8,
    description: ?[]const u8,
    photo: ?IWebDocument,
    transaction_date: ?i32,
    transaction_url: ?[]const u8,
    bot_payload: ?[]const u8,
    msg_id: ?i32,
    extended_media: ?[]const IMessageMedia,
    subscription_period: ?i32,
    giveaway_post_id: ?i32,
    stargift: ?IStarGift,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // refund
        // true flag

        // pending
        // true flag

        // failed
        // true flag

        // gift
        // true flag

        // reaction
        // true flag

        // id
        const paramid = self.id;
        result += base.strEncodedSize(paramid);
        // stars
        const paramstars = self.stars;
        result += @sizeOf(@TypeOf(paramstars));
        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // title
        const paramtitle = self.title;
        if (paramtitle) |paramtitleflag| {
        result += base.strEncodedSize(paramtitleflag);        }

        // description
        const paramdescription = self.description;
        if (paramdescription) |paramdescriptionflag| {
        result += base.strEncodedSize(paramdescriptionflag);        }

        // photo
        const paramphoto = self.photo;
        if (paramphoto) |paramphotoflag| {
        result += paramphotoflag.size();
        }

        // transaction_date
        const paramtransaction_date = self.transaction_date;
        if (paramtransaction_date) |paramtransaction_dateflag| {
        result += @sizeOf(@TypeOf(paramtransaction_dateflag));        }

        // transaction_url
        const paramtransaction_url = self.transaction_url;
        if (paramtransaction_url) |paramtransaction_urlflag| {
        result += base.strEncodedSize(paramtransaction_urlflag);        }

        // bot_payload
        const parambot_payload = self.bot_payload;
        if (parambot_payload) |parambot_payloadflag| {
        result += base.strEncodedSize(parambot_payloadflag);        }

        // msg_id
        const parammsg_id = self.msg_id;
        if (parammsg_id) |parammsg_idflag| {
        result += @sizeOf(@TypeOf(parammsg_idflag));        }

        // extended_media
        const paramextended_media = self.extended_media;
        if (paramextended_media) |paramextended_mediaflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramextended_mediaflag) |paramextended_mediaflagitem| {
        result += paramextended_mediaflagitem.size();
        }
        }

        // subscription_period
        const paramsubscription_period = self.subscription_period;
        if (paramsubscription_period) |paramsubscription_periodflag| {
        result += @sizeOf(@TypeOf(paramsubscription_periodflag));        }

        // giveaway_post_id
        const paramgiveaway_post_id = self.giveaway_post_id;
        if (paramgiveaway_post_id) |paramgiveaway_post_idflag| {
        result += @sizeOf(@TypeOf(paramgiveaway_post_idflag));        }

        // stargift
        const paramstargift = self.stargift;
        if (paramstargift) |paramstargiftflag| {
        result += paramstargiftflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 6;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 10;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 11;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 7;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 8;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 9;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 12;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 13;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 14;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PaymentsStarsStatus= struct {
    balance: i64,
    subscriptions: ?[]const IStarsSubscription,
    subscriptions_next_offset: ?[]const u8,
    subscriptions_missing_balance: ?i64,
    history: ?[]const IStarsTransaction,
    next_offset: ?[]const u8,
    chats: []const IChat,
    users: []const IUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // balance
        const parambalance = self.balance;
        result += @sizeOf(@TypeOf(parambalance));
        // subscriptions
        const paramsubscriptions = self.subscriptions;
        if (paramsubscriptions) |paramsubscriptionsflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramsubscriptionsflag) |paramsubscriptionsflagitem| {
        result += paramsubscriptionsflagitem.size();
        }
        }

        // subscriptions_next_offset
        const paramsubscriptions_next_offset = self.subscriptions_next_offset;
        if (paramsubscriptions_next_offset) |paramsubscriptions_next_offsetflag| {
        result += base.strEncodedSize(paramsubscriptions_next_offsetflag);        }

        // subscriptions_missing_balance
        const paramsubscriptions_missing_balance = self.subscriptions_missing_balance;
        if (paramsubscriptions_missing_balance) |paramsubscriptions_missing_balanceflag| {
        result += @sizeOf(@TypeOf(paramsubscriptions_missing_balanceflag));        }

        // history
        const paramhistory = self.history;
        if (paramhistory) |paramhistoryflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramhistoryflag) |paramhistoryflagitem| {
        result += paramhistoryflagitem.size();
        }
        }

        // next_offset
        const paramnext_offset = self.next_offset;
        if (paramnext_offset) |paramnext_offsetflag| {
        result += base.strEncodedSize(paramnext_offsetflag);        }

        // chats
        const paramchats = self.chats;
        result += 4; // vector id
        result += 4; // vector size
        for (paramchats) |paramchatsitem| {
        result += paramchatsitem.size();
        }

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const FoundStory= struct {
    peer: IPeer,
    story: IStoryItem,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // story
        const paramstory = self.story;
        result += paramstory.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StoriesFoundStories= struct {
    count: i32,
    stories: []const IFoundStory,
    next_offset: ?[]const u8,
    chats: []const IChat,
    users: []const IUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // count
        const paramcount = self.count;
        result += @sizeOf(@TypeOf(paramcount));
        // stories
        const paramstories = self.stories;
        result += 4; // vector id
        result += 4; // vector size
        for (paramstories) |paramstoriesitem| {
        result += paramstoriesitem.size();
        }

        // next_offset
        const paramnext_offset = self.next_offset;
        if (paramnext_offset) |paramnext_offsetflag| {
        result += base.strEncodedSize(paramnext_offsetflag);        }

        // chats
        const paramchats = self.chats;
        result += 4; // vector id
        result += 4; // vector size
        for (paramchats) |paramchatsitem| {
        result += paramchatsitem.size();
        }

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const GeoPointAddress= struct {
    country_iso2: []const u8,
    state: ?[]const u8,
    city: ?[]const u8,
    street: ?[]const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // country_iso2
        const paramcountry_iso2 = self.country_iso2;
        result += base.strEncodedSize(paramcountry_iso2);
        // state
        const paramstate = self.state;
        if (paramstate) |paramstateflag| {
        result += base.strEncodedSize(paramstateflag);        }

        // city
        const paramcity = self.city;
        if (paramcity) |paramcityflag| {
        result += base.strEncodedSize(paramcityflag);        }

        // street
        const paramstreet = self.street;
        if (paramstreet) |paramstreetflag| {
        result += base.strEncodedSize(paramstreetflag);        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StarsRevenueStatus= struct {
    withdrawal_enabled: ?bool,
    current_balance: i64,
    available_balance: i64,
    overall_revenue: i64,
    next_withdrawal_at: ?i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // withdrawal_enabled
        // true flag

        // current_balance
        const paramcurrent_balance = self.current_balance;
        result += @sizeOf(@TypeOf(paramcurrent_balance));
        // available_balance
        const paramavailable_balance = self.available_balance;
        result += @sizeOf(@TypeOf(paramavailable_balance));
        // overall_revenue
        const paramoverall_revenue = self.overall_revenue;
        result += @sizeOf(@TypeOf(paramoverall_revenue));
        // next_withdrawal_at
        const paramnext_withdrawal_at = self.next_withdrawal_at;
        if (paramnext_withdrawal_at) |paramnext_withdrawal_atflag| {
        result += @sizeOf(@TypeOf(paramnext_withdrawal_atflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PaymentsStarsRevenueStats= struct {
    revenue_graph: IStatsGraph,
    status: IStarsRevenueStatus,
    usd_rate: f64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // revenue_graph
        const paramrevenue_graph = self.revenue_graph;
        result += paramrevenue_graph.size();

        // status
        const paramstatus = self.status;
        result += paramstatus.size();

        // usd_rate
        const paramusd_rate = self.usd_rate;
        result += @sizeOf(@TypeOf(paramusd_rate));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PaymentsStarsRevenueWithdrawalUrl= struct {
    url: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // url
        const paramurl = self.url;
        result += base.strEncodedSize(paramurl);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const PaymentsStarsRevenueAdsAccountUrl= struct {
    url: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // url
        const paramurl = self.url;
        result += base.strEncodedSize(paramurl);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const InputStarsTransaction= struct {
    refund: ?bool,
    id: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // refund
        // true flag

        // id
        const paramid = self.id;
        result += base.strEncodedSize(paramid);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StarsGiftOption= struct {
    extended: ?bool,
    stars: i64,
    store_product: ?[]const u8,
    currency: []const u8,
    amount: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // extended
        // true flag

        // stars
        const paramstars = self.stars;
        result += @sizeOf(@TypeOf(paramstars));
        // store_product
        const paramstore_product = self.store_product;
        if (paramstore_product) |paramstore_productflag| {
        result += base.strEncodedSize(paramstore_productflag);        }

        // currency
        const paramcurrency = self.currency;
        result += base.strEncodedSize(paramcurrency);
        // amount
        const paramamount = self.amount;
        result += @sizeOf(@TypeOf(paramamount));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const BotsPopularAppBots= struct {
    next_offset: ?[]const u8,
    users: []const IUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // next_offset
        const paramnext_offset = self.next_offset;
        if (paramnext_offset) |paramnext_offsetflag| {
        result += base.strEncodedSize(paramnext_offsetflag);        }

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const BotPreviewMedia= struct {
    date: i32,
    media: IMessageMedia,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        // media
        const parammedia = self.media;
        result += parammedia.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const BotsPreviewInfo= struct {
    media: []const IBotPreviewMedia,
    lang_codes: []const []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // media
        const parammedia = self.media;
        result += 4; // vector id
        result += 4; // vector size
        for (parammedia) |parammediaitem| {
        result += parammediaitem.size();
        }

        // lang_codes
        const paramlang_codes = self.lang_codes;
        result += 4; // vector id
        result += 4; // vector size
        for (paramlang_codes) |paramlang_codesitem| {
        result += base.strEncodedSize(paramlang_codesitem);        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StarsSubscriptionPricing= struct {
    period: i32,
    amount: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // period
        const paramperiod = self.period;
        result += @sizeOf(@TypeOf(paramperiod));
        // amount
        const paramamount = self.amount;
        result += @sizeOf(@TypeOf(paramamount));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StarsSubscription= struct {
    canceled: ?bool,
    can_refulfill: ?bool,
    missing_balance: ?bool,
    id: []const u8,
    peer: IPeer,
    until_date: i32,
    pricing: IStarsSubscriptionPricing,
    chat_invite_hash: ?[]const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // canceled
        // true flag

        // can_refulfill
        // true flag

        // missing_balance
        // true flag

        // id
        const paramid = self.id;
        result += base.strEncodedSize(paramid);
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // until_date
        const paramuntil_date = self.until_date;
        result += @sizeOf(@TypeOf(paramuntil_date));
        // pricing
        const parampricing = self.pricing;
        result += parampricing.size();

        // chat_invite_hash
        const paramchat_invite_hash = self.chat_invite_hash;
        if (paramchat_invite_hash) |paramchat_invite_hashflag| {
        result += base.strEncodedSize(paramchat_invite_hashflag);        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessageReactor= struct {
    top: ?bool,
    my: ?bool,
    anonymous: ?bool,
    peer_id: ?IPeer,
    count: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // top
        // true flag

        // my
        // true flag

        // anonymous
        // true flag

        // peer_id
        const parampeer_id = self.peer_id;
        if (parampeer_id) |parampeer_idflag| {
        result += parampeer_idflag.size();
        }

        // count
        const paramcount = self.count;
        result += @sizeOf(@TypeOf(paramcount));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StarsGiveawayOption= struct {
    extended: ?bool,
    default: ?bool,
    stars: i64,
    yearly_boosts: i32,
    store_product: ?[]const u8,
    currency: []const u8,
    amount: i64,
    winners: []const IStarsGiveawayWinnersOption,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // extended
        // true flag

        // default
        // true flag

        // stars
        const paramstars = self.stars;
        result += @sizeOf(@TypeOf(paramstars));
        // yearly_boosts
        const paramyearly_boosts = self.yearly_boosts;
        result += @sizeOf(@TypeOf(paramyearly_boosts));
        // store_product
        const paramstore_product = self.store_product;
        if (paramstore_product) |paramstore_productflag| {
        result += base.strEncodedSize(paramstore_productflag);        }

        // currency
        const paramcurrency = self.currency;
        result += base.strEncodedSize(paramcurrency);
        // amount
        const paramamount = self.amount;
        result += @sizeOf(@TypeOf(paramamount));
        // winners
        const paramwinners = self.winners;
        result += 4; // vector id
        result += 4; // vector size
        for (paramwinners) |paramwinnersitem| {
        result += paramwinnersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StarsGiveawayWinnersOption= struct {
    default: ?bool,
    users: i32,
    per_user_stars: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // default
        // true flag

        // users
        const paramusers = self.users;
        result += @sizeOf(@TypeOf(paramusers));
        // per_user_stars
        const paramper_user_stars = self.per_user_stars;
        result += @sizeOf(@TypeOf(paramper_user_stars));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StarGift= struct {
    limited: ?bool,
    id: i64,
    sticker: IDocument,
    stars: i64,
    availability_remains: ?i32,
    availability_total: ?i32,
    convert_stars: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // limited
        // true flag

        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // sticker
        const paramsticker = self.sticker;
        result += paramsticker.size();

        // stars
        const paramstars = self.stars;
        result += @sizeOf(@TypeOf(paramstars));
        // availability_remains
        const paramavailability_remains = self.availability_remains;
        if (paramavailability_remains) |paramavailability_remainsflag| {
        result += @sizeOf(@TypeOf(paramavailability_remainsflag));        }

        // availability_total
        const paramavailability_total = self.availability_total;
        if (paramavailability_total) |paramavailability_totalflag| {
        result += @sizeOf(@TypeOf(paramavailability_totalflag));        }

        // convert_stars
        const paramconvert_stars = self.convert_stars;
        result += @sizeOf(@TypeOf(paramconvert_stars));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PaymentsStarGiftsNotModified= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const PaymentsStarGifts= struct {
    hash: i32,
    gifts: []const IStarGift,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        // gifts
        const paramgifts = self.gifts;
        result += 4; // vector id
        result += 4; // vector size
        for (paramgifts) |paramgiftsitem| {
        result += paramgiftsitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UserStarGift= struct {
    name_hidden: ?bool,
    unsaved: ?bool,
    from_id: ?i64,
    date: i32,
    gift: IStarGift,
    message: ?ITextWithEntities,
    msg_id: ?i32,
    convert_stars: ?i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // name_hidden
        // true flag

        // unsaved
        // true flag

        // from_id
        const paramfrom_id = self.from_id;
        if (paramfrom_id) |paramfrom_idflag| {
        result += @sizeOf(@TypeOf(paramfrom_idflag));        }

        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        // gift
        const paramgift = self.gift;
        result += paramgift.size();

        // message
        const parammessage = self.message;
        if (parammessage) |parammessageflag| {
        result += parammessageflag.size();
        }

        // msg_id
        const parammsg_id = self.msg_id;
        if (parammsg_id) |parammsg_idflag| {
        result += @sizeOf(@TypeOf(parammsg_idflag));        }

        // convert_stars
        const paramconvert_stars = self.convert_stars;
        if (paramconvert_stars) |paramconvert_starsflag| {
        result += @sizeOf(@TypeOf(paramconvert_starsflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PaymentsUserStarGifts= struct {
    count: i32,
    gifts: []const IUserStarGift,
    next_offset: ?[]const u8,
    users: []const IUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // count
        const paramcount = self.count;
        result += @sizeOf(@TypeOf(paramcount));
        // gifts
        const paramgifts = self.gifts;
        result += 4; // vector id
        result += 4; // vector size
        for (paramgifts) |paramgiftsitem| {
        result += paramgiftsitem.size();
        }

        // next_offset
        const paramnext_offset = self.next_offset;
        if (paramnext_offset) |paramnext_offsetflag| {
        result += base.strEncodedSize(paramnext_offsetflag);        }

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessageReportOption= struct {
    text: []const u8,
    option: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // text
        const paramtext = self.text;
        result += base.strEncodedSize(paramtext);
        // option
        const paramoption = self.option;
        result += base.strEncodedSize(paramoption);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ReportResultChooseOption= struct {
    title: []const u8,
    options: []const IMessageReportOption,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // title
        const paramtitle = self.title;
        result += base.strEncodedSize(paramtitle);
        // options
        const paramoptions = self.options;
        result += 4; // vector id
        result += 4; // vector size
        for (paramoptions) |paramoptionsitem| {
        result += paramoptionsitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ReportResultAddComment= struct {
    optional: ?bool,
    option: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // optional
        // true flag

        // option
        const paramoption = self.option;
        result += base.strEncodedSize(paramoption);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ReportResultReported= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const InvokeAfterMsgs= struct {
    msg_ids: []const i64,
    query: *const TL,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // msg_ids
        const parammsg_ids = self.msg_ids;
        result += 4; // vector id
        result += 4; // vector size
        for (parammsg_ids) |parammsg_idsitem| {
        result += @sizeOf(@TypeOf(parammsg_idsitem));        }

        // query
        const paramquery = self.query;
        result += paramquery.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InitConnection= struct {
    api_id: i32,
    device_model: []const u8,
    system_version: []const u8,
    app_version: []const u8,
    system_lang_code: []const u8,
    lang_pack: []const u8,
    lang_code: []const u8,
    proxy: ?IInputClientProxy,
    params: ?IJSONValue,
    query: *const TL,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // api_id
        const paramapi_id = self.api_id;
        result += @sizeOf(@TypeOf(paramapi_id));
        // device_model
        const paramdevice_model = self.device_model;
        result += base.strEncodedSize(paramdevice_model);
        // system_version
        const paramsystem_version = self.system_version;
        result += base.strEncodedSize(paramsystem_version);
        // app_version
        const paramapp_version = self.app_version;
        result += base.strEncodedSize(paramapp_version);
        // system_lang_code
        const paramsystem_lang_code = self.system_lang_code;
        result += base.strEncodedSize(paramsystem_lang_code);
        // lang_pack
        const paramlang_pack = self.lang_pack;
        result += base.strEncodedSize(paramlang_pack);
        // lang_code
        const paramlang_code = self.lang_code;
        result += base.strEncodedSize(paramlang_code);
        // proxy
        const paramproxy = self.proxy;
        if (paramproxy) |paramproxyflag| {
        result += paramproxyflag.size();
        }

        // params
        const paramparams = self.params;
        if (paramparams) |paramparamsflag| {
        result += paramparamsflag.size();
        }

        // query
        const paramquery = self.query;
        result += paramquery.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InvokeWithLayer= struct {
    layer: i32,
    query: *const TL,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // layer
        const paramlayer = self.layer;
        result += @sizeOf(@TypeOf(paramlayer));
        // query
        const paramquery = self.query;
        result += paramquery.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InvokeWithoutUpdates= struct {
    query: *const TL,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // query
        const paramquery = self.query;
        result += paramquery.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const InvokeWithMessagesRange= struct {
    range: IMessageRange,
    query: *const TL,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // range
        const paramrange = self.range;
        result += paramrange.size();

        // query
        const paramquery = self.query;
        result += paramquery.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InvokeWithTakeout= struct {
    takeout_id: i64,
    query: *const TL,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // takeout_id
        const paramtakeout_id = self.takeout_id;
        result += @sizeOf(@TypeOf(paramtakeout_id));
        // query
        const paramquery = self.query;
        result += paramquery.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InvokeWithBusinessConnection= struct {
    connection_id: []const u8,
    query: *const TL,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // connection_id
        const paramconnection_id = self.connection_id;
        result += base.strEncodedSize(paramconnection_id);
        // query
        const paramquery = self.query;
        result += paramquery.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InvokeWithGooglePlayIntegrity= struct {
    nonce: []const u8,
    token: []const u8,
    query: *const TL,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // nonce
        const paramnonce = self.nonce;
        result += base.strEncodedSize(paramnonce);
        // token
        const paramtoken = self.token;
        result += base.strEncodedSize(paramtoken);
        // query
        const paramquery = self.query;
        result += paramquery.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const InvokeWithApnsSecret= struct {
    nonce: []const u8,
    secret: []const u8,
    query: *const TL,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // nonce
        const paramnonce = self.nonce;
        result += base.strEncodedSize(paramnonce);
        // secret
        const paramsecret = self.secret;
        result += base.strEncodedSize(paramsecret);
        // query
        const paramquery = self.query;
        result += paramquery.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AuthSendCode= struct {
    phone_number: []const u8,
    api_id: i32,
    api_hash: []const u8,
    settings: ICodeSettings,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // phone_number
        const paramphone_number = self.phone_number;
        result += base.strEncodedSize(paramphone_number);
        // api_id
        const paramapi_id = self.api_id;
        result += @sizeOf(@TypeOf(paramapi_id));
        // api_hash
        const paramapi_hash = self.api_hash;
        result += base.strEncodedSize(paramapi_hash);
        // settings
        const paramsettings = self.settings;
        result += paramsettings.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AuthSignUp= struct {
    no_joined_notifications: ?bool,
    phone_number: []const u8,
    phone_code_hash: []const u8,
    first_name: []const u8,
    last_name: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // no_joined_notifications
        // true flag

        // phone_number
        const paramphone_number = self.phone_number;
        result += base.strEncodedSize(paramphone_number);
        // phone_code_hash
        const paramphone_code_hash = self.phone_code_hash;
        result += base.strEncodedSize(paramphone_code_hash);
        // first_name
        const paramfirst_name = self.first_name;
        result += base.strEncodedSize(paramfirst_name);
        // last_name
        const paramlast_name = self.last_name;
        result += base.strEncodedSize(paramlast_name);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AuthSignIn= struct {
    phone_number: []const u8,
    phone_code_hash: []const u8,
    phone_code: ?[]const u8,
    email_verification: ?IEmailVerification,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // phone_number
        const paramphone_number = self.phone_number;
        result += base.strEncodedSize(paramphone_number);
        // phone_code_hash
        const paramphone_code_hash = self.phone_code_hash;
        result += base.strEncodedSize(paramphone_code_hash);
        // phone_code
        const paramphone_code = self.phone_code;
        if (paramphone_code) |paramphone_codeflag| {
        result += base.strEncodedSize(paramphone_codeflag);        }

        // email_verification
        const paramemail_verification = self.email_verification;
        if (paramemail_verification) |paramemail_verificationflag| {
        result += paramemail_verificationflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AuthLogOut= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const AuthResetAuthorizations= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const AuthExportAuthorization= struct {
    dc_id: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // dc_id
        const paramdc_id = self.dc_id;
        result += @sizeOf(@TypeOf(paramdc_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const AuthImportAuthorization= struct {
    id: i64,
    bytes: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // bytes
        const parambytes = self.bytes;
        result += base.strEncodedSize(parambytes);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AuthBindTempAuthKey= struct {
    perm_auth_key_id: i64,
    nonce: i64,
    expires_at: i32,
    encrypted_message: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // perm_auth_key_id
        const paramperm_auth_key_id = self.perm_auth_key_id;
        result += @sizeOf(@TypeOf(paramperm_auth_key_id));
        // nonce
        const paramnonce = self.nonce;
        result += @sizeOf(@TypeOf(paramnonce));
        // expires_at
        const paramexpires_at = self.expires_at;
        result += @sizeOf(@TypeOf(paramexpires_at));
        // encrypted_message
        const paramencrypted_message = self.encrypted_message;
        result += base.strEncodedSize(paramencrypted_message);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AuthImportBotAuthorization= struct {
    flags: i32,
    api_id: i32,
    api_hash: []const u8,
    bot_auth_token: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        const paramflags = self.flags;
        result += @sizeOf(@TypeOf(paramflags));
        // api_id
        const paramapi_id = self.api_id;
        result += @sizeOf(@TypeOf(paramapi_id));
        // api_hash
        const paramapi_hash = self.api_hash;
        result += base.strEncodedSize(paramapi_hash);
        // bot_auth_token
        const parambot_auth_token = self.bot_auth_token;
        result += base.strEncodedSize(parambot_auth_token);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AuthCheckPassword= struct {
    password: IInputCheckPasswordSRP,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // password
        const parampassword = self.password;
        result += parampassword.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const AuthRequestPasswordRecovery= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const AuthRecoverPassword= struct {
    code: []const u8,
    new_settings: ?IAccountPasswordInputSettings,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // code
        const paramcode = self.code;
        result += base.strEncodedSize(paramcode);
        // new_settings
        const paramnew_settings = self.new_settings;
        if (paramnew_settings) |paramnew_settingsflag| {
        result += paramnew_settingsflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AuthResendCode= struct {
    phone_number: []const u8,
    phone_code_hash: []const u8,
    reason: ?[]const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // phone_number
        const paramphone_number = self.phone_number;
        result += base.strEncodedSize(paramphone_number);
        // phone_code_hash
        const paramphone_code_hash = self.phone_code_hash;
        result += base.strEncodedSize(paramphone_code_hash);
        // reason
        const paramreason = self.reason;
        if (paramreason) |paramreasonflag| {
        result += base.strEncodedSize(paramreasonflag);        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AuthCancelCode= struct {
    phone_number: []const u8,
    phone_code_hash: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // phone_number
        const paramphone_number = self.phone_number;
        result += base.strEncodedSize(paramphone_number);
        // phone_code_hash
        const paramphone_code_hash = self.phone_code_hash;
        result += base.strEncodedSize(paramphone_code_hash);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AuthDropTempAuthKeys= struct {
    except_auth_keys: []const i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // except_auth_keys
        const paramexcept_auth_keys = self.except_auth_keys;
        result += 4; // vector id
        result += 4; // vector size
        for (paramexcept_auth_keys) |paramexcept_auth_keysitem| {
        result += @sizeOf(@TypeOf(paramexcept_auth_keysitem));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const AuthExportLoginToken= struct {
    api_id: i32,
    api_hash: []const u8,
    except_ids: []const i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // api_id
        const paramapi_id = self.api_id;
        result += @sizeOf(@TypeOf(paramapi_id));
        // api_hash
        const paramapi_hash = self.api_hash;
        result += base.strEncodedSize(paramapi_hash);
        // except_ids
        const paramexcept_ids = self.except_ids;
        result += 4; // vector id
        result += 4; // vector size
        for (paramexcept_ids) |paramexcept_idsitem| {
        result += @sizeOf(@TypeOf(paramexcept_idsitem));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AuthImportLoginToken= struct {
    token: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // token
        const paramtoken = self.token;
        result += base.strEncodedSize(paramtoken);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const AuthAcceptLoginToken= struct {
    token: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // token
        const paramtoken = self.token;
        result += base.strEncodedSize(paramtoken);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const AuthCheckRecoveryPassword= struct {
    code: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // code
        const paramcode = self.code;
        result += base.strEncodedSize(paramcode);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const AuthImportWebTokenAuthorization= struct {
    api_id: i32,
    api_hash: []const u8,
    web_auth_token: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // api_id
        const paramapi_id = self.api_id;
        result += @sizeOf(@TypeOf(paramapi_id));
        // api_hash
        const paramapi_hash = self.api_hash;
        result += base.strEncodedSize(paramapi_hash);
        // web_auth_token
        const paramweb_auth_token = self.web_auth_token;
        result += base.strEncodedSize(paramweb_auth_token);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AuthRequestFirebaseSms= struct {
    phone_number: []const u8,
    phone_code_hash: []const u8,
    safety_net_token: ?[]const u8,
    play_integrity_token: ?[]const u8,
    ios_push_secret: ?[]const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // phone_number
        const paramphone_number = self.phone_number;
        result += base.strEncodedSize(paramphone_number);
        // phone_code_hash
        const paramphone_code_hash = self.phone_code_hash;
        result += base.strEncodedSize(paramphone_code_hash);
        // safety_net_token
        const paramsafety_net_token = self.safety_net_token;
        if (paramsafety_net_token) |paramsafety_net_tokenflag| {
        result += base.strEncodedSize(paramsafety_net_tokenflag);        }

        // play_integrity_token
        const paramplay_integrity_token = self.play_integrity_token;
        if (paramplay_integrity_token) |paramplay_integrity_tokenflag| {
        result += base.strEncodedSize(paramplay_integrity_tokenflag);        }

        // ios_push_secret
        const paramios_push_secret = self.ios_push_secret;
        if (paramios_push_secret) |paramios_push_secretflag| {
        result += base.strEncodedSize(paramios_push_secretflag);        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AuthResetLoginEmail= struct {
    phone_number: []const u8,
    phone_code_hash: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // phone_number
        const paramphone_number = self.phone_number;
        result += base.strEncodedSize(paramphone_number);
        // phone_code_hash
        const paramphone_code_hash = self.phone_code_hash;
        result += base.strEncodedSize(paramphone_code_hash);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AuthReportMissingCode= struct {
    phone_number: []const u8,
    phone_code_hash: []const u8,
    mnc: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // phone_number
        const paramphone_number = self.phone_number;
        result += base.strEncodedSize(paramphone_number);
        // phone_code_hash
        const paramphone_code_hash = self.phone_code_hash;
        result += base.strEncodedSize(paramphone_code_hash);
        // mnc
        const parammnc = self.mnc;
        result += base.strEncodedSize(parammnc);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AccountRegisterDevice= struct {
    no_muted: ?bool,
    token_type: i32,
    token: []const u8,
    app_sandbox: bool,
    secret: []const u8,
    other_uids: []const i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // no_muted
        // true flag

        // token_type
        const paramtoken_type = self.token_type;
        result += @sizeOf(@TypeOf(paramtoken_type));
        // token
        const paramtoken = self.token;
        result += base.strEncodedSize(paramtoken);
        // app_sandbox
        const paramapp_sandbox = self.app_sandbox;
        _ = paramapp_sandbox;
        result += 4;
        // secret
        const paramsecret = self.secret;
        result += base.strEncodedSize(paramsecret);
        // other_uids
        const paramother_uids = self.other_uids;
        result += 4; // vector id
        result += 4; // vector size
        for (paramother_uids) |paramother_uidsitem| {
        result += @sizeOf(@TypeOf(paramother_uidsitem));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AccountUnregisterDevice= struct {
    token_type: i32,
    token: []const u8,
    other_uids: []const i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // token_type
        const paramtoken_type = self.token_type;
        result += @sizeOf(@TypeOf(paramtoken_type));
        // token
        const paramtoken = self.token;
        result += base.strEncodedSize(paramtoken);
        // other_uids
        const paramother_uids = self.other_uids;
        result += 4; // vector id
        result += 4; // vector size
        for (paramother_uids) |paramother_uidsitem| {
        result += @sizeOf(@TypeOf(paramother_uidsitem));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AccountUpdateNotifySettings= struct {
    peer: IInputNotifyPeer,
    settings: IInputPeerNotifySettings,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // settings
        const paramsettings = self.settings;
        result += paramsettings.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AccountGetNotifySettings= struct {
    peer: IInputNotifyPeer,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const AccountResetNotifySettings= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const AccountUpdateProfile= struct {
    first_name: ?[]const u8,
    last_name: ?[]const u8,
    about: ?[]const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // first_name
        const paramfirst_name = self.first_name;
        if (paramfirst_name) |paramfirst_nameflag| {
        result += base.strEncodedSize(paramfirst_nameflag);        }

        // last_name
        const paramlast_name = self.last_name;
        if (paramlast_name) |paramlast_nameflag| {
        result += base.strEncodedSize(paramlast_nameflag);        }

        // about
        const paramabout = self.about;
        if (paramabout) |paramaboutflag| {
        result += base.strEncodedSize(paramaboutflag);        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AccountUpdateStatus= struct {
    offline: bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // offline
        const paramoffline = self.offline;
        _ = paramoffline;
        result += 4;
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const AccountGetWallPapers= struct {
    hash: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const AccountReportPeer= struct {
    peer: IInputPeer,
    reason: IReportReason,
    message: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // reason
        const paramreason = self.reason;
        result += paramreason.size();

        // message
        const parammessage = self.message;
        result += base.strEncodedSize(parammessage);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AccountCheckUsername= struct {
    username: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // username
        const paramusername = self.username;
        result += base.strEncodedSize(paramusername);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const AccountUpdateUsername= struct {
    username: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // username
        const paramusername = self.username;
        result += base.strEncodedSize(paramusername);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const AccountGetPrivacy= struct {
    key: IInputPrivacyKey,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // key
        const paramkey = self.key;
        result += paramkey.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const AccountSetPrivacy= struct {
    key: IInputPrivacyKey,
    rules: []const IInputPrivacyRule,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // key
        const paramkey = self.key;
        result += paramkey.size();

        // rules
        const paramrules = self.rules;
        result += 4; // vector id
        result += 4; // vector size
        for (paramrules) |paramrulesitem| {
        result += paramrulesitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AccountDeleteAccount= struct {
    reason: []const u8,
    password: ?IInputCheckPasswordSRP,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // reason
        const paramreason = self.reason;
        result += base.strEncodedSize(paramreason);
        // password
        const parampassword = self.password;
        if (parampassword) |parampasswordflag| {
        result += parampasswordflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AccountGetAccountTTL= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const AccountSetAccountTTL= struct {
    ttl: IAccountDaysTTL,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // ttl
        const paramttl = self.ttl;
        result += paramttl.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const AccountSendChangePhoneCode= struct {
    phone_number: []const u8,
    settings: ICodeSettings,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // phone_number
        const paramphone_number = self.phone_number;
        result += base.strEncodedSize(paramphone_number);
        // settings
        const paramsettings = self.settings;
        result += paramsettings.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AccountChangePhone= struct {
    phone_number: []const u8,
    phone_code_hash: []const u8,
    phone_code: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // phone_number
        const paramphone_number = self.phone_number;
        result += base.strEncodedSize(paramphone_number);
        // phone_code_hash
        const paramphone_code_hash = self.phone_code_hash;
        result += base.strEncodedSize(paramphone_code_hash);
        // phone_code
        const paramphone_code = self.phone_code;
        result += base.strEncodedSize(paramphone_code);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AccountUpdateDeviceLocked= struct {
    period: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // period
        const paramperiod = self.period;
        result += @sizeOf(@TypeOf(paramperiod));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const AccountGetAuthorizations= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const AccountResetAuthorization= struct {
    hash: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const AccountGetPassword= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const AccountGetPasswordSettings= struct {
    password: IInputCheckPasswordSRP,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // password
        const parampassword = self.password;
        result += parampassword.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const AccountUpdatePasswordSettings= struct {
    password: IInputCheckPasswordSRP,
    new_settings: IAccountPasswordInputSettings,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // password
        const parampassword = self.password;
        result += parampassword.size();

        // new_settings
        const paramnew_settings = self.new_settings;
        result += paramnew_settings.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AccountSendConfirmPhoneCode= struct {
    hash: []const u8,
    settings: ICodeSettings,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // hash
        const paramhash = self.hash;
        result += base.strEncodedSize(paramhash);
        // settings
        const paramsettings = self.settings;
        result += paramsettings.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AccountConfirmPhone= struct {
    phone_code_hash: []const u8,
    phone_code: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // phone_code_hash
        const paramphone_code_hash = self.phone_code_hash;
        result += base.strEncodedSize(paramphone_code_hash);
        // phone_code
        const paramphone_code = self.phone_code;
        result += base.strEncodedSize(paramphone_code);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AccountGetTmpPassword= struct {
    password: IInputCheckPasswordSRP,
    period: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // password
        const parampassword = self.password;
        result += parampassword.size();

        // period
        const paramperiod = self.period;
        result += @sizeOf(@TypeOf(paramperiod));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AccountGetWebAuthorizations= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const AccountResetWebAuthorization= struct {
    hash: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const AccountResetWebAuthorizations= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const AccountGetAllSecureValues= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const AccountGetSecureValue= struct {
    types: []const ISecureValueType,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // types
        const paramtypes = self.types;
        result += 4; // vector id
        result += 4; // vector size
        for (paramtypes) |paramtypesitem| {
        result += paramtypesitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const AccountSaveSecureValue= struct {
    value: IInputSecureValue,
    secure_secret_id: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // value
        const paramvalue = self.value;
        result += paramvalue.size();

        // secure_secret_id
        const paramsecure_secret_id = self.secure_secret_id;
        result += @sizeOf(@TypeOf(paramsecure_secret_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AccountDeleteSecureValue= struct {
    types: []const ISecureValueType,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // types
        const paramtypes = self.types;
        result += 4; // vector id
        result += 4; // vector size
        for (paramtypes) |paramtypesitem| {
        result += paramtypesitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const AccountGetAuthorizationForm= struct {
    bot_id: i64,
    scope: []const u8,
    public_key: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // bot_id
        const parambot_id = self.bot_id;
        result += @sizeOf(@TypeOf(parambot_id));
        // scope
        const paramscope = self.scope;
        result += base.strEncodedSize(paramscope);
        // public_key
        const parampublic_key = self.public_key;
        result += base.strEncodedSize(parampublic_key);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AccountAcceptAuthorization= struct {
    bot_id: i64,
    scope: []const u8,
    public_key: []const u8,
    value_hashes: []const ISecureValueHash,
    credentials: ISecureCredentialsEncrypted,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // bot_id
        const parambot_id = self.bot_id;
        result += @sizeOf(@TypeOf(parambot_id));
        // scope
        const paramscope = self.scope;
        result += base.strEncodedSize(paramscope);
        // public_key
        const parampublic_key = self.public_key;
        result += base.strEncodedSize(parampublic_key);
        // value_hashes
        const paramvalue_hashes = self.value_hashes;
        result += 4; // vector id
        result += 4; // vector size
        for (paramvalue_hashes) |paramvalue_hashesitem| {
        result += paramvalue_hashesitem.size();
        }

        // credentials
        const paramcredentials = self.credentials;
        result += paramcredentials.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AccountSendVerifyPhoneCode= struct {
    phone_number: []const u8,
    settings: ICodeSettings,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // phone_number
        const paramphone_number = self.phone_number;
        result += base.strEncodedSize(paramphone_number);
        // settings
        const paramsettings = self.settings;
        result += paramsettings.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AccountVerifyPhone= struct {
    phone_number: []const u8,
    phone_code_hash: []const u8,
    phone_code: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // phone_number
        const paramphone_number = self.phone_number;
        result += base.strEncodedSize(paramphone_number);
        // phone_code_hash
        const paramphone_code_hash = self.phone_code_hash;
        result += base.strEncodedSize(paramphone_code_hash);
        // phone_code
        const paramphone_code = self.phone_code;
        result += base.strEncodedSize(paramphone_code);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AccountSendVerifyEmailCode= struct {
    purpose: IEmailVerifyPurpose,
    email: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // purpose
        const parampurpose = self.purpose;
        result += parampurpose.size();

        // email
        const paramemail = self.email;
        result += base.strEncodedSize(paramemail);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AccountVerifyEmail= struct {
    purpose: IEmailVerifyPurpose,
    verification: IEmailVerification,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // purpose
        const parampurpose = self.purpose;
        result += parampurpose.size();

        // verification
        const paramverification = self.verification;
        result += paramverification.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AccountInitTakeoutSession= struct {
    contacts: ?bool,
    message_users: ?bool,
    message_chats: ?bool,
    message_megagroups: ?bool,
    message_channels: ?bool,
    files: ?bool,
    file_max_size: ?i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // contacts
        // true flag

        // message_users
        // true flag

        // message_chats
        // true flag

        // message_megagroups
        // true flag

        // message_channels
        // true flag

        // files
        // true flag

        // file_max_size
        const paramfile_max_size = self.file_max_size;
        if (paramfile_max_size) |paramfile_max_sizeflag| {
        result += @sizeOf(@TypeOf(paramfile_max_sizeflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AccountFinishTakeoutSession= struct {
    success: ?bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // success
        // true flag


        _ = self;
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        }
};
const AccountConfirmPasswordEmail= struct {
    code: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // code
        const paramcode = self.code;
        result += base.strEncodedSize(paramcode);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const AccountResendPasswordEmail= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const AccountCancelPasswordEmail= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const AccountGetContactSignUpNotification= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const AccountSetContactSignUpNotification= struct {
    silent: bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // silent
        const paramsilent = self.silent;
        _ = paramsilent;
        result += 4;
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const AccountGetNotifyExceptions= struct {
    compare_sound: ?bool,
    compare_stories: ?bool,
    peer: ?IInputNotifyPeer,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // compare_sound
        // true flag

        // compare_stories
        // true flag

        // peer
        const parampeer = self.peer;
        if (parampeer) |parampeerflag| {
        result += parampeerflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AccountGetWallPaper= struct {
    wallpaper: IInputWallPaper,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // wallpaper
        const paramwallpaper = self.wallpaper;
        result += paramwallpaper.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const AccountUploadWallPaper= struct {
    for_chat: ?bool,
    file: IInputFile,
    mime_type: []const u8,
    settings: IWallPaperSettings,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // for_chat
        // true flag

        // file
        const paramfile = self.file;
        result += paramfile.size();

        // mime_type
        const parammime_type = self.mime_type;
        result += base.strEncodedSize(parammime_type);
        // settings
        const paramsettings = self.settings;
        result += paramsettings.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AccountSaveWallPaper= struct {
    wallpaper: IInputWallPaper,
    unsave: bool,
    settings: IWallPaperSettings,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // wallpaper
        const paramwallpaper = self.wallpaper;
        result += paramwallpaper.size();

        // unsave
        const paramunsave = self.unsave;
        _ = paramunsave;
        result += 4;
        // settings
        const paramsettings = self.settings;
        result += paramsettings.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AccountInstallWallPaper= struct {
    wallpaper: IInputWallPaper,
    settings: IWallPaperSettings,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // wallpaper
        const paramwallpaper = self.wallpaper;
        result += paramwallpaper.size();

        // settings
        const paramsettings = self.settings;
        result += paramsettings.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AccountResetWallPapers= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const AccountGetAutoDownloadSettings= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const AccountSaveAutoDownloadSettings= struct {
    low: ?bool,
    high: ?bool,
    settings: IAutoDownloadSettings,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // low
        // true flag

        // high
        // true flag

        // settings
        const paramsettings = self.settings;
        result += paramsettings.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AccountUploadTheme= struct {
    file: IInputFile,
    thumb: ?IInputFile,
    file_name: []const u8,
    mime_type: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // file
        const paramfile = self.file;
        result += paramfile.size();

        // thumb
        const paramthumb = self.thumb;
        if (paramthumb) |paramthumbflag| {
        result += paramthumbflag.size();
        }

        // file_name
        const paramfile_name = self.file_name;
        result += base.strEncodedSize(paramfile_name);
        // mime_type
        const parammime_type = self.mime_type;
        result += base.strEncodedSize(parammime_type);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AccountCreateTheme= struct {
    slug: []const u8,
    title: []const u8,
    document: ?IInputDocument,
    settings: ?[]const IInputThemeSettings,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // slug
        const paramslug = self.slug;
        result += base.strEncodedSize(paramslug);
        // title
        const paramtitle = self.title;
        result += base.strEncodedSize(paramtitle);
        // document
        const paramdocument = self.document;
        if (paramdocument) |paramdocumentflag| {
        result += paramdocumentflag.size();
        }

        // settings
        const paramsettings = self.settings;
        if (paramsettings) |paramsettingsflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramsettingsflag) |paramsettingsflagitem| {
        result += paramsettingsflagitem.size();
        }
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AccountUpdateTheme= struct {
    format: []const u8,
    theme: IInputTheme,
    slug: ?[]const u8,
    title: ?[]const u8,
    document: ?IInputDocument,
    settings: ?[]const IInputThemeSettings,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // format
        const paramformat = self.format;
        result += base.strEncodedSize(paramformat);
        // theme
        const paramtheme = self.theme;
        result += paramtheme.size();

        // slug
        const paramslug = self.slug;
        if (paramslug) |paramslugflag| {
        result += base.strEncodedSize(paramslugflag);        }

        // title
        const paramtitle = self.title;
        if (paramtitle) |paramtitleflag| {
        result += base.strEncodedSize(paramtitleflag);        }

        // document
        const paramdocument = self.document;
        if (paramdocument) |paramdocumentflag| {
        result += paramdocumentflag.size();
        }

        // settings
        const paramsettings = self.settings;
        if (paramsettings) |paramsettingsflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramsettingsflag) |paramsettingsflagitem| {
        result += paramsettingsflagitem.size();
        }
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AccountSaveTheme= struct {
    theme: IInputTheme,
    unsave: bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // theme
        const paramtheme = self.theme;
        result += paramtheme.size();

        // unsave
        const paramunsave = self.unsave;
        _ = paramunsave;
        result += 4;
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AccountInstallTheme= struct {
    dark: ?bool,
    theme: ?IInputTheme,
    format: ?[]const u8,
    base_theme: ?IBaseTheme,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // dark
        // true flag

        // theme
        const paramtheme = self.theme;
        if (paramtheme) |paramthemeflag| {
        result += paramthemeflag.size();
        }

        // format
        const paramformat = self.format;
        if (paramformat) |paramformatflag| {
        result += base.strEncodedSize(paramformatflag);        }

        // base_theme
        const parambase_theme = self.base_theme;
        if (parambase_theme) |parambase_themeflag| {
        result += parambase_themeflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AccountGetTheme= struct {
    format: []const u8,
    theme: IInputTheme,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // format
        const paramformat = self.format;
        result += base.strEncodedSize(paramformat);
        // theme
        const paramtheme = self.theme;
        result += paramtheme.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AccountGetThemes= struct {
    format: []const u8,
    hash: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // format
        const paramformat = self.format;
        result += base.strEncodedSize(paramformat);
        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AccountSetContentSettings= struct {
    sensitive_enabled: ?bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // sensitive_enabled
        // true flag


        _ = self;
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        }
};
const AccountGetContentSettings= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const AccountGetMultiWallPapers= struct {
    wallpapers: []const IInputWallPaper,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // wallpapers
        const paramwallpapers = self.wallpapers;
        result += 4; // vector id
        result += 4; // vector size
        for (paramwallpapers) |paramwallpapersitem| {
        result += paramwallpapersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const AccountGetGlobalPrivacySettings= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const AccountSetGlobalPrivacySettings= struct {
    settings: IGlobalPrivacySettings,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // settings
        const paramsettings = self.settings;
        result += paramsettings.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const AccountReportProfilePhoto= struct {
    peer: IInputPeer,
    photo_id: IInputPhoto,
    reason: IReportReason,
    message: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // photo_id
        const paramphoto_id = self.photo_id;
        result += paramphoto_id.size();

        // reason
        const paramreason = self.reason;
        result += paramreason.size();

        // message
        const parammessage = self.message;
        result += base.strEncodedSize(parammessage);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AccountResetPassword= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const AccountDeclinePasswordReset= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const AccountGetChatThemes= struct {
    hash: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const AccountSetAuthorizationTTL= struct {
    authorization_ttl_days: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // authorization_ttl_days
        const paramauthorization_ttl_days = self.authorization_ttl_days;
        result += @sizeOf(@TypeOf(paramauthorization_ttl_days));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const AccountChangeAuthorizationSettings= struct {
    confirmed: ?bool,
    hash: i64,
    encrypted_requests_disabled: ?bool,
    call_requests_disabled: ?bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // confirmed
        // true flag

        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        // encrypted_requests_disabled
        const paramencrypted_requests_disabled = self.encrypted_requests_disabled;
        if (paramencrypted_requests_disabled) |paramencrypted_requests_disabledflag| {
        _ = paramencrypted_requests_disabledflag;
        result += 4;        }

        // call_requests_disabled
        const paramcall_requests_disabled = self.call_requests_disabled;
        if (paramcall_requests_disabled) |paramcall_requests_disabledflag| {
        _ = paramcall_requests_disabledflag;
        result += 4;        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AccountGetSavedRingtones= struct {
    hash: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const AccountSaveRingtone= struct {
    id: IInputDocument,
    unsave: bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += paramid.size();

        // unsave
        const paramunsave = self.unsave;
        _ = paramunsave;
        result += 4;
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AccountUploadRingtone= struct {
    file: IInputFile,
    file_name: []const u8,
    mime_type: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // file
        const paramfile = self.file;
        result += paramfile.size();

        // file_name
        const paramfile_name = self.file_name;
        result += base.strEncodedSize(paramfile_name);
        // mime_type
        const parammime_type = self.mime_type;
        result += base.strEncodedSize(parammime_type);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AccountUpdateEmojiStatus= struct {
    emoji_status: IEmojiStatus,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // emoji_status
        const paramemoji_status = self.emoji_status;
        result += paramemoji_status.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const AccountGetDefaultEmojiStatuses= struct {
    hash: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const AccountGetRecentEmojiStatuses= struct {
    hash: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const AccountClearRecentEmojiStatuses= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const AccountReorderUsernames= struct {
    order: []const []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // order
        const paramorder = self.order;
        result += 4; // vector id
        result += 4; // vector size
        for (paramorder) |paramorderitem| {
        result += base.strEncodedSize(paramorderitem);        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const AccountToggleUsername= struct {
    username: []const u8,
    active: bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // username
        const paramusername = self.username;
        result += base.strEncodedSize(paramusername);
        // active
        const paramactive = self.active;
        _ = paramactive;
        result += 4;
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AccountGetDefaultProfilePhotoEmojis= struct {
    hash: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const AccountGetDefaultGroupPhotoEmojis= struct {
    hash: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const AccountGetAutoSaveSettings= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const AccountSaveAutoSaveSettings= struct {
    users: ?bool,
    chats: ?bool,
    broadcasts: ?bool,
    peer: ?IInputPeer,
    settings: IAutoSaveSettings,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // users
        // true flag

        // chats
        // true flag

        // broadcasts
        // true flag

        // peer
        const parampeer = self.peer;
        if (parampeer) |parampeerflag| {
        result += parampeerflag.size();
        }

        // settings
        const paramsettings = self.settings;
        result += paramsettings.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AccountDeleteAutoSaveExceptions= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const AccountInvalidateSignInCodes= struct {
    codes: []const []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // codes
        const paramcodes = self.codes;
        result += 4; // vector id
        result += 4; // vector size
        for (paramcodes) |paramcodesitem| {
        result += base.strEncodedSize(paramcodesitem);        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const AccountUpdateColor= struct {
    for_profile: ?bool,
    color: ?i32,
    background_emoji_id: ?i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // for_profile
        // true flag

        // color
        const paramcolor = self.color;
        if (paramcolor) |paramcolorflag| {
        result += @sizeOf(@TypeOf(paramcolorflag));        }

        // background_emoji_id
        const parambackground_emoji_id = self.background_emoji_id;
        if (parambackground_emoji_id) |parambackground_emoji_idflag| {
        result += @sizeOf(@TypeOf(parambackground_emoji_idflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AccountGetDefaultBackgroundEmojis= struct {
    hash: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const AccountGetChannelDefaultEmojiStatuses= struct {
    hash: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const AccountGetChannelRestrictedStatusEmojis= struct {
    hash: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const AccountUpdateBusinessWorkHours= struct {
    business_work_hours: ?IBusinessWorkHours,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // business_work_hours
        const parambusiness_work_hours = self.business_work_hours;
        if (parambusiness_work_hours) |parambusiness_work_hoursflag| {
        result += parambusiness_work_hoursflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        }
};
const AccountUpdateBusinessLocation= struct {
    geo_point: ?IInputGeoPoint,
    address: ?[]const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // geo_point
        const paramgeo_point = self.geo_point;
        if (paramgeo_point) |paramgeo_pointflag| {
        result += paramgeo_pointflag.size();
        }

        // address
        const paramaddress = self.address;
        if (paramaddress) |paramaddressflag| {
        result += base.strEncodedSize(paramaddressflag);        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AccountUpdateBusinessGreetingMessage= struct {
    message: ?IInputBusinessGreetingMessage,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // message
        const parammessage = self.message;
        if (parammessage) |parammessageflag| {
        result += parammessageflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        }
};
const AccountUpdateBusinessAwayMessage= struct {
    message: ?IInputBusinessAwayMessage,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // message
        const parammessage = self.message;
        if (parammessage) |parammessageflag| {
        result += parammessageflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        }
};
const AccountUpdateConnectedBot= struct {
    can_reply: ?bool,
    deleted: ?bool,
    bot: IInputUser,
    recipients: IInputBusinessBotRecipients,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // can_reply
        // true flag

        // deleted
        // true flag

        // bot
        const parambot = self.bot;
        result += parambot.size();

        // recipients
        const paramrecipients = self.recipients;
        result += paramrecipients.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AccountGetConnectedBots= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const AccountGetBotBusinessConnection= struct {
    connection_id: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // connection_id
        const paramconnection_id = self.connection_id;
        result += base.strEncodedSize(paramconnection_id);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const AccountUpdateBusinessIntro= struct {
    intro: ?IInputBusinessIntro,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // intro
        const paramintro = self.intro;
        if (paramintro) |paramintroflag| {
        result += paramintroflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        }
};
const AccountToggleConnectedBotPaused= struct {
    peer: IInputPeer,
    paused: bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // paused
        const parampaused = self.paused;
        _ = parampaused;
        result += 4;
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AccountDisablePeerConnectedBot= struct {
    peer: IInputPeer,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const AccountUpdateBirthday= struct {
    birthday: ?IBirthday,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // birthday
        const parambirthday = self.birthday;
        if (parambirthday) |parambirthdayflag| {
        result += parambirthdayflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        }
};
const AccountCreateBusinessChatLink= struct {
    link: IInputBusinessChatLink,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // link
        const paramlink = self.link;
        result += paramlink.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const AccountEditBusinessChatLink= struct {
    slug: []const u8,
    link: IInputBusinessChatLink,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // slug
        const paramslug = self.slug;
        result += base.strEncodedSize(paramslug);
        // link
        const paramlink = self.link;
        result += paramlink.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const AccountDeleteBusinessChatLink= struct {
    slug: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // slug
        const paramslug = self.slug;
        result += base.strEncodedSize(paramslug);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const AccountGetBusinessChatLinks= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const AccountResolveBusinessChatLink= struct {
    slug: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // slug
        const paramslug = self.slug;
        result += base.strEncodedSize(paramslug);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const AccountUpdatePersonalChannel= struct {
    channel: IInputChannel,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // channel
        const paramchannel = self.channel;
        result += paramchannel.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const AccountToggleSponsoredMessages= struct {
    enabled: bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // enabled
        const paramenabled = self.enabled;
        _ = paramenabled;
        result += 4;
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const AccountGetReactionsNotifySettings= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const AccountSetReactionsNotifySettings= struct {
    settings: IReactionsNotifySettings,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // settings
        const paramsettings = self.settings;
        result += paramsettings.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const UsersGetUsers= struct {
    id: []const IInputUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += 4; // vector id
        result += 4; // vector size
        for (paramid) |paramiditem| {
        result += paramiditem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const UsersGetFullUser= struct {
    id: IInputUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += paramid.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const UsersSetSecureValueErrors= struct {
    id: IInputUser,
    errors: []const ISecureValueError,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += paramid.size();

        // errors
        const paramerrors = self.errors;
        result += 4; // vector id
        result += 4; // vector size
        for (paramerrors) |paramerrorsitem| {
        result += paramerrorsitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UsersGetIsPremiumRequiredToContact= struct {
    id: []const IInputUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += 4; // vector id
        result += 4; // vector size
        for (paramid) |paramiditem| {
        result += paramiditem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const ContactsGetContactIDs= struct {
    hash: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const ContactsGetStatuses= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const ContactsGetContacts= struct {
    hash: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const ContactsImportContacts= struct {
    contacts: []const IInputContact,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // contacts
        const paramcontacts = self.contacts;
        result += 4; // vector id
        result += 4; // vector size
        for (paramcontacts) |paramcontactsitem| {
        result += paramcontactsitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const ContactsDeleteContacts= struct {
    id: []const IInputUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += 4; // vector id
        result += 4; // vector size
        for (paramid) |paramiditem| {
        result += paramiditem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const ContactsDeleteByPhones= struct {
    phones: []const []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // phones
        const paramphones = self.phones;
        result += 4; // vector id
        result += 4; // vector size
        for (paramphones) |paramphonesitem| {
        result += base.strEncodedSize(paramphonesitem);        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const ContactsBlock= struct {
    my_stories_from: ?bool,
    id: IInputPeer,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // my_stories_from
        // true flag

        // id
        const paramid = self.id;
        result += paramid.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ContactsUnblock= struct {
    my_stories_from: ?bool,
    id: IInputPeer,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // my_stories_from
        // true flag

        // id
        const paramid = self.id;
        result += paramid.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ContactsGetBlocked= struct {
    my_stories_from: ?bool,
    offset: i32,
    limit: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // my_stories_from
        // true flag

        // offset
        const paramoffset = self.offset;
        result += @sizeOf(@TypeOf(paramoffset));
        // limit
        const paramlimit = self.limit;
        result += @sizeOf(@TypeOf(paramlimit));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ContactsSearch= struct {
    q: []const u8,
    limit: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // q
        const paramq = self.q;
        result += base.strEncodedSize(paramq);
        // limit
        const paramlimit = self.limit;
        result += @sizeOf(@TypeOf(paramlimit));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ContactsResolveUsername= struct {
    username: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // username
        const paramusername = self.username;
        result += base.strEncodedSize(paramusername);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const ContactsGetTopPeers= struct {
    correspondents: ?bool,
    bots_pm: ?bool,
    bots_inline: ?bool,
    phone_calls: ?bool,
    forward_users: ?bool,
    forward_chats: ?bool,
    groups: ?bool,
    channels: ?bool,
    bots_app: ?bool,
    offset: i32,
    limit: i32,
    hash: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // correspondents
        // true flag

        // bots_pm
        // true flag

        // bots_inline
        // true flag

        // phone_calls
        // true flag

        // forward_users
        // true flag

        // forward_chats
        // true flag

        // groups
        // true flag

        // channels
        // true flag

        // bots_app
        // true flag

        // offset
        const paramoffset = self.offset;
        result += @sizeOf(@TypeOf(paramoffset));
        // limit
        const paramlimit = self.limit;
        result += @sizeOf(@TypeOf(paramlimit));
        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 10;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 15;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 16;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ContactsResetTopPeerRating= struct {
    category: ITopPeerCategory,
    peer: IInputPeer,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // category
        const paramcategory = self.category;
        result += paramcategory.size();

        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ContactsResetSaved= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const ContactsGetSaved= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const ContactsToggleTopPeers= struct {
    enabled: bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // enabled
        const paramenabled = self.enabled;
        _ = paramenabled;
        result += 4;
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const ContactsAddContact= struct {
    add_phone_privacy_exception: ?bool,
    id: IInputUser,
    first_name: []const u8,
    last_name: []const u8,
    phone: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // add_phone_privacy_exception
        // true flag

        // id
        const paramid = self.id;
        result += paramid.size();

        // first_name
        const paramfirst_name = self.first_name;
        result += base.strEncodedSize(paramfirst_name);
        // last_name
        const paramlast_name = self.last_name;
        result += base.strEncodedSize(paramlast_name);
        // phone
        const paramphone = self.phone;
        result += base.strEncodedSize(paramphone);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ContactsAcceptContact= struct {
    id: IInputUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += paramid.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const ContactsGetLocated= struct {
    background: ?bool,
    geo_point: IInputGeoPoint,
    self_expires: ?i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // background
        // true flag

        // geo_point
        const paramgeo_point = self.geo_point;
        result += paramgeo_point.size();

        // self_expires
        const paramself_expires = self.self_expires;
        if (paramself_expires) |paramself_expiresflag| {
        result += @sizeOf(@TypeOf(paramself_expiresflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ContactsBlockFromReplies= struct {
    delete_message: ?bool,
    delete_history: ?bool,
    report_spam: ?bool,
    msg_id: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // delete_message
        // true flag

        // delete_history
        // true flag

        // report_spam
        // true flag

        // msg_id
        const parammsg_id = self.msg_id;
        result += @sizeOf(@TypeOf(parammsg_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ContactsResolvePhone= struct {
    phone: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // phone
        const paramphone = self.phone;
        result += base.strEncodedSize(paramphone);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const ContactsExportContactToken= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const ContactsImportContactToken= struct {
    token: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // token
        const paramtoken = self.token;
        result += base.strEncodedSize(paramtoken);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const ContactsEditCloseFriends= struct {
    id: []const i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += 4; // vector id
        result += 4; // vector size
        for (paramid) |paramiditem| {
        result += @sizeOf(@TypeOf(paramiditem));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const ContactsSetBlocked= struct {
    my_stories_from: ?bool,
    id: []const IInputPeer,
    limit: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // my_stories_from
        // true flag

        // id
        const paramid = self.id;
        result += 4; // vector id
        result += 4; // vector size
        for (paramid) |paramiditem| {
        result += paramiditem.size();
        }

        // limit
        const paramlimit = self.limit;
        result += @sizeOf(@TypeOf(paramlimit));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ContactsGetBirthdays= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const MessagesGetMessages= struct {
    id: []const IInputMessage,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += 4; // vector id
        result += 4; // vector size
        for (paramid) |paramiditem| {
        result += paramiditem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MessagesGetDialogs= struct {
    exclude_pinned: ?bool,
    folder_id: ?i32,
    offset_date: i32,
    offset_id: i32,
    offset_peer: IInputPeer,
    limit: i32,
    hash: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // exclude_pinned
        // true flag

        // folder_id
        const paramfolder_id = self.folder_id;
        if (paramfolder_id) |paramfolder_idflag| {
        result += @sizeOf(@TypeOf(paramfolder_idflag));        }

        // offset_date
        const paramoffset_date = self.offset_date;
        result += @sizeOf(@TypeOf(paramoffset_date));
        // offset_id
        const paramoffset_id = self.offset_id;
        result += @sizeOf(@TypeOf(paramoffset_id));
        // offset_peer
        const paramoffset_peer = self.offset_peer;
        result += paramoffset_peer.size();

        // limit
        const paramlimit = self.limit;
        result += @sizeOf(@TypeOf(paramlimit));
        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesGetHistory= struct {
    peer: IInputPeer,
    offset_id: i32,
    offset_date: i32,
    add_offset: i32,
    limit: i32,
    max_id: i32,
    min_id: i32,
    hash: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // offset_id
        const paramoffset_id = self.offset_id;
        result += @sizeOf(@TypeOf(paramoffset_id));
        // offset_date
        const paramoffset_date = self.offset_date;
        result += @sizeOf(@TypeOf(paramoffset_date));
        // add_offset
        const paramadd_offset = self.add_offset;
        result += @sizeOf(@TypeOf(paramadd_offset));
        // limit
        const paramlimit = self.limit;
        result += @sizeOf(@TypeOf(paramlimit));
        // max_id
        const parammax_id = self.max_id;
        result += @sizeOf(@TypeOf(parammax_id));
        // min_id
        const parammin_id = self.min_id;
        result += @sizeOf(@TypeOf(parammin_id));
        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesSearch= struct {
    peer: IInputPeer,
    q: []const u8,
    from_id: ?IInputPeer,
    saved_peer_id: ?IInputPeer,
    saved_reaction: ?[]const IReaction,
    top_msg_id: ?i32,
    filter: IMessagesFilter,
    min_date: i32,
    max_date: i32,
    offset_id: i32,
    add_offset: i32,
    limit: i32,
    max_id: i32,
    min_id: i32,
    hash: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // q
        const paramq = self.q;
        result += base.strEncodedSize(paramq);
        // from_id
        const paramfrom_id = self.from_id;
        if (paramfrom_id) |paramfrom_idflag| {
        result += paramfrom_idflag.size();
        }

        // saved_peer_id
        const paramsaved_peer_id = self.saved_peer_id;
        if (paramsaved_peer_id) |paramsaved_peer_idflag| {
        result += paramsaved_peer_idflag.size();
        }

        // saved_reaction
        const paramsaved_reaction = self.saved_reaction;
        if (paramsaved_reaction) |paramsaved_reactionflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramsaved_reactionflag) |paramsaved_reactionflagitem| {
        result += paramsaved_reactionflagitem.size();
        }
        }

        // top_msg_id
        const paramtop_msg_id = self.top_msg_id;
        if (paramtop_msg_id) |paramtop_msg_idflag| {
        result += @sizeOf(@TypeOf(paramtop_msg_idflag));        }

        // filter
        const paramfilter = self.filter;
        result += paramfilter.size();

        // min_date
        const parammin_date = self.min_date;
        result += @sizeOf(@TypeOf(parammin_date));
        // max_date
        const parammax_date = self.max_date;
        result += @sizeOf(@TypeOf(parammax_date));
        // offset_id
        const paramoffset_id = self.offset_id;
        result += @sizeOf(@TypeOf(paramoffset_id));
        // add_offset
        const paramadd_offset = self.add_offset;
        result += @sizeOf(@TypeOf(paramadd_offset));
        // limit
        const paramlimit = self.limit;
        result += @sizeOf(@TypeOf(paramlimit));
        // max_id
        const parammax_id = self.max_id;
        result += @sizeOf(@TypeOf(parammax_id));
        // min_id
        const parammin_id = self.min_id;
        result += @sizeOf(@TypeOf(parammin_id));
        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesReadHistory= struct {
    peer: IInputPeer,
    max_id: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // max_id
        const parammax_id = self.max_id;
        result += @sizeOf(@TypeOf(parammax_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesDeleteHistory= struct {
    just_clear: ?bool,
    revoke: ?bool,
    peer: IInputPeer,
    max_id: i32,
    min_date: ?i32,
    max_date: ?i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // just_clear
        // true flag

        // revoke
        // true flag

        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // max_id
        const parammax_id = self.max_id;
        result += @sizeOf(@TypeOf(parammax_id));
        // min_date
        const parammin_date = self.min_date;
        if (parammin_date) |parammin_dateflag| {
        result += @sizeOf(@TypeOf(parammin_dateflag));        }

        // max_date
        const parammax_date = self.max_date;
        if (parammax_date) |parammax_dateflag| {
        result += @sizeOf(@TypeOf(parammax_dateflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesDeleteMessages= struct {
    revoke: ?bool,
    id: []const i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // revoke
        // true flag

        // id
        const paramid = self.id;
        result += 4; // vector id
        result += 4; // vector size
        for (paramid) |paramiditem| {
        result += @sizeOf(@TypeOf(paramiditem));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesReceivedMessages= struct {
    max_id: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // max_id
        const parammax_id = self.max_id;
        result += @sizeOf(@TypeOf(parammax_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MessagesSetTyping= struct {
    peer: IInputPeer,
    top_msg_id: ?i32,
    action: ISendMessageAction,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // top_msg_id
        const paramtop_msg_id = self.top_msg_id;
        if (paramtop_msg_id) |paramtop_msg_idflag| {
        result += @sizeOf(@TypeOf(paramtop_msg_idflag));        }

        // action
        const paramaction = self.action;
        result += paramaction.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesSendMessage= struct {
    no_webpage: ?bool,
    silent: ?bool,
    background: ?bool,
    clear_draft: ?bool,
    noforwards: ?bool,
    update_stickersets_order: ?bool,
    invert_media: ?bool,
    peer: IInputPeer,
    reply_to: ?IInputReplyTo,
    message: []const u8,
    random_id: i64,
    reply_markup: ?IReplyMarkup,
    entities: ?[]const IMessageEntity,
    schedule_date: ?i32,
    send_as: ?IInputPeer,
    quick_reply_shortcut: ?IInputQuickReplyShortcut,
    effect: ?i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // no_webpage
        // true flag

        // silent
        // true flag

        // background
        // true flag

        // clear_draft
        // true flag

        // noforwards
        // true flag

        // update_stickersets_order
        // true flag

        // invert_media
        // true flag

        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // reply_to
        const paramreply_to = self.reply_to;
        if (paramreply_to) |paramreply_toflag| {
        result += paramreply_toflag.size();
        }

        // message
        const parammessage = self.message;
        result += base.strEncodedSize(parammessage);
        // random_id
        const paramrandom_id = self.random_id;
        result += @sizeOf(@TypeOf(paramrandom_id));
        // reply_markup
        const paramreply_markup = self.reply_markup;
        if (paramreply_markup) |paramreply_markupflag| {
        result += paramreply_markupflag.size();
        }

        // entities
        const paramentities = self.entities;
        if (paramentities) |paramentitiesflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramentitiesflag) |paramentitiesflagitem| {
        result += paramentitiesflagitem.size();
        }
        }

        // schedule_date
        const paramschedule_date = self.schedule_date;
        if (paramschedule_date) |paramschedule_dateflag| {
        result += @sizeOf(@TypeOf(paramschedule_dateflag));        }

        // send_as
        const paramsend_as = self.send_as;
        if (paramsend_as) |paramsend_asflag| {
        result += paramsend_asflag.size();
        }

        // quick_reply_shortcut
        const paramquick_reply_shortcut = self.quick_reply_shortcut;
        if (paramquick_reply_shortcut) |paramquick_reply_shortcutflag| {
        result += paramquick_reply_shortcutflag.size();
        }

        // effect
        const parameffect = self.effect;
        if (parameffect) |parameffectflag| {
        result += @sizeOf(@TypeOf(parameffectflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 6;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 7;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 14;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 15;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 16;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 10;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 13;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 17;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 18;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesSendMedia= struct {
    silent: ?bool,
    background: ?bool,
    clear_draft: ?bool,
    noforwards: ?bool,
    update_stickersets_order: ?bool,
    invert_media: ?bool,
    peer: IInputPeer,
    reply_to: ?IInputReplyTo,
    media: IInputMedia,
    message: []const u8,
    random_id: i64,
    reply_markup: ?IReplyMarkup,
    entities: ?[]const IMessageEntity,
    schedule_date: ?i32,
    send_as: ?IInputPeer,
    quick_reply_shortcut: ?IInputQuickReplyShortcut,
    effect: ?i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // silent
        // true flag

        // background
        // true flag

        // clear_draft
        // true flag

        // noforwards
        // true flag

        // update_stickersets_order
        // true flag

        // invert_media
        // true flag

        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // reply_to
        const paramreply_to = self.reply_to;
        if (paramreply_to) |paramreply_toflag| {
        result += paramreply_toflag.size();
        }

        // media
        const parammedia = self.media;
        result += parammedia.size();

        // message
        const parammessage = self.message;
        result += base.strEncodedSize(parammessage);
        // random_id
        const paramrandom_id = self.random_id;
        result += @sizeOf(@TypeOf(paramrandom_id));
        // reply_markup
        const paramreply_markup = self.reply_markup;
        if (paramreply_markup) |paramreply_markupflag| {
        result += paramreply_markupflag.size();
        }

        // entities
        const paramentities = self.entities;
        if (paramentities) |paramentitiesflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramentitiesflag) |paramentitiesflagitem| {
        result += paramentitiesflagitem.size();
        }
        }

        // schedule_date
        const paramschedule_date = self.schedule_date;
        if (paramschedule_date) |paramschedule_dateflag| {
        result += @sizeOf(@TypeOf(paramschedule_dateflag));        }

        // send_as
        const paramsend_as = self.send_as;
        if (paramsend_as) |paramsend_asflag| {
        result += paramsend_asflag.size();
        }

        // quick_reply_shortcut
        const paramquick_reply_shortcut = self.quick_reply_shortcut;
        if (paramquick_reply_shortcut) |paramquick_reply_shortcutflag| {
        result += paramquick_reply_shortcutflag.size();
        }

        // effect
        const parameffect = self.effect;
        if (parameffect) |parameffectflag| {
        result += @sizeOf(@TypeOf(parameffectflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 6;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 7;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 14;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 15;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 16;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 10;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 13;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 17;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 18;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesForwardMessages= struct {
    silent: ?bool,
    background: ?bool,
    with_my_score: ?bool,
    drop_author: ?bool,
    drop_media_captions: ?bool,
    noforwards: ?bool,
    from_peer: IInputPeer,
    id: []const i32,
    random_id: []const i64,
    to_peer: IInputPeer,
    top_msg_id: ?i32,
    schedule_date: ?i32,
    send_as: ?IInputPeer,
    quick_reply_shortcut: ?IInputQuickReplyShortcut,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // silent
        // true flag

        // background
        // true flag

        // with_my_score
        // true flag

        // drop_author
        // true flag

        // drop_media_captions
        // true flag

        // noforwards
        // true flag

        // from_peer
        const paramfrom_peer = self.from_peer;
        result += paramfrom_peer.size();

        // id
        const paramid = self.id;
        result += 4; // vector id
        result += 4; // vector size
        for (paramid) |paramiditem| {
        result += @sizeOf(@TypeOf(paramiditem));        }

        // random_id
        const paramrandom_id = self.random_id;
        result += 4; // vector id
        result += 4; // vector size
        for (paramrandom_id) |paramrandom_iditem| {
        result += @sizeOf(@TypeOf(paramrandom_iditem));        }

        // to_peer
        const paramto_peer = self.to_peer;
        result += paramto_peer.size();

        // top_msg_id
        const paramtop_msg_id = self.top_msg_id;
        if (paramtop_msg_id) |paramtop_msg_idflag| {
        result += @sizeOf(@TypeOf(paramtop_msg_idflag));        }

        // schedule_date
        const paramschedule_date = self.schedule_date;
        if (paramschedule_date) |paramschedule_dateflag| {
        result += @sizeOf(@TypeOf(paramschedule_dateflag));        }

        // send_as
        const paramsend_as = self.send_as;
        if (paramsend_as) |paramsend_asflag| {
        result += paramsend_asflag.size();
        }

        // quick_reply_shortcut
        const paramquick_reply_shortcut = self.quick_reply_shortcut;
        if (paramquick_reply_shortcut) |paramquick_reply_shortcutflag| {
        result += paramquick_reply_shortcutflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 6;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 8;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 11;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 12;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 14;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 9;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 10;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 13;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 17;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesReportSpam= struct {
    peer: IInputPeer,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MessagesGetPeerSettings= struct {
    peer: IInputPeer,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MessagesReport= struct {
    peer: IInputPeer,
    id: []const i32,
    option: []const u8,
    message: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // id
        const paramid = self.id;
        result += 4; // vector id
        result += 4; // vector size
        for (paramid) |paramiditem| {
        result += @sizeOf(@TypeOf(paramiditem));        }

        // option
        const paramoption = self.option;
        result += base.strEncodedSize(paramoption);
        // message
        const parammessage = self.message;
        result += base.strEncodedSize(parammessage);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesGetChats= struct {
    id: []const i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += 4; // vector id
        result += 4; // vector size
        for (paramid) |paramiditem| {
        result += @sizeOf(@TypeOf(paramiditem));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MessagesGetFullChat= struct {
    chat_id: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // chat_id
        const paramchat_id = self.chat_id;
        result += @sizeOf(@TypeOf(paramchat_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MessagesEditChatTitle= struct {
    chat_id: i64,
    title: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // chat_id
        const paramchat_id = self.chat_id;
        result += @sizeOf(@TypeOf(paramchat_id));
        // title
        const paramtitle = self.title;
        result += base.strEncodedSize(paramtitle);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesEditChatPhoto= struct {
    chat_id: i64,
    photo: IInputChatPhoto,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // chat_id
        const paramchat_id = self.chat_id;
        result += @sizeOf(@TypeOf(paramchat_id));
        // photo
        const paramphoto = self.photo;
        result += paramphoto.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesAddChatUser= struct {
    chat_id: i64,
    user_id: IInputUser,
    fwd_limit: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // chat_id
        const paramchat_id = self.chat_id;
        result += @sizeOf(@TypeOf(paramchat_id));
        // user_id
        const paramuser_id = self.user_id;
        result += paramuser_id.size();

        // fwd_limit
        const paramfwd_limit = self.fwd_limit;
        result += @sizeOf(@TypeOf(paramfwd_limit));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesDeleteChatUser= struct {
    revoke_history: ?bool,
    chat_id: i64,
    user_id: IInputUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // revoke_history
        // true flag

        // chat_id
        const paramchat_id = self.chat_id;
        result += @sizeOf(@TypeOf(paramchat_id));
        // user_id
        const paramuser_id = self.user_id;
        result += paramuser_id.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesCreateChat= struct {
    users: []const IInputUser,
    title: []const u8,
    ttl_period: ?i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        // title
        const paramtitle = self.title;
        result += base.strEncodedSize(paramtitle);
        // ttl_period
        const paramttl_period = self.ttl_period;
        if (paramttl_period) |paramttl_periodflag| {
        result += @sizeOf(@TypeOf(paramttl_periodflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesGetDhConfig= struct {
    version: i32,
    random_length: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // version
        const paramversion = self.version;
        result += @sizeOf(@TypeOf(paramversion));
        // random_length
        const paramrandom_length = self.random_length;
        result += @sizeOf(@TypeOf(paramrandom_length));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesRequestEncryption= struct {
    user_id: IInputUser,
    random_id: i32,
    g_a: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // user_id
        const paramuser_id = self.user_id;
        result += paramuser_id.size();

        // random_id
        const paramrandom_id = self.random_id;
        result += @sizeOf(@TypeOf(paramrandom_id));
        // g_a
        const paramg_a = self.g_a;
        result += base.strEncodedSize(paramg_a);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesAcceptEncryption= struct {
    peer: IInputEncryptedChat,
    g_b: []const u8,
    key_fingerprint: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // g_b
        const paramg_b = self.g_b;
        result += base.strEncodedSize(paramg_b);
        // key_fingerprint
        const paramkey_fingerprint = self.key_fingerprint;
        result += @sizeOf(@TypeOf(paramkey_fingerprint));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesDiscardEncryption= struct {
    delete_history: ?bool,
    chat_id: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // delete_history
        // true flag

        // chat_id
        const paramchat_id = self.chat_id;
        result += @sizeOf(@TypeOf(paramchat_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesSetEncryptedTyping= struct {
    peer: IInputEncryptedChat,
    typing: bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // typing
        const paramtyping = self.typing;
        _ = paramtyping;
        result += 4;
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesReadEncryptedHistory= struct {
    peer: IInputEncryptedChat,
    max_date: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // max_date
        const parammax_date = self.max_date;
        result += @sizeOf(@TypeOf(parammax_date));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesSendEncrypted= struct {
    silent: ?bool,
    peer: IInputEncryptedChat,
    random_id: i64,
    data: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // silent
        // true flag

        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // random_id
        const paramrandom_id = self.random_id;
        result += @sizeOf(@TypeOf(paramrandom_id));
        // data
        const paramdata = self.data;
        result += base.strEncodedSize(paramdata);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesSendEncryptedFile= struct {
    silent: ?bool,
    peer: IInputEncryptedChat,
    random_id: i64,
    data: []const u8,
    file: IInputEncryptedFile,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // silent
        // true flag

        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // random_id
        const paramrandom_id = self.random_id;
        result += @sizeOf(@TypeOf(paramrandom_id));
        // data
        const paramdata = self.data;
        result += base.strEncodedSize(paramdata);
        // file
        const paramfile = self.file;
        result += paramfile.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesSendEncryptedService= struct {
    peer: IInputEncryptedChat,
    random_id: i64,
    data: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // random_id
        const paramrandom_id = self.random_id;
        result += @sizeOf(@TypeOf(paramrandom_id));
        // data
        const paramdata = self.data;
        result += base.strEncodedSize(paramdata);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesReceivedQueue= struct {
    max_qts: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // max_qts
        const parammax_qts = self.max_qts;
        result += @sizeOf(@TypeOf(parammax_qts));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MessagesReportEncryptedSpam= struct {
    peer: IInputEncryptedChat,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MessagesReadMessageContents= struct {
    id: []const i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += 4; // vector id
        result += 4; // vector size
        for (paramid) |paramiditem| {
        result += @sizeOf(@TypeOf(paramiditem));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MessagesGetStickers= struct {
    emoticon: []const u8,
    hash: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // emoticon
        const paramemoticon = self.emoticon;
        result += base.strEncodedSize(paramemoticon);
        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesGetAllStickers= struct {
    hash: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MessagesGetWebPagePreview= struct {
    message: []const u8,
    entities: ?[]const IMessageEntity,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // message
        const parammessage = self.message;
        result += base.strEncodedSize(parammessage);
        // entities
        const paramentities = self.entities;
        if (paramentities) |paramentitiesflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramentitiesflag) |paramentitiesflagitem| {
        result += paramentitiesflagitem.size();
        }
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesExportChatInvite= struct {
    legacy_revoke_permanent: ?bool,
    request_needed: ?bool,
    peer: IInputPeer,
    expire_date: ?i32,
    usage_limit: ?i32,
    title: ?[]const u8,
    subscription_pricing: ?IStarsSubscriptionPricing,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // legacy_revoke_permanent
        // true flag

        // request_needed
        // true flag

        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // expire_date
        const paramexpire_date = self.expire_date;
        if (paramexpire_date) |paramexpire_dateflag| {
        result += @sizeOf(@TypeOf(paramexpire_dateflag));        }

        // usage_limit
        const paramusage_limit = self.usage_limit;
        if (paramusage_limit) |paramusage_limitflag| {
        result += @sizeOf(@TypeOf(paramusage_limitflag));        }

        // title
        const paramtitle = self.title;
        if (paramtitle) |paramtitleflag| {
        result += base.strEncodedSize(paramtitleflag);        }

        // subscription_pricing
        const paramsubscription_pricing = self.subscription_pricing;
        if (paramsubscription_pricing) |paramsubscription_pricingflag| {
        result += paramsubscription_pricingflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesCheckChatInvite= struct {
    hash: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // hash
        const paramhash = self.hash;
        result += base.strEncodedSize(paramhash);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MessagesImportChatInvite= struct {
    hash: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // hash
        const paramhash = self.hash;
        result += base.strEncodedSize(paramhash);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MessagesGetStickerSet= struct {
    stickerset: IInputStickerSet,
    hash: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // stickerset
        const paramstickerset = self.stickerset;
        result += paramstickerset.size();

        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesInstallStickerSet= struct {
    stickerset: IInputStickerSet,
    archived: bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // stickerset
        const paramstickerset = self.stickerset;
        result += paramstickerset.size();

        // archived
        const paramarchived = self.archived;
        _ = paramarchived;
        result += 4;
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesUninstallStickerSet= struct {
    stickerset: IInputStickerSet,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // stickerset
        const paramstickerset = self.stickerset;
        result += paramstickerset.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MessagesStartBot= struct {
    bot: IInputUser,
    peer: IInputPeer,
    random_id: i64,
    start_param: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // bot
        const parambot = self.bot;
        result += parambot.size();

        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // random_id
        const paramrandom_id = self.random_id;
        result += @sizeOf(@TypeOf(paramrandom_id));
        // start_param
        const paramstart_param = self.start_param;
        result += base.strEncodedSize(paramstart_param);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesGetMessagesViews= struct {
    peer: IInputPeer,
    id: []const i32,
    increment: bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // id
        const paramid = self.id;
        result += 4; // vector id
        result += 4; // vector size
        for (paramid) |paramiditem| {
        result += @sizeOf(@TypeOf(paramiditem));        }

        // increment
        const paramincrement = self.increment;
        _ = paramincrement;
        result += 4;
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesEditChatAdmin= struct {
    chat_id: i64,
    user_id: IInputUser,
    is_admin: bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // chat_id
        const paramchat_id = self.chat_id;
        result += @sizeOf(@TypeOf(paramchat_id));
        // user_id
        const paramuser_id = self.user_id;
        result += paramuser_id.size();

        // is_admin
        const paramis_admin = self.is_admin;
        _ = paramis_admin;
        result += 4;
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesMigrateChat= struct {
    chat_id: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // chat_id
        const paramchat_id = self.chat_id;
        result += @sizeOf(@TypeOf(paramchat_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MessagesSearchGlobal= struct {
    broadcasts_only: ?bool,
    folder_id: ?i32,
    q: []const u8,
    filter: IMessagesFilter,
    min_date: i32,
    max_date: i32,
    offset_rate: i32,
    offset_peer: IInputPeer,
    offset_id: i32,
    limit: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // broadcasts_only
        // true flag

        // folder_id
        const paramfolder_id = self.folder_id;
        if (paramfolder_id) |paramfolder_idflag| {
        result += @sizeOf(@TypeOf(paramfolder_idflag));        }

        // q
        const paramq = self.q;
        result += base.strEncodedSize(paramq);
        // filter
        const paramfilter = self.filter;
        result += paramfilter.size();

        // min_date
        const parammin_date = self.min_date;
        result += @sizeOf(@TypeOf(parammin_date));
        // max_date
        const parammax_date = self.max_date;
        result += @sizeOf(@TypeOf(parammax_date));
        // offset_rate
        const paramoffset_rate = self.offset_rate;
        result += @sizeOf(@TypeOf(paramoffset_rate));
        // offset_peer
        const paramoffset_peer = self.offset_peer;
        result += paramoffset_peer.size();

        // offset_id
        const paramoffset_id = self.offset_id;
        result += @sizeOf(@TypeOf(paramoffset_id));
        // limit
        const paramlimit = self.limit;
        result += @sizeOf(@TypeOf(paramlimit));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesReorderStickerSets= struct {
    masks: ?bool,
    emojis: ?bool,
    order: []const i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // masks
        // true flag

        // emojis
        // true flag

        // order
        const paramorder = self.order;
        result += 4; // vector id
        result += 4; // vector size
        for (paramorder) |paramorderitem| {
        result += @sizeOf(@TypeOf(paramorderitem));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesGetDocumentByHash= struct {
    sha256: []const u8,
    size: i64,
    mime_type: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // sha256
        const paramsha256 = self.sha256;
        result += base.strEncodedSize(paramsha256);
        // size
        const paramsize = self.size;
        result += @sizeOf(@TypeOf(paramsize));
        // mime_type
        const parammime_type = self.mime_type;
        result += base.strEncodedSize(parammime_type);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesGetSavedGifs= struct {
    hash: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MessagesSaveGif= struct {
    id: IInputDocument,
    unsave: bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += paramid.size();

        // unsave
        const paramunsave = self.unsave;
        _ = paramunsave;
        result += 4;
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesGetInlineBotResults= struct {
    bot: IInputUser,
    peer: IInputPeer,
    geo_point: ?IInputGeoPoint,
    query: []const u8,
    offset: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // bot
        const parambot = self.bot;
        result += parambot.size();

        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // geo_point
        const paramgeo_point = self.geo_point;
        if (paramgeo_point) |paramgeo_pointflag| {
        result += paramgeo_pointflag.size();
        }

        // query
        const paramquery = self.query;
        result += base.strEncodedSize(paramquery);
        // offset
        const paramoffset = self.offset;
        result += base.strEncodedSize(paramoffset);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesSetInlineBotResults= struct {
    gallery: ?bool,
    private: ?bool,
    query_id: i64,
    results: []const IInputBotInlineResult,
    cache_time: i32,
    next_offset: ?[]const u8,
    switch_pm: ?IInlineBotSwitchPM,
    switch_webview: ?IInlineBotWebView,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // gallery
        // true flag

        // private
        // true flag

        // query_id
        const paramquery_id = self.query_id;
        result += @sizeOf(@TypeOf(paramquery_id));
        // results
        const paramresults = self.results;
        result += 4; // vector id
        result += 4; // vector size
        for (paramresults) |paramresultsitem| {
        result += paramresultsitem.size();
        }

        // cache_time
        const paramcache_time = self.cache_time;
        result += @sizeOf(@TypeOf(paramcache_time));
        // next_offset
        const paramnext_offset = self.next_offset;
        if (paramnext_offset) |paramnext_offsetflag| {
        result += base.strEncodedSize(paramnext_offsetflag);        }

        // switch_pm
        const paramswitch_pm = self.switch_pm;
        if (paramswitch_pm) |paramswitch_pmflag| {
        result += paramswitch_pmflag.size();
        }

        // switch_webview
        const paramswitch_webview = self.switch_webview;
        if (paramswitch_webview) |paramswitch_webviewflag| {
        result += paramswitch_webviewflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesSendInlineBotResult= struct {
    silent: ?bool,
    background: ?bool,
    clear_draft: ?bool,
    hide_via: ?bool,
    peer: IInputPeer,
    reply_to: ?IInputReplyTo,
    random_id: i64,
    query_id: i64,
    id: []const u8,
    schedule_date: ?i32,
    send_as: ?IInputPeer,
    quick_reply_shortcut: ?IInputQuickReplyShortcut,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // silent
        // true flag

        // background
        // true flag

        // clear_draft
        // true flag

        // hide_via
        // true flag

        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // reply_to
        const paramreply_to = self.reply_to;
        if (paramreply_to) |paramreply_toflag| {
        result += paramreply_toflag.size();
        }

        // random_id
        const paramrandom_id = self.random_id;
        result += @sizeOf(@TypeOf(paramrandom_id));
        // query_id
        const paramquery_id = self.query_id;
        result += @sizeOf(@TypeOf(paramquery_id));
        // id
        const paramid = self.id;
        result += base.strEncodedSize(paramid);
        // schedule_date
        const paramschedule_date = self.schedule_date;
        if (paramschedule_date) |paramschedule_dateflag| {
        result += @sizeOf(@TypeOf(paramschedule_dateflag));        }

        // send_as
        const paramsend_as = self.send_as;
        if (paramsend_as) |paramsend_asflag| {
        result += paramsend_asflag.size();
        }

        // quick_reply_shortcut
        const paramquick_reply_shortcut = self.quick_reply_shortcut;
        if (paramquick_reply_shortcut) |paramquick_reply_shortcutflag| {
        result += paramquick_reply_shortcutflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 6;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 7;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 11;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 10;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 13;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 17;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesGetMessageEditData= struct {
    peer: IInputPeer,
    id: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesEditMessage= struct {
    no_webpage: ?bool,
    invert_media: ?bool,
    peer: IInputPeer,
    id: i32,
    message: ?[]const u8,
    media: ?IInputMedia,
    reply_markup: ?IReplyMarkup,
    entities: ?[]const IMessageEntity,
    schedule_date: ?i32,
    quick_reply_shortcut_id: ?i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // no_webpage
        // true flag

        // invert_media
        // true flag

        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // message
        const parammessage = self.message;
        if (parammessage) |parammessageflag| {
        result += base.strEncodedSize(parammessageflag);        }

        // media
        const parammedia = self.media;
        if (parammedia) |parammediaflag| {
        result += parammediaflag.size();
        }

        // reply_markup
        const paramreply_markup = self.reply_markup;
        if (paramreply_markup) |paramreply_markupflag| {
        result += paramreply_markupflag.size();
        }

        // entities
        const paramentities = self.entities;
        if (paramentities) |paramentitiesflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramentitiesflag) |paramentitiesflagitem| {
        result += paramentitiesflagitem.size();
        }
        }

        // schedule_date
        const paramschedule_date = self.schedule_date;
        if (paramschedule_date) |paramschedule_dateflag| {
        result += @sizeOf(@TypeOf(paramschedule_dateflag));        }

        // quick_reply_shortcut_id
        const paramquick_reply_shortcut_id = self.quick_reply_shortcut_id;
        if (paramquick_reply_shortcut_id) |paramquick_reply_shortcut_idflag| {
        result += @sizeOf(@TypeOf(paramquick_reply_shortcut_idflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 16;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 11;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 14;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 15;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 17;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesEditInlineBotMessage= struct {
    no_webpage: ?bool,
    invert_media: ?bool,
    id: IInputBotInlineMessageID,
    message: ?[]const u8,
    media: ?IInputMedia,
    reply_markup: ?IReplyMarkup,
    entities: ?[]const IMessageEntity,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // no_webpage
        // true flag

        // invert_media
        // true flag

        // id
        const paramid = self.id;
        result += paramid.size();

        // message
        const parammessage = self.message;
        if (parammessage) |parammessageflag| {
        result += base.strEncodedSize(parammessageflag);        }

        // media
        const parammedia = self.media;
        if (parammedia) |parammediaflag| {
        result += parammediaflag.size();
        }

        // reply_markup
        const paramreply_markup = self.reply_markup;
        if (paramreply_markup) |paramreply_markupflag| {
        result += paramreply_markupflag.size();
        }

        // entities
        const paramentities = self.entities;
        if (paramentities) |paramentitiesflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramentitiesflag) |paramentitiesflagitem| {
        result += paramentitiesflagitem.size();
        }
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 16;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 11;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 14;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesGetBotCallbackAnswer= struct {
    game: ?bool,
    peer: IInputPeer,
    msg_id: i32,
    data: ?[]const u8,
    password: ?IInputCheckPasswordSRP,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // game
        // true flag

        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // msg_id
        const parammsg_id = self.msg_id;
        result += @sizeOf(@TypeOf(parammsg_id));
        // data
        const paramdata = self.data;
        if (paramdata) |paramdataflag| {
        result += base.strEncodedSize(paramdataflag);        }

        // password
        const parampassword = self.password;
        if (parampassword) |parampasswordflag| {
        result += parampasswordflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesSetBotCallbackAnswer= struct {
    alert: ?bool,
    query_id: i64,
    message: ?[]const u8,
    url: ?[]const u8,
    cache_time: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // alert
        // true flag

        // query_id
        const paramquery_id = self.query_id;
        result += @sizeOf(@TypeOf(paramquery_id));
        // message
        const parammessage = self.message;
        if (parammessage) |parammessageflag| {
        result += base.strEncodedSize(parammessageflag);        }

        // url
        const paramurl = self.url;
        if (paramurl) |paramurlflag| {
        result += base.strEncodedSize(paramurlflag);        }

        // cache_time
        const paramcache_time = self.cache_time;
        result += @sizeOf(@TypeOf(paramcache_time));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesGetPeerDialogs= struct {
    peers: []const IInputDialogPeer,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peers
        const parampeers = self.peers;
        result += 4; // vector id
        result += 4; // vector size
        for (parampeers) |parampeersitem| {
        result += parampeersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MessagesSaveDraft= struct {
    no_webpage: ?bool,
    invert_media: ?bool,
    reply_to: ?IInputReplyTo,
    peer: IInputPeer,
    message: []const u8,
    entities: ?[]const IMessageEntity,
    media: ?IInputMedia,
    effect: ?i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // no_webpage
        // true flag

        // invert_media
        // true flag

        // reply_to
        const paramreply_to = self.reply_to;
        if (paramreply_to) |paramreply_toflag| {
        result += paramreply_toflag.size();
        }

        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // message
        const parammessage = self.message;
        result += base.strEncodedSize(parammessage);
        // entities
        const paramentities = self.entities;
        if (paramentities) |paramentitiesflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramentitiesflag) |paramentitiesflagitem| {
        result += paramentitiesflagitem.size();
        }
        }

        // media
        const parammedia = self.media;
        if (parammedia) |parammediaflag| {
        result += parammediaflag.size();
        }

        // effect
        const parameffect = self.effect;
        if (parameffect) |parameffectflag| {
        result += @sizeOf(@TypeOf(parameffectflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 6;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 7;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesGetAllDrafts= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const MessagesGetFeaturedStickers= struct {
    hash: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MessagesReadFeaturedStickers= struct {
    id: []const i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += 4; // vector id
        result += 4; // vector size
        for (paramid) |paramiditem| {
        result += @sizeOf(@TypeOf(paramiditem));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MessagesGetRecentStickers= struct {
    attached: ?bool,
    hash: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // attached
        // true flag

        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesSaveRecentSticker= struct {
    attached: ?bool,
    id: IInputDocument,
    unsave: bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // attached
        // true flag

        // id
        const paramid = self.id;
        result += paramid.size();

        // unsave
        const paramunsave = self.unsave;
        _ = paramunsave;
        result += 4;
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesClearRecentStickers= struct {
    attached: ?bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // attached
        // true flag


        _ = self;
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        }
};
const MessagesGetArchivedStickers= struct {
    masks: ?bool,
    emojis: ?bool,
    offset_id: i64,
    limit: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // masks
        // true flag

        // emojis
        // true flag

        // offset_id
        const paramoffset_id = self.offset_id;
        result += @sizeOf(@TypeOf(paramoffset_id));
        // limit
        const paramlimit = self.limit;
        result += @sizeOf(@TypeOf(paramlimit));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesGetMaskStickers= struct {
    hash: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MessagesGetAttachedStickers= struct {
    media: IInputStickeredMedia,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // media
        const parammedia = self.media;
        result += parammedia.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MessagesSetGameScore= struct {
    edit_message: ?bool,
    force: ?bool,
    peer: IInputPeer,
    id: i32,
    user_id: IInputUser,
    score: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // edit_message
        // true flag

        // force
        // true flag

        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // user_id
        const paramuser_id = self.user_id;
        result += paramuser_id.size();

        // score
        const paramscore = self.score;
        result += @sizeOf(@TypeOf(paramscore));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesSetInlineGameScore= struct {
    edit_message: ?bool,
    force: ?bool,
    id: IInputBotInlineMessageID,
    user_id: IInputUser,
    score: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // edit_message
        // true flag

        // force
        // true flag

        // id
        const paramid = self.id;
        result += paramid.size();

        // user_id
        const paramuser_id = self.user_id;
        result += paramuser_id.size();

        // score
        const paramscore = self.score;
        result += @sizeOf(@TypeOf(paramscore));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesGetGameHighScores= struct {
    peer: IInputPeer,
    id: i32,
    user_id: IInputUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // user_id
        const paramuser_id = self.user_id;
        result += paramuser_id.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesGetInlineGameHighScores= struct {
    id: IInputBotInlineMessageID,
    user_id: IInputUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += paramid.size();

        // user_id
        const paramuser_id = self.user_id;
        result += paramuser_id.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesGetCommonChats= struct {
    user_id: IInputUser,
    max_id: i64,
    limit: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // user_id
        const paramuser_id = self.user_id;
        result += paramuser_id.size();

        // max_id
        const parammax_id = self.max_id;
        result += @sizeOf(@TypeOf(parammax_id));
        // limit
        const paramlimit = self.limit;
        result += @sizeOf(@TypeOf(paramlimit));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesGetWebPage= struct {
    url: []const u8,
    hash: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // url
        const paramurl = self.url;
        result += base.strEncodedSize(paramurl);
        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesToggleDialogPin= struct {
    pinned: ?bool,
    peer: IInputDialogPeer,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // pinned
        // true flag

        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesReorderPinnedDialogs= struct {
    force: ?bool,
    folder_id: i32,
    order: []const IInputDialogPeer,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // force
        // true flag

        // folder_id
        const paramfolder_id = self.folder_id;
        result += @sizeOf(@TypeOf(paramfolder_id));
        // order
        const paramorder = self.order;
        result += 4; // vector id
        result += 4; // vector size
        for (paramorder) |paramorderitem| {
        result += paramorderitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesGetPinnedDialogs= struct {
    folder_id: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // folder_id
        const paramfolder_id = self.folder_id;
        result += @sizeOf(@TypeOf(paramfolder_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MessagesSetBotShippingResults= struct {
    query_id: i64,
    Error: ?[]const u8,
    shipping_options: ?[]const IShippingOption,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // query_id
        const paramquery_id = self.query_id;
        result += @sizeOf(@TypeOf(paramquery_id));
        // error
        const paramerror = self.Error;
        if (paramerror) |paramerrorflag| {
        result += base.strEncodedSize(paramerrorflag);        }

        // shipping_options
        const paramshipping_options = self.shipping_options;
        if (paramshipping_options) |paramshipping_optionsflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramshipping_optionsflag) |paramshipping_optionsflagitem| {
        result += paramshipping_optionsflagitem.size();
        }
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesSetBotPrecheckoutResults= struct {
    success: ?bool,
    query_id: i64,
    Error: ?[]const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // success
        // true flag

        // query_id
        const paramquery_id = self.query_id;
        result += @sizeOf(@TypeOf(paramquery_id));
        // error
        const paramerror = self.Error;
        if (paramerror) |paramerrorflag| {
        result += base.strEncodedSize(paramerrorflag);        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesUploadMedia= struct {
    business_connection_id: ?[]const u8,
    peer: IInputPeer,
    media: IInputMedia,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // business_connection_id
        const parambusiness_connection_id = self.business_connection_id;
        if (parambusiness_connection_id) |parambusiness_connection_idflag| {
        result += base.strEncodedSize(parambusiness_connection_idflag);        }

        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // media
        const parammedia = self.media;
        result += parammedia.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesSendScreenshotNotification= struct {
    peer: IInputPeer,
    reply_to: IInputReplyTo,
    random_id: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // reply_to
        const paramreply_to = self.reply_to;
        result += paramreply_to.size();

        // random_id
        const paramrandom_id = self.random_id;
        result += @sizeOf(@TypeOf(paramrandom_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesGetFavedStickers= struct {
    hash: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MessagesFaveSticker= struct {
    id: IInputDocument,
    unfave: bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += paramid.size();

        // unfave
        const paramunfave = self.unfave;
        _ = paramunfave;
        result += 4;
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesGetUnreadMentions= struct {
    peer: IInputPeer,
    top_msg_id: ?i32,
    offset_id: i32,
    add_offset: i32,
    limit: i32,
    max_id: i32,
    min_id: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // top_msg_id
        const paramtop_msg_id = self.top_msg_id;
        if (paramtop_msg_id) |paramtop_msg_idflag| {
        result += @sizeOf(@TypeOf(paramtop_msg_idflag));        }

        // offset_id
        const paramoffset_id = self.offset_id;
        result += @sizeOf(@TypeOf(paramoffset_id));
        // add_offset
        const paramadd_offset = self.add_offset;
        result += @sizeOf(@TypeOf(paramadd_offset));
        // limit
        const paramlimit = self.limit;
        result += @sizeOf(@TypeOf(paramlimit));
        // max_id
        const parammax_id = self.max_id;
        result += @sizeOf(@TypeOf(parammax_id));
        // min_id
        const parammin_id = self.min_id;
        result += @sizeOf(@TypeOf(parammin_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesReadMentions= struct {
    peer: IInputPeer,
    top_msg_id: ?i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // top_msg_id
        const paramtop_msg_id = self.top_msg_id;
        if (paramtop_msg_id) |paramtop_msg_idflag| {
        result += @sizeOf(@TypeOf(paramtop_msg_idflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesGetRecentLocations= struct {
    peer: IInputPeer,
    limit: i32,
    hash: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // limit
        const paramlimit = self.limit;
        result += @sizeOf(@TypeOf(paramlimit));
        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesSendMultiMedia= struct {
    silent: ?bool,
    background: ?bool,
    clear_draft: ?bool,
    noforwards: ?bool,
    update_stickersets_order: ?bool,
    invert_media: ?bool,
    peer: IInputPeer,
    reply_to: ?IInputReplyTo,
    multi_media: []const IInputSingleMedia,
    schedule_date: ?i32,
    send_as: ?IInputPeer,
    quick_reply_shortcut: ?IInputQuickReplyShortcut,
    effect: ?i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // silent
        // true flag

        // background
        // true flag

        // clear_draft
        // true flag

        // noforwards
        // true flag

        // update_stickersets_order
        // true flag

        // invert_media
        // true flag

        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // reply_to
        const paramreply_to = self.reply_to;
        if (paramreply_to) |paramreply_toflag| {
        result += paramreply_toflag.size();
        }

        // multi_media
        const parammulti_media = self.multi_media;
        result += 4; // vector id
        result += 4; // vector size
        for (parammulti_media) |parammulti_mediaitem| {
        result += parammulti_mediaitem.size();
        }

        // schedule_date
        const paramschedule_date = self.schedule_date;
        if (paramschedule_date) |paramschedule_dateflag| {
        result += @sizeOf(@TypeOf(paramschedule_dateflag));        }

        // send_as
        const paramsend_as = self.send_as;
        if (paramsend_as) |paramsend_asflag| {
        result += paramsend_asflag.size();
        }

        // quick_reply_shortcut
        const paramquick_reply_shortcut = self.quick_reply_shortcut;
        if (paramquick_reply_shortcut) |paramquick_reply_shortcutflag| {
        result += paramquick_reply_shortcutflag.size();
        }

        // effect
        const parameffect = self.effect;
        if (parameffect) |parameffectflag| {
        result += @sizeOf(@TypeOf(parameffectflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 6;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 7;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 14;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 15;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 16;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 10;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 13;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 17;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 18;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesUploadEncryptedFile= struct {
    peer: IInputEncryptedChat,
    file: IInputEncryptedFile,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // file
        const paramfile = self.file;
        result += paramfile.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesSearchStickerSets= struct {
    exclude_featured: ?bool,
    q: []const u8,
    hash: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // exclude_featured
        // true flag

        // q
        const paramq = self.q;
        result += base.strEncodedSize(paramq);
        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesGetSplitRanges= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const MessagesMarkDialogUnread= struct {
    unread: ?bool,
    peer: IInputDialogPeer,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // unread
        // true flag

        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesGetDialogUnreadMarks= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const MessagesClearAllDrafts= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const MessagesUpdatePinnedMessage= struct {
    silent: ?bool,
    unpin: ?bool,
    pm_oneside: ?bool,
    peer: IInputPeer,
    id: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // silent
        // true flag

        // unpin
        // true flag

        // pm_oneside
        // true flag

        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesSendVote= struct {
    peer: IInputPeer,
    msg_id: i32,
    options: []const []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // msg_id
        const parammsg_id = self.msg_id;
        result += @sizeOf(@TypeOf(parammsg_id));
        // options
        const paramoptions = self.options;
        result += 4; // vector id
        result += 4; // vector size
        for (paramoptions) |paramoptionsitem| {
        result += base.strEncodedSize(paramoptionsitem);        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesGetPollResults= struct {
    peer: IInputPeer,
    msg_id: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // msg_id
        const parammsg_id = self.msg_id;
        result += @sizeOf(@TypeOf(parammsg_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesGetOnlines= struct {
    peer: IInputPeer,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MessagesEditChatAbout= struct {
    peer: IInputPeer,
    about: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // about
        const paramabout = self.about;
        result += base.strEncodedSize(paramabout);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesEditChatDefaultBannedRights= struct {
    peer: IInputPeer,
    banned_rights: IChatBannedRights,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // banned_rights
        const parambanned_rights = self.banned_rights;
        result += parambanned_rights.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesGetEmojiKeywords= struct {
    lang_code: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // lang_code
        const paramlang_code = self.lang_code;
        result += base.strEncodedSize(paramlang_code);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MessagesGetEmojiKeywordsDifference= struct {
    lang_code: []const u8,
    from_version: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // lang_code
        const paramlang_code = self.lang_code;
        result += base.strEncodedSize(paramlang_code);
        // from_version
        const paramfrom_version = self.from_version;
        result += @sizeOf(@TypeOf(paramfrom_version));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesGetEmojiKeywordsLanguages= struct {
    lang_codes: []const []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // lang_codes
        const paramlang_codes = self.lang_codes;
        result += 4; // vector id
        result += 4; // vector size
        for (paramlang_codes) |paramlang_codesitem| {
        result += base.strEncodedSize(paramlang_codesitem);        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MessagesGetEmojiURL= struct {
    lang_code: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // lang_code
        const paramlang_code = self.lang_code;
        result += base.strEncodedSize(paramlang_code);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MessagesGetSearchCounters= struct {
    peer: IInputPeer,
    saved_peer_id: ?IInputPeer,
    top_msg_id: ?i32,
    filters: []const IMessagesFilter,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // saved_peer_id
        const paramsaved_peer_id = self.saved_peer_id;
        if (paramsaved_peer_id) |paramsaved_peer_idflag| {
        result += paramsaved_peer_idflag.size();
        }

        // top_msg_id
        const paramtop_msg_id = self.top_msg_id;
        if (paramtop_msg_id) |paramtop_msg_idflag| {
        result += @sizeOf(@TypeOf(paramtop_msg_idflag));        }

        // filters
        const paramfilters = self.filters;
        result += 4; // vector id
        result += 4; // vector size
        for (paramfilters) |paramfiltersitem| {
        result += paramfiltersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesRequestUrlAuth= struct {
    peer: ?IInputPeer,
    msg_id: ?i32,
    button_id: ?i32,
    url: ?[]const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // peer
        const parampeer = self.peer;
        if (parampeer) |parampeerflag| {
        result += parampeerflag.size();
        }

        // msg_id
        const parammsg_id = self.msg_id;
        if (parammsg_id) |parammsg_idflag| {
        result += @sizeOf(@TypeOf(parammsg_idflag));        }

        // button_id
        const parambutton_id = self.button_id;
        if (parambutton_id) |parambutton_idflag| {
        result += @sizeOf(@TypeOf(parambutton_idflag));        }

        // url
        const paramurl = self.url;
        if (paramurl) |paramurlflag| {
        result += base.strEncodedSize(paramurlflag);        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesAcceptUrlAuth= struct {
    write_allowed: ?bool,
    peer: ?IInputPeer,
    msg_id: ?i32,
    button_id: ?i32,
    url: ?[]const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // write_allowed
        // true flag

        // peer
        const parampeer = self.peer;
        if (parampeer) |parampeerflag| {
        result += parampeerflag.size();
        }

        // msg_id
        const parammsg_id = self.msg_id;
        if (parammsg_id) |parammsg_idflag| {
        result += @sizeOf(@TypeOf(parammsg_idflag));        }

        // button_id
        const parambutton_id = self.button_id;
        if (parambutton_id) |parambutton_idflag| {
        result += @sizeOf(@TypeOf(parambutton_idflag));        }

        // url
        const paramurl = self.url;
        if (paramurl) |paramurlflag| {
        result += base.strEncodedSize(paramurlflag);        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesHidePeerSettingsBar= struct {
    peer: IInputPeer,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MessagesGetScheduledHistory= struct {
    peer: IInputPeer,
    hash: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesGetScheduledMessages= struct {
    peer: IInputPeer,
    id: []const i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // id
        const paramid = self.id;
        result += 4; // vector id
        result += 4; // vector size
        for (paramid) |paramiditem| {
        result += @sizeOf(@TypeOf(paramiditem));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesSendScheduledMessages= struct {
    peer: IInputPeer,
    id: []const i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // id
        const paramid = self.id;
        result += 4; // vector id
        result += 4; // vector size
        for (paramid) |paramiditem| {
        result += @sizeOf(@TypeOf(paramiditem));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesDeleteScheduledMessages= struct {
    peer: IInputPeer,
    id: []const i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // id
        const paramid = self.id;
        result += 4; // vector id
        result += 4; // vector size
        for (paramid) |paramiditem| {
        result += @sizeOf(@TypeOf(paramiditem));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesGetPollVotes= struct {
    peer: IInputPeer,
    id: i32,
    option: ?[]const u8,
    offset: ?[]const u8,
    limit: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // option
        const paramoption = self.option;
        if (paramoption) |paramoptionflag| {
        result += base.strEncodedSize(paramoptionflag);        }

        // offset
        const paramoffset = self.offset;
        if (paramoffset) |paramoffsetflag| {
        result += base.strEncodedSize(paramoffsetflag);        }

        // limit
        const paramlimit = self.limit;
        result += @sizeOf(@TypeOf(paramlimit));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesToggleStickerSets= struct {
    uninstall: ?bool,
    archive: ?bool,
    unarchive: ?bool,
    stickersets: []const IInputStickerSet,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // uninstall
        // true flag

        // archive
        // true flag

        // unarchive
        // true flag

        // stickersets
        const paramstickersets = self.stickersets;
        result += 4; // vector id
        result += 4; // vector size
        for (paramstickersets) |paramstickersetsitem| {
        result += paramstickersetsitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesGetDialogFilters= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const MessagesGetSuggestedDialogFilters= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const MessagesUpdateDialogFilter= struct {
    id: i32,
    filter: ?IDialogFilter,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // filter
        const paramfilter = self.filter;
        if (paramfilter) |paramfilterflag| {
        result += paramfilterflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesUpdateDialogFiltersOrder= struct {
    order: []const i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // order
        const paramorder = self.order;
        result += 4; // vector id
        result += 4; // vector size
        for (paramorder) |paramorderitem| {
        result += @sizeOf(@TypeOf(paramorderitem));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MessagesGetOldFeaturedStickers= struct {
    offset: i32,
    limit: i32,
    hash: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // offset
        const paramoffset = self.offset;
        result += @sizeOf(@TypeOf(paramoffset));
        // limit
        const paramlimit = self.limit;
        result += @sizeOf(@TypeOf(paramlimit));
        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesGetReplies= struct {
    peer: IInputPeer,
    msg_id: i32,
    offset_id: i32,
    offset_date: i32,
    add_offset: i32,
    limit: i32,
    max_id: i32,
    min_id: i32,
    hash: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // msg_id
        const parammsg_id = self.msg_id;
        result += @sizeOf(@TypeOf(parammsg_id));
        // offset_id
        const paramoffset_id = self.offset_id;
        result += @sizeOf(@TypeOf(paramoffset_id));
        // offset_date
        const paramoffset_date = self.offset_date;
        result += @sizeOf(@TypeOf(paramoffset_date));
        // add_offset
        const paramadd_offset = self.add_offset;
        result += @sizeOf(@TypeOf(paramadd_offset));
        // limit
        const paramlimit = self.limit;
        result += @sizeOf(@TypeOf(paramlimit));
        // max_id
        const parammax_id = self.max_id;
        result += @sizeOf(@TypeOf(parammax_id));
        // min_id
        const parammin_id = self.min_id;
        result += @sizeOf(@TypeOf(parammin_id));
        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesGetDiscussionMessage= struct {
    peer: IInputPeer,
    msg_id: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // msg_id
        const parammsg_id = self.msg_id;
        result += @sizeOf(@TypeOf(parammsg_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesReadDiscussion= struct {
    peer: IInputPeer,
    msg_id: i32,
    read_max_id: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // msg_id
        const parammsg_id = self.msg_id;
        result += @sizeOf(@TypeOf(parammsg_id));
        // read_max_id
        const paramread_max_id = self.read_max_id;
        result += @sizeOf(@TypeOf(paramread_max_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesUnpinAllMessages= struct {
    peer: IInputPeer,
    top_msg_id: ?i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // top_msg_id
        const paramtop_msg_id = self.top_msg_id;
        if (paramtop_msg_id) |paramtop_msg_idflag| {
        result += @sizeOf(@TypeOf(paramtop_msg_idflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesDeleteChat= struct {
    chat_id: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // chat_id
        const paramchat_id = self.chat_id;
        result += @sizeOf(@TypeOf(paramchat_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MessagesDeletePhoneCallHistory= struct {
    revoke: ?bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // revoke
        // true flag


        _ = self;
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        }
};
const MessagesCheckHistoryImport= struct {
    import_head: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // import_head
        const paramimport_head = self.import_head;
        result += base.strEncodedSize(paramimport_head);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MessagesInitHistoryImport= struct {
    peer: IInputPeer,
    file: IInputFile,
    media_count: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // file
        const paramfile = self.file;
        result += paramfile.size();

        // media_count
        const parammedia_count = self.media_count;
        result += @sizeOf(@TypeOf(parammedia_count));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesUploadImportedMedia= struct {
    peer: IInputPeer,
    import_id: i64,
    file_name: []const u8,
    media: IInputMedia,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // import_id
        const paramimport_id = self.import_id;
        result += @sizeOf(@TypeOf(paramimport_id));
        // file_name
        const paramfile_name = self.file_name;
        result += base.strEncodedSize(paramfile_name);
        // media
        const parammedia = self.media;
        result += parammedia.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesStartHistoryImport= struct {
    peer: IInputPeer,
    import_id: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // import_id
        const paramimport_id = self.import_id;
        result += @sizeOf(@TypeOf(paramimport_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesGetExportedChatInvites= struct {
    revoked: ?bool,
    peer: IInputPeer,
    admin_id: IInputUser,
    offset_date: ?i32,
    offset_link: ?[]const u8,
    limit: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // revoked
        // true flag

        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // admin_id
        const paramadmin_id = self.admin_id;
        result += paramadmin_id.size();

        // offset_date
        const paramoffset_date = self.offset_date;
        if (paramoffset_date) |paramoffset_dateflag| {
        result += @sizeOf(@TypeOf(paramoffset_dateflag));        }

        // offset_link
        const paramoffset_link = self.offset_link;
        if (paramoffset_link) |paramoffset_linkflag| {
        result += base.strEncodedSize(paramoffset_linkflag);        }

        // limit
        const paramlimit = self.limit;
        result += @sizeOf(@TypeOf(paramlimit));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesGetExportedChatInvite= struct {
    peer: IInputPeer,
    link: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // link
        const paramlink = self.link;
        result += base.strEncodedSize(paramlink);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesEditExportedChatInvite= struct {
    revoked: ?bool,
    peer: IInputPeer,
    link: []const u8,
    expire_date: ?i32,
    usage_limit: ?i32,
    request_needed: ?bool,
    title: ?[]const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // revoked
        // true flag

        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // link
        const paramlink = self.link;
        result += base.strEncodedSize(paramlink);
        // expire_date
        const paramexpire_date = self.expire_date;
        if (paramexpire_date) |paramexpire_dateflag| {
        result += @sizeOf(@TypeOf(paramexpire_dateflag));        }

        // usage_limit
        const paramusage_limit = self.usage_limit;
        if (paramusage_limit) |paramusage_limitflag| {
        result += @sizeOf(@TypeOf(paramusage_limitflag));        }

        // request_needed
        const paramrequest_needed = self.request_needed;
        if (paramrequest_needed) |paramrequest_neededflag| {
        _ = paramrequest_neededflag;
        result += 4;        }

        // title
        const paramtitle = self.title;
        if (paramtitle) |paramtitleflag| {
        result += base.strEncodedSize(paramtitleflag);        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesDeleteRevokedExportedChatInvites= struct {
    peer: IInputPeer,
    admin_id: IInputUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // admin_id
        const paramadmin_id = self.admin_id;
        result += paramadmin_id.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesDeleteExportedChatInvite= struct {
    peer: IInputPeer,
    link: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // link
        const paramlink = self.link;
        result += base.strEncodedSize(paramlink);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesGetAdminsWithInvites= struct {
    peer: IInputPeer,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MessagesGetChatInviteImporters= struct {
    requested: ?bool,
    subscription_expired: ?bool,
    peer: IInputPeer,
    link: ?[]const u8,
    q: ?[]const u8,
    offset_date: i32,
    offset_user: IInputUser,
    limit: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // requested
        // true flag

        // subscription_expired
        // true flag

        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // link
        const paramlink = self.link;
        if (paramlink) |paramlinkflag| {
        result += base.strEncodedSize(paramlinkflag);        }

        // q
        const paramq = self.q;
        if (paramq) |paramqflag| {
        result += base.strEncodedSize(paramqflag);        }

        // offset_date
        const paramoffset_date = self.offset_date;
        result += @sizeOf(@TypeOf(paramoffset_date));
        // offset_user
        const paramoffset_user = self.offset_user;
        result += paramoffset_user.size();

        // limit
        const paramlimit = self.limit;
        result += @sizeOf(@TypeOf(paramlimit));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesSetHistoryTTL= struct {
    peer: IInputPeer,
    period: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // period
        const paramperiod = self.period;
        result += @sizeOf(@TypeOf(paramperiod));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesCheckHistoryImportPeer= struct {
    peer: IInputPeer,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MessagesSetChatTheme= struct {
    peer: IInputPeer,
    emoticon: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // emoticon
        const paramemoticon = self.emoticon;
        result += base.strEncodedSize(paramemoticon);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesGetMessageReadParticipants= struct {
    peer: IInputPeer,
    msg_id: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // msg_id
        const parammsg_id = self.msg_id;
        result += @sizeOf(@TypeOf(parammsg_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesGetSearchResultsCalendar= struct {
    peer: IInputPeer,
    saved_peer_id: ?IInputPeer,
    filter: IMessagesFilter,
    offset_id: i32,
    offset_date: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // saved_peer_id
        const paramsaved_peer_id = self.saved_peer_id;
        if (paramsaved_peer_id) |paramsaved_peer_idflag| {
        result += paramsaved_peer_idflag.size();
        }

        // filter
        const paramfilter = self.filter;
        result += paramfilter.size();

        // offset_id
        const paramoffset_id = self.offset_id;
        result += @sizeOf(@TypeOf(paramoffset_id));
        // offset_date
        const paramoffset_date = self.offset_date;
        result += @sizeOf(@TypeOf(paramoffset_date));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesGetSearchResultsPositions= struct {
    peer: IInputPeer,
    saved_peer_id: ?IInputPeer,
    filter: IMessagesFilter,
    offset_id: i32,
    limit: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // saved_peer_id
        const paramsaved_peer_id = self.saved_peer_id;
        if (paramsaved_peer_id) |paramsaved_peer_idflag| {
        result += paramsaved_peer_idflag.size();
        }

        // filter
        const paramfilter = self.filter;
        result += paramfilter.size();

        // offset_id
        const paramoffset_id = self.offset_id;
        result += @sizeOf(@TypeOf(paramoffset_id));
        // limit
        const paramlimit = self.limit;
        result += @sizeOf(@TypeOf(paramlimit));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesHideChatJoinRequest= struct {
    approved: ?bool,
    peer: IInputPeer,
    user_id: IInputUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // approved
        // true flag

        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // user_id
        const paramuser_id = self.user_id;
        result += paramuser_id.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesHideAllChatJoinRequests= struct {
    approved: ?bool,
    peer: IInputPeer,
    link: ?[]const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // approved
        // true flag

        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // link
        const paramlink = self.link;
        if (paramlink) |paramlinkflag| {
        result += base.strEncodedSize(paramlinkflag);        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesToggleNoForwards= struct {
    peer: IInputPeer,
    enabled: bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // enabled
        const paramenabled = self.enabled;
        _ = paramenabled;
        result += 4;
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesSaveDefaultSendAs= struct {
    peer: IInputPeer,
    send_as: IInputPeer,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // send_as
        const paramsend_as = self.send_as;
        result += paramsend_as.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesSendReaction= struct {
    big: ?bool,
    add_to_recent: ?bool,
    peer: IInputPeer,
    msg_id: i32,
    reaction: ?[]const IReaction,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // big
        // true flag

        // add_to_recent
        // true flag

        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // msg_id
        const parammsg_id = self.msg_id;
        result += @sizeOf(@TypeOf(parammsg_id));
        // reaction
        const paramreaction = self.reaction;
        if (paramreaction) |paramreactionflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramreactionflag) |paramreactionflagitem| {
        result += paramreactionflagitem.size();
        }
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesGetMessagesReactions= struct {
    peer: IInputPeer,
    id: []const i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // id
        const paramid = self.id;
        result += 4; // vector id
        result += 4; // vector size
        for (paramid) |paramiditem| {
        result += @sizeOf(@TypeOf(paramiditem));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesGetMessageReactionsList= struct {
    peer: IInputPeer,
    id: i32,
    reaction: ?IReaction,
    offset: ?[]const u8,
    limit: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // reaction
        const paramreaction = self.reaction;
        if (paramreaction) |paramreactionflag| {
        result += paramreactionflag.size();
        }

        // offset
        const paramoffset = self.offset;
        if (paramoffset) |paramoffsetflag| {
        result += base.strEncodedSize(paramoffsetflag);        }

        // limit
        const paramlimit = self.limit;
        result += @sizeOf(@TypeOf(paramlimit));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesSetChatAvailableReactions= struct {
    peer: IInputPeer,
    available_reactions: IChatReactions,
    reactions_limit: ?i32,
    paid_enabled: ?bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // available_reactions
        const paramavailable_reactions = self.available_reactions;
        result += paramavailable_reactions.size();

        // reactions_limit
        const paramreactions_limit = self.reactions_limit;
        if (paramreactions_limit) |paramreactions_limitflag| {
        result += @sizeOf(@TypeOf(paramreactions_limitflag));        }

        // paid_enabled
        const parampaid_enabled = self.paid_enabled;
        if (parampaid_enabled) |parampaid_enabledflag| {
        _ = parampaid_enabledflag;
        result += 4;        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesGetAvailableReactions= struct {
    hash: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MessagesSetDefaultReaction= struct {
    reaction: IReaction,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // reaction
        const paramreaction = self.reaction;
        result += paramreaction.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MessagesTranslateText= struct {
    peer: ?IInputPeer,
    id: ?[]const i32,
    text: ?[]const ITextWithEntities,
    to_lang: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // peer
        const parampeer = self.peer;
        if (parampeer) |parampeerflag| {
        result += parampeerflag.size();
        }

        // id
        const paramid = self.id;
        if (paramid) |paramidflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramidflag) |paramidflagitem| {
        result += @sizeOf(@TypeOf(paramidflagitem));        }
        }

        // text
        const paramtext = self.text;
        if (paramtext) |paramtextflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramtextflag) |paramtextflagitem| {
        result += paramtextflagitem.size();
        }
        }

        // to_lang
        const paramto_lang = self.to_lang;
        result += base.strEncodedSize(paramto_lang);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesGetUnreadReactions= struct {
    peer: IInputPeer,
    top_msg_id: ?i32,
    offset_id: i32,
    add_offset: i32,
    limit: i32,
    max_id: i32,
    min_id: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // top_msg_id
        const paramtop_msg_id = self.top_msg_id;
        if (paramtop_msg_id) |paramtop_msg_idflag| {
        result += @sizeOf(@TypeOf(paramtop_msg_idflag));        }

        // offset_id
        const paramoffset_id = self.offset_id;
        result += @sizeOf(@TypeOf(paramoffset_id));
        // add_offset
        const paramadd_offset = self.add_offset;
        result += @sizeOf(@TypeOf(paramadd_offset));
        // limit
        const paramlimit = self.limit;
        result += @sizeOf(@TypeOf(paramlimit));
        // max_id
        const parammax_id = self.max_id;
        result += @sizeOf(@TypeOf(parammax_id));
        // min_id
        const parammin_id = self.min_id;
        result += @sizeOf(@TypeOf(parammin_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesReadReactions= struct {
    peer: IInputPeer,
    top_msg_id: ?i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // top_msg_id
        const paramtop_msg_id = self.top_msg_id;
        if (paramtop_msg_id) |paramtop_msg_idflag| {
        result += @sizeOf(@TypeOf(paramtop_msg_idflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesSearchSentMedia= struct {
    q: []const u8,
    filter: IMessagesFilter,
    limit: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // q
        const paramq = self.q;
        result += base.strEncodedSize(paramq);
        // filter
        const paramfilter = self.filter;
        result += paramfilter.size();

        // limit
        const paramlimit = self.limit;
        result += @sizeOf(@TypeOf(paramlimit));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesGetAttachMenuBots= struct {
    hash: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MessagesGetAttachMenuBot= struct {
    bot: IInputUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // bot
        const parambot = self.bot;
        result += parambot.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MessagesToggleBotInAttachMenu= struct {
    write_allowed: ?bool,
    bot: IInputUser,
    enabled: bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // write_allowed
        // true flag

        // bot
        const parambot = self.bot;
        result += parambot.size();

        // enabled
        const paramenabled = self.enabled;
        _ = paramenabled;
        result += 4;
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesRequestWebView= struct {
    from_bot_menu: ?bool,
    silent: ?bool,
    compact: ?bool,
    peer: IInputPeer,
    bot: IInputUser,
    url: ?[]const u8,
    start_param: ?[]const u8,
    theme_params: ?IDataJSON,
    platform: []const u8,
    reply_to: ?IInputReplyTo,
    send_as: ?IInputPeer,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // from_bot_menu
        // true flag

        // silent
        // true flag

        // compact
        // true flag

        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // bot
        const parambot = self.bot;
        result += parambot.size();

        // url
        const paramurl = self.url;
        if (paramurl) |paramurlflag| {
        result += base.strEncodedSize(paramurlflag);        }

        // start_param
        const paramstart_param = self.start_param;
        if (paramstart_param) |paramstart_paramflag| {
        result += base.strEncodedSize(paramstart_paramflag);        }

        // theme_params
        const paramtheme_params = self.theme_params;
        if (paramtheme_params) |paramtheme_paramsflag| {
        result += paramtheme_paramsflag.size();
        }

        // platform
        const paramplatform = self.platform;
        result += base.strEncodedSize(paramplatform);
        // reply_to
        const paramreply_to = self.reply_to;
        if (paramreply_to) |paramreply_toflag| {
        result += paramreply_toflag.size();
        }

        // send_as
        const paramsend_as = self.send_as;
        if (paramsend_as) |paramsend_asflag| {
        result += paramsend_asflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 7;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 13;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesProlongWebView= struct {
    silent: ?bool,
    peer: IInputPeer,
    bot: IInputUser,
    query_id: i64,
    reply_to: ?IInputReplyTo,
    send_as: ?IInputPeer,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // silent
        // true flag

        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // bot
        const parambot = self.bot;
        result += parambot.size();

        // query_id
        const paramquery_id = self.query_id;
        result += @sizeOf(@TypeOf(paramquery_id));
        // reply_to
        const paramreply_to = self.reply_to;
        if (paramreply_to) |paramreply_toflag| {
        result += paramreply_toflag.size();
        }

        // send_as
        const paramsend_as = self.send_as;
        if (paramsend_as) |paramsend_asflag| {
        result += paramsend_asflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 13;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesRequestSimpleWebView= struct {
    from_switch_webview: ?bool,
    from_side_menu: ?bool,
    compact: ?bool,
    bot: IInputUser,
    url: ?[]const u8,
    start_param: ?[]const u8,
    theme_params: ?IDataJSON,
    platform: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // from_switch_webview
        // true flag

        // from_side_menu
        // true flag

        // compact
        // true flag

        // bot
        const parambot = self.bot;
        result += parambot.size();

        // url
        const paramurl = self.url;
        if (paramurl) |paramurlflag| {
        result += base.strEncodedSize(paramurlflag);        }

        // start_param
        const paramstart_param = self.start_param;
        if (paramstart_param) |paramstart_paramflag| {
        result += base.strEncodedSize(paramstart_paramflag);        }

        // theme_params
        const paramtheme_params = self.theme_params;
        if (paramtheme_params) |paramtheme_paramsflag| {
        result += paramtheme_paramsflag.size();
        }

        // platform
        const paramplatform = self.platform;
        result += base.strEncodedSize(paramplatform);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 7;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesSendWebViewResultMessage= struct {
    bot_query_id: []const u8,
    result: IInputBotInlineResult,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // bot_query_id
        const parambot_query_id = self.bot_query_id;
        result += base.strEncodedSize(parambot_query_id);
        // result
        const paramresult = self.result;
        result += paramresult.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesSendWebViewData= struct {
    bot: IInputUser,
    random_id: i64,
    button_text: []const u8,
    data: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // bot
        const parambot = self.bot;
        result += parambot.size();

        // random_id
        const paramrandom_id = self.random_id;
        result += @sizeOf(@TypeOf(paramrandom_id));
        // button_text
        const parambutton_text = self.button_text;
        result += base.strEncodedSize(parambutton_text);
        // data
        const paramdata = self.data;
        result += base.strEncodedSize(paramdata);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesTranscribeAudio= struct {
    peer: IInputPeer,
    msg_id: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // msg_id
        const parammsg_id = self.msg_id;
        result += @sizeOf(@TypeOf(parammsg_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesRateTranscribedAudio= struct {
    peer: IInputPeer,
    msg_id: i32,
    transcription_id: i64,
    good: bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // msg_id
        const parammsg_id = self.msg_id;
        result += @sizeOf(@TypeOf(parammsg_id));
        // transcription_id
        const paramtranscription_id = self.transcription_id;
        result += @sizeOf(@TypeOf(paramtranscription_id));
        // good
        const paramgood = self.good;
        _ = paramgood;
        result += 4;
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesGetCustomEmojiDocuments= struct {
    document_id: []const i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // document_id
        const paramdocument_id = self.document_id;
        result += 4; // vector id
        result += 4; // vector size
        for (paramdocument_id) |paramdocument_iditem| {
        result += @sizeOf(@TypeOf(paramdocument_iditem));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MessagesGetEmojiStickers= struct {
    hash: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MessagesGetFeaturedEmojiStickers= struct {
    hash: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MessagesReportReaction= struct {
    peer: IInputPeer,
    id: i32,
    reaction_peer: IInputPeer,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // reaction_peer
        const paramreaction_peer = self.reaction_peer;
        result += paramreaction_peer.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesGetTopReactions= struct {
    limit: i32,
    hash: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // limit
        const paramlimit = self.limit;
        result += @sizeOf(@TypeOf(paramlimit));
        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesGetRecentReactions= struct {
    limit: i32,
    hash: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // limit
        const paramlimit = self.limit;
        result += @sizeOf(@TypeOf(paramlimit));
        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesClearRecentReactions= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const MessagesGetExtendedMedia= struct {
    peer: IInputPeer,
    id: []const i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // id
        const paramid = self.id;
        result += 4; // vector id
        result += 4; // vector size
        for (paramid) |paramiditem| {
        result += @sizeOf(@TypeOf(paramiditem));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesSetDefaultHistoryTTL= struct {
    period: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // period
        const paramperiod = self.period;
        result += @sizeOf(@TypeOf(paramperiod));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MessagesGetDefaultHistoryTTL= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const MessagesSendBotRequestedPeer= struct {
    peer: IInputPeer,
    msg_id: i32,
    button_id: i32,
    requested_peers: []const IInputPeer,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // msg_id
        const parammsg_id = self.msg_id;
        result += @sizeOf(@TypeOf(parammsg_id));
        // button_id
        const parambutton_id = self.button_id;
        result += @sizeOf(@TypeOf(parambutton_id));
        // requested_peers
        const paramrequested_peers = self.requested_peers;
        result += 4; // vector id
        result += 4; // vector size
        for (paramrequested_peers) |paramrequested_peersitem| {
        result += paramrequested_peersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesGetEmojiGroups= struct {
    hash: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MessagesGetEmojiStatusGroups= struct {
    hash: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MessagesGetEmojiProfilePhotoGroups= struct {
    hash: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MessagesSearchCustomEmoji= struct {
    emoticon: []const u8,
    hash: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // emoticon
        const paramemoticon = self.emoticon;
        result += base.strEncodedSize(paramemoticon);
        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesTogglePeerTranslations= struct {
    disabled: ?bool,
    peer: IInputPeer,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // disabled
        // true flag

        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesGetBotApp= struct {
    app: IInputBotApp,
    hash: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // app
        const paramapp = self.app;
        result += paramapp.size();

        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesRequestAppWebView= struct {
    write_allowed: ?bool,
    compact: ?bool,
    peer: IInputPeer,
    app: IInputBotApp,
    start_param: ?[]const u8,
    theme_params: ?IDataJSON,
    platform: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // write_allowed
        // true flag

        // compact
        // true flag

        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // app
        const paramapp = self.app;
        result += paramapp.size();

        // start_param
        const paramstart_param = self.start_param;
        if (paramstart_param) |paramstart_paramflag| {
        result += base.strEncodedSize(paramstart_paramflag);        }

        // theme_params
        const paramtheme_params = self.theme_params;
        if (paramtheme_params) |paramtheme_paramsflag| {
        result += paramtheme_paramsflag.size();
        }

        // platform
        const paramplatform = self.platform;
        result += base.strEncodedSize(paramplatform);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 7;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesSetChatWallPaper= struct {
    for_both: ?bool,
    revert: ?bool,
    peer: IInputPeer,
    wallpaper: ?IInputWallPaper,
    settings: ?IWallPaperSettings,
    id: ?i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // for_both
        // true flag

        // revert
        // true flag

        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // wallpaper
        const paramwallpaper = self.wallpaper;
        if (paramwallpaper) |paramwallpaperflag| {
        result += paramwallpaperflag.size();
        }

        // settings
        const paramsettings = self.settings;
        if (paramsettings) |paramsettingsflag| {
        result += paramsettingsflag.size();
        }

        // id
        const paramid = self.id;
        if (paramid) |paramidflag| {
        result += @sizeOf(@TypeOf(paramidflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesSearchEmojiStickerSets= struct {
    exclude_featured: ?bool,
    q: []const u8,
    hash: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // exclude_featured
        // true flag

        // q
        const paramq = self.q;
        result += base.strEncodedSize(paramq);
        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesGetSavedDialogs= struct {
    exclude_pinned: ?bool,
    offset_date: i32,
    offset_id: i32,
    offset_peer: IInputPeer,
    limit: i32,
    hash: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // exclude_pinned
        // true flag

        // offset_date
        const paramoffset_date = self.offset_date;
        result += @sizeOf(@TypeOf(paramoffset_date));
        // offset_id
        const paramoffset_id = self.offset_id;
        result += @sizeOf(@TypeOf(paramoffset_id));
        // offset_peer
        const paramoffset_peer = self.offset_peer;
        result += paramoffset_peer.size();

        // limit
        const paramlimit = self.limit;
        result += @sizeOf(@TypeOf(paramlimit));
        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesGetSavedHistory= struct {
    peer: IInputPeer,
    offset_id: i32,
    offset_date: i32,
    add_offset: i32,
    limit: i32,
    max_id: i32,
    min_id: i32,
    hash: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // offset_id
        const paramoffset_id = self.offset_id;
        result += @sizeOf(@TypeOf(paramoffset_id));
        // offset_date
        const paramoffset_date = self.offset_date;
        result += @sizeOf(@TypeOf(paramoffset_date));
        // add_offset
        const paramadd_offset = self.add_offset;
        result += @sizeOf(@TypeOf(paramadd_offset));
        // limit
        const paramlimit = self.limit;
        result += @sizeOf(@TypeOf(paramlimit));
        // max_id
        const parammax_id = self.max_id;
        result += @sizeOf(@TypeOf(parammax_id));
        // min_id
        const parammin_id = self.min_id;
        result += @sizeOf(@TypeOf(parammin_id));
        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesDeleteSavedHistory= struct {
    peer: IInputPeer,
    max_id: i32,
    min_date: ?i32,
    max_date: ?i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // max_id
        const parammax_id = self.max_id;
        result += @sizeOf(@TypeOf(parammax_id));
        // min_date
        const parammin_date = self.min_date;
        if (parammin_date) |parammin_dateflag| {
        result += @sizeOf(@TypeOf(parammin_dateflag));        }

        // max_date
        const parammax_date = self.max_date;
        if (parammax_date) |parammax_dateflag| {
        result += @sizeOf(@TypeOf(parammax_dateflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesGetPinnedSavedDialogs= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const MessagesToggleSavedDialogPin= struct {
    pinned: ?bool,
    peer: IInputDialogPeer,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // pinned
        // true flag

        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesReorderPinnedSavedDialogs= struct {
    force: ?bool,
    order: []const IInputDialogPeer,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // force
        // true flag

        // order
        const paramorder = self.order;
        result += 4; // vector id
        result += 4; // vector size
        for (paramorder) |paramorderitem| {
        result += paramorderitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesGetSavedReactionTags= struct {
    peer: ?IInputPeer,
    hash: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // peer
        const parampeer = self.peer;
        if (parampeer) |parampeerflag| {
        result += parampeerflag.size();
        }

        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesUpdateSavedReactionTag= struct {
    reaction: IReaction,
    title: ?[]const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // reaction
        const paramreaction = self.reaction;
        result += paramreaction.size();

        // title
        const paramtitle = self.title;
        if (paramtitle) |paramtitleflag| {
        result += base.strEncodedSize(paramtitleflag);        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesGetDefaultTagReactions= struct {
    hash: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MessagesGetOutboxReadDate= struct {
    peer: IInputPeer,
    msg_id: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // msg_id
        const parammsg_id = self.msg_id;
        result += @sizeOf(@TypeOf(parammsg_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesGetQuickReplies= struct {
    hash: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MessagesReorderQuickReplies= struct {
    order: []const i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // order
        const paramorder = self.order;
        result += 4; // vector id
        result += 4; // vector size
        for (paramorder) |paramorderitem| {
        result += @sizeOf(@TypeOf(paramorderitem));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MessagesCheckQuickReplyShortcut= struct {
    shortcut: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // shortcut
        const paramshortcut = self.shortcut;
        result += base.strEncodedSize(paramshortcut);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MessagesEditQuickReplyShortcut= struct {
    shortcut_id: i32,
    shortcut: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // shortcut_id
        const paramshortcut_id = self.shortcut_id;
        result += @sizeOf(@TypeOf(paramshortcut_id));
        // shortcut
        const paramshortcut = self.shortcut;
        result += base.strEncodedSize(paramshortcut);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesDeleteQuickReplyShortcut= struct {
    shortcut_id: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // shortcut_id
        const paramshortcut_id = self.shortcut_id;
        result += @sizeOf(@TypeOf(paramshortcut_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MessagesGetQuickReplyMessages= struct {
    shortcut_id: i32,
    id: ?[]const i32,
    hash: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // shortcut_id
        const paramshortcut_id = self.shortcut_id;
        result += @sizeOf(@TypeOf(paramshortcut_id));
        // id
        const paramid = self.id;
        if (paramid) |paramidflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramidflag) |paramidflagitem| {
        result += @sizeOf(@TypeOf(paramidflagitem));        }
        }

        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesSendQuickReplyMessages= struct {
    peer: IInputPeer,
    shortcut_id: i32,
    id: []const i32,
    random_id: []const i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // shortcut_id
        const paramshortcut_id = self.shortcut_id;
        result += @sizeOf(@TypeOf(paramshortcut_id));
        // id
        const paramid = self.id;
        result += 4; // vector id
        result += 4; // vector size
        for (paramid) |paramiditem| {
        result += @sizeOf(@TypeOf(paramiditem));        }

        // random_id
        const paramrandom_id = self.random_id;
        result += 4; // vector id
        result += 4; // vector size
        for (paramrandom_id) |paramrandom_iditem| {
        result += @sizeOf(@TypeOf(paramrandom_iditem));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesDeleteQuickReplyMessages= struct {
    shortcut_id: i32,
    id: []const i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // shortcut_id
        const paramshortcut_id = self.shortcut_id;
        result += @sizeOf(@TypeOf(paramshortcut_id));
        // id
        const paramid = self.id;
        result += 4; // vector id
        result += 4; // vector size
        for (paramid) |paramiditem| {
        result += @sizeOf(@TypeOf(paramiditem));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesToggleDialogFilterTags= struct {
    enabled: bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // enabled
        const paramenabled = self.enabled;
        _ = paramenabled;
        result += 4;
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MessagesGetMyStickers= struct {
    offset_id: i64,
    limit: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // offset_id
        const paramoffset_id = self.offset_id;
        result += @sizeOf(@TypeOf(paramoffset_id));
        // limit
        const paramlimit = self.limit;
        result += @sizeOf(@TypeOf(paramlimit));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesGetEmojiStickerGroups= struct {
    hash: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MessagesGetAvailableEffects= struct {
    hash: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const MessagesEditFactCheck= struct {
    peer: IInputPeer,
    msg_id: i32,
    text: ITextWithEntities,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // msg_id
        const parammsg_id = self.msg_id;
        result += @sizeOf(@TypeOf(parammsg_id));
        // text
        const paramtext = self.text;
        result += paramtext.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesDeleteFactCheck= struct {
    peer: IInputPeer,
    msg_id: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // msg_id
        const parammsg_id = self.msg_id;
        result += @sizeOf(@TypeOf(parammsg_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesGetFactCheck= struct {
    peer: IInputPeer,
    msg_id: []const i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // msg_id
        const parammsg_id = self.msg_id;
        result += 4; // vector id
        result += 4; // vector size
        for (parammsg_id) |parammsg_iditem| {
        result += @sizeOf(@TypeOf(parammsg_iditem));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesRequestMainWebView= struct {
    compact: ?bool,
    peer: IInputPeer,
    bot: IInputUser,
    start_param: ?[]const u8,
    theme_params: ?IDataJSON,
    platform: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // compact
        // true flag

        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // bot
        const parambot = self.bot;
        result += parambot.size();

        // start_param
        const paramstart_param = self.start_param;
        if (paramstart_param) |paramstart_paramflag| {
        result += base.strEncodedSize(paramstart_paramflag);        }

        // theme_params
        const paramtheme_params = self.theme_params;
        if (paramtheme_params) |paramtheme_paramsflag| {
        result += paramtheme_paramsflag.size();
        }

        // platform
        const paramplatform = self.platform;
        result += base.strEncodedSize(paramplatform);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 7;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesSendPaidReaction= struct {
    peer: IInputPeer,
    msg_id: i32,
    count: i32,
    random_id: i64,
    private: ?bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // msg_id
        const parammsg_id = self.msg_id;
        result += @sizeOf(@TypeOf(parammsg_id));
        // count
        const paramcount = self.count;
        result += @sizeOf(@TypeOf(paramcount));
        // random_id
        const paramrandom_id = self.random_id;
        result += @sizeOf(@TypeOf(paramrandom_id));
        // private
        const paramprivate = self.private;
        if (paramprivate) |paramprivateflag| {
        _ = paramprivateflag;
        result += 4;        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesTogglePaidReactionPrivacy= struct {
    peer: IInputPeer,
    msg_id: i32,
    private: bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // msg_id
        const parammsg_id = self.msg_id;
        result += @sizeOf(@TypeOf(parammsg_id));
        // private
        const paramprivate = self.private;
        _ = paramprivate;
        result += 4;
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const MessagesGetPaidReactionPrivacy= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const UpdatesGetState= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const UpdatesGetDifference= struct {
    pts: i32,
    pts_limit: ?i32,
    pts_total_limit: ?i32,
    date: i32,
    qts: i32,
    qts_limit: ?i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // pts
        const parampts = self.pts;
        result += @sizeOf(@TypeOf(parampts));
        // pts_limit
        const parampts_limit = self.pts_limit;
        if (parampts_limit) |parampts_limitflag| {
        result += @sizeOf(@TypeOf(parampts_limitflag));        }

        // pts_total_limit
        const parampts_total_limit = self.pts_total_limit;
        if (parampts_total_limit) |parampts_total_limitflag| {
        result += @sizeOf(@TypeOf(parampts_total_limitflag));        }

        // date
        const paramdate = self.date;
        result += @sizeOf(@TypeOf(paramdate));
        // qts
        const paramqts = self.qts;
        result += @sizeOf(@TypeOf(paramqts));
        // qts_limit
        const paramqts_limit = self.qts_limit;
        if (paramqts_limit) |paramqts_limitflag| {
        result += @sizeOf(@TypeOf(paramqts_limitflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UpdatesGetChannelDifference= struct {
    force: ?bool,
    channel: IInputChannel,
    filter: IChannelMessagesFilter,
    pts: i32,
    limit: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // force
        // true flag

        // channel
        const paramchannel = self.channel;
        result += paramchannel.size();

        // filter
        const paramfilter = self.filter;
        result += paramfilter.size();

        // pts
        const parampts = self.pts;
        result += @sizeOf(@TypeOf(parampts));
        // limit
        const paramlimit = self.limit;
        result += @sizeOf(@TypeOf(paramlimit));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PhotosUpdateProfilePhoto= struct {
    fallback: ?bool,
    bot: ?IInputUser,
    id: IInputPhoto,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // fallback
        // true flag

        // bot
        const parambot = self.bot;
        if (parambot) |parambotflag| {
        result += parambotflag.size();
        }

        // id
        const paramid = self.id;
        result += paramid.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PhotosUploadProfilePhoto= struct {
    fallback: ?bool,
    bot: ?IInputUser,
    file: ?IInputFile,
    video: ?IInputFile,
    video_start_ts: ?f64,
    video_emoji_markup: ?IVideoSize,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // fallback
        // true flag

        // bot
        const parambot = self.bot;
        if (parambot) |parambotflag| {
        result += parambotflag.size();
        }

        // file
        const paramfile = self.file;
        if (paramfile) |paramfileflag| {
        result += paramfileflag.size();
        }

        // video
        const paramvideo = self.video;
        if (paramvideo) |paramvideoflag| {
        result += paramvideoflag.size();
        }

        // video_start_ts
        const paramvideo_start_ts = self.video_start_ts;
        if (paramvideo_start_ts) |paramvideo_start_tsflag| {
        result += @sizeOf(@TypeOf(paramvideo_start_tsflag));        }

        // video_emoji_markup
        const paramvideo_emoji_markup = self.video_emoji_markup;
        if (paramvideo_emoji_markup) |paramvideo_emoji_markupflag| {
        result += paramvideo_emoji_markupflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PhotosDeletePhotos= struct {
    id: []const IInputPhoto,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += 4; // vector id
        result += 4; // vector size
        for (paramid) |paramiditem| {
        result += paramiditem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const PhotosGetUserPhotos= struct {
    user_id: IInputUser,
    offset: i32,
    max_id: i64,
    limit: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // user_id
        const paramuser_id = self.user_id;
        result += paramuser_id.size();

        // offset
        const paramoffset = self.offset;
        result += @sizeOf(@TypeOf(paramoffset));
        // max_id
        const parammax_id = self.max_id;
        result += @sizeOf(@TypeOf(parammax_id));
        // limit
        const paramlimit = self.limit;
        result += @sizeOf(@TypeOf(paramlimit));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PhotosUploadContactProfilePhoto= struct {
    suggest: ?bool,
    save: ?bool,
    user_id: IInputUser,
    file: ?IInputFile,
    video: ?IInputFile,
    video_start_ts: ?f64,
    video_emoji_markup: ?IVideoSize,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // suggest
        // true flag

        // save
        // true flag

        // user_id
        const paramuser_id = self.user_id;
        result += paramuser_id.size();

        // file
        const paramfile = self.file;
        if (paramfile) |paramfileflag| {
        result += paramfileflag.size();
        }

        // video
        const paramvideo = self.video;
        if (paramvideo) |paramvideoflag| {
        result += paramvideoflag.size();
        }

        // video_start_ts
        const paramvideo_start_ts = self.video_start_ts;
        if (paramvideo_start_ts) |paramvideo_start_tsflag| {
        result += @sizeOf(@TypeOf(paramvideo_start_tsflag));        }

        // video_emoji_markup
        const paramvideo_emoji_markup = self.video_emoji_markup;
        if (paramvideo_emoji_markup) |paramvideo_emoji_markupflag| {
        result += paramvideo_emoji_markupflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UploadSaveFilePart= struct {
    file_id: i64,
    file_part: i32,
    bytes: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // file_id
        const paramfile_id = self.file_id;
        result += @sizeOf(@TypeOf(paramfile_id));
        // file_part
        const paramfile_part = self.file_part;
        result += @sizeOf(@TypeOf(paramfile_part));
        // bytes
        const parambytes = self.bytes;
        result += base.strEncodedSize(parambytes);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UploadGetFile= struct {
    precise: ?bool,
    cdn_supported: ?bool,
    location: IInputFileLocation,
    offset: i64,
    limit: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // precise
        // true flag

        // cdn_supported
        // true flag

        // location
        const paramlocation = self.location;
        result += paramlocation.size();

        // offset
        const paramoffset = self.offset;
        result += @sizeOf(@TypeOf(paramoffset));
        // limit
        const paramlimit = self.limit;
        result += @sizeOf(@TypeOf(paramlimit));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UploadSaveBigFilePart= struct {
    file_id: i64,
    file_part: i32,
    file_total_parts: i32,
    bytes: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // file_id
        const paramfile_id = self.file_id;
        result += @sizeOf(@TypeOf(paramfile_id));
        // file_part
        const paramfile_part = self.file_part;
        result += @sizeOf(@TypeOf(paramfile_part));
        // file_total_parts
        const paramfile_total_parts = self.file_total_parts;
        result += @sizeOf(@TypeOf(paramfile_total_parts));
        // bytes
        const parambytes = self.bytes;
        result += base.strEncodedSize(parambytes);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UploadGetWebFile= struct {
    location: IInputWebFileLocation,
    offset: i32,
    limit: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // location
        const paramlocation = self.location;
        result += paramlocation.size();

        // offset
        const paramoffset = self.offset;
        result += @sizeOf(@TypeOf(paramoffset));
        // limit
        const paramlimit = self.limit;
        result += @sizeOf(@TypeOf(paramlimit));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UploadGetCdnFile= struct {
    file_token: []const u8,
    offset: i64,
    limit: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // file_token
        const paramfile_token = self.file_token;
        result += base.strEncodedSize(paramfile_token);
        // offset
        const paramoffset = self.offset;
        result += @sizeOf(@TypeOf(paramoffset));
        // limit
        const paramlimit = self.limit;
        result += @sizeOf(@TypeOf(paramlimit));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UploadReuploadCdnFile= struct {
    file_token: []const u8,
    request_token: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // file_token
        const paramfile_token = self.file_token;
        result += base.strEncodedSize(paramfile_token);
        // request_token
        const paramrequest_token = self.request_token;
        result += base.strEncodedSize(paramrequest_token);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UploadGetCdnFileHashes= struct {
    file_token: []const u8,
    offset: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // file_token
        const paramfile_token = self.file_token;
        result += base.strEncodedSize(paramfile_token);
        // offset
        const paramoffset = self.offset;
        result += @sizeOf(@TypeOf(paramoffset));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const UploadGetFileHashes= struct {
    location: IInputFileLocation,
    offset: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // location
        const paramlocation = self.location;
        result += paramlocation.size();

        // offset
        const paramoffset = self.offset;
        result += @sizeOf(@TypeOf(paramoffset));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const HelpGetConfig= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const HelpGetNearestDc= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const HelpGetAppUpdate= struct {
    source: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // source
        const paramsource = self.source;
        result += base.strEncodedSize(paramsource);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const HelpGetInviteText= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const HelpGetSupport= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const HelpSetBotUpdatesStatus= struct {
    pending_updates_count: i32,
    message: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // pending_updates_count
        const parampending_updates_count = self.pending_updates_count;
        result += @sizeOf(@TypeOf(parampending_updates_count));
        // message
        const parammessage = self.message;
        result += base.strEncodedSize(parammessage);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const HelpGetCdnConfig= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const HelpGetRecentMeUrls= struct {
    referer: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // referer
        const paramreferer = self.referer;
        result += base.strEncodedSize(paramreferer);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const HelpGetTermsOfServiceUpdate= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const HelpAcceptTermsOfService= struct {
    id: IDataJSON,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += paramid.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const HelpGetDeepLinkInfo= struct {
    path: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // path
        const parampath = self.path;
        result += base.strEncodedSize(parampath);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const HelpGetAppConfig= struct {
    hash: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const HelpSaveAppLog= struct {
    events: []const IInputAppEvent,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // events
        const paramevents = self.events;
        result += 4; // vector id
        result += 4; // vector size
        for (paramevents) |parameventsitem| {
        result += parameventsitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const HelpGetPassportConfig= struct {
    hash: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const HelpGetSupportName= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const HelpGetUserInfo= struct {
    user_id: IInputUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // user_id
        const paramuser_id = self.user_id;
        result += paramuser_id.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const HelpEditUserInfo= struct {
    user_id: IInputUser,
    message: []const u8,
    entities: []const IMessageEntity,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // user_id
        const paramuser_id = self.user_id;
        result += paramuser_id.size();

        // message
        const parammessage = self.message;
        result += base.strEncodedSize(parammessage);
        // entities
        const paramentities = self.entities;
        result += 4; // vector id
        result += 4; // vector size
        for (paramentities) |paramentitiesitem| {
        result += paramentitiesitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const HelpGetPromoData= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const HelpHidePromoData= struct {
    peer: IInputPeer,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const HelpDismissSuggestion= struct {
    peer: IInputPeer,
    suggestion: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // suggestion
        const paramsuggestion = self.suggestion;
        result += base.strEncodedSize(paramsuggestion);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const HelpGetCountriesList= struct {
    lang_code: []const u8,
    hash: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // lang_code
        const paramlang_code = self.lang_code;
        result += base.strEncodedSize(paramlang_code);
        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const HelpGetPremiumPromo= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const HelpGetPeerColors= struct {
    hash: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const HelpGetPeerProfileColors= struct {
    hash: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const HelpGetTimezonesList= struct {
    hash: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const ChannelsReadHistory= struct {
    channel: IInputChannel,
    max_id: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // channel
        const paramchannel = self.channel;
        result += paramchannel.size();

        // max_id
        const parammax_id = self.max_id;
        result += @sizeOf(@TypeOf(parammax_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelsDeleteMessages= struct {
    channel: IInputChannel,
    id: []const i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // channel
        const paramchannel = self.channel;
        result += paramchannel.size();

        // id
        const paramid = self.id;
        result += 4; // vector id
        result += 4; // vector size
        for (paramid) |paramiditem| {
        result += @sizeOf(@TypeOf(paramiditem));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelsReportSpam= struct {
    channel: IInputChannel,
    participant: IInputPeer,
    id: []const i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // channel
        const paramchannel = self.channel;
        result += paramchannel.size();

        // participant
        const paramparticipant = self.participant;
        result += paramparticipant.size();

        // id
        const paramid = self.id;
        result += 4; // vector id
        result += 4; // vector size
        for (paramid) |paramiditem| {
        result += @sizeOf(@TypeOf(paramiditem));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelsGetMessages= struct {
    channel: IInputChannel,
    id: []const IInputMessage,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // channel
        const paramchannel = self.channel;
        result += paramchannel.size();

        // id
        const paramid = self.id;
        result += 4; // vector id
        result += 4; // vector size
        for (paramid) |paramiditem| {
        result += paramiditem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelsGetParticipants= struct {
    channel: IInputChannel,
    filter: IChannelParticipantsFilter,
    offset: i32,
    limit: i32,
    hash: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // channel
        const paramchannel = self.channel;
        result += paramchannel.size();

        // filter
        const paramfilter = self.filter;
        result += paramfilter.size();

        // offset
        const paramoffset = self.offset;
        result += @sizeOf(@TypeOf(paramoffset));
        // limit
        const paramlimit = self.limit;
        result += @sizeOf(@TypeOf(paramlimit));
        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelsGetParticipant= struct {
    channel: IInputChannel,
    participant: IInputPeer,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // channel
        const paramchannel = self.channel;
        result += paramchannel.size();

        // participant
        const paramparticipant = self.participant;
        result += paramparticipant.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelsGetChannels= struct {
    id: []const IInputChannel,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += 4; // vector id
        result += 4; // vector size
        for (paramid) |paramiditem| {
        result += paramiditem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const ChannelsGetFullChannel= struct {
    channel: IInputChannel,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // channel
        const paramchannel = self.channel;
        result += paramchannel.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const ChannelsCreateChannel= struct {
    broadcast: ?bool,
    megagroup: ?bool,
    for_import: ?bool,
    forum: ?bool,
    title: []const u8,
    about: []const u8,
    geo_point: ?IInputGeoPoint,
    address: ?[]const u8,
    ttl_period: ?i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // broadcast
        // true flag

        // megagroup
        // true flag

        // for_import
        // true flag

        // forum
        // true flag

        // title
        const paramtitle = self.title;
        result += base.strEncodedSize(paramtitle);
        // about
        const paramabout = self.about;
        result += base.strEncodedSize(paramabout);
        // geo_point
        const paramgeo_point = self.geo_point;
        if (paramgeo_point) |paramgeo_pointflag| {
        result += paramgeo_pointflag.size();
        }

        // address
        const paramaddress = self.address;
        if (paramaddress) |paramaddressflag| {
        result += base.strEncodedSize(paramaddressflag);        }

        // ttl_period
        const paramttl_period = self.ttl_period;
        if (paramttl_period) |paramttl_periodflag| {
        result += @sizeOf(@TypeOf(paramttl_periodflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelsEditAdmin= struct {
    channel: IInputChannel,
    user_id: IInputUser,
    admin_rights: IChatAdminRights,
    rank: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // channel
        const paramchannel = self.channel;
        result += paramchannel.size();

        // user_id
        const paramuser_id = self.user_id;
        result += paramuser_id.size();

        // admin_rights
        const paramadmin_rights = self.admin_rights;
        result += paramadmin_rights.size();

        // rank
        const paramrank = self.rank;
        result += base.strEncodedSize(paramrank);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelsEditTitle= struct {
    channel: IInputChannel,
    title: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // channel
        const paramchannel = self.channel;
        result += paramchannel.size();

        // title
        const paramtitle = self.title;
        result += base.strEncodedSize(paramtitle);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelsEditPhoto= struct {
    channel: IInputChannel,
    photo: IInputChatPhoto,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // channel
        const paramchannel = self.channel;
        result += paramchannel.size();

        // photo
        const paramphoto = self.photo;
        result += paramphoto.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelsCheckUsername= struct {
    channel: IInputChannel,
    username: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // channel
        const paramchannel = self.channel;
        result += paramchannel.size();

        // username
        const paramusername = self.username;
        result += base.strEncodedSize(paramusername);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelsUpdateUsername= struct {
    channel: IInputChannel,
    username: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // channel
        const paramchannel = self.channel;
        result += paramchannel.size();

        // username
        const paramusername = self.username;
        result += base.strEncodedSize(paramusername);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelsJoinChannel= struct {
    channel: IInputChannel,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // channel
        const paramchannel = self.channel;
        result += paramchannel.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const ChannelsLeaveChannel= struct {
    channel: IInputChannel,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // channel
        const paramchannel = self.channel;
        result += paramchannel.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const ChannelsInviteToChannel= struct {
    channel: IInputChannel,
    users: []const IInputUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // channel
        const paramchannel = self.channel;
        result += paramchannel.size();

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelsDeleteChannel= struct {
    channel: IInputChannel,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // channel
        const paramchannel = self.channel;
        result += paramchannel.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const ChannelsExportMessageLink= struct {
    grouped: ?bool,
    thread: ?bool,
    channel: IInputChannel,
    id: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // grouped
        // true flag

        // thread
        // true flag

        // channel
        const paramchannel = self.channel;
        result += paramchannel.size();

        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelsToggleSignatures= struct {
    signatures_enabled: ?bool,
    profiles_enabled: ?bool,
    channel: IInputChannel,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // signatures_enabled
        // true flag

        // profiles_enabled
        // true flag

        // channel
        const paramchannel = self.channel;
        result += paramchannel.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelsGetAdminedPublicChannels= struct {
    by_location: ?bool,
    check_limit: ?bool,
    for_personal: ?bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // by_location
        // true flag

        // check_limit
        // true flag

        // for_personal
        // true flag


        _ = self;
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelsEditBanned= struct {
    channel: IInputChannel,
    participant: IInputPeer,
    banned_rights: IChatBannedRights,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // channel
        const paramchannel = self.channel;
        result += paramchannel.size();

        // participant
        const paramparticipant = self.participant;
        result += paramparticipant.size();

        // banned_rights
        const parambanned_rights = self.banned_rights;
        result += parambanned_rights.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelsGetAdminLog= struct {
    channel: IInputChannel,
    q: []const u8,
    events_filter: ?IChannelAdminLogEventsFilter,
    admins: ?[]const IInputUser,
    max_id: i64,
    min_id: i64,
    limit: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // channel
        const paramchannel = self.channel;
        result += paramchannel.size();

        // q
        const paramq = self.q;
        result += base.strEncodedSize(paramq);
        // events_filter
        const paramevents_filter = self.events_filter;
        if (paramevents_filter) |paramevents_filterflag| {
        result += paramevents_filterflag.size();
        }

        // admins
        const paramadmins = self.admins;
        if (paramadmins) |paramadminsflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramadminsflag) |paramadminsflagitem| {
        result += paramadminsflagitem.size();
        }
        }

        // max_id
        const parammax_id = self.max_id;
        result += @sizeOf(@TypeOf(parammax_id));
        // min_id
        const parammin_id = self.min_id;
        result += @sizeOf(@TypeOf(parammin_id));
        // limit
        const paramlimit = self.limit;
        result += @sizeOf(@TypeOf(paramlimit));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelsSetStickers= struct {
    channel: IInputChannel,
    stickerset: IInputStickerSet,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // channel
        const paramchannel = self.channel;
        result += paramchannel.size();

        // stickerset
        const paramstickerset = self.stickerset;
        result += paramstickerset.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelsReadMessageContents= struct {
    channel: IInputChannel,
    id: []const i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // channel
        const paramchannel = self.channel;
        result += paramchannel.size();

        // id
        const paramid = self.id;
        result += 4; // vector id
        result += 4; // vector size
        for (paramid) |paramiditem| {
        result += @sizeOf(@TypeOf(paramiditem));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelsDeleteHistory= struct {
    for_everyone: ?bool,
    channel: IInputChannel,
    max_id: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // for_everyone
        // true flag

        // channel
        const paramchannel = self.channel;
        result += paramchannel.size();

        // max_id
        const parammax_id = self.max_id;
        result += @sizeOf(@TypeOf(parammax_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelsTogglePreHistoryHidden= struct {
    channel: IInputChannel,
    enabled: bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // channel
        const paramchannel = self.channel;
        result += paramchannel.size();

        // enabled
        const paramenabled = self.enabled;
        _ = paramenabled;
        result += 4;
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelsGetLeftChannels= struct {
    offset: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // offset
        const paramoffset = self.offset;
        result += @sizeOf(@TypeOf(paramoffset));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const ChannelsGetGroupsForDiscussion= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const ChannelsSetDiscussionGroup= struct {
    broadcast: IInputChannel,
    group: IInputChannel,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // broadcast
        const parambroadcast = self.broadcast;
        result += parambroadcast.size();

        // group
        const paramgroup = self.group;
        result += paramgroup.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelsEditCreator= struct {
    channel: IInputChannel,
    user_id: IInputUser,
    password: IInputCheckPasswordSRP,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // channel
        const paramchannel = self.channel;
        result += paramchannel.size();

        // user_id
        const paramuser_id = self.user_id;
        result += paramuser_id.size();

        // password
        const parampassword = self.password;
        result += parampassword.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelsEditLocation= struct {
    channel: IInputChannel,
    geo_point: IInputGeoPoint,
    address: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // channel
        const paramchannel = self.channel;
        result += paramchannel.size();

        // geo_point
        const paramgeo_point = self.geo_point;
        result += paramgeo_point.size();

        // address
        const paramaddress = self.address;
        result += base.strEncodedSize(paramaddress);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelsToggleSlowMode= struct {
    channel: IInputChannel,
    seconds: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // channel
        const paramchannel = self.channel;
        result += paramchannel.size();

        // seconds
        const paramseconds = self.seconds;
        result += @sizeOf(@TypeOf(paramseconds));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelsGetInactiveChannels= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const ChannelsConvertToGigagroup= struct {
    channel: IInputChannel,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // channel
        const paramchannel = self.channel;
        result += paramchannel.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const ChannelsViewSponsoredMessage= struct {
    channel: IInputChannel,
    random_id: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // channel
        const paramchannel = self.channel;
        result += paramchannel.size();

        // random_id
        const paramrandom_id = self.random_id;
        result += base.strEncodedSize(paramrandom_id);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelsGetSponsoredMessages= struct {
    channel: IInputChannel,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // channel
        const paramchannel = self.channel;
        result += paramchannel.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const ChannelsGetSendAs= struct {
    peer: IInputPeer,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const ChannelsDeleteParticipantHistory= struct {
    channel: IInputChannel,
    participant: IInputPeer,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // channel
        const paramchannel = self.channel;
        result += paramchannel.size();

        // participant
        const paramparticipant = self.participant;
        result += paramparticipant.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelsToggleJoinToSend= struct {
    channel: IInputChannel,
    enabled: bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // channel
        const paramchannel = self.channel;
        result += paramchannel.size();

        // enabled
        const paramenabled = self.enabled;
        _ = paramenabled;
        result += 4;
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelsToggleJoinRequest= struct {
    channel: IInputChannel,
    enabled: bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // channel
        const paramchannel = self.channel;
        result += paramchannel.size();

        // enabled
        const paramenabled = self.enabled;
        _ = paramenabled;
        result += 4;
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelsReorderUsernames= struct {
    channel: IInputChannel,
    order: []const []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // channel
        const paramchannel = self.channel;
        result += paramchannel.size();

        // order
        const paramorder = self.order;
        result += 4; // vector id
        result += 4; // vector size
        for (paramorder) |paramorderitem| {
        result += base.strEncodedSize(paramorderitem);        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelsToggleUsername= struct {
    channel: IInputChannel,
    username: []const u8,
    active: bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // channel
        const paramchannel = self.channel;
        result += paramchannel.size();

        // username
        const paramusername = self.username;
        result += base.strEncodedSize(paramusername);
        // active
        const paramactive = self.active;
        _ = paramactive;
        result += 4;
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelsDeactivateAllUsernames= struct {
    channel: IInputChannel,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // channel
        const paramchannel = self.channel;
        result += paramchannel.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const ChannelsToggleForum= struct {
    channel: IInputChannel,
    enabled: bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // channel
        const paramchannel = self.channel;
        result += paramchannel.size();

        // enabled
        const paramenabled = self.enabled;
        _ = paramenabled;
        result += 4;
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelsCreateForumTopic= struct {
    channel: IInputChannel,
    title: []const u8,
    icon_color: ?i32,
    icon_emoji_id: ?i64,
    random_id: i64,
    send_as: ?IInputPeer,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // channel
        const paramchannel = self.channel;
        result += paramchannel.size();

        // title
        const paramtitle = self.title;
        result += base.strEncodedSize(paramtitle);
        // icon_color
        const paramicon_color = self.icon_color;
        if (paramicon_color) |paramicon_colorflag| {
        result += @sizeOf(@TypeOf(paramicon_colorflag));        }

        // icon_emoji_id
        const paramicon_emoji_id = self.icon_emoji_id;
        if (paramicon_emoji_id) |paramicon_emoji_idflag| {
        result += @sizeOf(@TypeOf(paramicon_emoji_idflag));        }

        // random_id
        const paramrandom_id = self.random_id;
        result += @sizeOf(@TypeOf(paramrandom_id));
        // send_as
        const paramsend_as = self.send_as;
        if (paramsend_as) |paramsend_asflag| {
        result += paramsend_asflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelsGetForumTopics= struct {
    channel: IInputChannel,
    q: ?[]const u8,
    offset_date: i32,
    offset_id: i32,
    offset_topic: i32,
    limit: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // channel
        const paramchannel = self.channel;
        result += paramchannel.size();

        // q
        const paramq = self.q;
        if (paramq) |paramqflag| {
        result += base.strEncodedSize(paramqflag);        }

        // offset_date
        const paramoffset_date = self.offset_date;
        result += @sizeOf(@TypeOf(paramoffset_date));
        // offset_id
        const paramoffset_id = self.offset_id;
        result += @sizeOf(@TypeOf(paramoffset_id));
        // offset_topic
        const paramoffset_topic = self.offset_topic;
        result += @sizeOf(@TypeOf(paramoffset_topic));
        // limit
        const paramlimit = self.limit;
        result += @sizeOf(@TypeOf(paramlimit));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelsGetForumTopicsByID= struct {
    channel: IInputChannel,
    topics: []const i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // channel
        const paramchannel = self.channel;
        result += paramchannel.size();

        // topics
        const paramtopics = self.topics;
        result += 4; // vector id
        result += 4; // vector size
        for (paramtopics) |paramtopicsitem| {
        result += @sizeOf(@TypeOf(paramtopicsitem));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelsEditForumTopic= struct {
    channel: IInputChannel,
    topic_id: i32,
    title: ?[]const u8,
    icon_emoji_id: ?i64,
    closed: ?bool,
    hidden: ?bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // channel
        const paramchannel = self.channel;
        result += paramchannel.size();

        // topic_id
        const paramtopic_id = self.topic_id;
        result += @sizeOf(@TypeOf(paramtopic_id));
        // title
        const paramtitle = self.title;
        if (paramtitle) |paramtitleflag| {
        result += base.strEncodedSize(paramtitleflag);        }

        // icon_emoji_id
        const paramicon_emoji_id = self.icon_emoji_id;
        if (paramicon_emoji_id) |paramicon_emoji_idflag| {
        result += @sizeOf(@TypeOf(paramicon_emoji_idflag));        }

        // closed
        const paramclosed = self.closed;
        if (paramclosed) |paramclosedflag| {
        _ = paramclosedflag;
        result += 4;        }

        // hidden
        const paramhidden = self.hidden;
        if (paramhidden) |paramhiddenflag| {
        _ = paramhiddenflag;
        result += 4;        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelsUpdatePinnedForumTopic= struct {
    channel: IInputChannel,
    topic_id: i32,
    pinned: bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // channel
        const paramchannel = self.channel;
        result += paramchannel.size();

        // topic_id
        const paramtopic_id = self.topic_id;
        result += @sizeOf(@TypeOf(paramtopic_id));
        // pinned
        const parampinned = self.pinned;
        _ = parampinned;
        result += 4;
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelsDeleteTopicHistory= struct {
    channel: IInputChannel,
    top_msg_id: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // channel
        const paramchannel = self.channel;
        result += paramchannel.size();

        // top_msg_id
        const paramtop_msg_id = self.top_msg_id;
        result += @sizeOf(@TypeOf(paramtop_msg_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelsReorderPinnedForumTopics= struct {
    force: ?bool,
    channel: IInputChannel,
    order: []const i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // force
        // true flag

        // channel
        const paramchannel = self.channel;
        result += paramchannel.size();

        // order
        const paramorder = self.order;
        result += 4; // vector id
        result += 4; // vector size
        for (paramorder) |paramorderitem| {
        result += @sizeOf(@TypeOf(paramorderitem));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelsToggleAntiSpam= struct {
    channel: IInputChannel,
    enabled: bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // channel
        const paramchannel = self.channel;
        result += paramchannel.size();

        // enabled
        const paramenabled = self.enabled;
        _ = paramenabled;
        result += 4;
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelsReportAntiSpamFalsePositive= struct {
    channel: IInputChannel,
    msg_id: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // channel
        const paramchannel = self.channel;
        result += paramchannel.size();

        // msg_id
        const parammsg_id = self.msg_id;
        result += @sizeOf(@TypeOf(parammsg_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelsToggleParticipantsHidden= struct {
    channel: IInputChannel,
    enabled: bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // channel
        const paramchannel = self.channel;
        result += paramchannel.size();

        // enabled
        const paramenabled = self.enabled;
        _ = paramenabled;
        result += 4;
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelsClickSponsoredMessage= struct {
    media: ?bool,
    fullscreen: ?bool,
    channel: IInputChannel,
    random_id: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // media
        // true flag

        // fullscreen
        // true flag

        // channel
        const paramchannel = self.channel;
        result += paramchannel.size();

        // random_id
        const paramrandom_id = self.random_id;
        result += base.strEncodedSize(paramrandom_id);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelsUpdateColor= struct {
    for_profile: ?bool,
    channel: IInputChannel,
    color: ?i32,
    background_emoji_id: ?i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // for_profile
        // true flag

        // channel
        const paramchannel = self.channel;
        result += paramchannel.size();

        // color
        const paramcolor = self.color;
        if (paramcolor) |paramcolorflag| {
        result += @sizeOf(@TypeOf(paramcolorflag));        }

        // background_emoji_id
        const parambackground_emoji_id = self.background_emoji_id;
        if (parambackground_emoji_id) |parambackground_emoji_idflag| {
        result += @sizeOf(@TypeOf(parambackground_emoji_idflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelsToggleViewForumAsMessages= struct {
    channel: IInputChannel,
    enabled: bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // channel
        const paramchannel = self.channel;
        result += paramchannel.size();

        // enabled
        const paramenabled = self.enabled;
        _ = paramenabled;
        result += 4;
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelsGetChannelRecommendations= struct {
    channel: ?IInputChannel,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // channel
        const paramchannel = self.channel;
        if (paramchannel) |paramchannelflag| {
        result += paramchannelflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        }
};
const ChannelsUpdateEmojiStatus= struct {
    channel: IInputChannel,
    emoji_status: IEmojiStatus,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // channel
        const paramchannel = self.channel;
        result += paramchannel.size();

        // emoji_status
        const paramemoji_status = self.emoji_status;
        result += paramemoji_status.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelsSetBoostsToUnblockRestrictions= struct {
    channel: IInputChannel,
    boosts: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // channel
        const paramchannel = self.channel;
        result += paramchannel.size();

        // boosts
        const paramboosts = self.boosts;
        result += @sizeOf(@TypeOf(paramboosts));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelsSetEmojiStickers= struct {
    channel: IInputChannel,
    stickerset: IInputStickerSet,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // channel
        const paramchannel = self.channel;
        result += paramchannel.size();

        // stickerset
        const paramstickerset = self.stickerset;
        result += paramstickerset.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelsReportSponsoredMessage= struct {
    channel: IInputChannel,
    random_id: []const u8,
    option: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // channel
        const paramchannel = self.channel;
        result += paramchannel.size();

        // random_id
        const paramrandom_id = self.random_id;
        result += base.strEncodedSize(paramrandom_id);
        // option
        const paramoption = self.option;
        result += base.strEncodedSize(paramoption);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelsRestrictSponsoredMessages= struct {
    channel: IInputChannel,
    restricted: bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // channel
        const paramchannel = self.channel;
        result += paramchannel.size();

        // restricted
        const paramrestricted = self.restricted;
        _ = paramrestricted;
        result += 4;
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChannelsSearchPosts= struct {
    hashtag: []const u8,
    offset_rate: i32,
    offset_peer: IInputPeer,
    offset_id: i32,
    limit: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // hashtag
        const paramhashtag = self.hashtag;
        result += base.strEncodedSize(paramhashtag);
        // offset_rate
        const paramoffset_rate = self.offset_rate;
        result += @sizeOf(@TypeOf(paramoffset_rate));
        // offset_peer
        const paramoffset_peer = self.offset_peer;
        result += paramoffset_peer.size();

        // offset_id
        const paramoffset_id = self.offset_id;
        result += @sizeOf(@TypeOf(paramoffset_id));
        // limit
        const paramlimit = self.limit;
        result += @sizeOf(@TypeOf(paramlimit));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const BotsSendCustomRequest= struct {
    custom_method: []const u8,
    params: IDataJSON,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // custom_method
        const paramcustom_method = self.custom_method;
        result += base.strEncodedSize(paramcustom_method);
        // params
        const paramparams = self.params;
        result += paramparams.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const BotsAnswerWebhookJSONQuery= struct {
    query_id: i64,
    data: IDataJSON,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // query_id
        const paramquery_id = self.query_id;
        result += @sizeOf(@TypeOf(paramquery_id));
        // data
        const paramdata = self.data;
        result += paramdata.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const BotsSetBotCommands= struct {
    scope: IBotCommandScope,
    lang_code: []const u8,
    commands: []const IBotCommand,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // scope
        const paramscope = self.scope;
        result += paramscope.size();

        // lang_code
        const paramlang_code = self.lang_code;
        result += base.strEncodedSize(paramlang_code);
        // commands
        const paramcommands = self.commands;
        result += 4; // vector id
        result += 4; // vector size
        for (paramcommands) |paramcommandsitem| {
        result += paramcommandsitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const BotsResetBotCommands= struct {
    scope: IBotCommandScope,
    lang_code: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // scope
        const paramscope = self.scope;
        result += paramscope.size();

        // lang_code
        const paramlang_code = self.lang_code;
        result += base.strEncodedSize(paramlang_code);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const BotsGetBotCommands= struct {
    scope: IBotCommandScope,
    lang_code: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // scope
        const paramscope = self.scope;
        result += paramscope.size();

        // lang_code
        const paramlang_code = self.lang_code;
        result += base.strEncodedSize(paramlang_code);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const BotsSetBotMenuButton= struct {
    user_id: IInputUser,
    button: IBotMenuButton,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // user_id
        const paramuser_id = self.user_id;
        result += paramuser_id.size();

        // button
        const parambutton = self.button;
        result += parambutton.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const BotsGetBotMenuButton= struct {
    user_id: IInputUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // user_id
        const paramuser_id = self.user_id;
        result += paramuser_id.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const BotsSetBotBroadcastDefaultAdminRights= struct {
    admin_rights: IChatAdminRights,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // admin_rights
        const paramadmin_rights = self.admin_rights;
        result += paramadmin_rights.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const BotsSetBotGroupDefaultAdminRights= struct {
    admin_rights: IChatAdminRights,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // admin_rights
        const paramadmin_rights = self.admin_rights;
        result += paramadmin_rights.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const BotsSetBotInfo= struct {
    bot: ?IInputUser,
    lang_code: []const u8,
    name: ?[]const u8,
    about: ?[]const u8,
    description: ?[]const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // bot
        const parambot = self.bot;
        if (parambot) |parambotflag| {
        result += parambotflag.size();
        }

        // lang_code
        const paramlang_code = self.lang_code;
        result += base.strEncodedSize(paramlang_code);
        // name
        const paramname = self.name;
        if (paramname) |paramnameflag| {
        result += base.strEncodedSize(paramnameflag);        }

        // about
        const paramabout = self.about;
        if (paramabout) |paramaboutflag| {
        result += base.strEncodedSize(paramaboutflag);        }

        // description
        const paramdescription = self.description;
        if (paramdescription) |paramdescriptionflag| {
        result += base.strEncodedSize(paramdescriptionflag);        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const BotsGetBotInfo= struct {
    bot: ?IInputUser,
    lang_code: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // bot
        const parambot = self.bot;
        if (parambot) |parambotflag| {
        result += parambotflag.size();
        }

        // lang_code
        const paramlang_code = self.lang_code;
        result += base.strEncodedSize(paramlang_code);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const BotsReorderUsernames= struct {
    bot: IInputUser,
    order: []const []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // bot
        const parambot = self.bot;
        result += parambot.size();

        // order
        const paramorder = self.order;
        result += 4; // vector id
        result += 4; // vector size
        for (paramorder) |paramorderitem| {
        result += base.strEncodedSize(paramorderitem);        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const BotsToggleUsername= struct {
    bot: IInputUser,
    username: []const u8,
    active: bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // bot
        const parambot = self.bot;
        result += parambot.size();

        // username
        const paramusername = self.username;
        result += base.strEncodedSize(paramusername);
        // active
        const paramactive = self.active;
        _ = paramactive;
        result += 4;
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const BotsCanSendMessage= struct {
    bot: IInputUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // bot
        const parambot = self.bot;
        result += parambot.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const BotsAllowSendMessage= struct {
    bot: IInputUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // bot
        const parambot = self.bot;
        result += parambot.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const BotsInvokeWebViewCustomMethod= struct {
    bot: IInputUser,
    custom_method: []const u8,
    params: IDataJSON,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // bot
        const parambot = self.bot;
        result += parambot.size();

        // custom_method
        const paramcustom_method = self.custom_method;
        result += base.strEncodedSize(paramcustom_method);
        // params
        const paramparams = self.params;
        result += paramparams.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const BotsGetPopularAppBots= struct {
    offset: []const u8,
    limit: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // offset
        const paramoffset = self.offset;
        result += base.strEncodedSize(paramoffset);
        // limit
        const paramlimit = self.limit;
        result += @sizeOf(@TypeOf(paramlimit));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const BotsAddPreviewMedia= struct {
    bot: IInputUser,
    lang_code: []const u8,
    media: IInputMedia,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // bot
        const parambot = self.bot;
        result += parambot.size();

        // lang_code
        const paramlang_code = self.lang_code;
        result += base.strEncodedSize(paramlang_code);
        // media
        const parammedia = self.media;
        result += parammedia.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const BotsEditPreviewMedia= struct {
    bot: IInputUser,
    lang_code: []const u8,
    media: IInputMedia,
    new_media: IInputMedia,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // bot
        const parambot = self.bot;
        result += parambot.size();

        // lang_code
        const paramlang_code = self.lang_code;
        result += base.strEncodedSize(paramlang_code);
        // media
        const parammedia = self.media;
        result += parammedia.size();

        // new_media
        const paramnew_media = self.new_media;
        result += paramnew_media.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const BotsDeletePreviewMedia= struct {
    bot: IInputUser,
    lang_code: []const u8,
    media: []const IInputMedia,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // bot
        const parambot = self.bot;
        result += parambot.size();

        // lang_code
        const paramlang_code = self.lang_code;
        result += base.strEncodedSize(paramlang_code);
        // media
        const parammedia = self.media;
        result += 4; // vector id
        result += 4; // vector size
        for (parammedia) |parammediaitem| {
        result += parammediaitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const BotsReorderPreviewMedias= struct {
    bot: IInputUser,
    lang_code: []const u8,
    order: []const IInputMedia,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // bot
        const parambot = self.bot;
        result += parambot.size();

        // lang_code
        const paramlang_code = self.lang_code;
        result += base.strEncodedSize(paramlang_code);
        // order
        const paramorder = self.order;
        result += 4; // vector id
        result += 4; // vector size
        for (paramorder) |paramorderitem| {
        result += paramorderitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const BotsGetPreviewInfo= struct {
    bot: IInputUser,
    lang_code: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // bot
        const parambot = self.bot;
        result += parambot.size();

        // lang_code
        const paramlang_code = self.lang_code;
        result += base.strEncodedSize(paramlang_code);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const BotsGetPreviewMedias= struct {
    bot: IInputUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // bot
        const parambot = self.bot;
        result += parambot.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const PaymentsGetPaymentForm= struct {
    invoice: IInputInvoice,
    theme_params: ?IDataJSON,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // invoice
        const paraminvoice = self.invoice;
        result += paraminvoice.size();

        // theme_params
        const paramtheme_params = self.theme_params;
        if (paramtheme_params) |paramtheme_paramsflag| {
        result += paramtheme_paramsflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PaymentsGetPaymentReceipt= struct {
    peer: IInputPeer,
    msg_id: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // msg_id
        const parammsg_id = self.msg_id;
        result += @sizeOf(@TypeOf(parammsg_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PaymentsValidateRequestedInfo= struct {
    save: ?bool,
    invoice: IInputInvoice,
    info: IPaymentRequestedInfo,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // save
        // true flag

        // invoice
        const paraminvoice = self.invoice;
        result += paraminvoice.size();

        // info
        const paraminfo = self.info;
        result += paraminfo.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PaymentsSendPaymentForm= struct {
    form_id: i64,
    invoice: IInputInvoice,
    requested_info_id: ?[]const u8,
    shipping_option_id: ?[]const u8,
    credentials: IInputPaymentCredentials,
    tip_amount: ?i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // form_id
        const paramform_id = self.form_id;
        result += @sizeOf(@TypeOf(paramform_id));
        // invoice
        const paraminvoice = self.invoice;
        result += paraminvoice.size();

        // requested_info_id
        const paramrequested_info_id = self.requested_info_id;
        if (paramrequested_info_id) |paramrequested_info_idflag| {
        result += base.strEncodedSize(paramrequested_info_idflag);        }

        // shipping_option_id
        const paramshipping_option_id = self.shipping_option_id;
        if (paramshipping_option_id) |paramshipping_option_idflag| {
        result += base.strEncodedSize(paramshipping_option_idflag);        }

        // credentials
        const paramcredentials = self.credentials;
        result += paramcredentials.size();

        // tip_amount
        const paramtip_amount = self.tip_amount;
        if (paramtip_amount) |paramtip_amountflag| {
        result += @sizeOf(@TypeOf(paramtip_amountflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PaymentsGetSavedInfo= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const PaymentsClearSavedInfo= struct {
    credentials: ?bool,
    info: ?bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // credentials
        // true flag

        // info
        // true flag


        _ = self;
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PaymentsGetBankCardData= struct {
    number: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // number
        const paramnumber = self.number;
        result += base.strEncodedSize(paramnumber);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const PaymentsExportInvoice= struct {
    invoice_media: IInputMedia,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // invoice_media
        const paraminvoice_media = self.invoice_media;
        result += paraminvoice_media.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const PaymentsAssignAppStoreTransaction= struct {
    receipt: []const u8,
    purpose: IInputStorePaymentPurpose,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // receipt
        const paramreceipt = self.receipt;
        result += base.strEncodedSize(paramreceipt);
        // purpose
        const parampurpose = self.purpose;
        result += parampurpose.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PaymentsAssignPlayMarketTransaction= struct {
    receipt: IDataJSON,
    purpose: IInputStorePaymentPurpose,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // receipt
        const paramreceipt = self.receipt;
        result += paramreceipt.size();

        // purpose
        const parampurpose = self.purpose;
        result += parampurpose.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PaymentsCanPurchasePremium= struct {
    purpose: IInputStorePaymentPurpose,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // purpose
        const parampurpose = self.purpose;
        result += parampurpose.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const PaymentsGetPremiumGiftCodeOptions= struct {
    boost_peer: ?IInputPeer,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // boost_peer
        const paramboost_peer = self.boost_peer;
        if (paramboost_peer) |paramboost_peerflag| {
        result += paramboost_peerflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        }
};
const PaymentsCheckGiftCode= struct {
    slug: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // slug
        const paramslug = self.slug;
        result += base.strEncodedSize(paramslug);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const PaymentsApplyGiftCode= struct {
    slug: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // slug
        const paramslug = self.slug;
        result += base.strEncodedSize(paramslug);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const PaymentsGetGiveawayInfo= struct {
    peer: IInputPeer,
    msg_id: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // msg_id
        const parammsg_id = self.msg_id;
        result += @sizeOf(@TypeOf(parammsg_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PaymentsLaunchPrepaidGiveaway= struct {
    peer: IInputPeer,
    giveaway_id: i64,
    purpose: IInputStorePaymentPurpose,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // giveaway_id
        const paramgiveaway_id = self.giveaway_id;
        result += @sizeOf(@TypeOf(paramgiveaway_id));
        // purpose
        const parampurpose = self.purpose;
        result += parampurpose.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PaymentsGetStarsTopupOptions= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const PaymentsGetStarsStatus= struct {
    peer: IInputPeer,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const PaymentsGetStarsTransactions= struct {
    inbound: ?bool,
    outbound: ?bool,
    ascending: ?bool,
    subscription_id: ?[]const u8,
    peer: IInputPeer,
    offset: []const u8,
    limit: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // inbound
        // true flag

        // outbound
        // true flag

        // ascending
        // true flag

        // subscription_id
        const paramsubscription_id = self.subscription_id;
        if (paramsubscription_id) |paramsubscription_idflag| {
        result += base.strEncodedSize(paramsubscription_idflag);        }

        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // offset
        const paramoffset = self.offset;
        result += base.strEncodedSize(paramoffset);
        // limit
        const paramlimit = self.limit;
        result += @sizeOf(@TypeOf(paramlimit));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PaymentsSendStarsForm= struct {
    form_id: i64,
    invoice: IInputInvoice,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // form_id
        const paramform_id = self.form_id;
        result += @sizeOf(@TypeOf(paramform_id));
        // invoice
        const paraminvoice = self.invoice;
        result += paraminvoice.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PaymentsRefundStarsCharge= struct {
    user_id: IInputUser,
    charge_id: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // user_id
        const paramuser_id = self.user_id;
        result += paramuser_id.size();

        // charge_id
        const paramcharge_id = self.charge_id;
        result += base.strEncodedSize(paramcharge_id);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PaymentsGetStarsRevenueStats= struct {
    dark: ?bool,
    peer: IInputPeer,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // dark
        // true flag

        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PaymentsGetStarsRevenueWithdrawalUrl= struct {
    peer: IInputPeer,
    stars: i64,
    password: IInputCheckPasswordSRP,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // stars
        const paramstars = self.stars;
        result += @sizeOf(@TypeOf(paramstars));
        // password
        const parampassword = self.password;
        result += parampassword.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PaymentsGetStarsRevenueAdsAccountUrl= struct {
    peer: IInputPeer,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const PaymentsGetStarsTransactionsByID= struct {
    peer: IInputPeer,
    id: []const IInputStarsTransaction,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // id
        const paramid = self.id;
        result += 4; // vector id
        result += 4; // vector size
        for (paramid) |paramiditem| {
        result += paramiditem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PaymentsGetStarsGiftOptions= struct {
    user_id: ?IInputUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // user_id
        const paramuser_id = self.user_id;
        if (paramuser_id) |paramuser_idflag| {
        result += paramuser_idflag.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        }
};
const PaymentsGetStarsSubscriptions= struct {
    missing_balance: ?bool,
    peer: IInputPeer,
    offset: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // missing_balance
        // true flag

        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // offset
        const paramoffset = self.offset;
        result += base.strEncodedSize(paramoffset);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PaymentsChangeStarsSubscription= struct {
    peer: IInputPeer,
    subscription_id: []const u8,
    canceled: ?bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // subscription_id
        const paramsubscription_id = self.subscription_id;
        result += base.strEncodedSize(paramsubscription_id);
        // canceled
        const paramcanceled = self.canceled;
        if (paramcanceled) |paramcanceledflag| {
        _ = paramcanceledflag;
        result += 4;        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PaymentsFulfillStarsSubscription= struct {
    peer: IInputPeer,
    subscription_id: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // subscription_id
        const paramsubscription_id = self.subscription_id;
        result += base.strEncodedSize(paramsubscription_id);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PaymentsGetStarsGiveawayOptions= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const PaymentsGetStarGifts= struct {
    hash: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // hash
        const paramhash = self.hash;
        result += @sizeOf(@TypeOf(paramhash));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const PaymentsGetUserStarGifts= struct {
    user_id: IInputUser,
    offset: []const u8,
    limit: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // user_id
        const paramuser_id = self.user_id;
        result += paramuser_id.size();

        // offset
        const paramoffset = self.offset;
        result += base.strEncodedSize(paramoffset);
        // limit
        const paramlimit = self.limit;
        result += @sizeOf(@TypeOf(paramlimit));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PaymentsSaveStarGift= struct {
    unsave: ?bool,
    user_id: IInputUser,
    msg_id: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // unsave
        // true flag

        // user_id
        const paramuser_id = self.user_id;
        result += paramuser_id.size();

        // msg_id
        const parammsg_id = self.msg_id;
        result += @sizeOf(@TypeOf(parammsg_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PaymentsConvertStarGift= struct {
    user_id: IInputUser,
    msg_id: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // user_id
        const paramuser_id = self.user_id;
        result += paramuser_id.size();

        // msg_id
        const parammsg_id = self.msg_id;
        result += @sizeOf(@TypeOf(parammsg_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StickersCreateStickerSet= struct {
    masks: ?bool,
    emojis: ?bool,
    text_color: ?bool,
    user_id: IInputUser,
    title: []const u8,
    short_name: []const u8,
    thumb: ?IInputDocument,
    stickers: []const IInputStickerSetItem,
    software: ?[]const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // masks
        // true flag

        // emojis
        // true flag

        // text_color
        // true flag

        // user_id
        const paramuser_id = self.user_id;
        result += paramuser_id.size();

        // title
        const paramtitle = self.title;
        result += base.strEncodedSize(paramtitle);
        // short_name
        const paramshort_name = self.short_name;
        result += base.strEncodedSize(paramshort_name);
        // thumb
        const paramthumb = self.thumb;
        if (paramthumb) |paramthumbflag| {
        result += paramthumbflag.size();
        }

        // stickers
        const paramstickers = self.stickers;
        result += 4; // vector id
        result += 4; // vector size
        for (paramstickers) |paramstickersitem| {
        result += paramstickersitem.size();
        }

        // software
        const paramsoftware = self.software;
        if (paramsoftware) |paramsoftwareflag| {
        result += base.strEncodedSize(paramsoftwareflag);        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 6;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StickersRemoveStickerFromSet= struct {
    sticker: IInputDocument,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // sticker
        const paramsticker = self.sticker;
        result += paramsticker.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const StickersChangeStickerPosition= struct {
    sticker: IInputDocument,
    position: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // sticker
        const paramsticker = self.sticker;
        result += paramsticker.size();

        // position
        const paramposition = self.position;
        result += @sizeOf(@TypeOf(paramposition));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StickersAddStickerToSet= struct {
    stickerset: IInputStickerSet,
    sticker: IInputStickerSetItem,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // stickerset
        const paramstickerset = self.stickerset;
        result += paramstickerset.size();

        // sticker
        const paramsticker = self.sticker;
        result += paramsticker.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StickersSetStickerSetThumb= struct {
    stickerset: IInputStickerSet,
    thumb: ?IInputDocument,
    thumb_document_id: ?i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // stickerset
        const paramstickerset = self.stickerset;
        result += paramstickerset.size();

        // thumb
        const paramthumb = self.thumb;
        if (paramthumb) |paramthumbflag| {
        result += paramthumbflag.size();
        }

        // thumb_document_id
        const paramthumb_document_id = self.thumb_document_id;
        if (paramthumb_document_id) |paramthumb_document_idflag| {
        result += @sizeOf(@TypeOf(paramthumb_document_idflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StickersCheckShortName= struct {
    short_name: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // short_name
        const paramshort_name = self.short_name;
        result += base.strEncodedSize(paramshort_name);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const StickersSuggestShortName= struct {
    title: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // title
        const paramtitle = self.title;
        result += base.strEncodedSize(paramtitle);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const StickersChangeSticker= struct {
    sticker: IInputDocument,
    emoji: ?[]const u8,
    mask_coords: ?IMaskCoords,
    keywords: ?[]const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // sticker
        const paramsticker = self.sticker;
        result += paramsticker.size();

        // emoji
        const paramemoji = self.emoji;
        if (paramemoji) |paramemojiflag| {
        result += base.strEncodedSize(paramemojiflag);        }

        // mask_coords
        const parammask_coords = self.mask_coords;
        if (parammask_coords) |parammask_coordsflag| {
        result += parammask_coordsflag.size();
        }

        // keywords
        const paramkeywords = self.keywords;
        if (paramkeywords) |paramkeywordsflag| {
        result += base.strEncodedSize(paramkeywordsflag);        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StickersRenameStickerSet= struct {
    stickerset: IInputStickerSet,
    title: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // stickerset
        const paramstickerset = self.stickerset;
        result += paramstickerset.size();

        // title
        const paramtitle = self.title;
        result += base.strEncodedSize(paramtitle);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StickersDeleteStickerSet= struct {
    stickerset: IInputStickerSet,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // stickerset
        const paramstickerset = self.stickerset;
        result += paramstickerset.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const StickersReplaceSticker= struct {
    sticker: IInputDocument,
    new_sticker: IInputStickerSetItem,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // sticker
        const paramsticker = self.sticker;
        result += paramsticker.size();

        // new_sticker
        const paramnew_sticker = self.new_sticker;
        result += paramnew_sticker.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PhoneGetCallConfig= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const PhoneRequestCall= struct {
    video: ?bool,
    user_id: IInputUser,
    random_id: i32,
    g_a_hash: []const u8,
    protocol: IPhoneCallProtocol,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // video
        // true flag

        // user_id
        const paramuser_id = self.user_id;
        result += paramuser_id.size();

        // random_id
        const paramrandom_id = self.random_id;
        result += @sizeOf(@TypeOf(paramrandom_id));
        // g_a_hash
        const paramg_a_hash = self.g_a_hash;
        result += base.strEncodedSize(paramg_a_hash);
        // protocol
        const paramprotocol = self.protocol;
        result += paramprotocol.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PhoneAcceptCall= struct {
    peer: IInputPhoneCall,
    g_b: []const u8,
    protocol: IPhoneCallProtocol,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // g_b
        const paramg_b = self.g_b;
        result += base.strEncodedSize(paramg_b);
        // protocol
        const paramprotocol = self.protocol;
        result += paramprotocol.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PhoneConfirmCall= struct {
    peer: IInputPhoneCall,
    g_a: []const u8,
    key_fingerprint: i64,
    protocol: IPhoneCallProtocol,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // g_a
        const paramg_a = self.g_a;
        result += base.strEncodedSize(paramg_a);
        // key_fingerprint
        const paramkey_fingerprint = self.key_fingerprint;
        result += @sizeOf(@TypeOf(paramkey_fingerprint));
        // protocol
        const paramprotocol = self.protocol;
        result += paramprotocol.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PhoneReceivedCall= struct {
    peer: IInputPhoneCall,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const PhoneDiscardCall= struct {
    video: ?bool,
    peer: IInputPhoneCall,
    duration: i32,
    reason: IPhoneCallDiscardReason,
    connection_id: i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // video
        // true flag

        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // duration
        const paramduration = self.duration;
        result += @sizeOf(@TypeOf(paramduration));
        // reason
        const paramreason = self.reason;
        result += paramreason.size();

        // connection_id
        const paramconnection_id = self.connection_id;
        result += @sizeOf(@TypeOf(paramconnection_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PhoneSetCallRating= struct {
    user_initiative: ?bool,
    peer: IInputPhoneCall,
    rating: i32,
    comment: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // user_initiative
        // true flag

        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // rating
        const paramrating = self.rating;
        result += @sizeOf(@TypeOf(paramrating));
        // comment
        const paramcomment = self.comment;
        result += base.strEncodedSize(paramcomment);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PhoneSaveCallDebug= struct {
    peer: IInputPhoneCall,
    debug: IDataJSON,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // debug
        const paramdebug = self.debug;
        result += paramdebug.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PhoneSendSignalingData= struct {
    peer: IInputPhoneCall,
    data: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // data
        const paramdata = self.data;
        result += base.strEncodedSize(paramdata);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PhoneCreateGroupCall= struct {
    rtmp_stream: ?bool,
    peer: IInputPeer,
    random_id: i32,
    title: ?[]const u8,
    schedule_date: ?i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // rtmp_stream
        // true flag

        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // random_id
        const paramrandom_id = self.random_id;
        result += @sizeOf(@TypeOf(paramrandom_id));
        // title
        const paramtitle = self.title;
        if (paramtitle) |paramtitleflag| {
        result += base.strEncodedSize(paramtitleflag);        }

        // schedule_date
        const paramschedule_date = self.schedule_date;
        if (paramschedule_date) |paramschedule_dateflag| {
        result += @sizeOf(@TypeOf(paramschedule_dateflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PhoneJoinGroupCall= struct {
    muted: ?bool,
    video_stopped: ?bool,
    call: IInputGroupCall,
    join_as: IInputPeer,
    invite_hash: ?[]const u8,
    params: IDataJSON,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // muted
        // true flag

        // video_stopped
        // true flag

        // call
        const paramcall = self.call;
        result += paramcall.size();

        // join_as
        const paramjoin_as = self.join_as;
        result += paramjoin_as.size();

        // invite_hash
        const paraminvite_hash = self.invite_hash;
        if (paraminvite_hash) |paraminvite_hashflag| {
        result += base.strEncodedSize(paraminvite_hashflag);        }

        // params
        const paramparams = self.params;
        result += paramparams.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PhoneLeaveGroupCall= struct {
    call: IInputGroupCall,
    source: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // call
        const paramcall = self.call;
        result += paramcall.size();

        // source
        const paramsource = self.source;
        result += @sizeOf(@TypeOf(paramsource));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PhoneInviteToGroupCall= struct {
    call: IInputGroupCall,
    users: []const IInputUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // call
        const paramcall = self.call;
        result += paramcall.size();

        // users
        const paramusers = self.users;
        result += 4; // vector id
        result += 4; // vector size
        for (paramusers) |paramusersitem| {
        result += paramusersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PhoneDiscardGroupCall= struct {
    call: IInputGroupCall,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // call
        const paramcall = self.call;
        result += paramcall.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const PhoneToggleGroupCallSettings= struct {
    reset_invite_hash: ?bool,
    call: IInputGroupCall,
    join_muted: ?bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // reset_invite_hash
        // true flag

        // call
        const paramcall = self.call;
        result += paramcall.size();

        // join_muted
        const paramjoin_muted = self.join_muted;
        if (paramjoin_muted) |paramjoin_mutedflag| {
        _ = paramjoin_mutedflag;
        result += 4;        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PhoneGetGroupCall= struct {
    call: IInputGroupCall,
    limit: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // call
        const paramcall = self.call;
        result += paramcall.size();

        // limit
        const paramlimit = self.limit;
        result += @sizeOf(@TypeOf(paramlimit));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PhoneGetGroupParticipants= struct {
    call: IInputGroupCall,
    ids: []const IInputPeer,
    sources: []const i32,
    offset: []const u8,
    limit: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // call
        const paramcall = self.call;
        result += paramcall.size();

        // ids
        const paramids = self.ids;
        result += 4; // vector id
        result += 4; // vector size
        for (paramids) |paramidsitem| {
        result += paramidsitem.size();
        }

        // sources
        const paramsources = self.sources;
        result += 4; // vector id
        result += 4; // vector size
        for (paramsources) |paramsourcesitem| {
        result += @sizeOf(@TypeOf(paramsourcesitem));        }

        // offset
        const paramoffset = self.offset;
        result += base.strEncodedSize(paramoffset);
        // limit
        const paramlimit = self.limit;
        result += @sizeOf(@TypeOf(paramlimit));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PhoneCheckGroupCall= struct {
    call: IInputGroupCall,
    sources: []const i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // call
        const paramcall = self.call;
        result += paramcall.size();

        // sources
        const paramsources = self.sources;
        result += 4; // vector id
        result += 4; // vector size
        for (paramsources) |paramsourcesitem| {
        result += @sizeOf(@TypeOf(paramsourcesitem));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PhoneToggleGroupCallRecord= struct {
    start: ?bool,
    video: ?bool,
    call: IInputGroupCall,
    title: ?[]const u8,
    video_portrait: ?bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // start
        // true flag

        // video
        // true flag

        // call
        const paramcall = self.call;
        result += paramcall.size();

        // title
        const paramtitle = self.title;
        if (paramtitle) |paramtitleflag| {
        result += base.strEncodedSize(paramtitleflag);        }

        // video_portrait
        const paramvideo_portrait = self.video_portrait;
        if (paramvideo_portrait) |paramvideo_portraitflag| {
        _ = paramvideo_portraitflag;
        result += 4;        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PhoneEditGroupCallParticipant= struct {
    call: IInputGroupCall,
    participant: IInputPeer,
    muted: ?bool,
    volume: ?i32,
    raise_hand: ?bool,
    video_stopped: ?bool,
    video_paused: ?bool,
    presentation_paused: ?bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // call
        const paramcall = self.call;
        result += paramcall.size();

        // participant
        const paramparticipant = self.participant;
        result += paramparticipant.size();

        // muted
        const parammuted = self.muted;
        if (parammuted) |parammutedflag| {
        _ = parammutedflag;
        result += 4;        }

        // volume
        const paramvolume = self.volume;
        if (paramvolume) |paramvolumeflag| {
        result += @sizeOf(@TypeOf(paramvolumeflag));        }

        // raise_hand
        const paramraise_hand = self.raise_hand;
        if (paramraise_hand) |paramraise_handflag| {
        _ = paramraise_handflag;
        result += 4;        }

        // video_stopped
        const paramvideo_stopped = self.video_stopped;
        if (paramvideo_stopped) |paramvideo_stoppedflag| {
        _ = paramvideo_stoppedflag;
        result += 4;        }

        // video_paused
        const paramvideo_paused = self.video_paused;
        if (paramvideo_paused) |paramvideo_pausedflag| {
        _ = paramvideo_pausedflag;
        result += 4;        }

        // presentation_paused
        const parampresentation_paused = self.presentation_paused;
        if (parampresentation_paused) |parampresentation_pausedflag| {
        _ = parampresentation_pausedflag;
        result += 4;        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PhoneEditGroupCallTitle= struct {
    call: IInputGroupCall,
    title: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // call
        const paramcall = self.call;
        result += paramcall.size();

        // title
        const paramtitle = self.title;
        result += base.strEncodedSize(paramtitle);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PhoneGetGroupCallJoinAs= struct {
    peer: IInputPeer,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const PhoneExportGroupCallInvite= struct {
    can_self_unmute: ?bool,
    call: IInputGroupCall,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // can_self_unmute
        // true flag

        // call
        const paramcall = self.call;
        result += paramcall.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PhoneToggleGroupCallStartSubscription= struct {
    call: IInputGroupCall,
    subscribed: bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // call
        const paramcall = self.call;
        result += paramcall.size();

        // subscribed
        const paramsubscribed = self.subscribed;
        _ = paramsubscribed;
        result += 4;
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PhoneStartScheduledGroupCall= struct {
    call: IInputGroupCall,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // call
        const paramcall = self.call;
        result += paramcall.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const PhoneSaveDefaultGroupCallJoinAs= struct {
    peer: IInputPeer,
    join_as: IInputPeer,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // join_as
        const paramjoin_as = self.join_as;
        result += paramjoin_as.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PhoneJoinGroupCallPresentation= struct {
    call: IInputGroupCall,
    params: IDataJSON,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // call
        const paramcall = self.call;
        result += paramcall.size();

        // params
        const paramparams = self.params;
        result += paramparams.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PhoneLeaveGroupCallPresentation= struct {
    call: IInputGroupCall,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // call
        const paramcall = self.call;
        result += paramcall.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const PhoneGetGroupCallStreamChannels= struct {
    call: IInputGroupCall,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // call
        const paramcall = self.call;
        result += paramcall.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const PhoneGetGroupCallStreamRtmpUrl= struct {
    peer: IInputPeer,
    revoke: bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // revoke
        const paramrevoke = self.revoke;
        _ = paramrevoke;
        result += 4;
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PhoneSaveCallLog= struct {
    peer: IInputPhoneCall,
    file: IInputFile,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // file
        const paramfile = self.file;
        result += paramfile.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const LangpackGetLangPack= struct {
    lang_pack: []const u8,
    lang_code: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // lang_pack
        const paramlang_pack = self.lang_pack;
        result += base.strEncodedSize(paramlang_pack);
        // lang_code
        const paramlang_code = self.lang_code;
        result += base.strEncodedSize(paramlang_code);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const LangpackGetStrings= struct {
    lang_pack: []const u8,
    lang_code: []const u8,
    keys: []const []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // lang_pack
        const paramlang_pack = self.lang_pack;
        result += base.strEncodedSize(paramlang_pack);
        // lang_code
        const paramlang_code = self.lang_code;
        result += base.strEncodedSize(paramlang_code);
        // keys
        const paramkeys = self.keys;
        result += 4; // vector id
        result += 4; // vector size
        for (paramkeys) |paramkeysitem| {
        result += base.strEncodedSize(paramkeysitem);        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const LangpackGetDifference= struct {
    lang_pack: []const u8,
    lang_code: []const u8,
    from_version: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // lang_pack
        const paramlang_pack = self.lang_pack;
        result += base.strEncodedSize(paramlang_pack);
        // lang_code
        const paramlang_code = self.lang_code;
        result += base.strEncodedSize(paramlang_code);
        // from_version
        const paramfrom_version = self.from_version;
        result += @sizeOf(@TypeOf(paramfrom_version));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const LangpackGetLanguages= struct {
    lang_pack: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // lang_pack
        const paramlang_pack = self.lang_pack;
        result += base.strEncodedSize(paramlang_pack);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const LangpackGetLanguage= struct {
    lang_pack: []const u8,
    lang_code: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // lang_pack
        const paramlang_pack = self.lang_pack;
        result += base.strEncodedSize(paramlang_pack);
        // lang_code
        const paramlang_code = self.lang_code;
        result += base.strEncodedSize(paramlang_code);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const FoldersEditPeerFolders= struct {
    folder_peers: []const IInputFolderPeer,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // folder_peers
        const paramfolder_peers = self.folder_peers;
        result += 4; // vector id
        result += 4; // vector size
        for (paramfolder_peers) |paramfolder_peersitem| {
        result += paramfolder_peersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const StatsGetBroadcastStats= struct {
    dark: ?bool,
    channel: IInputChannel,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // dark
        // true flag

        // channel
        const paramchannel = self.channel;
        result += paramchannel.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StatsLoadAsyncGraph= struct {
    token: []const u8,
    x: ?i64,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // token
        const paramtoken = self.token;
        result += base.strEncodedSize(paramtoken);
        // x
        const paramx = self.x;
        if (paramx) |paramxflag| {
        result += @sizeOf(@TypeOf(paramxflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StatsGetMegagroupStats= struct {
    dark: ?bool,
    channel: IInputChannel,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // dark
        // true flag

        // channel
        const paramchannel = self.channel;
        result += paramchannel.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StatsGetMessagePublicForwards= struct {
    channel: IInputChannel,
    msg_id: i32,
    offset: []const u8,
    limit: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // channel
        const paramchannel = self.channel;
        result += paramchannel.size();

        // msg_id
        const parammsg_id = self.msg_id;
        result += @sizeOf(@TypeOf(parammsg_id));
        // offset
        const paramoffset = self.offset;
        result += base.strEncodedSize(paramoffset);
        // limit
        const paramlimit = self.limit;
        result += @sizeOf(@TypeOf(paramlimit));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StatsGetMessageStats= struct {
    dark: ?bool,
    channel: IInputChannel,
    msg_id: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // dark
        // true flag

        // channel
        const paramchannel = self.channel;
        result += paramchannel.size();

        // msg_id
        const parammsg_id = self.msg_id;
        result += @sizeOf(@TypeOf(parammsg_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StatsGetStoryStats= struct {
    dark: ?bool,
    peer: IInputPeer,
    id: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // dark
        // true flag

        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StatsGetStoryPublicForwards= struct {
    peer: IInputPeer,
    id: i32,
    offset: []const u8,
    limit: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // offset
        const paramoffset = self.offset;
        result += base.strEncodedSize(paramoffset);
        // limit
        const paramlimit = self.limit;
        result += @sizeOf(@TypeOf(paramlimit));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StatsGetBroadcastRevenueStats= struct {
    dark: ?bool,
    channel: IInputChannel,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // dark
        // true flag

        // channel
        const paramchannel = self.channel;
        result += paramchannel.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StatsGetBroadcastRevenueWithdrawalUrl= struct {
    channel: IInputChannel,
    password: IInputCheckPasswordSRP,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // channel
        const paramchannel = self.channel;
        result += paramchannel.size();

        // password
        const parampassword = self.password;
        result += parampassword.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StatsGetBroadcastRevenueTransactions= struct {
    channel: IInputChannel,
    offset: i32,
    limit: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // channel
        const paramchannel = self.channel;
        result += paramchannel.size();

        // offset
        const paramoffset = self.offset;
        result += @sizeOf(@TypeOf(paramoffset));
        // limit
        const paramlimit = self.limit;
        result += @sizeOf(@TypeOf(paramlimit));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChatlistsExportChatlistInvite= struct {
    chatlist: IInputChatlist,
    title: []const u8,
    peers: []const IInputPeer,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // chatlist
        const paramchatlist = self.chatlist;
        result += paramchatlist.size();

        // title
        const paramtitle = self.title;
        result += base.strEncodedSize(paramtitle);
        // peers
        const parampeers = self.peers;
        result += 4; // vector id
        result += 4; // vector size
        for (parampeers) |parampeersitem| {
        result += parampeersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChatlistsDeleteExportedInvite= struct {
    chatlist: IInputChatlist,
    slug: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // chatlist
        const paramchatlist = self.chatlist;
        result += paramchatlist.size();

        // slug
        const paramslug = self.slug;
        result += base.strEncodedSize(paramslug);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChatlistsEditExportedInvite= struct {
    chatlist: IInputChatlist,
    slug: []const u8,
    title: ?[]const u8,
    peers: ?[]const IInputPeer,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // chatlist
        const paramchatlist = self.chatlist;
        result += paramchatlist.size();

        // slug
        const paramslug = self.slug;
        result += base.strEncodedSize(paramslug);
        // title
        const paramtitle = self.title;
        if (paramtitle) |paramtitleflag| {
        result += base.strEncodedSize(paramtitleflag);        }

        // peers
        const parampeers = self.peers;
        if (parampeers) |parampeersflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (parampeersflag) |parampeersflagitem| {
        result += parampeersflagitem.size();
        }
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChatlistsGetExportedInvites= struct {
    chatlist: IInputChatlist,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // chatlist
        const paramchatlist = self.chatlist;
        result += paramchatlist.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const ChatlistsCheckChatlistInvite= struct {
    slug: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // slug
        const paramslug = self.slug;
        result += base.strEncodedSize(paramslug);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const ChatlistsJoinChatlistInvite= struct {
    slug: []const u8,
    peers: []const IInputPeer,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // slug
        const paramslug = self.slug;
        result += base.strEncodedSize(paramslug);
        // peers
        const parampeers = self.peers;
        result += 4; // vector id
        result += 4; // vector size
        for (parampeers) |parampeersitem| {
        result += parampeersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChatlistsGetChatlistUpdates= struct {
    chatlist: IInputChatlist,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // chatlist
        const paramchatlist = self.chatlist;
        result += paramchatlist.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const ChatlistsJoinChatlistUpdates= struct {
    chatlist: IInputChatlist,
    peers: []const IInputPeer,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // chatlist
        const paramchatlist = self.chatlist;
        result += paramchatlist.size();

        // peers
        const parampeers = self.peers;
        result += 4; // vector id
        result += 4; // vector size
        for (parampeers) |parampeersitem| {
        result += parampeersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const ChatlistsHideChatlistUpdates= struct {
    chatlist: IInputChatlist,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // chatlist
        const paramchatlist = self.chatlist;
        result += paramchatlist.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const ChatlistsGetLeaveChatlistSuggestions= struct {
    chatlist: IInputChatlist,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // chatlist
        const paramchatlist = self.chatlist;
        result += paramchatlist.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const ChatlistsLeaveChatlist= struct {
    chatlist: IInputChatlist,
    peers: []const IInputPeer,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // chatlist
        const paramchatlist = self.chatlist;
        result += paramchatlist.size();

        // peers
        const parampeers = self.peers;
        result += 4; // vector id
        result += 4; // vector size
        for (parampeers) |parampeersitem| {
        result += parampeersitem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StoriesCanSendStory= struct {
    peer: IInputPeer,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const StoriesSendStory= struct {
    pinned: ?bool,
    noforwards: ?bool,
    fwd_modified: ?bool,
    peer: IInputPeer,
    media: IInputMedia,
    media_areas: ?[]const IMediaArea,
    caption: ?[]const u8,
    entities: ?[]const IMessageEntity,
    privacy_rules: []const IInputPrivacyRule,
    random_id: i64,
    period: ?i32,
    fwd_from_id: ?IInputPeer,
    fwd_from_story: ?i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // pinned
        // true flag

        // noforwards
        // true flag

        // fwd_modified
        // true flag

        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // media
        const parammedia = self.media;
        result += parammedia.size();

        // media_areas
        const parammedia_areas = self.media_areas;
        if (parammedia_areas) |parammedia_areasflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (parammedia_areasflag) |parammedia_areasflagitem| {
        result += parammedia_areasflagitem.size();
        }
        }

        // caption
        const paramcaption = self.caption;
        if (paramcaption) |paramcaptionflag| {
        result += base.strEncodedSize(paramcaptionflag);        }

        // entities
        const paramentities = self.entities;
        if (paramentities) |paramentitiesflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramentitiesflag) |paramentitiesflagitem| {
        result += paramentitiesflagitem.size();
        }
        }

        // privacy_rules
        const paramprivacy_rules = self.privacy_rules;
        result += 4; // vector id
        result += 4; // vector size
        for (paramprivacy_rules) |paramprivacy_rulesitem| {
        result += paramprivacy_rulesitem.size();
        }

        // random_id
        const paramrandom_id = self.random_id;
        result += @sizeOf(@TypeOf(paramrandom_id));
        // period
        const paramperiod = self.period;
        if (paramperiod) |paramperiodflag| {
        result += @sizeOf(@TypeOf(paramperiodflag));        }

        // fwd_from_id
        const paramfwd_from_id = self.fwd_from_id;
        if (paramfwd_from_id) |paramfwd_from_idflag| {
        result += paramfwd_from_idflag.size();
        }

        // fwd_from_story
        const paramfwd_from_story = self.fwd_from_story;
        if (paramfwd_from_story) |paramfwd_from_storyflag| {
        result += @sizeOf(@TypeOf(paramfwd_from_storyflag));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 4;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 7;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 5;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 6;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 6;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StoriesEditStory= struct {
    peer: IInputPeer,
    id: i32,
    media: ?IInputMedia,
    media_areas: ?[]const IMediaArea,
    caption: ?[]const u8,
    entities: ?[]const IMessageEntity,
    privacy_rules: ?[]const IInputPrivacyRule,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // media
        const parammedia = self.media;
        if (parammedia) |parammediaflag| {
        result += parammediaflag.size();
        }

        // media_areas
        const parammedia_areas = self.media_areas;
        if (parammedia_areas) |parammedia_areasflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (parammedia_areasflag) |parammedia_areasflagitem| {
        result += parammedia_areasflagitem.size();
        }
        }

        // caption
        const paramcaption = self.caption;
        if (paramcaption) |paramcaptionflag| {
        result += base.strEncodedSize(paramcaptionflag);        }

        // entities
        const paramentities = self.entities;
        if (paramentities) |paramentitiesflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramentitiesflag) |paramentitiesflagitem| {
        result += paramentitiesflagitem.size();
        }
        }

        // privacy_rules
        const paramprivacy_rules = self.privacy_rules;
        if (paramprivacy_rules) |paramprivacy_rulesflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramprivacy_rulesflag) |paramprivacy_rulesflagitem| {
        result += paramprivacy_rulesflagitem.size();
        }
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StoriesDeleteStories= struct {
    peer: IInputPeer,
    id: []const i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // id
        const paramid = self.id;
        result += 4; // vector id
        result += 4; // vector size
        for (paramid) |paramiditem| {
        result += @sizeOf(@TypeOf(paramiditem));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StoriesTogglePinned= struct {
    peer: IInputPeer,
    id: []const i32,
    pinned: bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // id
        const paramid = self.id;
        result += 4; // vector id
        result += 4; // vector size
        for (paramid) |paramiditem| {
        result += @sizeOf(@TypeOf(paramiditem));        }

        // pinned
        const parampinned = self.pinned;
        _ = parampinned;
        result += 4;
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StoriesGetAllStories= struct {
    next: ?bool,
    hidden: ?bool,
    state: ?[]const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // next
        // true flag

        // hidden
        // true flag

        // state
        const paramstate = self.state;
        if (paramstate) |paramstateflag| {
        result += base.strEncodedSize(paramstateflag);        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StoriesGetPinnedStories= struct {
    peer: IInputPeer,
    offset_id: i32,
    limit: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // offset_id
        const paramoffset_id = self.offset_id;
        result += @sizeOf(@TypeOf(paramoffset_id));
        // limit
        const paramlimit = self.limit;
        result += @sizeOf(@TypeOf(paramlimit));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StoriesGetStoriesArchive= struct {
    peer: IInputPeer,
    offset_id: i32,
    limit: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // offset_id
        const paramoffset_id = self.offset_id;
        result += @sizeOf(@TypeOf(paramoffset_id));
        // limit
        const paramlimit = self.limit;
        result += @sizeOf(@TypeOf(paramlimit));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StoriesGetStoriesByID= struct {
    peer: IInputPeer,
    id: []const i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // id
        const paramid = self.id;
        result += 4; // vector id
        result += 4; // vector size
        for (paramid) |paramiditem| {
        result += @sizeOf(@TypeOf(paramiditem));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StoriesToggleAllStoriesHidden= struct {
    hidden: bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // hidden
        const paramhidden = self.hidden;
        _ = paramhidden;
        result += 4;
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const StoriesReadStories= struct {
    peer: IInputPeer,
    max_id: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // max_id
        const parammax_id = self.max_id;
        result += @sizeOf(@TypeOf(parammax_id));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StoriesIncrementStoryViews= struct {
    peer: IInputPeer,
    id: []const i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // id
        const paramid = self.id;
        result += 4; // vector id
        result += 4; // vector size
        for (paramid) |paramiditem| {
        result += @sizeOf(@TypeOf(paramiditem));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StoriesGetStoryViewsList= struct {
    just_contacts: ?bool,
    reactions_first: ?bool,
    forwards_first: ?bool,
    peer: IInputPeer,
    q: ?[]const u8,
    id: i32,
    offset: []const u8,
    limit: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // just_contacts
        // true flag

        // reactions_first
        // true flag

        // forwards_first
        // true flag

        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // q
        const paramq = self.q;
        if (paramq) |paramqflag| {
        result += base.strEncodedSize(paramqflag);        }

        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // offset
        const paramoffset = self.offset;
        result += base.strEncodedSize(paramoffset);
        // limit
        const paramlimit = self.limit;
        result += @sizeOf(@TypeOf(paramlimit));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 3;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StoriesGetStoriesViews= struct {
    peer: IInputPeer,
    id: []const i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // id
        const paramid = self.id;
        result += 4; // vector id
        result += 4; // vector size
        for (paramid) |paramiditem| {
        result += @sizeOf(@TypeOf(paramiditem));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StoriesExportStoryLink= struct {
    peer: IInputPeer,
    id: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StoriesReport= struct {
    peer: IInputPeer,
    id: []const i32,
    option: []const u8,
    message: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // id
        const paramid = self.id;
        result += 4; // vector id
        result += 4; // vector size
        for (paramid) |paramiditem| {
        result += @sizeOf(@TypeOf(paramiditem));        }

        // option
        const paramoption = self.option;
        result += base.strEncodedSize(paramoption);
        // message
        const parammessage = self.message;
        result += base.strEncodedSize(parammessage);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StoriesActivateStealthMode= struct {
    past: ?bool,
    future: ?bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // past
        // true flag

        // future
        // true flag


        _ = self;
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StoriesSendReaction= struct {
    add_to_recent: ?bool,
    peer: IInputPeer,
    story_id: i32,
    reaction: IReaction,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // add_to_recent
        // true flag

        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // story_id
        const paramstory_id = self.story_id;
        result += @sizeOf(@TypeOf(paramstory_id));
        // reaction
        const paramreaction = self.reaction;
        result += paramreaction.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StoriesGetPeerStories= struct {
    peer: IInputPeer,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const StoriesGetAllReadPeerStories= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const StoriesGetPeerMaxIDs= struct {
    id: []const IInputPeer,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // id
        const paramid = self.id;
        result += 4; // vector id
        result += 4; // vector size
        for (paramid) |paramiditem| {
        result += paramiditem.size();
        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const StoriesGetChatsToSend= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const StoriesTogglePeerStoriesHidden= struct {
    peer: IInputPeer,
    hidden: bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // hidden
        const paramhidden = self.hidden;
        _ = paramhidden;
        result += 4;
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StoriesGetStoryReactionsList= struct {
    forwards_first: ?bool,
    peer: IInputPeer,
    id: i32,
    reaction: ?IReaction,
    offset: ?[]const u8,
    limit: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // forwards_first
        // true flag

        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // id
        const paramid = self.id;
        result += @sizeOf(@TypeOf(paramid));
        // reaction
        const paramreaction = self.reaction;
        if (paramreaction) |paramreactionflag| {
        result += paramreactionflag.size();
        }

        // offset
        const paramoffset = self.offset;
        if (paramoffset) |paramoffsetflag| {
        result += base.strEncodedSize(paramoffsetflag);        }

        // limit
        const paramlimit = self.limit;
        result += @sizeOf(@TypeOf(paramlimit));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 2;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StoriesTogglePinnedToTop= struct {
    peer: IInputPeer,
    id: []const i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // id
        const paramid = self.id;
        result += 4; // vector id
        result += 4; // vector size
        for (paramid) |paramiditem| {
        result += @sizeOf(@TypeOf(paramiditem));        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const StoriesSearchPosts= struct {
    hashtag: ?[]const u8,
    area: ?IMediaArea,
    offset: []const u8,
    limit: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // hashtag
        const paramhashtag = self.hashtag;
        if (paramhashtag) |paramhashtagflag| {
        result += base.strEncodedSize(paramhashtagflag);        }

        // area
        const paramarea = self.area;
        if (paramarea) |paramareaflag| {
        result += paramareaflag.size();
        }

        // offset
        const paramoffset = self.offset;
        result += base.strEncodedSize(paramoffset);
        // limit
        const paramlimit = self.limit;
        result += @sizeOf(@TypeOf(paramlimit));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        if (self.flags) {
             flag_flags = flag_flags | 1 << 1;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PremiumGetBoostsList= struct {
    gifts: ?bool,
    peer: IInputPeer,
    offset: []const u8,
    limit: i32,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // gifts
        // true flag

        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // offset
        const paramoffset = self.offset;
        result += base.strEncodedSize(paramoffset);
        // limit
        const paramlimit = self.limit;
        result += @sizeOf(@TypeOf(paramlimit));
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PremiumGetMyBoosts= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const PremiumApplyBoost= struct {
    slots: ?[]const i32,
    peer: IInputPeer,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // slots
        const paramslots = self.slots;
        if (paramslots) |paramslotsflag| {
        result += 4; // vector id
        result += 4; // vector size
        for (paramslotsflag) |paramslotsflagitem| {
        result += @sizeOf(@TypeOf(paramslotsflagitem));        }
        }

        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const PremiumGetBoostsStatus= struct {
    peer: IInputPeer,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const PremiumGetUserBoosts= struct {
    peer: IInputPeer,
    user_id: IInputUser,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // peer
        const parampeer = self.peer;
        result += parampeer.size();

        // user_id
        const paramuser_id = self.user_id;
        result += paramuser_id.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const SmsjobsIsEligibleToJoin= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const SmsjobsJoin= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const SmsjobsLeave= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const SmsjobsUpdateSettings= struct {
    allow_international: ?bool,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // allow_international
        // true flag


        _ = self;
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        }
};
const SmsjobsGetStatus= struct {
        pub fn size(self: *const @This()) usize {
        _ = self;
        return 4;
    }        pub fn serialize(self: *const @This(), dest: []const u8) void {
        }
};
const SmsjobsGetSmsJob= struct {
    job_id: []const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // job_id
        const paramjob_id = self.job_id;
        result += base.strEncodedSize(paramjob_id);
        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const SmsjobsFinishJob= struct {
    job_id: []const u8,
    Error: ?[]const u8,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // flags
        result += 4; // flags
        // job_id
        const paramjob_id = self.job_id;
        result += base.strEncodedSize(paramjob_id);
        // error
        const paramerror = self.Error;
        if (paramerror) |paramerrorflag| {
        result += base.strEncodedSize(paramerrorflag);        }

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        var flag_flags: usize = 0;
        if (self.flags) {
             flag_flags = flag_flags | 1 << 0;
        }
        //IMPLEMENT NORMAL
        //IMPLEMENT NORMAL
        }
};
const FragmentGetCollectibleInfo= struct {
    collectible: IInputCollectible,
        pub fn size(self: *const @This()) usize {
        var result: usize = 4; // id
        // collectible
        const paramcollectible = self.collectible;
        result += paramcollectible.size();

        return result;
    }
        pub fn serialize(self: *const @This(), dest: []const u8) void {
        //IMPLEMENT NORMAL
        }
};
const TL = union(TLID) {
ProtoResPQ: ProtoResPQ,
ProtoPQInnerDataDc: ProtoPQInnerDataDc,
ProtoPQInnerDataTempDc: ProtoPQInnerDataTempDc,
ProtoServerDHParamsOk: ProtoServerDHParamsOk,
ProtoServerDHInnerData: ProtoServerDHInnerData,
ProtoClientDHInnerData: ProtoClientDHInnerData,
ProtoDhGenOk: ProtoDhGenOk,
ProtoDhGenRetry: ProtoDhGenRetry,
ProtoDhGenFail: ProtoDhGenFail,
ProtoBindAuthKeyInner: ProtoBindAuthKeyInner,
ProtoRpcError: ProtoRpcError,
ProtoRpcAnswerUnknown: ProtoRpcAnswerUnknown,
ProtoRpcAnswerDroppedRunning: ProtoRpcAnswerDroppedRunning,
ProtoRpcAnswerDropped: ProtoRpcAnswerDropped,
ProtoFutureSalt: ProtoFutureSalt,
ProtoPong: ProtoPong,
ProtoDestroySessionOk: ProtoDestroySessionOk,
ProtoDestroySessionNone: ProtoDestroySessionNone,
ProtoNewSessionCreated: ProtoNewSessionCreated,
ProtoGzipPacked: ProtoGzipPacked,
ProtoMsgsAck: ProtoMsgsAck,
ProtoBadMsgNotification: ProtoBadMsgNotification,
ProtoBadServerSalt: ProtoBadServerSalt,
ProtoMsgResendReq: ProtoMsgResendReq,
ProtoMsgsStateReq: ProtoMsgsStateReq,
ProtoMsgsStateInfo: ProtoMsgsStateInfo,
ProtoMsgsAllInfo: ProtoMsgsAllInfo,
ProtoMsgDetailedInfo: ProtoMsgDetailedInfo,
ProtoMsgNewDetailedInfo: ProtoMsgNewDetailedInfo,
ProtoDestroyAuthKeyOk: ProtoDestroyAuthKeyOk,
ProtoDestroyAuthKeyNone: ProtoDestroyAuthKeyNone,
ProtoDestroyAuthKeyFail: ProtoDestroyAuthKeyFail,
ProtoHttpWait: ProtoHttpWait,
ProtoReqDHParams: ProtoReqDHParams,
ProtoSetClientDHParams: ProtoSetClientDHParams,
ProtoRpcDropAnswer: ProtoRpcDropAnswer,
ProtoGetFutureSalts: ProtoGetFutureSalts,
ProtoPing: ProtoPing,
ProtoPingDelayDisconnect: ProtoPingDelayDisconnect,
ProtoDestroySession: ProtoDestroySession,
ProtoDestroyAuthKey: ProtoDestroyAuthKey,
InputPeerEmpty: InputPeerEmpty,
InputPeerSelf: InputPeerSelf,
InputPeerChat: InputPeerChat,
InputPeerUser: InputPeerUser,
InputPeerChannel: InputPeerChannel,
InputPeerUserFromMessage: InputPeerUserFromMessage,
InputPeerChannelFromMessage: InputPeerChannelFromMessage,
InputUserEmpty: InputUserEmpty,
InputUserSelf: InputUserSelf,
InputUser: InputUser,
InputUserFromMessage: InputUserFromMessage,
InputPhoneContact: InputPhoneContact,
InputFile: InputFile,
InputFileBig: InputFileBig,
InputFileStoryDocument: InputFileStoryDocument,
InputMediaEmpty: InputMediaEmpty,
InputMediaUploadedPhoto: InputMediaUploadedPhoto,
InputMediaPhoto: InputMediaPhoto,
InputMediaGeoPoint: InputMediaGeoPoint,
InputMediaContact: InputMediaContact,
InputMediaUploadedDocument: InputMediaUploadedDocument,
InputMediaDocument: InputMediaDocument,
InputMediaVenue: InputMediaVenue,
InputMediaPhotoExternal: InputMediaPhotoExternal,
InputMediaDocumentExternal: InputMediaDocumentExternal,
InputMediaGame: InputMediaGame,
InputMediaInvoice: InputMediaInvoice,
InputMediaGeoLive: InputMediaGeoLive,
InputMediaPoll: InputMediaPoll,
InputMediaDice: InputMediaDice,
InputMediaStory: InputMediaStory,
InputMediaWebPage: InputMediaWebPage,
InputMediaPaidMedia: InputMediaPaidMedia,
InputChatPhotoEmpty: InputChatPhotoEmpty,
InputChatUploadedPhoto: InputChatUploadedPhoto,
InputChatPhoto: InputChatPhoto,
InputGeoPointEmpty: InputGeoPointEmpty,
InputGeoPoint: InputGeoPoint,
InputPhotoEmpty: InputPhotoEmpty,
InputPhoto: InputPhoto,
InputFileLocation: InputFileLocation,
InputEncryptedFileLocation: InputEncryptedFileLocation,
InputDocumentFileLocation: InputDocumentFileLocation,
InputSecureFileLocation: InputSecureFileLocation,
InputTakeoutFileLocation: InputTakeoutFileLocation,
InputPhotoFileLocation: InputPhotoFileLocation,
InputPhotoLegacyFileLocation: InputPhotoLegacyFileLocation,
InputPeerPhotoFileLocation: InputPeerPhotoFileLocation,
InputStickerSetThumb: InputStickerSetThumb,
InputGroupCallStream: InputGroupCallStream,
PeerUser: PeerUser,
PeerChat: PeerChat,
PeerChannel: PeerChannel,
StorageFileUnknown: StorageFileUnknown,
StorageFilePartial: StorageFilePartial,
StorageFileJpeg: StorageFileJpeg,
StorageFileGif: StorageFileGif,
StorageFilePng: StorageFilePng,
StorageFilePdf: StorageFilePdf,
StorageFileMp3: StorageFileMp3,
StorageFileMov: StorageFileMov,
StorageFileMp4: StorageFileMp4,
StorageFileWebp: StorageFileWebp,
UserEmpty: UserEmpty,
User: User,
UserProfilePhotoEmpty: UserProfilePhotoEmpty,
UserProfilePhoto: UserProfilePhoto,
UserStatusEmpty: UserStatusEmpty,
UserStatusOnline: UserStatusOnline,
UserStatusOffline: UserStatusOffline,
UserStatusRecently: UserStatusRecently,
UserStatusLastWeek: UserStatusLastWeek,
UserStatusLastMonth: UserStatusLastMonth,
ChatEmpty: ChatEmpty,
Chat: Chat,
ChatForbidden: ChatForbidden,
Channel: Channel,
ChannelForbidden: ChannelForbidden,
ChatFull: ChatFull,
ChannelFull: ChannelFull,
ChatParticipant: ChatParticipant,
ChatParticipantCreator: ChatParticipantCreator,
ChatParticipantAdmin: ChatParticipantAdmin,
ChatParticipantsForbidden: ChatParticipantsForbidden,
ChatParticipants: ChatParticipants,
ChatPhotoEmpty: ChatPhotoEmpty,
ChatPhoto: ChatPhoto,
MessageEmpty: MessageEmpty,
Message: Message,
MessageService: MessageService,
MessageMediaEmpty: MessageMediaEmpty,
MessageMediaPhoto: MessageMediaPhoto,
MessageMediaGeo: MessageMediaGeo,
MessageMediaContact: MessageMediaContact,
MessageMediaUnsupported: MessageMediaUnsupported,
MessageMediaDocument: MessageMediaDocument,
MessageMediaWebPage: MessageMediaWebPage,
MessageMediaVenue: MessageMediaVenue,
MessageMediaGame: MessageMediaGame,
MessageMediaInvoice: MessageMediaInvoice,
MessageMediaGeoLive: MessageMediaGeoLive,
MessageMediaPoll: MessageMediaPoll,
MessageMediaDice: MessageMediaDice,
MessageMediaStory: MessageMediaStory,
MessageMediaGiveaway: MessageMediaGiveaway,
MessageMediaGiveawayResults: MessageMediaGiveawayResults,
MessageMediaPaidMedia: MessageMediaPaidMedia,
MessageActionEmpty: MessageActionEmpty,
MessageActionChatCreate: MessageActionChatCreate,
MessageActionChatEditTitle: MessageActionChatEditTitle,
MessageActionChatEditPhoto: MessageActionChatEditPhoto,
MessageActionChatDeletePhoto: MessageActionChatDeletePhoto,
MessageActionChatAddUser: MessageActionChatAddUser,
MessageActionChatDeleteUser: MessageActionChatDeleteUser,
MessageActionChatJoinedByLink: MessageActionChatJoinedByLink,
MessageActionChannelCreate: MessageActionChannelCreate,
MessageActionChatMigrateTo: MessageActionChatMigrateTo,
MessageActionChannelMigrateFrom: MessageActionChannelMigrateFrom,
MessageActionPinMessage: MessageActionPinMessage,
MessageActionHistoryClear: MessageActionHistoryClear,
MessageActionGameScore: MessageActionGameScore,
MessageActionPaymentSentMe: MessageActionPaymentSentMe,
MessageActionPaymentSent: MessageActionPaymentSent,
MessageActionPhoneCall: MessageActionPhoneCall,
MessageActionScreenshotTaken: MessageActionScreenshotTaken,
MessageActionCustomAction: MessageActionCustomAction,
MessageActionBotAllowed: MessageActionBotAllowed,
MessageActionSecureValuesSentMe: MessageActionSecureValuesSentMe,
MessageActionSecureValuesSent: MessageActionSecureValuesSent,
MessageActionContactSignUp: MessageActionContactSignUp,
MessageActionGeoProximityReached: MessageActionGeoProximityReached,
MessageActionGroupCall: MessageActionGroupCall,
MessageActionInviteToGroupCall: MessageActionInviteToGroupCall,
MessageActionSetMessagesTTL: MessageActionSetMessagesTTL,
MessageActionGroupCallScheduled: MessageActionGroupCallScheduled,
MessageActionSetChatTheme: MessageActionSetChatTheme,
MessageActionChatJoinedByRequest: MessageActionChatJoinedByRequest,
MessageActionWebViewDataSentMe: MessageActionWebViewDataSentMe,
MessageActionWebViewDataSent: MessageActionWebViewDataSent,
MessageActionGiftPremium: MessageActionGiftPremium,
MessageActionTopicCreate: MessageActionTopicCreate,
MessageActionTopicEdit: MessageActionTopicEdit,
MessageActionSuggestProfilePhoto: MessageActionSuggestProfilePhoto,
MessageActionRequestedPeer: MessageActionRequestedPeer,
MessageActionSetChatWallPaper: MessageActionSetChatWallPaper,
MessageActionGiftCode: MessageActionGiftCode,
MessageActionGiveawayLaunch: MessageActionGiveawayLaunch,
MessageActionGiveawayResults: MessageActionGiveawayResults,
MessageActionBoostApply: MessageActionBoostApply,
MessageActionRequestedPeerSentMe: MessageActionRequestedPeerSentMe,
MessageActionPaymentRefunded: MessageActionPaymentRefunded,
MessageActionGiftStars: MessageActionGiftStars,
MessageActionPrizeStars: MessageActionPrizeStars,
MessageActionStarGift: MessageActionStarGift,
Dialog: Dialog,
DialogFolder: DialogFolder,
PhotoEmpty: PhotoEmpty,
Photo: Photo,
PhotoSizeEmpty: PhotoSizeEmpty,
PhotoSize: PhotoSize,
PhotoCachedSize: PhotoCachedSize,
PhotoStrippedSize: PhotoStrippedSize,
PhotoSizeProgressive: PhotoSizeProgressive,
PhotoPathSize: PhotoPathSize,
GeoPointEmpty: GeoPointEmpty,
GeoPoint: GeoPoint,
AuthSentCode: AuthSentCode,
AuthSentCodeSuccess: AuthSentCodeSuccess,
AuthAuthorization: AuthAuthorization,
AuthAuthorizationSignUpRequired: AuthAuthorizationSignUpRequired,
AuthExportedAuthorization: AuthExportedAuthorization,
InputNotifyPeer: InputNotifyPeer,
InputNotifyUsers: InputNotifyUsers,
InputNotifyChats: InputNotifyChats,
InputNotifyBroadcasts: InputNotifyBroadcasts,
InputNotifyForumTopic: InputNotifyForumTopic,
InputPeerNotifySettings: InputPeerNotifySettings,
PeerNotifySettings: PeerNotifySettings,
PeerSettings: PeerSettings,
WallPaper: WallPaper,
WallPaperNoFile: WallPaperNoFile,
InputReportReasonSpam: InputReportReasonSpam,
InputReportReasonViolence: InputReportReasonViolence,
InputReportReasonPornography: InputReportReasonPornography,
InputReportReasonChildAbuse: InputReportReasonChildAbuse,
InputReportReasonOther: InputReportReasonOther,
InputReportReasonCopyright: InputReportReasonCopyright,
InputReportReasonGeoIrrelevant: InputReportReasonGeoIrrelevant,
InputReportReasonFake: InputReportReasonFake,
InputReportReasonIllegalDrugs: InputReportReasonIllegalDrugs,
InputReportReasonPersonalDetails: InputReportReasonPersonalDetails,
UserFull: UserFull,
Contact: Contact,
ImportedContact: ImportedContact,
ContactStatus: ContactStatus,
ContactsContactsNotModified: ContactsContactsNotModified,
ContactsContacts: ContactsContacts,
ContactsImportedContacts: ContactsImportedContacts,
ContactsBlocked: ContactsBlocked,
ContactsBlockedSlice: ContactsBlockedSlice,
MessagesDialogs: MessagesDialogs,
MessagesDialogsSlice: MessagesDialogsSlice,
MessagesDialogsNotModified: MessagesDialogsNotModified,
MessagesMessages: MessagesMessages,
MessagesMessagesSlice: MessagesMessagesSlice,
MessagesChannelMessages: MessagesChannelMessages,
MessagesMessagesNotModified: MessagesMessagesNotModified,
MessagesChats: MessagesChats,
MessagesChatsSlice: MessagesChatsSlice,
MessagesChatFull: MessagesChatFull,
MessagesAffectedHistory: MessagesAffectedHistory,
InputMessagesFilterEmpty: InputMessagesFilterEmpty,
InputMessagesFilterPhotos: InputMessagesFilterPhotos,
InputMessagesFilterVideo: InputMessagesFilterVideo,
InputMessagesFilterPhotoVideo: InputMessagesFilterPhotoVideo,
InputMessagesFilterDocument: InputMessagesFilterDocument,
InputMessagesFilterUrl: InputMessagesFilterUrl,
InputMessagesFilterGif: InputMessagesFilterGif,
InputMessagesFilterVoice: InputMessagesFilterVoice,
InputMessagesFilterMusic: InputMessagesFilterMusic,
InputMessagesFilterChatPhotos: InputMessagesFilterChatPhotos,
InputMessagesFilterPhoneCalls: InputMessagesFilterPhoneCalls,
InputMessagesFilterRoundVoice: InputMessagesFilterRoundVoice,
InputMessagesFilterRoundVideo: InputMessagesFilterRoundVideo,
InputMessagesFilterMyMentions: InputMessagesFilterMyMentions,
InputMessagesFilterGeo: InputMessagesFilterGeo,
InputMessagesFilterContacts: InputMessagesFilterContacts,
InputMessagesFilterPinned: InputMessagesFilterPinned,
UpdateNewMessage: UpdateNewMessage,
UpdateMessageID: UpdateMessageID,
UpdateDeleteMessages: UpdateDeleteMessages,
UpdateUserTyping: UpdateUserTyping,
UpdateChatUserTyping: UpdateChatUserTyping,
UpdateChatParticipants: UpdateChatParticipants,
UpdateUserStatus: UpdateUserStatus,
UpdateUserName: UpdateUserName,
UpdateNewAuthorization: UpdateNewAuthorization,
UpdateNewEncryptedMessage: UpdateNewEncryptedMessage,
UpdateEncryptedChatTyping: UpdateEncryptedChatTyping,
UpdateEncryption: UpdateEncryption,
UpdateEncryptedMessagesRead: UpdateEncryptedMessagesRead,
UpdateChatParticipantAdd: UpdateChatParticipantAdd,
UpdateChatParticipantDelete: UpdateChatParticipantDelete,
UpdateDcOptions: UpdateDcOptions,
UpdateNotifySettings: UpdateNotifySettings,
UpdateServiceNotification: UpdateServiceNotification,
UpdatePrivacy: UpdatePrivacy,
UpdateUserPhone: UpdateUserPhone,
UpdateReadHistoryInbox: UpdateReadHistoryInbox,
UpdateReadHistoryOutbox: UpdateReadHistoryOutbox,
UpdateWebPage: UpdateWebPage,
UpdateReadMessagesContents: UpdateReadMessagesContents,
UpdateChannelTooLong: UpdateChannelTooLong,
UpdateChannel: UpdateChannel,
UpdateNewChannelMessage: UpdateNewChannelMessage,
UpdateReadChannelInbox: UpdateReadChannelInbox,
UpdateDeleteChannelMessages: UpdateDeleteChannelMessages,
UpdateChannelMessageViews: UpdateChannelMessageViews,
UpdateChatParticipantAdmin: UpdateChatParticipantAdmin,
UpdateNewStickerSet: UpdateNewStickerSet,
UpdateStickerSetsOrder: UpdateStickerSetsOrder,
UpdateStickerSets: UpdateStickerSets,
UpdateSavedGifs: UpdateSavedGifs,
UpdateBotInlineQuery: UpdateBotInlineQuery,
UpdateBotInlineSend: UpdateBotInlineSend,
UpdateEditChannelMessage: UpdateEditChannelMessage,
UpdateBotCallbackQuery: UpdateBotCallbackQuery,
UpdateEditMessage: UpdateEditMessage,
UpdateInlineBotCallbackQuery: UpdateInlineBotCallbackQuery,
UpdateReadChannelOutbox: UpdateReadChannelOutbox,
UpdateDraftMessage: UpdateDraftMessage,
UpdateReadFeaturedStickers: UpdateReadFeaturedStickers,
UpdateRecentStickers: UpdateRecentStickers,
UpdateConfig: UpdateConfig,
UpdatePtsChanged: UpdatePtsChanged,
UpdateChannelWebPage: UpdateChannelWebPage,
UpdateDialogPinned: UpdateDialogPinned,
UpdatePinnedDialogs: UpdatePinnedDialogs,
UpdateBotWebhookJSON: UpdateBotWebhookJSON,
UpdateBotWebhookJSONQuery: UpdateBotWebhookJSONQuery,
UpdateBotShippingQuery: UpdateBotShippingQuery,
UpdateBotPrecheckoutQuery: UpdateBotPrecheckoutQuery,
UpdatePhoneCall: UpdatePhoneCall,
UpdateLangPackTooLong: UpdateLangPackTooLong,
UpdateLangPack: UpdateLangPack,
UpdateFavedStickers: UpdateFavedStickers,
UpdateChannelReadMessagesContents: UpdateChannelReadMessagesContents,
UpdateContactsReset: UpdateContactsReset,
UpdateChannelAvailableMessages: UpdateChannelAvailableMessages,
UpdateDialogUnreadMark: UpdateDialogUnreadMark,
UpdateMessagePoll: UpdateMessagePoll,
UpdateChatDefaultBannedRights: UpdateChatDefaultBannedRights,
UpdateFolderPeers: UpdateFolderPeers,
UpdatePeerSettings: UpdatePeerSettings,
UpdatePeerLocated: UpdatePeerLocated,
UpdateNewScheduledMessage: UpdateNewScheduledMessage,
UpdateDeleteScheduledMessages: UpdateDeleteScheduledMessages,
UpdateTheme: UpdateTheme,
UpdateGeoLiveViewed: UpdateGeoLiveViewed,
UpdateLoginToken: UpdateLoginToken,
UpdateMessagePollVote: UpdateMessagePollVote,
UpdateDialogFilter: UpdateDialogFilter,
UpdateDialogFilterOrder: UpdateDialogFilterOrder,
UpdateDialogFilters: UpdateDialogFilters,
UpdatePhoneCallSignalingData: UpdatePhoneCallSignalingData,
UpdateChannelMessageForwards: UpdateChannelMessageForwards,
UpdateReadChannelDiscussionInbox: UpdateReadChannelDiscussionInbox,
UpdateReadChannelDiscussionOutbox: UpdateReadChannelDiscussionOutbox,
UpdatePeerBlocked: UpdatePeerBlocked,
UpdateChannelUserTyping: UpdateChannelUserTyping,
UpdatePinnedMessages: UpdatePinnedMessages,
UpdatePinnedChannelMessages: UpdatePinnedChannelMessages,
UpdateChat: UpdateChat,
UpdateGroupCallParticipants: UpdateGroupCallParticipants,
UpdateGroupCall: UpdateGroupCall,
UpdatePeerHistoryTTL: UpdatePeerHistoryTTL,
UpdateChatParticipant: UpdateChatParticipant,
UpdateChannelParticipant: UpdateChannelParticipant,
UpdateBotStopped: UpdateBotStopped,
UpdateGroupCallConnection: UpdateGroupCallConnection,
UpdateBotCommands: UpdateBotCommands,
UpdatePendingJoinRequests: UpdatePendingJoinRequests,
UpdateBotChatInviteRequester: UpdateBotChatInviteRequester,
UpdateMessageReactions: UpdateMessageReactions,
UpdateAttachMenuBots: UpdateAttachMenuBots,
UpdateWebViewResultSent: UpdateWebViewResultSent,
UpdateBotMenuButton: UpdateBotMenuButton,
UpdateSavedRingtones: UpdateSavedRingtones,
UpdateTranscribedAudio: UpdateTranscribedAudio,
UpdateReadFeaturedEmojiStickers: UpdateReadFeaturedEmojiStickers,
UpdateUserEmojiStatus: UpdateUserEmojiStatus,
UpdateRecentEmojiStatuses: UpdateRecentEmojiStatuses,
UpdateRecentReactions: UpdateRecentReactions,
UpdateMoveStickerSetToTop: UpdateMoveStickerSetToTop,
UpdateMessageExtendedMedia: UpdateMessageExtendedMedia,
UpdateChannelPinnedTopic: UpdateChannelPinnedTopic,
UpdateChannelPinnedTopics: UpdateChannelPinnedTopics,
UpdateUser: UpdateUser,
UpdateAutoSaveSettings: UpdateAutoSaveSettings,
UpdateStory: UpdateStory,
UpdateReadStories: UpdateReadStories,
UpdateStoryID: UpdateStoryID,
UpdateStoriesStealthMode: UpdateStoriesStealthMode,
UpdateSentStoryReaction: UpdateSentStoryReaction,
UpdateBotChatBoost: UpdateBotChatBoost,
UpdateChannelViewForumAsMessages: UpdateChannelViewForumAsMessages,
UpdatePeerWallpaper: UpdatePeerWallpaper,
UpdateBotMessageReaction: UpdateBotMessageReaction,
UpdateBotMessageReactions: UpdateBotMessageReactions,
UpdateSavedDialogPinned: UpdateSavedDialogPinned,
UpdatePinnedSavedDialogs: UpdatePinnedSavedDialogs,
UpdateSavedReactionTags: UpdateSavedReactionTags,
UpdateSmsJob: UpdateSmsJob,
UpdateQuickReplies: UpdateQuickReplies,
UpdateNewQuickReply: UpdateNewQuickReply,
UpdateDeleteQuickReply: UpdateDeleteQuickReply,
UpdateQuickReplyMessage: UpdateQuickReplyMessage,
UpdateDeleteQuickReplyMessages: UpdateDeleteQuickReplyMessages,
UpdateBotBusinessConnect: UpdateBotBusinessConnect,
UpdateBotNewBusinessMessage: UpdateBotNewBusinessMessage,
UpdateBotEditBusinessMessage: UpdateBotEditBusinessMessage,
UpdateBotDeleteBusinessMessage: UpdateBotDeleteBusinessMessage,
UpdateNewStoryReaction: UpdateNewStoryReaction,
UpdateBroadcastRevenueTransactions: UpdateBroadcastRevenueTransactions,
UpdateStarsBalance: UpdateStarsBalance,
UpdateBusinessBotCallbackQuery: UpdateBusinessBotCallbackQuery,
UpdateStarsRevenueStatus: UpdateStarsRevenueStatus,
UpdateBotPurchasedPaidMedia: UpdateBotPurchasedPaidMedia,
UpdatePaidReactionPrivacy: UpdatePaidReactionPrivacy,
UpdatesState: UpdatesState,
UpdatesDifferenceEmpty: UpdatesDifferenceEmpty,
UpdatesDifference: UpdatesDifference,
UpdatesDifferenceSlice: UpdatesDifferenceSlice,
UpdatesDifferenceTooLong: UpdatesDifferenceTooLong,
UpdatesTooLong: UpdatesTooLong,
UpdateShortMessage: UpdateShortMessage,
UpdateShortChatMessage: UpdateShortChatMessage,
UpdateShort: UpdateShort,
UpdatesCombined: UpdatesCombined,
Updates: Updates,
UpdateShortSentMessage: UpdateShortSentMessage,
PhotosPhotos: PhotosPhotos,
PhotosPhotosSlice: PhotosPhotosSlice,
PhotosPhoto: PhotosPhoto,
UploadFile: UploadFile,
UploadFileCdnRedirect: UploadFileCdnRedirect,
DcOption: DcOption,
Config: Config,
NearestDc: NearestDc,
HelpAppUpdate: HelpAppUpdate,
HelpNoAppUpdate: HelpNoAppUpdate,
HelpInviteText: HelpInviteText,
EncryptedChatEmpty: EncryptedChatEmpty,
EncryptedChatWaiting: EncryptedChatWaiting,
EncryptedChatRequested: EncryptedChatRequested,
EncryptedChat: EncryptedChat,
EncryptedChatDiscarded: EncryptedChatDiscarded,
InputEncryptedChat: InputEncryptedChat,
EncryptedFileEmpty: EncryptedFileEmpty,
EncryptedFile: EncryptedFile,
InputEncryptedFileEmpty: InputEncryptedFileEmpty,
InputEncryptedFileUploaded: InputEncryptedFileUploaded,
InputEncryptedFile: InputEncryptedFile,
InputEncryptedFileBigUploaded: InputEncryptedFileBigUploaded,
EncryptedMessage: EncryptedMessage,
EncryptedMessageService: EncryptedMessageService,
MessagesDhConfigNotModified: MessagesDhConfigNotModified,
MessagesDhConfig: MessagesDhConfig,
MessagesSentEncryptedMessage: MessagesSentEncryptedMessage,
MessagesSentEncryptedFile: MessagesSentEncryptedFile,
InputDocumentEmpty: InputDocumentEmpty,
InputDocument: InputDocument,
DocumentEmpty: DocumentEmpty,
Document: Document,
HelpSupport: HelpSupport,
NotifyPeer: NotifyPeer,
NotifyUsers: NotifyUsers,
NotifyChats: NotifyChats,
NotifyBroadcasts: NotifyBroadcasts,
NotifyForumTopic: NotifyForumTopic,
SendMessageTypingAction: SendMessageTypingAction,
SendMessageCancelAction: SendMessageCancelAction,
SendMessageRecordVideoAction: SendMessageRecordVideoAction,
SendMessageUploadVideoAction: SendMessageUploadVideoAction,
SendMessageRecordAudioAction: SendMessageRecordAudioAction,
SendMessageUploadAudioAction: SendMessageUploadAudioAction,
SendMessageUploadPhotoAction: SendMessageUploadPhotoAction,
SendMessageUploadDocumentAction: SendMessageUploadDocumentAction,
SendMessageGeoLocationAction: SendMessageGeoLocationAction,
SendMessageChooseContactAction: SendMessageChooseContactAction,
SendMessageGamePlayAction: SendMessageGamePlayAction,
SendMessageRecordRoundAction: SendMessageRecordRoundAction,
SendMessageUploadRoundAction: SendMessageUploadRoundAction,
SpeakingInGroupCallAction: SpeakingInGroupCallAction,
SendMessageHistoryImportAction: SendMessageHistoryImportAction,
SendMessageChooseStickerAction: SendMessageChooseStickerAction,
SendMessageEmojiInteraction: SendMessageEmojiInteraction,
SendMessageEmojiInteractionSeen: SendMessageEmojiInteractionSeen,
ContactsFound: ContactsFound,
InputPrivacyKeyStatusTimestamp: InputPrivacyKeyStatusTimestamp,
InputPrivacyKeyChatInvite: InputPrivacyKeyChatInvite,
InputPrivacyKeyPhoneCall: InputPrivacyKeyPhoneCall,
InputPrivacyKeyPhoneP2P: InputPrivacyKeyPhoneP2P,
InputPrivacyKeyForwards: InputPrivacyKeyForwards,
InputPrivacyKeyProfilePhoto: InputPrivacyKeyProfilePhoto,
InputPrivacyKeyPhoneNumber: InputPrivacyKeyPhoneNumber,
InputPrivacyKeyAddedByPhone: InputPrivacyKeyAddedByPhone,
InputPrivacyKeyVoiceMessages: InputPrivacyKeyVoiceMessages,
InputPrivacyKeyAbout: InputPrivacyKeyAbout,
InputPrivacyKeyBirthday: InputPrivacyKeyBirthday,
PrivacyKeyStatusTimestamp: PrivacyKeyStatusTimestamp,
PrivacyKeyChatInvite: PrivacyKeyChatInvite,
PrivacyKeyPhoneCall: PrivacyKeyPhoneCall,
PrivacyKeyPhoneP2P: PrivacyKeyPhoneP2P,
PrivacyKeyForwards: PrivacyKeyForwards,
PrivacyKeyProfilePhoto: PrivacyKeyProfilePhoto,
PrivacyKeyPhoneNumber: PrivacyKeyPhoneNumber,
PrivacyKeyAddedByPhone: PrivacyKeyAddedByPhone,
PrivacyKeyVoiceMessages: PrivacyKeyVoiceMessages,
PrivacyKeyAbout: PrivacyKeyAbout,
PrivacyKeyBirthday: PrivacyKeyBirthday,
InputPrivacyValueAllowContacts: InputPrivacyValueAllowContacts,
InputPrivacyValueAllowAll: InputPrivacyValueAllowAll,
InputPrivacyValueAllowUsers: InputPrivacyValueAllowUsers,
InputPrivacyValueDisallowContacts: InputPrivacyValueDisallowContacts,
InputPrivacyValueDisallowAll: InputPrivacyValueDisallowAll,
InputPrivacyValueDisallowUsers: InputPrivacyValueDisallowUsers,
InputPrivacyValueAllowChatParticipants: InputPrivacyValueAllowChatParticipants,
InputPrivacyValueDisallowChatParticipants: InputPrivacyValueDisallowChatParticipants,
InputPrivacyValueAllowCloseFriends: InputPrivacyValueAllowCloseFriends,
InputPrivacyValueAllowPremium: InputPrivacyValueAllowPremium,
PrivacyValueAllowContacts: PrivacyValueAllowContacts,
PrivacyValueAllowAll: PrivacyValueAllowAll,
PrivacyValueAllowUsers: PrivacyValueAllowUsers,
PrivacyValueDisallowContacts: PrivacyValueDisallowContacts,
PrivacyValueDisallowAll: PrivacyValueDisallowAll,
PrivacyValueDisallowUsers: PrivacyValueDisallowUsers,
PrivacyValueAllowChatParticipants: PrivacyValueAllowChatParticipants,
PrivacyValueDisallowChatParticipants: PrivacyValueDisallowChatParticipants,
PrivacyValueAllowCloseFriends: PrivacyValueAllowCloseFriends,
PrivacyValueAllowPremium: PrivacyValueAllowPremium,
AccountPrivacyRules: AccountPrivacyRules,
AccountDaysTTL: AccountDaysTTL,
DocumentAttributeImageSize: DocumentAttributeImageSize,
DocumentAttributeAnimated: DocumentAttributeAnimated,
DocumentAttributeSticker: DocumentAttributeSticker,
DocumentAttributeVideo: DocumentAttributeVideo,
DocumentAttributeAudio: DocumentAttributeAudio,
DocumentAttributeFilename: DocumentAttributeFilename,
DocumentAttributeHasStickers: DocumentAttributeHasStickers,
DocumentAttributeCustomEmoji: DocumentAttributeCustomEmoji,
MessagesStickersNotModified: MessagesStickersNotModified,
MessagesStickers: MessagesStickers,
StickerPack: StickerPack,
MessagesAllStickersNotModified: MessagesAllStickersNotModified,
MessagesAllStickers: MessagesAllStickers,
MessagesAffectedMessages: MessagesAffectedMessages,
WebPageEmpty: WebPageEmpty,
WebPagePending: WebPagePending,
WebPage: WebPage,
WebPageNotModified: WebPageNotModified,
Authorization: Authorization,
AccountAuthorizations: AccountAuthorizations,
AccountPassword: AccountPassword,
AccountPasswordSettings: AccountPasswordSettings,
AccountPasswordInputSettings: AccountPasswordInputSettings,
AuthPasswordRecovery: AuthPasswordRecovery,
ReceivedNotifyMessage: ReceivedNotifyMessage,
ChatInviteExported: ChatInviteExported,
ChatInvitePublicJoinRequests: ChatInvitePublicJoinRequests,
ChatInviteAlready: ChatInviteAlready,
ChatInvite: ChatInvite,
ChatInvitePeek: ChatInvitePeek,
InputStickerSetEmpty: InputStickerSetEmpty,
InputStickerSetID: InputStickerSetID,
InputStickerSetShortName: InputStickerSetShortName,
InputStickerSetAnimatedEmoji: InputStickerSetAnimatedEmoji,
InputStickerSetDice: InputStickerSetDice,
InputStickerSetAnimatedEmojiAnimations: InputStickerSetAnimatedEmojiAnimations,
InputStickerSetPremiumGifts: InputStickerSetPremiumGifts,
InputStickerSetEmojiGenericAnimations: InputStickerSetEmojiGenericAnimations,
InputStickerSetEmojiDefaultStatuses: InputStickerSetEmojiDefaultStatuses,
InputStickerSetEmojiDefaultTopicIcons: InputStickerSetEmojiDefaultTopicIcons,
InputStickerSetEmojiChannelDefaultStatuses: InputStickerSetEmojiChannelDefaultStatuses,
StickerSet: StickerSet,
MessagesStickerSet: MessagesStickerSet,
MessagesStickerSetNotModified: MessagesStickerSetNotModified,
BotCommand: BotCommand,
BotInfo: BotInfo,
KeyboardButton: KeyboardButton,
KeyboardButtonUrl: KeyboardButtonUrl,
KeyboardButtonCallback: KeyboardButtonCallback,
KeyboardButtonRequestPhone: KeyboardButtonRequestPhone,
KeyboardButtonRequestGeoLocation: KeyboardButtonRequestGeoLocation,
KeyboardButtonSwitchInline: KeyboardButtonSwitchInline,
KeyboardButtonGame: KeyboardButtonGame,
KeyboardButtonBuy: KeyboardButtonBuy,
KeyboardButtonUrlAuth: KeyboardButtonUrlAuth,
InputKeyboardButtonUrlAuth: InputKeyboardButtonUrlAuth,
KeyboardButtonRequestPoll: KeyboardButtonRequestPoll,
InputKeyboardButtonUserProfile: InputKeyboardButtonUserProfile,
KeyboardButtonUserProfile: KeyboardButtonUserProfile,
KeyboardButtonWebView: KeyboardButtonWebView,
KeyboardButtonSimpleWebView: KeyboardButtonSimpleWebView,
KeyboardButtonRequestPeer: KeyboardButtonRequestPeer,
InputKeyboardButtonRequestPeer: InputKeyboardButtonRequestPeer,
KeyboardButtonCopy: KeyboardButtonCopy,
KeyboardButtonRow: KeyboardButtonRow,
ReplyKeyboardHide: ReplyKeyboardHide,
ReplyKeyboardForceReply: ReplyKeyboardForceReply,
ReplyKeyboardMarkup: ReplyKeyboardMarkup,
ReplyInlineMarkup: ReplyInlineMarkup,
MessageEntityUnknown: MessageEntityUnknown,
MessageEntityMention: MessageEntityMention,
MessageEntityHashtag: MessageEntityHashtag,
MessageEntityBotCommand: MessageEntityBotCommand,
MessageEntityUrl: MessageEntityUrl,
MessageEntityEmail: MessageEntityEmail,
MessageEntityBold: MessageEntityBold,
MessageEntityItalic: MessageEntityItalic,
MessageEntityCode: MessageEntityCode,
MessageEntityPre: MessageEntityPre,
MessageEntityTextUrl: MessageEntityTextUrl,
MessageEntityMentionName: MessageEntityMentionName,
InputMessageEntityMentionName: InputMessageEntityMentionName,
MessageEntityPhone: MessageEntityPhone,
MessageEntityCashtag: MessageEntityCashtag,
MessageEntityUnderline: MessageEntityUnderline,
MessageEntityStrike: MessageEntityStrike,
MessageEntityBankCard: MessageEntityBankCard,
MessageEntitySpoiler: MessageEntitySpoiler,
MessageEntityCustomEmoji: MessageEntityCustomEmoji,
MessageEntityBlockquote: MessageEntityBlockquote,
InputChannelEmpty: InputChannelEmpty,
InputChannel: InputChannel,
InputChannelFromMessage: InputChannelFromMessage,
ContactsResolvedPeer: ContactsResolvedPeer,
MessageRange: MessageRange,
UpdatesChannelDifferenceEmpty: UpdatesChannelDifferenceEmpty,
UpdatesChannelDifferenceTooLong: UpdatesChannelDifferenceTooLong,
UpdatesChannelDifference: UpdatesChannelDifference,
ChannelMessagesFilterEmpty: ChannelMessagesFilterEmpty,
ChannelMessagesFilter: ChannelMessagesFilter,
ChannelParticipant: ChannelParticipant,
ChannelParticipantSelf: ChannelParticipantSelf,
ChannelParticipantCreator: ChannelParticipantCreator,
ChannelParticipantAdmin: ChannelParticipantAdmin,
ChannelParticipantBanned: ChannelParticipantBanned,
ChannelParticipantLeft: ChannelParticipantLeft,
ChannelParticipantsRecent: ChannelParticipantsRecent,
ChannelParticipantsAdmins: ChannelParticipantsAdmins,
ChannelParticipantsKicked: ChannelParticipantsKicked,
ChannelParticipantsBots: ChannelParticipantsBots,
ChannelParticipantsBanned: ChannelParticipantsBanned,
ChannelParticipantsSearch: ChannelParticipantsSearch,
ChannelParticipantsContacts: ChannelParticipantsContacts,
ChannelParticipantsMentions: ChannelParticipantsMentions,
ChannelsChannelParticipants: ChannelsChannelParticipants,
ChannelsChannelParticipantsNotModified: ChannelsChannelParticipantsNotModified,
ChannelsChannelParticipant: ChannelsChannelParticipant,
HelpTermsOfService: HelpTermsOfService,
MessagesSavedGifsNotModified: MessagesSavedGifsNotModified,
MessagesSavedGifs: MessagesSavedGifs,
InputBotInlineMessageMediaAuto: InputBotInlineMessageMediaAuto,
InputBotInlineMessageText: InputBotInlineMessageText,
InputBotInlineMessageMediaGeo: InputBotInlineMessageMediaGeo,
InputBotInlineMessageMediaVenue: InputBotInlineMessageMediaVenue,
InputBotInlineMessageMediaContact: InputBotInlineMessageMediaContact,
InputBotInlineMessageGame: InputBotInlineMessageGame,
InputBotInlineMessageMediaInvoice: InputBotInlineMessageMediaInvoice,
InputBotInlineMessageMediaWebPage: InputBotInlineMessageMediaWebPage,
InputBotInlineResult: InputBotInlineResult,
InputBotInlineResultPhoto: InputBotInlineResultPhoto,
InputBotInlineResultDocument: InputBotInlineResultDocument,
InputBotInlineResultGame: InputBotInlineResultGame,
BotInlineMessageMediaAuto: BotInlineMessageMediaAuto,
BotInlineMessageText: BotInlineMessageText,
BotInlineMessageMediaGeo: BotInlineMessageMediaGeo,
BotInlineMessageMediaVenue: BotInlineMessageMediaVenue,
BotInlineMessageMediaContact: BotInlineMessageMediaContact,
BotInlineMessageMediaInvoice: BotInlineMessageMediaInvoice,
BotInlineMessageMediaWebPage: BotInlineMessageMediaWebPage,
BotInlineResult: BotInlineResult,
BotInlineMediaResult: BotInlineMediaResult,
MessagesBotResults: MessagesBotResults,
ExportedMessageLink: ExportedMessageLink,
MessageFwdHeader: MessageFwdHeader,
AuthCodeTypeSms: AuthCodeTypeSms,
AuthCodeTypeCall: AuthCodeTypeCall,
AuthCodeTypeFlashCall: AuthCodeTypeFlashCall,
AuthCodeTypeMissedCall: AuthCodeTypeMissedCall,
AuthCodeTypeFragmentSms: AuthCodeTypeFragmentSms,
AuthSentCodeTypeApp: AuthSentCodeTypeApp,
AuthSentCodeTypeSms: AuthSentCodeTypeSms,
AuthSentCodeTypeCall: AuthSentCodeTypeCall,
AuthSentCodeTypeFlashCall: AuthSentCodeTypeFlashCall,
AuthSentCodeTypeMissedCall: AuthSentCodeTypeMissedCall,
AuthSentCodeTypeEmailCode: AuthSentCodeTypeEmailCode,
AuthSentCodeTypeSetUpEmailRequired: AuthSentCodeTypeSetUpEmailRequired,
AuthSentCodeTypeFragmentSms: AuthSentCodeTypeFragmentSms,
AuthSentCodeTypeFirebaseSms: AuthSentCodeTypeFirebaseSms,
AuthSentCodeTypeSmsWord: AuthSentCodeTypeSmsWord,
AuthSentCodeTypeSmsPhrase: AuthSentCodeTypeSmsPhrase,
MessagesBotCallbackAnswer: MessagesBotCallbackAnswer,
MessagesMessageEditData: MessagesMessageEditData,
InputBotInlineMessageID: InputBotInlineMessageID,
InputBotInlineMessageID64: InputBotInlineMessageID64,
InlineBotSwitchPM: InlineBotSwitchPM,
MessagesPeerDialogs: MessagesPeerDialogs,
TopPeer: TopPeer,
TopPeerCategoryBotsPM: TopPeerCategoryBotsPM,
TopPeerCategoryBotsInline: TopPeerCategoryBotsInline,
TopPeerCategoryCorrespondents: TopPeerCategoryCorrespondents,
TopPeerCategoryGroups: TopPeerCategoryGroups,
TopPeerCategoryChannels: TopPeerCategoryChannels,
TopPeerCategoryPhoneCalls: TopPeerCategoryPhoneCalls,
TopPeerCategoryForwardUsers: TopPeerCategoryForwardUsers,
TopPeerCategoryForwardChats: TopPeerCategoryForwardChats,
TopPeerCategoryBotsApp: TopPeerCategoryBotsApp,
TopPeerCategoryPeers: TopPeerCategoryPeers,
ContactsTopPeersNotModified: ContactsTopPeersNotModified,
ContactsTopPeers: ContactsTopPeers,
ContactsTopPeersDisabled: ContactsTopPeersDisabled,
DraftMessageEmpty: DraftMessageEmpty,
DraftMessage: DraftMessage,
MessagesFeaturedStickersNotModified: MessagesFeaturedStickersNotModified,
MessagesFeaturedStickers: MessagesFeaturedStickers,
MessagesRecentStickersNotModified: MessagesRecentStickersNotModified,
MessagesRecentStickers: MessagesRecentStickers,
MessagesArchivedStickers: MessagesArchivedStickers,
MessagesStickerSetInstallResultSuccess: MessagesStickerSetInstallResultSuccess,
MessagesStickerSetInstallResultArchive: MessagesStickerSetInstallResultArchive,
StickerSetCovered: StickerSetCovered,
StickerSetMultiCovered: StickerSetMultiCovered,
StickerSetFullCovered: StickerSetFullCovered,
StickerSetNoCovered: StickerSetNoCovered,
MaskCoords: MaskCoords,
InputStickeredMediaPhoto: InputStickeredMediaPhoto,
InputStickeredMediaDocument: InputStickeredMediaDocument,
Game: Game,
InputGameID: InputGameID,
InputGameShortName: InputGameShortName,
HighScore: HighScore,
MessagesHighScores: MessagesHighScores,
TextEmpty: TextEmpty,
TextPlain: TextPlain,
TextBold: TextBold,
TextItalic: TextItalic,
TextUnderline: TextUnderline,
TextStrike: TextStrike,
TextFixed: TextFixed,
TextUrl: TextUrl,
TextEmail: TextEmail,
TextConcat: TextConcat,
TextSubscript: TextSubscript,
TextSuperscript: TextSuperscript,
TextMarked: TextMarked,
TextPhone: TextPhone,
TextImage: TextImage,
TextAnchor: TextAnchor,
PageBlockUnsupported: PageBlockUnsupported,
PageBlockTitle: PageBlockTitle,
PageBlockSubtitle: PageBlockSubtitle,
PageBlockAuthorDate: PageBlockAuthorDate,
PageBlockHeader: PageBlockHeader,
PageBlockSubheader: PageBlockSubheader,
PageBlockParagraph: PageBlockParagraph,
PageBlockPreformatted: PageBlockPreformatted,
PageBlockFooter: PageBlockFooter,
PageBlockDivider: PageBlockDivider,
PageBlockAnchor: PageBlockAnchor,
PageBlockList: PageBlockList,
PageBlockBlockquote: PageBlockBlockquote,
PageBlockPullquote: PageBlockPullquote,
PageBlockPhoto: PageBlockPhoto,
PageBlockVideo: PageBlockVideo,
PageBlockCover: PageBlockCover,
PageBlockEmbed: PageBlockEmbed,
PageBlockEmbedPost: PageBlockEmbedPost,
PageBlockCollage: PageBlockCollage,
PageBlockSlideshow: PageBlockSlideshow,
PageBlockChannel: PageBlockChannel,
PageBlockAudio: PageBlockAudio,
PageBlockKicker: PageBlockKicker,
PageBlockTable: PageBlockTable,
PageBlockOrderedList: PageBlockOrderedList,
PageBlockDetails: PageBlockDetails,
PageBlockRelatedArticles: PageBlockRelatedArticles,
PageBlockMap: PageBlockMap,
PhoneCallDiscardReasonMissed: PhoneCallDiscardReasonMissed,
PhoneCallDiscardReasonDisconnect: PhoneCallDiscardReasonDisconnect,
PhoneCallDiscardReasonHangup: PhoneCallDiscardReasonHangup,
PhoneCallDiscardReasonBusy: PhoneCallDiscardReasonBusy,
DataJSON: DataJSON,
LabeledPrice: LabeledPrice,
Invoice: Invoice,
PaymentCharge: PaymentCharge,
PostAddress: PostAddress,
PaymentRequestedInfo: PaymentRequestedInfo,
PaymentSavedCredentialsCard: PaymentSavedCredentialsCard,
WebDocument: WebDocument,
WebDocumentNoProxy: WebDocumentNoProxy,
InputWebDocument: InputWebDocument,
InputWebFileLocation: InputWebFileLocation,
InputWebFileGeoPointLocation: InputWebFileGeoPointLocation,
InputWebFileAudioAlbumThumbLocation: InputWebFileAudioAlbumThumbLocation,
UploadWebFile: UploadWebFile,
PaymentsPaymentForm: PaymentsPaymentForm,
PaymentsPaymentFormStars: PaymentsPaymentFormStars,
PaymentsPaymentFormStarGift: PaymentsPaymentFormStarGift,
PaymentsValidatedRequestedInfo: PaymentsValidatedRequestedInfo,
PaymentsPaymentResult: PaymentsPaymentResult,
PaymentsPaymentVerificationNeeded: PaymentsPaymentVerificationNeeded,
PaymentsPaymentReceipt: PaymentsPaymentReceipt,
PaymentsPaymentReceiptStars: PaymentsPaymentReceiptStars,
PaymentsSavedInfo: PaymentsSavedInfo,
InputPaymentCredentialsSaved: InputPaymentCredentialsSaved,
InputPaymentCredentials: InputPaymentCredentials,
InputPaymentCredentialsApplePay: InputPaymentCredentialsApplePay,
InputPaymentCredentialsGooglePay: InputPaymentCredentialsGooglePay,
AccountTmpPassword: AccountTmpPassword,
ShippingOption: ShippingOption,
InputStickerSetItem: InputStickerSetItem,
InputPhoneCall: InputPhoneCall,
PhoneCallEmpty: PhoneCallEmpty,
PhoneCallWaiting: PhoneCallWaiting,
PhoneCallRequested: PhoneCallRequested,
PhoneCallAccepted: PhoneCallAccepted,
PhoneCall: PhoneCall,
PhoneCallDiscarded: PhoneCallDiscarded,
PhoneConnection: PhoneConnection,
PhoneConnectionWebrtc: PhoneConnectionWebrtc,
PhoneCallProtocol: PhoneCallProtocol,
PhonePhoneCall: PhonePhoneCall,
UploadCdnFileReuploadNeeded: UploadCdnFileReuploadNeeded,
UploadCdnFile: UploadCdnFile,
CdnPublicKey: CdnPublicKey,
CdnConfig: CdnConfig,
LangPackString: LangPackString,
LangPackStringPluralized: LangPackStringPluralized,
LangPackStringDeleted: LangPackStringDeleted,
LangPackDifference: LangPackDifference,
LangPackLanguage: LangPackLanguage,
ChannelAdminLogEventActionChangeTitle: ChannelAdminLogEventActionChangeTitle,
ChannelAdminLogEventActionChangeAbout: ChannelAdminLogEventActionChangeAbout,
ChannelAdminLogEventActionChangeUsername: ChannelAdminLogEventActionChangeUsername,
ChannelAdminLogEventActionChangePhoto: ChannelAdminLogEventActionChangePhoto,
ChannelAdminLogEventActionToggleInvites: ChannelAdminLogEventActionToggleInvites,
ChannelAdminLogEventActionToggleSignatures: ChannelAdminLogEventActionToggleSignatures,
ChannelAdminLogEventActionUpdatePinned: ChannelAdminLogEventActionUpdatePinned,
ChannelAdminLogEventActionEditMessage: ChannelAdminLogEventActionEditMessage,
ChannelAdminLogEventActionDeleteMessage: ChannelAdminLogEventActionDeleteMessage,
ChannelAdminLogEventActionParticipantJoin: ChannelAdminLogEventActionParticipantJoin,
ChannelAdminLogEventActionParticipantLeave: ChannelAdminLogEventActionParticipantLeave,
ChannelAdminLogEventActionParticipantInvite: ChannelAdminLogEventActionParticipantInvite,
ChannelAdminLogEventActionParticipantToggleBan: ChannelAdminLogEventActionParticipantToggleBan,
ChannelAdminLogEventActionParticipantToggleAdmin: ChannelAdminLogEventActionParticipantToggleAdmin,
ChannelAdminLogEventActionChangeStickerSet: ChannelAdminLogEventActionChangeStickerSet,
ChannelAdminLogEventActionTogglePreHistoryHidden: ChannelAdminLogEventActionTogglePreHistoryHidden,
ChannelAdminLogEventActionDefaultBannedRights: ChannelAdminLogEventActionDefaultBannedRights,
ChannelAdminLogEventActionStopPoll: ChannelAdminLogEventActionStopPoll,
ChannelAdminLogEventActionChangeLinkedChat: ChannelAdminLogEventActionChangeLinkedChat,
ChannelAdminLogEventActionChangeLocation: ChannelAdminLogEventActionChangeLocation,
ChannelAdminLogEventActionToggleSlowMode: ChannelAdminLogEventActionToggleSlowMode,
ChannelAdminLogEventActionStartGroupCall: ChannelAdminLogEventActionStartGroupCall,
ChannelAdminLogEventActionDiscardGroupCall: ChannelAdminLogEventActionDiscardGroupCall,
ChannelAdminLogEventActionParticipantMute: ChannelAdminLogEventActionParticipantMute,
ChannelAdminLogEventActionParticipantUnmute: ChannelAdminLogEventActionParticipantUnmute,
ChannelAdminLogEventActionToggleGroupCallSetting: ChannelAdminLogEventActionToggleGroupCallSetting,
ChannelAdminLogEventActionParticipantJoinByInvite: ChannelAdminLogEventActionParticipantJoinByInvite,
ChannelAdminLogEventActionExportedInviteDelete: ChannelAdminLogEventActionExportedInviteDelete,
ChannelAdminLogEventActionExportedInviteRevoke: ChannelAdminLogEventActionExportedInviteRevoke,
ChannelAdminLogEventActionExportedInviteEdit: ChannelAdminLogEventActionExportedInviteEdit,
ChannelAdminLogEventActionParticipantVolume: ChannelAdminLogEventActionParticipantVolume,
ChannelAdminLogEventActionChangeHistoryTTL: ChannelAdminLogEventActionChangeHistoryTTL,
ChannelAdminLogEventActionParticipantJoinByRequest: ChannelAdminLogEventActionParticipantJoinByRequest,
ChannelAdminLogEventActionToggleNoForwards: ChannelAdminLogEventActionToggleNoForwards,
ChannelAdminLogEventActionSendMessage: ChannelAdminLogEventActionSendMessage,
ChannelAdminLogEventActionChangeAvailableReactions: ChannelAdminLogEventActionChangeAvailableReactions,
ChannelAdminLogEventActionChangeUsernames: ChannelAdminLogEventActionChangeUsernames,
ChannelAdminLogEventActionToggleForum: ChannelAdminLogEventActionToggleForum,
ChannelAdminLogEventActionCreateTopic: ChannelAdminLogEventActionCreateTopic,
ChannelAdminLogEventActionEditTopic: ChannelAdminLogEventActionEditTopic,
ChannelAdminLogEventActionDeleteTopic: ChannelAdminLogEventActionDeleteTopic,
ChannelAdminLogEventActionPinTopic: ChannelAdminLogEventActionPinTopic,
ChannelAdminLogEventActionToggleAntiSpam: ChannelAdminLogEventActionToggleAntiSpam,
ChannelAdminLogEventActionChangePeerColor: ChannelAdminLogEventActionChangePeerColor,
ChannelAdminLogEventActionChangeProfilePeerColor: ChannelAdminLogEventActionChangeProfilePeerColor,
ChannelAdminLogEventActionChangeWallpaper: ChannelAdminLogEventActionChangeWallpaper,
ChannelAdminLogEventActionChangeEmojiStatus: ChannelAdminLogEventActionChangeEmojiStatus,
ChannelAdminLogEventActionChangeEmojiStickerSet: ChannelAdminLogEventActionChangeEmojiStickerSet,
ChannelAdminLogEventActionToggleSignatureProfiles: ChannelAdminLogEventActionToggleSignatureProfiles,
ChannelAdminLogEventActionParticipantSubExtend: ChannelAdminLogEventActionParticipantSubExtend,
ChannelAdminLogEvent: ChannelAdminLogEvent,
ChannelsAdminLogResults: ChannelsAdminLogResults,
ChannelAdminLogEventsFilter: ChannelAdminLogEventsFilter,
PopularContact: PopularContact,
MessagesFavedStickersNotModified: MessagesFavedStickersNotModified,
MessagesFavedStickers: MessagesFavedStickers,
RecentMeUrlUnknown: RecentMeUrlUnknown,
RecentMeUrlUser: RecentMeUrlUser,
RecentMeUrlChat: RecentMeUrlChat,
RecentMeUrlChatInvite: RecentMeUrlChatInvite,
RecentMeUrlStickerSet: RecentMeUrlStickerSet,
HelpRecentMeUrls: HelpRecentMeUrls,
InputSingleMedia: InputSingleMedia,
WebAuthorization: WebAuthorization,
AccountWebAuthorizations: AccountWebAuthorizations,
InputMessageID: InputMessageID,
InputMessageReplyTo: InputMessageReplyTo,
InputMessagePinned: InputMessagePinned,
InputMessageCallbackQuery: InputMessageCallbackQuery,
InputDialogPeer: InputDialogPeer,
InputDialogPeerFolder: InputDialogPeerFolder,
DialogPeer: DialogPeer,
DialogPeerFolder: DialogPeerFolder,
MessagesFoundStickerSetsNotModified: MessagesFoundStickerSetsNotModified,
MessagesFoundStickerSets: MessagesFoundStickerSets,
FileHash: FileHash,
InputClientProxy: InputClientProxy,
HelpTermsOfServiceUpdateEmpty: HelpTermsOfServiceUpdateEmpty,
HelpTermsOfServiceUpdate: HelpTermsOfServiceUpdate,
InputSecureFileUploaded: InputSecureFileUploaded,
InputSecureFile: InputSecureFile,
SecureFileEmpty: SecureFileEmpty,
SecureFile: SecureFile,
SecureData: SecureData,
SecurePlainPhone: SecurePlainPhone,
SecurePlainEmail: SecurePlainEmail,
SecureValueTypePersonalDetails: SecureValueTypePersonalDetails,
SecureValueTypePassport: SecureValueTypePassport,
SecureValueTypeDriverLicense: SecureValueTypeDriverLicense,
SecureValueTypeIdentityCard: SecureValueTypeIdentityCard,
SecureValueTypeInternalPassport: SecureValueTypeInternalPassport,
SecureValueTypeAddress: SecureValueTypeAddress,
SecureValueTypeUtilityBill: SecureValueTypeUtilityBill,
SecureValueTypeBankStatement: SecureValueTypeBankStatement,
SecureValueTypeRentalAgreement: SecureValueTypeRentalAgreement,
SecureValueTypePassportRegistration: SecureValueTypePassportRegistration,
SecureValueTypeTemporaryRegistration: SecureValueTypeTemporaryRegistration,
SecureValueTypePhone: SecureValueTypePhone,
SecureValueTypeEmail: SecureValueTypeEmail,
SecureValue: SecureValue,
InputSecureValue: InputSecureValue,
SecureValueHash: SecureValueHash,
SecureValueErrorData: SecureValueErrorData,
SecureValueErrorFrontSide: SecureValueErrorFrontSide,
SecureValueErrorReverseSide: SecureValueErrorReverseSide,
SecureValueErrorSelfie: SecureValueErrorSelfie,
SecureValueErrorFile: SecureValueErrorFile,
SecureValueErrorFiles: SecureValueErrorFiles,
SecureValueError: SecureValueError,
SecureValueErrorTranslationFile: SecureValueErrorTranslationFile,
SecureValueErrorTranslationFiles: SecureValueErrorTranslationFiles,
SecureCredentialsEncrypted: SecureCredentialsEncrypted,
AccountAuthorizationForm: AccountAuthorizationForm,
AccountSentEmailCode: AccountSentEmailCode,
HelpDeepLinkInfoEmpty: HelpDeepLinkInfoEmpty,
HelpDeepLinkInfo: HelpDeepLinkInfo,
SavedPhoneContact: SavedPhoneContact,
AccountTakeout: AccountTakeout,
PasswordKdfAlgoUnknown: PasswordKdfAlgoUnknown,
PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow: PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow,
SecurePasswordKdfAlgoUnknown: SecurePasswordKdfAlgoUnknown,
SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000: SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000,
SecurePasswordKdfAlgoSHA512: SecurePasswordKdfAlgoSHA512,
SecureSecretSettings: SecureSecretSettings,
InputCheckPasswordEmpty: InputCheckPasswordEmpty,
InputCheckPasswordSRP: InputCheckPasswordSRP,
SecureRequiredType: SecureRequiredType,
SecureRequiredTypeOneOf: SecureRequiredTypeOneOf,
HelpPassportConfigNotModified: HelpPassportConfigNotModified,
HelpPassportConfig: HelpPassportConfig,
InputAppEvent: InputAppEvent,
JsonObjectValue: JsonObjectValue,
JsonNull: JsonNull,
JsonBool: JsonBool,
JsonNumber: JsonNumber,
JsonString: JsonString,
JsonArray: JsonArray,
JsonObject: JsonObject,
PageTableCell: PageTableCell,
PageTableRow: PageTableRow,
PageCaption: PageCaption,
PageListItemText: PageListItemText,
PageListItemBlocks: PageListItemBlocks,
PageListOrderedItemText: PageListOrderedItemText,
PageListOrderedItemBlocks: PageListOrderedItemBlocks,
PageRelatedArticle: PageRelatedArticle,
Page: Page,
HelpSupportName: HelpSupportName,
HelpUserInfoEmpty: HelpUserInfoEmpty,
HelpUserInfo: HelpUserInfo,
PollAnswer: PollAnswer,
Poll: Poll,
PollAnswerVoters: PollAnswerVoters,
PollResults: PollResults,
ChatOnlines: ChatOnlines,
StatsURL: StatsURL,
ChatAdminRights: ChatAdminRights,
ChatBannedRights: ChatBannedRights,
InputWallPaper: InputWallPaper,
InputWallPaperSlug: InputWallPaperSlug,
InputWallPaperNoFile: InputWallPaperNoFile,
AccountWallPapersNotModified: AccountWallPapersNotModified,
AccountWallPapers: AccountWallPapers,
CodeSettings: CodeSettings,
WallPaperSettings: WallPaperSettings,
AutoDownloadSettings: AutoDownloadSettings,
AccountAutoDownloadSettings: AccountAutoDownloadSettings,
EmojiKeyword: EmojiKeyword,
EmojiKeywordDeleted: EmojiKeywordDeleted,
EmojiKeywordsDifference: EmojiKeywordsDifference,
EmojiURL: EmojiURL,
EmojiLanguage: EmojiLanguage,
Folder: Folder,
InputFolderPeer: InputFolderPeer,
FolderPeer: FolderPeer,
MessagesSearchCounter: MessagesSearchCounter,
UrlAuthResultRequest: UrlAuthResultRequest,
UrlAuthResultAccepted: UrlAuthResultAccepted,
UrlAuthResultDefault: UrlAuthResultDefault,
ChannelLocationEmpty: ChannelLocationEmpty,
ChannelLocation: ChannelLocation,
PeerLocated: PeerLocated,
PeerSelfLocated: PeerSelfLocated,
RestrictionReason: RestrictionReason,
InputTheme: InputTheme,
InputThemeSlug: InputThemeSlug,
Theme: Theme,
AccountThemesNotModified: AccountThemesNotModified,
AccountThemes: AccountThemes,
AuthLoginToken: AuthLoginToken,
AuthLoginTokenMigrateTo: AuthLoginTokenMigrateTo,
AuthLoginTokenSuccess: AuthLoginTokenSuccess,
AccountContentSettings: AccountContentSettings,
MessagesInactiveChats: MessagesInactiveChats,
BaseThemeClassic: BaseThemeClassic,
BaseThemeDay: BaseThemeDay,
BaseThemeNight: BaseThemeNight,
BaseThemeTinted: BaseThemeTinted,
BaseThemeArctic: BaseThemeArctic,
InputThemeSettings: InputThemeSettings,
ThemeSettings: ThemeSettings,
WebPageAttributeTheme: WebPageAttributeTheme,
WebPageAttributeStory: WebPageAttributeStory,
WebPageAttributeStickerSet: WebPageAttributeStickerSet,
MessagesVotesList: MessagesVotesList,
BankCardOpenUrl: BankCardOpenUrl,
PaymentsBankCardData: PaymentsBankCardData,
DialogFilter: DialogFilter,
DialogFilterDefault: DialogFilterDefault,
DialogFilterChatlist: DialogFilterChatlist,
DialogFilterSuggested: DialogFilterSuggested,
StatsDateRangeDays: StatsDateRangeDays,
StatsAbsValueAndPrev: StatsAbsValueAndPrev,
StatsPercentValue: StatsPercentValue,
StatsGraphAsync: StatsGraphAsync,
StatsGraphError: StatsGraphError,
StatsGraph: StatsGraph,
StatsBroadcastStats: StatsBroadcastStats,
HelpPromoDataEmpty: HelpPromoDataEmpty,
HelpPromoData: HelpPromoData,
VideoSize: VideoSize,
VideoSizeEmojiMarkup: VideoSizeEmojiMarkup,
VideoSizeStickerMarkup: VideoSizeStickerMarkup,
StatsGroupTopPoster: StatsGroupTopPoster,
StatsGroupTopAdmin: StatsGroupTopAdmin,
StatsGroupTopInviter: StatsGroupTopInviter,
StatsMegagroupStats: StatsMegagroupStats,
GlobalPrivacySettings: GlobalPrivacySettings,
HelpCountryCode: HelpCountryCode,
HelpCountry: HelpCountry,
HelpCountriesListNotModified: HelpCountriesListNotModified,
HelpCountriesList: HelpCountriesList,
MessageViews: MessageViews,
MessagesMessageViews: MessagesMessageViews,
MessagesDiscussionMessage: MessagesDiscussionMessage,
MessageReplyHeader: MessageReplyHeader,
MessageReplyStoryHeader: MessageReplyStoryHeader,
MessageReplies: MessageReplies,
PeerBlocked: PeerBlocked,
StatsMessageStats: StatsMessageStats,
GroupCallDiscarded: GroupCallDiscarded,
GroupCall: GroupCall,
InputGroupCall: InputGroupCall,
GroupCallParticipant: GroupCallParticipant,
PhoneGroupCall: PhoneGroupCall,
PhoneGroupParticipants: PhoneGroupParticipants,
InlineQueryPeerTypeSameBotPM: InlineQueryPeerTypeSameBotPM,
InlineQueryPeerTypePM: InlineQueryPeerTypePM,
InlineQueryPeerTypeChat: InlineQueryPeerTypeChat,
InlineQueryPeerTypeMegagroup: InlineQueryPeerTypeMegagroup,
InlineQueryPeerTypeBroadcast: InlineQueryPeerTypeBroadcast,
InlineQueryPeerTypeBotPM: InlineQueryPeerTypeBotPM,
MessagesHistoryImport: MessagesHistoryImport,
MessagesHistoryImportParsed: MessagesHistoryImportParsed,
MessagesAffectedFoundMessages: MessagesAffectedFoundMessages,
ChatInviteImporter: ChatInviteImporter,
MessagesExportedChatInvites: MessagesExportedChatInvites,
MessagesExportedChatInvite: MessagesExportedChatInvite,
MessagesExportedChatInviteReplaced: MessagesExportedChatInviteReplaced,
MessagesChatInviteImporters: MessagesChatInviteImporters,
ChatAdminWithInvites: ChatAdminWithInvites,
MessagesChatAdminsWithInvites: MessagesChatAdminsWithInvites,
MessagesCheckedHistoryImportPeer: MessagesCheckedHistoryImportPeer,
PhoneJoinAsPeers: PhoneJoinAsPeers,
PhoneExportedGroupCallInvite: PhoneExportedGroupCallInvite,
GroupCallParticipantVideoSourceGroup: GroupCallParticipantVideoSourceGroup,
GroupCallParticipantVideo: GroupCallParticipantVideo,
StickersSuggestedShortName: StickersSuggestedShortName,
BotCommandScopeDefault: BotCommandScopeDefault,
BotCommandScopeUsers: BotCommandScopeUsers,
BotCommandScopeChats: BotCommandScopeChats,
BotCommandScopeChatAdmins: BotCommandScopeChatAdmins,
BotCommandScopePeer: BotCommandScopePeer,
BotCommandScopePeerAdmins: BotCommandScopePeerAdmins,
BotCommandScopePeerUser: BotCommandScopePeerUser,
AccountResetPasswordFailedWait: AccountResetPasswordFailedWait,
AccountResetPasswordRequestedWait: AccountResetPasswordRequestedWait,
AccountResetPasswordOk: AccountResetPasswordOk,
SponsoredMessage: SponsoredMessage,
MessagesSponsoredMessages: MessagesSponsoredMessages,
MessagesSponsoredMessagesEmpty: MessagesSponsoredMessagesEmpty,
SearchResultsCalendarPeriod: SearchResultsCalendarPeriod,
MessagesSearchResultsCalendar: MessagesSearchResultsCalendar,
SearchResultPosition: SearchResultPosition,
MessagesSearchResultsPositions: MessagesSearchResultsPositions,
ChannelsSendAsPeers: ChannelsSendAsPeers,
UsersUserFull: UsersUserFull,
MessagesPeerSettings: MessagesPeerSettings,
AuthLoggedOut: AuthLoggedOut,
ReactionCount: ReactionCount,
MessageReactions: MessageReactions,
MessagesMessageReactionsList: MessagesMessageReactionsList,
AvailableReaction: AvailableReaction,
MessagesAvailableReactionsNotModified: MessagesAvailableReactionsNotModified,
MessagesAvailableReactions: MessagesAvailableReactions,
MessagePeerReaction: MessagePeerReaction,
GroupCallStreamChannel: GroupCallStreamChannel,
PhoneGroupCallStreamChannels: PhoneGroupCallStreamChannels,
PhoneGroupCallStreamRtmpUrl: PhoneGroupCallStreamRtmpUrl,
AttachMenuBotIconColor: AttachMenuBotIconColor,
AttachMenuBotIcon: AttachMenuBotIcon,
AttachMenuBot: AttachMenuBot,
AttachMenuBotsNotModified: AttachMenuBotsNotModified,
AttachMenuBots: AttachMenuBots,
AttachMenuBotsBot: AttachMenuBotsBot,
WebViewResultUrl: WebViewResultUrl,
WebViewMessageSent: WebViewMessageSent,
BotMenuButtonDefault: BotMenuButtonDefault,
BotMenuButtonCommands: BotMenuButtonCommands,
BotMenuButton: BotMenuButton,
AccountSavedRingtonesNotModified: AccountSavedRingtonesNotModified,
AccountSavedRingtones: AccountSavedRingtones,
NotificationSoundDefault: NotificationSoundDefault,
NotificationSoundNone: NotificationSoundNone,
NotificationSoundLocal: NotificationSoundLocal,
NotificationSoundRingtone: NotificationSoundRingtone,
AccountSavedRingtone: AccountSavedRingtone,
AccountSavedRingtoneConverted: AccountSavedRingtoneConverted,
AttachMenuPeerTypeSameBotPM: AttachMenuPeerTypeSameBotPM,
AttachMenuPeerTypeBotPM: AttachMenuPeerTypeBotPM,
AttachMenuPeerTypePM: AttachMenuPeerTypePM,
AttachMenuPeerTypeChat: AttachMenuPeerTypeChat,
AttachMenuPeerTypeBroadcast: AttachMenuPeerTypeBroadcast,
InputInvoiceMessage: InputInvoiceMessage,
InputInvoiceSlug: InputInvoiceSlug,
InputInvoicePremiumGiftCode: InputInvoicePremiumGiftCode,
InputInvoiceStars: InputInvoiceStars,
InputInvoiceChatInviteSubscription: InputInvoiceChatInviteSubscription,
InputInvoiceStarGift: InputInvoiceStarGift,
PaymentsExportedInvoice: PaymentsExportedInvoice,
MessagesTranscribedAudio: MessagesTranscribedAudio,
HelpPremiumPromo: HelpPremiumPromo,
InputStorePaymentPremiumSubscription: InputStorePaymentPremiumSubscription,
InputStorePaymentGiftPremium: InputStorePaymentGiftPremium,
InputStorePaymentPremiumGiftCode: InputStorePaymentPremiumGiftCode,
InputStorePaymentPremiumGiveaway: InputStorePaymentPremiumGiveaway,
InputStorePaymentStarsTopup: InputStorePaymentStarsTopup,
InputStorePaymentStarsGift: InputStorePaymentStarsGift,
InputStorePaymentStarsGiveaway: InputStorePaymentStarsGiveaway,
PremiumGiftOption: PremiumGiftOption,
PaymentFormMethod: PaymentFormMethod,
EmojiStatusEmpty: EmojiStatusEmpty,
EmojiStatus: EmojiStatus,
EmojiStatusUntil: EmojiStatusUntil,
AccountEmojiStatusesNotModified: AccountEmojiStatusesNotModified,
AccountEmojiStatuses: AccountEmojiStatuses,
ReactionEmpty: ReactionEmpty,
ReactionEmoji: ReactionEmoji,
ReactionCustomEmoji: ReactionCustomEmoji,
ReactionPaid: ReactionPaid,
ChatReactionsNone: ChatReactionsNone,
ChatReactionsAll: ChatReactionsAll,
ChatReactionsSome: ChatReactionsSome,
MessagesReactionsNotModified: MessagesReactionsNotModified,
MessagesReactions: MessagesReactions,
EmailVerifyPurposeLoginSetup: EmailVerifyPurposeLoginSetup,
EmailVerifyPurposeLoginChange: EmailVerifyPurposeLoginChange,
EmailVerifyPurposePassport: EmailVerifyPurposePassport,
EmailVerificationCode: EmailVerificationCode,
EmailVerificationGoogle: EmailVerificationGoogle,
EmailVerificationApple: EmailVerificationApple,
AccountEmailVerified: AccountEmailVerified,
AccountEmailVerifiedLogin: AccountEmailVerifiedLogin,
PremiumSubscriptionOption: PremiumSubscriptionOption,
SendAsPeer: SendAsPeer,
MessageExtendedMediaPreview: MessageExtendedMediaPreview,
MessageExtendedMedia: MessageExtendedMedia,
StickerKeyword: StickerKeyword,
Username: Username,
ForumTopicDeleted: ForumTopicDeleted,
ForumTopic: ForumTopic,
MessagesForumTopics: MessagesForumTopics,
DefaultHistoryTTL: DefaultHistoryTTL,
ExportedContactToken: ExportedContactToken,
RequestPeerTypeUser: RequestPeerTypeUser,
RequestPeerTypeChat: RequestPeerTypeChat,
RequestPeerTypeBroadcast: RequestPeerTypeBroadcast,
EmojiListNotModified: EmojiListNotModified,
EmojiList: EmojiList,
EmojiGroup: EmojiGroup,
EmojiGroupGreeting: EmojiGroupGreeting,
EmojiGroupPremium: EmojiGroupPremium,
MessagesEmojiGroupsNotModified: MessagesEmojiGroupsNotModified,
MessagesEmojiGroups: MessagesEmojiGroups,
TextWithEntities: TextWithEntities,
MessagesTranslateResult: MessagesTranslateResult,
AutoSaveSettings: AutoSaveSettings,
AutoSaveException: AutoSaveException,
AccountAutoSaveSettings: AccountAutoSaveSettings,
HelpAppConfigNotModified: HelpAppConfigNotModified,
HelpAppConfig: HelpAppConfig,
InputBotAppID: InputBotAppID,
InputBotAppShortName: InputBotAppShortName,
BotAppNotModified: BotAppNotModified,
BotApp: BotApp,
MessagesBotApp: MessagesBotApp,
InlineBotWebView: InlineBotWebView,
ReadParticipantDate: ReadParticipantDate,
InputChatlistDialogFilter: InputChatlistDialogFilter,
ExportedChatlistInvite: ExportedChatlistInvite,
ChatlistsExportedChatlistInvite: ChatlistsExportedChatlistInvite,
ChatlistsExportedInvites: ChatlistsExportedInvites,
ChatlistsChatlistInviteAlready: ChatlistsChatlistInviteAlready,
ChatlistsChatlistInvite: ChatlistsChatlistInvite,
ChatlistsChatlistUpdates: ChatlistsChatlistUpdates,
BotsBotInfo: BotsBotInfo,
MessagePeerVote: MessagePeerVote,
MessagePeerVoteInputOption: MessagePeerVoteInputOption,
MessagePeerVoteMultiple: MessagePeerVoteMultiple,
StoryViews: StoryViews,
StoryItemDeleted: StoryItemDeleted,
StoryItemSkipped: StoryItemSkipped,
StoryItem: StoryItem,
StoriesAllStoriesNotModified: StoriesAllStoriesNotModified,
StoriesAllStories: StoriesAllStories,
StoriesStories: StoriesStories,
StoryView: StoryView,
StoryViewPublicForward: StoryViewPublicForward,
StoryViewPublicRepost: StoryViewPublicRepost,
StoriesStoryViewsList: StoriesStoryViewsList,
StoriesStoryViews: StoriesStoryViews,
InputReplyToMessage: InputReplyToMessage,
InputReplyToStory: InputReplyToStory,
ExportedStoryLink: ExportedStoryLink,
StoriesStealthMode: StoriesStealthMode,
MediaAreaCoordinates: MediaAreaCoordinates,
MediaAreaVenue: MediaAreaVenue,
InputMediaAreaVenue: InputMediaAreaVenue,
MediaAreaGeoPoint: MediaAreaGeoPoint,
MediaAreaSuggestedReaction: MediaAreaSuggestedReaction,
MediaAreaChannelPost: MediaAreaChannelPost,
InputMediaAreaChannelPost: InputMediaAreaChannelPost,
MediaAreaUrl: MediaAreaUrl,
MediaAreaWeather: MediaAreaWeather,
PeerStories: PeerStories,
StoriesPeerStories: StoriesPeerStories,
MessagesWebPage: MessagesWebPage,
PremiumGiftCodeOption: PremiumGiftCodeOption,
PaymentsCheckedGiftCode: PaymentsCheckedGiftCode,
PaymentsGiveawayInfo: PaymentsGiveawayInfo,
PaymentsGiveawayInfoResults: PaymentsGiveawayInfoResults,
PrepaidGiveaway: PrepaidGiveaway,
PrepaidStarsGiveaway: PrepaidStarsGiveaway,
Boost: Boost,
PremiumBoostsList: PremiumBoostsList,
MyBoost: MyBoost,
PremiumMyBoosts: PremiumMyBoosts,
PremiumBoostsStatus: PremiumBoostsStatus,
StoryFwdHeader: StoryFwdHeader,
PostInteractionCountersMessage: PostInteractionCountersMessage,
PostInteractionCountersStory: PostInteractionCountersStory,
StatsStoryStats: StatsStoryStats,
PublicForwardMessage: PublicForwardMessage,
PublicForwardStory: PublicForwardStory,
StatsPublicForwards: StatsPublicForwards,
PeerColor: PeerColor,
HelpPeerColorSet: HelpPeerColorSet,
HelpPeerColorProfileSet: HelpPeerColorProfileSet,
HelpPeerColorOption: HelpPeerColorOption,
HelpPeerColorsNotModified: HelpPeerColorsNotModified,
HelpPeerColors: HelpPeerColors,
StoryReaction: StoryReaction,
StoryReactionPublicForward: StoryReactionPublicForward,
StoryReactionPublicRepost: StoryReactionPublicRepost,
StoriesStoryReactionsList: StoriesStoryReactionsList,
SavedDialog: SavedDialog,
MessagesSavedDialogs: MessagesSavedDialogs,
MessagesSavedDialogsSlice: MessagesSavedDialogsSlice,
MessagesSavedDialogsNotModified: MessagesSavedDialogsNotModified,
SavedReactionTag: SavedReactionTag,
MessagesSavedReactionTagsNotModified: MessagesSavedReactionTagsNotModified,
MessagesSavedReactionTags: MessagesSavedReactionTags,
OutboxReadDate: OutboxReadDate,
SmsjobsEligibleToJoin: SmsjobsEligibleToJoin,
SmsjobsStatus: SmsjobsStatus,
SmsJob: SmsJob,
BusinessWeeklyOpen: BusinessWeeklyOpen,
BusinessWorkHours: BusinessWorkHours,
BusinessLocation: BusinessLocation,
InputBusinessRecipients: InputBusinessRecipients,
BusinessRecipients: BusinessRecipients,
BusinessAwayMessageScheduleAlways: BusinessAwayMessageScheduleAlways,
BusinessAwayMessageScheduleOutsideWorkHours: BusinessAwayMessageScheduleOutsideWorkHours,
BusinessAwayMessageScheduleCustom: BusinessAwayMessageScheduleCustom,
InputBusinessGreetingMessage: InputBusinessGreetingMessage,
BusinessGreetingMessage: BusinessGreetingMessage,
InputBusinessAwayMessage: InputBusinessAwayMessage,
BusinessAwayMessage: BusinessAwayMessage,
Timezone: Timezone,
HelpTimezonesListNotModified: HelpTimezonesListNotModified,
HelpTimezonesList: HelpTimezonesList,
QuickReply: QuickReply,
InputQuickReplyShortcut: InputQuickReplyShortcut,
InputQuickReplyShortcutId: InputQuickReplyShortcutId,
MessagesQuickReplies: MessagesQuickReplies,
MessagesQuickRepliesNotModified: MessagesQuickRepliesNotModified,
ConnectedBot: ConnectedBot,
AccountConnectedBots: AccountConnectedBots,
MessagesDialogFilters: MessagesDialogFilters,
Birthday: Birthday,
BotBusinessConnection: BotBusinessConnection,
InputBusinessIntro: InputBusinessIntro,
BusinessIntro: BusinessIntro,
MessagesMyStickers: MessagesMyStickers,
InputCollectibleUsername: InputCollectibleUsername,
InputCollectiblePhone: InputCollectiblePhone,
FragmentCollectibleInfo: FragmentCollectibleInfo,
InputBusinessBotRecipients: InputBusinessBotRecipients,
BusinessBotRecipients: BusinessBotRecipients,
ContactBirthday: ContactBirthday,
ContactsContactBirthdays: ContactsContactBirthdays,
MissingInvitee: MissingInvitee,
MessagesInvitedUsers: MessagesInvitedUsers,
InputBusinessChatLink: InputBusinessChatLink,
BusinessChatLink: BusinessChatLink,
AccountBusinessChatLinks: AccountBusinessChatLinks,
AccountResolvedBusinessChatLinks: AccountResolvedBusinessChatLinks,
RequestedPeerUser: RequestedPeerUser,
RequestedPeerChat: RequestedPeerChat,
RequestedPeerChannel: RequestedPeerChannel,
SponsoredMessageReportOption: SponsoredMessageReportOption,
ChannelsSponsoredMessageReportResultChooseOption: ChannelsSponsoredMessageReportResultChooseOption,
ChannelsSponsoredMessageReportResultAdsHidden: ChannelsSponsoredMessageReportResultAdsHidden,
ChannelsSponsoredMessageReportResultReported: ChannelsSponsoredMessageReportResultReported,
StatsBroadcastRevenueStats: StatsBroadcastRevenueStats,
StatsBroadcastRevenueWithdrawalUrl: StatsBroadcastRevenueWithdrawalUrl,
BroadcastRevenueTransactionProceeds: BroadcastRevenueTransactionProceeds,
BroadcastRevenueTransactionWithdrawal: BroadcastRevenueTransactionWithdrawal,
BroadcastRevenueTransactionRefund: BroadcastRevenueTransactionRefund,
StatsBroadcastRevenueTransactions: StatsBroadcastRevenueTransactions,
ReactionNotificationsFromContacts: ReactionNotificationsFromContacts,
ReactionNotificationsFromAll: ReactionNotificationsFromAll,
ReactionsNotifySettings: ReactionsNotifySettings,
BroadcastRevenueBalances: BroadcastRevenueBalances,
AvailableEffect: AvailableEffect,
MessagesAvailableEffectsNotModified: MessagesAvailableEffectsNotModified,
MessagesAvailableEffects: MessagesAvailableEffects,
FactCheck: FactCheck,
StarsTransactionPeerUnsupported: StarsTransactionPeerUnsupported,
StarsTransactionPeerAppStore: StarsTransactionPeerAppStore,
StarsTransactionPeerPlayMarket: StarsTransactionPeerPlayMarket,
StarsTransactionPeerPremiumBot: StarsTransactionPeerPremiumBot,
StarsTransactionPeerFragment: StarsTransactionPeerFragment,
StarsTransactionPeer: StarsTransactionPeer,
StarsTransactionPeerAds: StarsTransactionPeerAds,
StarsTopupOption: StarsTopupOption,
StarsTransaction: StarsTransaction,
PaymentsStarsStatus: PaymentsStarsStatus,
FoundStory: FoundStory,
StoriesFoundStories: StoriesFoundStories,
GeoPointAddress: GeoPointAddress,
StarsRevenueStatus: StarsRevenueStatus,
PaymentsStarsRevenueStats: PaymentsStarsRevenueStats,
PaymentsStarsRevenueWithdrawalUrl: PaymentsStarsRevenueWithdrawalUrl,
PaymentsStarsRevenueAdsAccountUrl: PaymentsStarsRevenueAdsAccountUrl,
InputStarsTransaction: InputStarsTransaction,
StarsGiftOption: StarsGiftOption,
BotsPopularAppBots: BotsPopularAppBots,
BotPreviewMedia: BotPreviewMedia,
BotsPreviewInfo: BotsPreviewInfo,
StarsSubscriptionPricing: StarsSubscriptionPricing,
StarsSubscription: StarsSubscription,
MessageReactor: MessageReactor,
StarsGiveawayOption: StarsGiveawayOption,
StarsGiveawayWinnersOption: StarsGiveawayWinnersOption,
StarGift: StarGift,
PaymentsStarGiftsNotModified: PaymentsStarGiftsNotModified,
PaymentsStarGifts: PaymentsStarGifts,
UserStarGift: UserStarGift,
PaymentsUserStarGifts: PaymentsUserStarGifts,
MessageReportOption: MessageReportOption,
ReportResultChooseOption: ReportResultChooseOption,
ReportResultAddComment: ReportResultAddComment,
ReportResultReported: ReportResultReported,
InvokeAfterMsgs: InvokeAfterMsgs,
InitConnection: InitConnection,
InvokeWithLayer: InvokeWithLayer,
InvokeWithoutUpdates: InvokeWithoutUpdates,
InvokeWithMessagesRange: InvokeWithMessagesRange,
InvokeWithTakeout: InvokeWithTakeout,
InvokeWithBusinessConnection: InvokeWithBusinessConnection,
InvokeWithGooglePlayIntegrity: InvokeWithGooglePlayIntegrity,
InvokeWithApnsSecret: InvokeWithApnsSecret,
AuthSendCode: AuthSendCode,
AuthSignUp: AuthSignUp,
AuthSignIn: AuthSignIn,
AuthLogOut: AuthLogOut,
AuthResetAuthorizations: AuthResetAuthorizations,
AuthExportAuthorization: AuthExportAuthorization,
AuthImportAuthorization: AuthImportAuthorization,
AuthBindTempAuthKey: AuthBindTempAuthKey,
AuthImportBotAuthorization: AuthImportBotAuthorization,
AuthCheckPassword: AuthCheckPassword,
AuthRequestPasswordRecovery: AuthRequestPasswordRecovery,
AuthRecoverPassword: AuthRecoverPassword,
AuthResendCode: AuthResendCode,
AuthCancelCode: AuthCancelCode,
AuthDropTempAuthKeys: AuthDropTempAuthKeys,
AuthExportLoginToken: AuthExportLoginToken,
AuthImportLoginToken: AuthImportLoginToken,
AuthAcceptLoginToken: AuthAcceptLoginToken,
AuthCheckRecoveryPassword: AuthCheckRecoveryPassword,
AuthImportWebTokenAuthorization: AuthImportWebTokenAuthorization,
AuthRequestFirebaseSms: AuthRequestFirebaseSms,
AuthResetLoginEmail: AuthResetLoginEmail,
AuthReportMissingCode: AuthReportMissingCode,
AccountRegisterDevice: AccountRegisterDevice,
AccountUnregisterDevice: AccountUnregisterDevice,
AccountUpdateNotifySettings: AccountUpdateNotifySettings,
AccountGetNotifySettings: AccountGetNotifySettings,
AccountResetNotifySettings: AccountResetNotifySettings,
AccountUpdateProfile: AccountUpdateProfile,
AccountUpdateStatus: AccountUpdateStatus,
AccountGetWallPapers: AccountGetWallPapers,
AccountReportPeer: AccountReportPeer,
AccountCheckUsername: AccountCheckUsername,
AccountUpdateUsername: AccountUpdateUsername,
AccountGetPrivacy: AccountGetPrivacy,
AccountSetPrivacy: AccountSetPrivacy,
AccountDeleteAccount: AccountDeleteAccount,
AccountGetAccountTTL: AccountGetAccountTTL,
AccountSetAccountTTL: AccountSetAccountTTL,
AccountSendChangePhoneCode: AccountSendChangePhoneCode,
AccountChangePhone: AccountChangePhone,
AccountUpdateDeviceLocked: AccountUpdateDeviceLocked,
AccountGetAuthorizations: AccountGetAuthorizations,
AccountResetAuthorization: AccountResetAuthorization,
AccountGetPassword: AccountGetPassword,
AccountGetPasswordSettings: AccountGetPasswordSettings,
AccountUpdatePasswordSettings: AccountUpdatePasswordSettings,
AccountSendConfirmPhoneCode: AccountSendConfirmPhoneCode,
AccountConfirmPhone: AccountConfirmPhone,
AccountGetTmpPassword: AccountGetTmpPassword,
AccountGetWebAuthorizations: AccountGetWebAuthorizations,
AccountResetWebAuthorization: AccountResetWebAuthorization,
AccountResetWebAuthorizations: AccountResetWebAuthorizations,
AccountGetAllSecureValues: AccountGetAllSecureValues,
AccountGetSecureValue: AccountGetSecureValue,
AccountSaveSecureValue: AccountSaveSecureValue,
AccountDeleteSecureValue: AccountDeleteSecureValue,
AccountGetAuthorizationForm: AccountGetAuthorizationForm,
AccountAcceptAuthorization: AccountAcceptAuthorization,
AccountSendVerifyPhoneCode: AccountSendVerifyPhoneCode,
AccountVerifyPhone: AccountVerifyPhone,
AccountSendVerifyEmailCode: AccountSendVerifyEmailCode,
AccountVerifyEmail: AccountVerifyEmail,
AccountInitTakeoutSession: AccountInitTakeoutSession,
AccountFinishTakeoutSession: AccountFinishTakeoutSession,
AccountConfirmPasswordEmail: AccountConfirmPasswordEmail,
AccountResendPasswordEmail: AccountResendPasswordEmail,
AccountCancelPasswordEmail: AccountCancelPasswordEmail,
AccountGetContactSignUpNotification: AccountGetContactSignUpNotification,
AccountSetContactSignUpNotification: AccountSetContactSignUpNotification,
AccountGetNotifyExceptions: AccountGetNotifyExceptions,
AccountGetWallPaper: AccountGetWallPaper,
AccountUploadWallPaper: AccountUploadWallPaper,
AccountSaveWallPaper: AccountSaveWallPaper,
AccountInstallWallPaper: AccountInstallWallPaper,
AccountResetWallPapers: AccountResetWallPapers,
AccountGetAutoDownloadSettings: AccountGetAutoDownloadSettings,
AccountSaveAutoDownloadSettings: AccountSaveAutoDownloadSettings,
AccountUploadTheme: AccountUploadTheme,
AccountCreateTheme: AccountCreateTheme,
AccountUpdateTheme: AccountUpdateTheme,
AccountSaveTheme: AccountSaveTheme,
AccountInstallTheme: AccountInstallTheme,
AccountGetTheme: AccountGetTheme,
AccountGetThemes: AccountGetThemes,
AccountSetContentSettings: AccountSetContentSettings,
AccountGetContentSettings: AccountGetContentSettings,
AccountGetMultiWallPapers: AccountGetMultiWallPapers,
AccountGetGlobalPrivacySettings: AccountGetGlobalPrivacySettings,
AccountSetGlobalPrivacySettings: AccountSetGlobalPrivacySettings,
AccountReportProfilePhoto: AccountReportProfilePhoto,
AccountResetPassword: AccountResetPassword,
AccountDeclinePasswordReset: AccountDeclinePasswordReset,
AccountGetChatThemes: AccountGetChatThemes,
AccountSetAuthorizationTTL: AccountSetAuthorizationTTL,
AccountChangeAuthorizationSettings: AccountChangeAuthorizationSettings,
AccountGetSavedRingtones: AccountGetSavedRingtones,
AccountSaveRingtone: AccountSaveRingtone,
AccountUploadRingtone: AccountUploadRingtone,
AccountUpdateEmojiStatus: AccountUpdateEmojiStatus,
AccountGetDefaultEmojiStatuses: AccountGetDefaultEmojiStatuses,
AccountGetRecentEmojiStatuses: AccountGetRecentEmojiStatuses,
AccountClearRecentEmojiStatuses: AccountClearRecentEmojiStatuses,
AccountReorderUsernames: AccountReorderUsernames,
AccountToggleUsername: AccountToggleUsername,
AccountGetDefaultProfilePhotoEmojis: AccountGetDefaultProfilePhotoEmojis,
AccountGetDefaultGroupPhotoEmojis: AccountGetDefaultGroupPhotoEmojis,
AccountGetAutoSaveSettings: AccountGetAutoSaveSettings,
AccountSaveAutoSaveSettings: AccountSaveAutoSaveSettings,
AccountDeleteAutoSaveExceptions: AccountDeleteAutoSaveExceptions,
AccountInvalidateSignInCodes: AccountInvalidateSignInCodes,
AccountUpdateColor: AccountUpdateColor,
AccountGetDefaultBackgroundEmojis: AccountGetDefaultBackgroundEmojis,
AccountGetChannelDefaultEmojiStatuses: AccountGetChannelDefaultEmojiStatuses,
AccountGetChannelRestrictedStatusEmojis: AccountGetChannelRestrictedStatusEmojis,
AccountUpdateBusinessWorkHours: AccountUpdateBusinessWorkHours,
AccountUpdateBusinessLocation: AccountUpdateBusinessLocation,
AccountUpdateBusinessGreetingMessage: AccountUpdateBusinessGreetingMessage,
AccountUpdateBusinessAwayMessage: AccountUpdateBusinessAwayMessage,
AccountUpdateConnectedBot: AccountUpdateConnectedBot,
AccountGetConnectedBots: AccountGetConnectedBots,
AccountGetBotBusinessConnection: AccountGetBotBusinessConnection,
AccountUpdateBusinessIntro: AccountUpdateBusinessIntro,
AccountToggleConnectedBotPaused: AccountToggleConnectedBotPaused,
AccountDisablePeerConnectedBot: AccountDisablePeerConnectedBot,
AccountUpdateBirthday: AccountUpdateBirthday,
AccountCreateBusinessChatLink: AccountCreateBusinessChatLink,
AccountEditBusinessChatLink: AccountEditBusinessChatLink,
AccountDeleteBusinessChatLink: AccountDeleteBusinessChatLink,
AccountGetBusinessChatLinks: AccountGetBusinessChatLinks,
AccountResolveBusinessChatLink: AccountResolveBusinessChatLink,
AccountUpdatePersonalChannel: AccountUpdatePersonalChannel,
AccountToggleSponsoredMessages: AccountToggleSponsoredMessages,
AccountGetReactionsNotifySettings: AccountGetReactionsNotifySettings,
AccountSetReactionsNotifySettings: AccountSetReactionsNotifySettings,
UsersGetUsers: UsersGetUsers,
UsersGetFullUser: UsersGetFullUser,
UsersSetSecureValueErrors: UsersSetSecureValueErrors,
UsersGetIsPremiumRequiredToContact: UsersGetIsPremiumRequiredToContact,
ContactsGetContactIDs: ContactsGetContactIDs,
ContactsGetStatuses: ContactsGetStatuses,
ContactsGetContacts: ContactsGetContacts,
ContactsImportContacts: ContactsImportContacts,
ContactsDeleteContacts: ContactsDeleteContacts,
ContactsDeleteByPhones: ContactsDeleteByPhones,
ContactsBlock: ContactsBlock,
ContactsUnblock: ContactsUnblock,
ContactsGetBlocked: ContactsGetBlocked,
ContactsSearch: ContactsSearch,
ContactsResolveUsername: ContactsResolveUsername,
ContactsGetTopPeers: ContactsGetTopPeers,
ContactsResetTopPeerRating: ContactsResetTopPeerRating,
ContactsResetSaved: ContactsResetSaved,
ContactsGetSaved: ContactsGetSaved,
ContactsToggleTopPeers: ContactsToggleTopPeers,
ContactsAddContact: ContactsAddContact,
ContactsAcceptContact: ContactsAcceptContact,
ContactsGetLocated: ContactsGetLocated,
ContactsBlockFromReplies: ContactsBlockFromReplies,
ContactsResolvePhone: ContactsResolvePhone,
ContactsExportContactToken: ContactsExportContactToken,
ContactsImportContactToken: ContactsImportContactToken,
ContactsEditCloseFriends: ContactsEditCloseFriends,
ContactsSetBlocked: ContactsSetBlocked,
ContactsGetBirthdays: ContactsGetBirthdays,
MessagesGetMessages: MessagesGetMessages,
MessagesGetDialogs: MessagesGetDialogs,
MessagesGetHistory: MessagesGetHistory,
MessagesSearch: MessagesSearch,
MessagesReadHistory: MessagesReadHistory,
MessagesDeleteHistory: MessagesDeleteHistory,
MessagesDeleteMessages: MessagesDeleteMessages,
MessagesReceivedMessages: MessagesReceivedMessages,
MessagesSetTyping: MessagesSetTyping,
MessagesSendMessage: MessagesSendMessage,
MessagesSendMedia: MessagesSendMedia,
MessagesForwardMessages: MessagesForwardMessages,
MessagesReportSpam: MessagesReportSpam,
MessagesGetPeerSettings: MessagesGetPeerSettings,
MessagesReport: MessagesReport,
MessagesGetChats: MessagesGetChats,
MessagesGetFullChat: MessagesGetFullChat,
MessagesEditChatTitle: MessagesEditChatTitle,
MessagesEditChatPhoto: MessagesEditChatPhoto,
MessagesAddChatUser: MessagesAddChatUser,
MessagesDeleteChatUser: MessagesDeleteChatUser,
MessagesCreateChat: MessagesCreateChat,
MessagesGetDhConfig: MessagesGetDhConfig,
MessagesRequestEncryption: MessagesRequestEncryption,
MessagesAcceptEncryption: MessagesAcceptEncryption,
MessagesDiscardEncryption: MessagesDiscardEncryption,
MessagesSetEncryptedTyping: MessagesSetEncryptedTyping,
MessagesReadEncryptedHistory: MessagesReadEncryptedHistory,
MessagesSendEncrypted: MessagesSendEncrypted,
MessagesSendEncryptedFile: MessagesSendEncryptedFile,
MessagesSendEncryptedService: MessagesSendEncryptedService,
MessagesReceivedQueue: MessagesReceivedQueue,
MessagesReportEncryptedSpam: MessagesReportEncryptedSpam,
MessagesReadMessageContents: MessagesReadMessageContents,
MessagesGetStickers: MessagesGetStickers,
MessagesGetAllStickers: MessagesGetAllStickers,
MessagesGetWebPagePreview: MessagesGetWebPagePreview,
MessagesExportChatInvite: MessagesExportChatInvite,
MessagesCheckChatInvite: MessagesCheckChatInvite,
MessagesImportChatInvite: MessagesImportChatInvite,
MessagesGetStickerSet: MessagesGetStickerSet,
MessagesInstallStickerSet: MessagesInstallStickerSet,
MessagesUninstallStickerSet: MessagesUninstallStickerSet,
MessagesStartBot: MessagesStartBot,
MessagesGetMessagesViews: MessagesGetMessagesViews,
MessagesEditChatAdmin: MessagesEditChatAdmin,
MessagesMigrateChat: MessagesMigrateChat,
MessagesSearchGlobal: MessagesSearchGlobal,
MessagesReorderStickerSets: MessagesReorderStickerSets,
MessagesGetDocumentByHash: MessagesGetDocumentByHash,
MessagesGetSavedGifs: MessagesGetSavedGifs,
MessagesSaveGif: MessagesSaveGif,
MessagesGetInlineBotResults: MessagesGetInlineBotResults,
MessagesSetInlineBotResults: MessagesSetInlineBotResults,
MessagesSendInlineBotResult: MessagesSendInlineBotResult,
MessagesGetMessageEditData: MessagesGetMessageEditData,
MessagesEditMessage: MessagesEditMessage,
MessagesEditInlineBotMessage: MessagesEditInlineBotMessage,
MessagesGetBotCallbackAnswer: MessagesGetBotCallbackAnswer,
MessagesSetBotCallbackAnswer: MessagesSetBotCallbackAnswer,
MessagesGetPeerDialogs: MessagesGetPeerDialogs,
MessagesSaveDraft: MessagesSaveDraft,
MessagesGetAllDrafts: MessagesGetAllDrafts,
MessagesGetFeaturedStickers: MessagesGetFeaturedStickers,
MessagesReadFeaturedStickers: MessagesReadFeaturedStickers,
MessagesGetRecentStickers: MessagesGetRecentStickers,
MessagesSaveRecentSticker: MessagesSaveRecentSticker,
MessagesClearRecentStickers: MessagesClearRecentStickers,
MessagesGetArchivedStickers: MessagesGetArchivedStickers,
MessagesGetMaskStickers: MessagesGetMaskStickers,
MessagesGetAttachedStickers: MessagesGetAttachedStickers,
MessagesSetGameScore: MessagesSetGameScore,
MessagesSetInlineGameScore: MessagesSetInlineGameScore,
MessagesGetGameHighScores: MessagesGetGameHighScores,
MessagesGetInlineGameHighScores: MessagesGetInlineGameHighScores,
MessagesGetCommonChats: MessagesGetCommonChats,
MessagesGetWebPage: MessagesGetWebPage,
MessagesToggleDialogPin: MessagesToggleDialogPin,
MessagesReorderPinnedDialogs: MessagesReorderPinnedDialogs,
MessagesGetPinnedDialogs: MessagesGetPinnedDialogs,
MessagesSetBotShippingResults: MessagesSetBotShippingResults,
MessagesSetBotPrecheckoutResults: MessagesSetBotPrecheckoutResults,
MessagesUploadMedia: MessagesUploadMedia,
MessagesSendScreenshotNotification: MessagesSendScreenshotNotification,
MessagesGetFavedStickers: MessagesGetFavedStickers,
MessagesFaveSticker: MessagesFaveSticker,
MessagesGetUnreadMentions: MessagesGetUnreadMentions,
MessagesReadMentions: MessagesReadMentions,
MessagesGetRecentLocations: MessagesGetRecentLocations,
MessagesSendMultiMedia: MessagesSendMultiMedia,
MessagesUploadEncryptedFile: MessagesUploadEncryptedFile,
MessagesSearchStickerSets: MessagesSearchStickerSets,
MessagesGetSplitRanges: MessagesGetSplitRanges,
MessagesMarkDialogUnread: MessagesMarkDialogUnread,
MessagesGetDialogUnreadMarks: MessagesGetDialogUnreadMarks,
MessagesClearAllDrafts: MessagesClearAllDrafts,
MessagesUpdatePinnedMessage: MessagesUpdatePinnedMessage,
MessagesSendVote: MessagesSendVote,
MessagesGetPollResults: MessagesGetPollResults,
MessagesGetOnlines: MessagesGetOnlines,
MessagesEditChatAbout: MessagesEditChatAbout,
MessagesEditChatDefaultBannedRights: MessagesEditChatDefaultBannedRights,
MessagesGetEmojiKeywords: MessagesGetEmojiKeywords,
MessagesGetEmojiKeywordsDifference: MessagesGetEmojiKeywordsDifference,
MessagesGetEmojiKeywordsLanguages: MessagesGetEmojiKeywordsLanguages,
MessagesGetEmojiURL: MessagesGetEmojiURL,
MessagesGetSearchCounters: MessagesGetSearchCounters,
MessagesRequestUrlAuth: MessagesRequestUrlAuth,
MessagesAcceptUrlAuth: MessagesAcceptUrlAuth,
MessagesHidePeerSettingsBar: MessagesHidePeerSettingsBar,
MessagesGetScheduledHistory: MessagesGetScheduledHistory,
MessagesGetScheduledMessages: MessagesGetScheduledMessages,
MessagesSendScheduledMessages: MessagesSendScheduledMessages,
MessagesDeleteScheduledMessages: MessagesDeleteScheduledMessages,
MessagesGetPollVotes: MessagesGetPollVotes,
MessagesToggleStickerSets: MessagesToggleStickerSets,
MessagesGetDialogFilters: MessagesGetDialogFilters,
MessagesGetSuggestedDialogFilters: MessagesGetSuggestedDialogFilters,
MessagesUpdateDialogFilter: MessagesUpdateDialogFilter,
MessagesUpdateDialogFiltersOrder: MessagesUpdateDialogFiltersOrder,
MessagesGetOldFeaturedStickers: MessagesGetOldFeaturedStickers,
MessagesGetReplies: MessagesGetReplies,
MessagesGetDiscussionMessage: MessagesGetDiscussionMessage,
MessagesReadDiscussion: MessagesReadDiscussion,
MessagesUnpinAllMessages: MessagesUnpinAllMessages,
MessagesDeleteChat: MessagesDeleteChat,
MessagesDeletePhoneCallHistory: MessagesDeletePhoneCallHistory,
MessagesCheckHistoryImport: MessagesCheckHistoryImport,
MessagesInitHistoryImport: MessagesInitHistoryImport,
MessagesUploadImportedMedia: MessagesUploadImportedMedia,
MessagesStartHistoryImport: MessagesStartHistoryImport,
MessagesGetExportedChatInvites: MessagesGetExportedChatInvites,
MessagesGetExportedChatInvite: MessagesGetExportedChatInvite,
MessagesEditExportedChatInvite: MessagesEditExportedChatInvite,
MessagesDeleteRevokedExportedChatInvites: MessagesDeleteRevokedExportedChatInvites,
MessagesDeleteExportedChatInvite: MessagesDeleteExportedChatInvite,
MessagesGetAdminsWithInvites: MessagesGetAdminsWithInvites,
MessagesGetChatInviteImporters: MessagesGetChatInviteImporters,
MessagesSetHistoryTTL: MessagesSetHistoryTTL,
MessagesCheckHistoryImportPeer: MessagesCheckHistoryImportPeer,
MessagesSetChatTheme: MessagesSetChatTheme,
MessagesGetMessageReadParticipants: MessagesGetMessageReadParticipants,
MessagesGetSearchResultsCalendar: MessagesGetSearchResultsCalendar,
MessagesGetSearchResultsPositions: MessagesGetSearchResultsPositions,
MessagesHideChatJoinRequest: MessagesHideChatJoinRequest,
MessagesHideAllChatJoinRequests: MessagesHideAllChatJoinRequests,
MessagesToggleNoForwards: MessagesToggleNoForwards,
MessagesSaveDefaultSendAs: MessagesSaveDefaultSendAs,
MessagesSendReaction: MessagesSendReaction,
MessagesGetMessagesReactions: MessagesGetMessagesReactions,
MessagesGetMessageReactionsList: MessagesGetMessageReactionsList,
MessagesSetChatAvailableReactions: MessagesSetChatAvailableReactions,
MessagesGetAvailableReactions: MessagesGetAvailableReactions,
MessagesSetDefaultReaction: MessagesSetDefaultReaction,
MessagesTranslateText: MessagesTranslateText,
MessagesGetUnreadReactions: MessagesGetUnreadReactions,
MessagesReadReactions: MessagesReadReactions,
MessagesSearchSentMedia: MessagesSearchSentMedia,
MessagesGetAttachMenuBots: MessagesGetAttachMenuBots,
MessagesGetAttachMenuBot: MessagesGetAttachMenuBot,
MessagesToggleBotInAttachMenu: MessagesToggleBotInAttachMenu,
MessagesRequestWebView: MessagesRequestWebView,
MessagesProlongWebView: MessagesProlongWebView,
MessagesRequestSimpleWebView: MessagesRequestSimpleWebView,
MessagesSendWebViewResultMessage: MessagesSendWebViewResultMessage,
MessagesSendWebViewData: MessagesSendWebViewData,
MessagesTranscribeAudio: MessagesTranscribeAudio,
MessagesRateTranscribedAudio: MessagesRateTranscribedAudio,
MessagesGetCustomEmojiDocuments: MessagesGetCustomEmojiDocuments,
MessagesGetEmojiStickers: MessagesGetEmojiStickers,
MessagesGetFeaturedEmojiStickers: MessagesGetFeaturedEmojiStickers,
MessagesReportReaction: MessagesReportReaction,
MessagesGetTopReactions: MessagesGetTopReactions,
MessagesGetRecentReactions: MessagesGetRecentReactions,
MessagesClearRecentReactions: MessagesClearRecentReactions,
MessagesGetExtendedMedia: MessagesGetExtendedMedia,
MessagesSetDefaultHistoryTTL: MessagesSetDefaultHistoryTTL,
MessagesGetDefaultHistoryTTL: MessagesGetDefaultHistoryTTL,
MessagesSendBotRequestedPeer: MessagesSendBotRequestedPeer,
MessagesGetEmojiGroups: MessagesGetEmojiGroups,
MessagesGetEmojiStatusGroups: MessagesGetEmojiStatusGroups,
MessagesGetEmojiProfilePhotoGroups: MessagesGetEmojiProfilePhotoGroups,
MessagesSearchCustomEmoji: MessagesSearchCustomEmoji,
MessagesTogglePeerTranslations: MessagesTogglePeerTranslations,
MessagesGetBotApp: MessagesGetBotApp,
MessagesRequestAppWebView: MessagesRequestAppWebView,
MessagesSetChatWallPaper: MessagesSetChatWallPaper,
MessagesSearchEmojiStickerSets: MessagesSearchEmojiStickerSets,
MessagesGetSavedDialogs: MessagesGetSavedDialogs,
MessagesGetSavedHistory: MessagesGetSavedHistory,
MessagesDeleteSavedHistory: MessagesDeleteSavedHistory,
MessagesGetPinnedSavedDialogs: MessagesGetPinnedSavedDialogs,
MessagesToggleSavedDialogPin: MessagesToggleSavedDialogPin,
MessagesReorderPinnedSavedDialogs: MessagesReorderPinnedSavedDialogs,
MessagesGetSavedReactionTags: MessagesGetSavedReactionTags,
MessagesUpdateSavedReactionTag: MessagesUpdateSavedReactionTag,
MessagesGetDefaultTagReactions: MessagesGetDefaultTagReactions,
MessagesGetOutboxReadDate: MessagesGetOutboxReadDate,
MessagesGetQuickReplies: MessagesGetQuickReplies,
MessagesReorderQuickReplies: MessagesReorderQuickReplies,
MessagesCheckQuickReplyShortcut: MessagesCheckQuickReplyShortcut,
MessagesEditQuickReplyShortcut: MessagesEditQuickReplyShortcut,
MessagesDeleteQuickReplyShortcut: MessagesDeleteQuickReplyShortcut,
MessagesGetQuickReplyMessages: MessagesGetQuickReplyMessages,
MessagesSendQuickReplyMessages: MessagesSendQuickReplyMessages,
MessagesDeleteQuickReplyMessages: MessagesDeleteQuickReplyMessages,
MessagesToggleDialogFilterTags: MessagesToggleDialogFilterTags,
MessagesGetMyStickers: MessagesGetMyStickers,
MessagesGetEmojiStickerGroups: MessagesGetEmojiStickerGroups,
MessagesGetAvailableEffects: MessagesGetAvailableEffects,
MessagesEditFactCheck: MessagesEditFactCheck,
MessagesDeleteFactCheck: MessagesDeleteFactCheck,
MessagesGetFactCheck: MessagesGetFactCheck,
MessagesRequestMainWebView: MessagesRequestMainWebView,
MessagesSendPaidReaction: MessagesSendPaidReaction,
MessagesTogglePaidReactionPrivacy: MessagesTogglePaidReactionPrivacy,
MessagesGetPaidReactionPrivacy: MessagesGetPaidReactionPrivacy,
UpdatesGetState: UpdatesGetState,
UpdatesGetDifference: UpdatesGetDifference,
UpdatesGetChannelDifference: UpdatesGetChannelDifference,
PhotosUpdateProfilePhoto: PhotosUpdateProfilePhoto,
PhotosUploadProfilePhoto: PhotosUploadProfilePhoto,
PhotosDeletePhotos: PhotosDeletePhotos,
PhotosGetUserPhotos: PhotosGetUserPhotos,
PhotosUploadContactProfilePhoto: PhotosUploadContactProfilePhoto,
UploadSaveFilePart: UploadSaveFilePart,
UploadGetFile: UploadGetFile,
UploadSaveBigFilePart: UploadSaveBigFilePart,
UploadGetWebFile: UploadGetWebFile,
UploadGetCdnFile: UploadGetCdnFile,
UploadReuploadCdnFile: UploadReuploadCdnFile,
UploadGetCdnFileHashes: UploadGetCdnFileHashes,
UploadGetFileHashes: UploadGetFileHashes,
HelpGetConfig: HelpGetConfig,
HelpGetNearestDc: HelpGetNearestDc,
HelpGetAppUpdate: HelpGetAppUpdate,
HelpGetInviteText: HelpGetInviteText,
HelpGetSupport: HelpGetSupport,
HelpSetBotUpdatesStatus: HelpSetBotUpdatesStatus,
HelpGetCdnConfig: HelpGetCdnConfig,
HelpGetRecentMeUrls: HelpGetRecentMeUrls,
HelpGetTermsOfServiceUpdate: HelpGetTermsOfServiceUpdate,
HelpAcceptTermsOfService: HelpAcceptTermsOfService,
HelpGetDeepLinkInfo: HelpGetDeepLinkInfo,
HelpGetAppConfig: HelpGetAppConfig,
HelpSaveAppLog: HelpSaveAppLog,
HelpGetPassportConfig: HelpGetPassportConfig,
HelpGetSupportName: HelpGetSupportName,
HelpGetUserInfo: HelpGetUserInfo,
HelpEditUserInfo: HelpEditUserInfo,
HelpGetPromoData: HelpGetPromoData,
HelpHidePromoData: HelpHidePromoData,
HelpDismissSuggestion: HelpDismissSuggestion,
HelpGetCountriesList: HelpGetCountriesList,
HelpGetPremiumPromo: HelpGetPremiumPromo,
HelpGetPeerColors: HelpGetPeerColors,
HelpGetPeerProfileColors: HelpGetPeerProfileColors,
HelpGetTimezonesList: HelpGetTimezonesList,
ChannelsReadHistory: ChannelsReadHistory,
ChannelsDeleteMessages: ChannelsDeleteMessages,
ChannelsReportSpam: ChannelsReportSpam,
ChannelsGetMessages: ChannelsGetMessages,
ChannelsGetParticipants: ChannelsGetParticipants,
ChannelsGetParticipant: ChannelsGetParticipant,
ChannelsGetChannels: ChannelsGetChannels,
ChannelsGetFullChannel: ChannelsGetFullChannel,
ChannelsCreateChannel: ChannelsCreateChannel,
ChannelsEditAdmin: ChannelsEditAdmin,
ChannelsEditTitle: ChannelsEditTitle,
ChannelsEditPhoto: ChannelsEditPhoto,
ChannelsCheckUsername: ChannelsCheckUsername,
ChannelsUpdateUsername: ChannelsUpdateUsername,
ChannelsJoinChannel: ChannelsJoinChannel,
ChannelsLeaveChannel: ChannelsLeaveChannel,
ChannelsInviteToChannel: ChannelsInviteToChannel,
ChannelsDeleteChannel: ChannelsDeleteChannel,
ChannelsExportMessageLink: ChannelsExportMessageLink,
ChannelsToggleSignatures: ChannelsToggleSignatures,
ChannelsGetAdminedPublicChannels: ChannelsGetAdminedPublicChannels,
ChannelsEditBanned: ChannelsEditBanned,
ChannelsGetAdminLog: ChannelsGetAdminLog,
ChannelsSetStickers: ChannelsSetStickers,
ChannelsReadMessageContents: ChannelsReadMessageContents,
ChannelsDeleteHistory: ChannelsDeleteHistory,
ChannelsTogglePreHistoryHidden: ChannelsTogglePreHistoryHidden,
ChannelsGetLeftChannels: ChannelsGetLeftChannels,
ChannelsGetGroupsForDiscussion: ChannelsGetGroupsForDiscussion,
ChannelsSetDiscussionGroup: ChannelsSetDiscussionGroup,
ChannelsEditCreator: ChannelsEditCreator,
ChannelsEditLocation: ChannelsEditLocation,
ChannelsToggleSlowMode: ChannelsToggleSlowMode,
ChannelsGetInactiveChannels: ChannelsGetInactiveChannels,
ChannelsConvertToGigagroup: ChannelsConvertToGigagroup,
ChannelsViewSponsoredMessage: ChannelsViewSponsoredMessage,
ChannelsGetSponsoredMessages: ChannelsGetSponsoredMessages,
ChannelsGetSendAs: ChannelsGetSendAs,
ChannelsDeleteParticipantHistory: ChannelsDeleteParticipantHistory,
ChannelsToggleJoinToSend: ChannelsToggleJoinToSend,
ChannelsToggleJoinRequest: ChannelsToggleJoinRequest,
ChannelsReorderUsernames: ChannelsReorderUsernames,
ChannelsToggleUsername: ChannelsToggleUsername,
ChannelsDeactivateAllUsernames: ChannelsDeactivateAllUsernames,
ChannelsToggleForum: ChannelsToggleForum,
ChannelsCreateForumTopic: ChannelsCreateForumTopic,
ChannelsGetForumTopics: ChannelsGetForumTopics,
ChannelsGetForumTopicsByID: ChannelsGetForumTopicsByID,
ChannelsEditForumTopic: ChannelsEditForumTopic,
ChannelsUpdatePinnedForumTopic: ChannelsUpdatePinnedForumTopic,
ChannelsDeleteTopicHistory: ChannelsDeleteTopicHistory,
ChannelsReorderPinnedForumTopics: ChannelsReorderPinnedForumTopics,
ChannelsToggleAntiSpam: ChannelsToggleAntiSpam,
ChannelsReportAntiSpamFalsePositive: ChannelsReportAntiSpamFalsePositive,
ChannelsToggleParticipantsHidden: ChannelsToggleParticipantsHidden,
ChannelsClickSponsoredMessage: ChannelsClickSponsoredMessage,
ChannelsUpdateColor: ChannelsUpdateColor,
ChannelsToggleViewForumAsMessages: ChannelsToggleViewForumAsMessages,
ChannelsGetChannelRecommendations: ChannelsGetChannelRecommendations,
ChannelsUpdateEmojiStatus: ChannelsUpdateEmojiStatus,
ChannelsSetBoostsToUnblockRestrictions: ChannelsSetBoostsToUnblockRestrictions,
ChannelsSetEmojiStickers: ChannelsSetEmojiStickers,
ChannelsReportSponsoredMessage: ChannelsReportSponsoredMessage,
ChannelsRestrictSponsoredMessages: ChannelsRestrictSponsoredMessages,
ChannelsSearchPosts: ChannelsSearchPosts,
BotsSendCustomRequest: BotsSendCustomRequest,
BotsAnswerWebhookJSONQuery: BotsAnswerWebhookJSONQuery,
BotsSetBotCommands: BotsSetBotCommands,
BotsResetBotCommands: BotsResetBotCommands,
BotsGetBotCommands: BotsGetBotCommands,
BotsSetBotMenuButton: BotsSetBotMenuButton,
BotsGetBotMenuButton: BotsGetBotMenuButton,
BotsSetBotBroadcastDefaultAdminRights: BotsSetBotBroadcastDefaultAdminRights,
BotsSetBotGroupDefaultAdminRights: BotsSetBotGroupDefaultAdminRights,
BotsSetBotInfo: BotsSetBotInfo,
BotsGetBotInfo: BotsGetBotInfo,
BotsReorderUsernames: BotsReorderUsernames,
BotsToggleUsername: BotsToggleUsername,
BotsCanSendMessage: BotsCanSendMessage,
BotsAllowSendMessage: BotsAllowSendMessage,
BotsInvokeWebViewCustomMethod: BotsInvokeWebViewCustomMethod,
BotsGetPopularAppBots: BotsGetPopularAppBots,
BotsAddPreviewMedia: BotsAddPreviewMedia,
BotsEditPreviewMedia: BotsEditPreviewMedia,
BotsDeletePreviewMedia: BotsDeletePreviewMedia,
BotsReorderPreviewMedias: BotsReorderPreviewMedias,
BotsGetPreviewInfo: BotsGetPreviewInfo,
BotsGetPreviewMedias: BotsGetPreviewMedias,
PaymentsGetPaymentForm: PaymentsGetPaymentForm,
PaymentsGetPaymentReceipt: PaymentsGetPaymentReceipt,
PaymentsValidateRequestedInfo: PaymentsValidateRequestedInfo,
PaymentsSendPaymentForm: PaymentsSendPaymentForm,
PaymentsGetSavedInfo: PaymentsGetSavedInfo,
PaymentsClearSavedInfo: PaymentsClearSavedInfo,
PaymentsGetBankCardData: PaymentsGetBankCardData,
PaymentsExportInvoice: PaymentsExportInvoice,
PaymentsAssignAppStoreTransaction: PaymentsAssignAppStoreTransaction,
PaymentsAssignPlayMarketTransaction: PaymentsAssignPlayMarketTransaction,
PaymentsCanPurchasePremium: PaymentsCanPurchasePremium,
PaymentsGetPremiumGiftCodeOptions: PaymentsGetPremiumGiftCodeOptions,
PaymentsCheckGiftCode: PaymentsCheckGiftCode,
PaymentsApplyGiftCode: PaymentsApplyGiftCode,
PaymentsGetGiveawayInfo: PaymentsGetGiveawayInfo,
PaymentsLaunchPrepaidGiveaway: PaymentsLaunchPrepaidGiveaway,
PaymentsGetStarsTopupOptions: PaymentsGetStarsTopupOptions,
PaymentsGetStarsStatus: PaymentsGetStarsStatus,
PaymentsGetStarsTransactions: PaymentsGetStarsTransactions,
PaymentsSendStarsForm: PaymentsSendStarsForm,
PaymentsRefundStarsCharge: PaymentsRefundStarsCharge,
PaymentsGetStarsRevenueStats: PaymentsGetStarsRevenueStats,
PaymentsGetStarsRevenueWithdrawalUrl: PaymentsGetStarsRevenueWithdrawalUrl,
PaymentsGetStarsRevenueAdsAccountUrl: PaymentsGetStarsRevenueAdsAccountUrl,
PaymentsGetStarsTransactionsByID: PaymentsGetStarsTransactionsByID,
PaymentsGetStarsGiftOptions: PaymentsGetStarsGiftOptions,
PaymentsGetStarsSubscriptions: PaymentsGetStarsSubscriptions,
PaymentsChangeStarsSubscription: PaymentsChangeStarsSubscription,
PaymentsFulfillStarsSubscription: PaymentsFulfillStarsSubscription,
PaymentsGetStarsGiveawayOptions: PaymentsGetStarsGiveawayOptions,
PaymentsGetStarGifts: PaymentsGetStarGifts,
PaymentsGetUserStarGifts: PaymentsGetUserStarGifts,
PaymentsSaveStarGift: PaymentsSaveStarGift,
PaymentsConvertStarGift: PaymentsConvertStarGift,
StickersCreateStickerSet: StickersCreateStickerSet,
StickersRemoveStickerFromSet: StickersRemoveStickerFromSet,
StickersChangeStickerPosition: StickersChangeStickerPosition,
StickersAddStickerToSet: StickersAddStickerToSet,
StickersSetStickerSetThumb: StickersSetStickerSetThumb,
StickersCheckShortName: StickersCheckShortName,
StickersSuggestShortName: StickersSuggestShortName,
StickersChangeSticker: StickersChangeSticker,
StickersRenameStickerSet: StickersRenameStickerSet,
StickersDeleteStickerSet: StickersDeleteStickerSet,
StickersReplaceSticker: StickersReplaceSticker,
PhoneGetCallConfig: PhoneGetCallConfig,
PhoneRequestCall: PhoneRequestCall,
PhoneAcceptCall: PhoneAcceptCall,
PhoneConfirmCall: PhoneConfirmCall,
PhoneReceivedCall: PhoneReceivedCall,
PhoneDiscardCall: PhoneDiscardCall,
PhoneSetCallRating: PhoneSetCallRating,
PhoneSaveCallDebug: PhoneSaveCallDebug,
PhoneSendSignalingData: PhoneSendSignalingData,
PhoneCreateGroupCall: PhoneCreateGroupCall,
PhoneJoinGroupCall: PhoneJoinGroupCall,
PhoneLeaveGroupCall: PhoneLeaveGroupCall,
PhoneInviteToGroupCall: PhoneInviteToGroupCall,
PhoneDiscardGroupCall: PhoneDiscardGroupCall,
PhoneToggleGroupCallSettings: PhoneToggleGroupCallSettings,
PhoneGetGroupCall: PhoneGetGroupCall,
PhoneGetGroupParticipants: PhoneGetGroupParticipants,
PhoneCheckGroupCall: PhoneCheckGroupCall,
PhoneToggleGroupCallRecord: PhoneToggleGroupCallRecord,
PhoneEditGroupCallParticipant: PhoneEditGroupCallParticipant,
PhoneEditGroupCallTitle: PhoneEditGroupCallTitle,
PhoneGetGroupCallJoinAs: PhoneGetGroupCallJoinAs,
PhoneExportGroupCallInvite: PhoneExportGroupCallInvite,
PhoneToggleGroupCallStartSubscription: PhoneToggleGroupCallStartSubscription,
PhoneStartScheduledGroupCall: PhoneStartScheduledGroupCall,
PhoneSaveDefaultGroupCallJoinAs: PhoneSaveDefaultGroupCallJoinAs,
PhoneJoinGroupCallPresentation: PhoneJoinGroupCallPresentation,
PhoneLeaveGroupCallPresentation: PhoneLeaveGroupCallPresentation,
PhoneGetGroupCallStreamChannels: PhoneGetGroupCallStreamChannels,
PhoneGetGroupCallStreamRtmpUrl: PhoneGetGroupCallStreamRtmpUrl,
PhoneSaveCallLog: PhoneSaveCallLog,
LangpackGetLangPack: LangpackGetLangPack,
LangpackGetStrings: LangpackGetStrings,
LangpackGetDifference: LangpackGetDifference,
LangpackGetLanguages: LangpackGetLanguages,
LangpackGetLanguage: LangpackGetLanguage,
FoldersEditPeerFolders: FoldersEditPeerFolders,
StatsGetBroadcastStats: StatsGetBroadcastStats,
StatsLoadAsyncGraph: StatsLoadAsyncGraph,
StatsGetMegagroupStats: StatsGetMegagroupStats,
StatsGetMessagePublicForwards: StatsGetMessagePublicForwards,
StatsGetMessageStats: StatsGetMessageStats,
StatsGetStoryStats: StatsGetStoryStats,
StatsGetStoryPublicForwards: StatsGetStoryPublicForwards,
StatsGetBroadcastRevenueStats: StatsGetBroadcastRevenueStats,
StatsGetBroadcastRevenueWithdrawalUrl: StatsGetBroadcastRevenueWithdrawalUrl,
StatsGetBroadcastRevenueTransactions: StatsGetBroadcastRevenueTransactions,
ChatlistsExportChatlistInvite: ChatlistsExportChatlistInvite,
ChatlistsDeleteExportedInvite: ChatlistsDeleteExportedInvite,
ChatlistsEditExportedInvite: ChatlistsEditExportedInvite,
ChatlistsGetExportedInvites: ChatlistsGetExportedInvites,
ChatlistsCheckChatlistInvite: ChatlistsCheckChatlistInvite,
ChatlistsJoinChatlistInvite: ChatlistsJoinChatlistInvite,
ChatlistsGetChatlistUpdates: ChatlistsGetChatlistUpdates,
ChatlistsJoinChatlistUpdates: ChatlistsJoinChatlistUpdates,
ChatlistsHideChatlistUpdates: ChatlistsHideChatlistUpdates,
ChatlistsGetLeaveChatlistSuggestions: ChatlistsGetLeaveChatlistSuggestions,
ChatlistsLeaveChatlist: ChatlistsLeaveChatlist,
StoriesCanSendStory: StoriesCanSendStory,
StoriesSendStory: StoriesSendStory,
StoriesEditStory: StoriesEditStory,
StoriesDeleteStories: StoriesDeleteStories,
StoriesTogglePinned: StoriesTogglePinned,
StoriesGetAllStories: StoriesGetAllStories,
StoriesGetPinnedStories: StoriesGetPinnedStories,
StoriesGetStoriesArchive: StoriesGetStoriesArchive,
StoriesGetStoriesByID: StoriesGetStoriesByID,
StoriesToggleAllStoriesHidden: StoriesToggleAllStoriesHidden,
StoriesReadStories: StoriesReadStories,
StoriesIncrementStoryViews: StoriesIncrementStoryViews,
StoriesGetStoryViewsList: StoriesGetStoryViewsList,
StoriesGetStoriesViews: StoriesGetStoriesViews,
StoriesExportStoryLink: StoriesExportStoryLink,
StoriesReport: StoriesReport,
StoriesActivateStealthMode: StoriesActivateStealthMode,
StoriesSendReaction: StoriesSendReaction,
StoriesGetPeerStories: StoriesGetPeerStories,
StoriesGetAllReadPeerStories: StoriesGetAllReadPeerStories,
StoriesGetPeerMaxIDs: StoriesGetPeerMaxIDs,
StoriesGetChatsToSend: StoriesGetChatsToSend,
StoriesTogglePeerStoriesHidden: StoriesTogglePeerStoriesHidden,
StoriesGetStoryReactionsList: StoriesGetStoryReactionsList,
StoriesTogglePinnedToTop: StoriesTogglePinnedToTop,
StoriesSearchPosts: StoriesSearchPosts,
PremiumGetBoostsList: PremiumGetBoostsList,
PremiumGetMyBoosts: PremiumGetMyBoosts,
PremiumApplyBoost: PremiumApplyBoost,
PremiumGetBoostsStatus: PremiumGetBoostsStatus,
PremiumGetUserBoosts: PremiumGetUserBoosts,
SmsjobsIsEligibleToJoin: SmsjobsIsEligibleToJoin,
SmsjobsJoin: SmsjobsJoin,
SmsjobsLeave: SmsjobsLeave,
SmsjobsUpdateSettings: SmsjobsUpdateSettings,
SmsjobsGetStatus: SmsjobsGetStatus,
SmsjobsGetSmsJob: SmsjobsGetSmsJob,
SmsjobsFinishJob: SmsjobsFinishJob,
FragmentGetCollectibleInfo: FragmentGetCollectibleInfo,
};
const InputPeerEnumID = enum(u32) {
    InputPeerEmpty = 2134579434,
    InputPeerSelf = 2107670217,
    InputPeerChat = 900291769,
    InputPeerUser = 3723011404,
    InputPeerChannel = 666680316,
    InputPeerUserFromMessage = 2826635804,
    InputPeerChannelFromMessage = 3173648448,
};
const IInputPeer = union(InputPeerEnumID) {
    InputPeerEmpty: *const InputPeerEmpty,
    InputPeerSelf: *const InputPeerSelf,
    InputPeerChat: *const InputPeerChat,
    InputPeerUser: *const InputPeerUser,
    InputPeerChannel: *const InputPeerChannel,
    InputPeerUserFromMessage: *const InputPeerUserFromMessage,
    InputPeerChannelFromMessage: *const InputPeerChannelFromMessage,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .InputPeerEmpty => { return self.InputPeerEmpty.size(); },
                .InputPeerSelf => { return self.InputPeerSelf.size(); },
                .InputPeerChat => { return self.InputPeerChat.size(); },
                .InputPeerUser => { return self.InputPeerUser.size(); },
                .InputPeerChannel => { return self.InputPeerChannel.size(); },
                .InputPeerUserFromMessage => { return self.InputPeerUserFromMessage.size(); },
                .InputPeerChannelFromMessage => { return self.InputPeerChannelFromMessage.size(); },
        }
    }
};
const InputUserEnumID = enum(u32) {
    InputUserEmpty = 3112732367,
    InputUserSelf = 4156666175,
    InputUser = 4061223110,
    InputUserFromMessage = 497305826,
};
const IInputUser = union(InputUserEnumID) {
    InputUserEmpty: *const InputUserEmpty,
    InputUserSelf: *const InputUserSelf,
    InputUser: *const InputUser,
    InputUserFromMessage: *const InputUserFromMessage,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .InputUserEmpty => { return self.InputUserEmpty.size(); },
                .InputUserSelf => { return self.InputUserSelf.size(); },
                .InputUser => { return self.InputUser.size(); },
                .InputUserFromMessage => { return self.InputUserFromMessage.size(); },
        }
    }
};
const InputContactEnumID = enum(u32) {
    InputPhoneContact = 4086478836,
};
const IInputContact = union(InputContactEnumID) {
    InputPhoneContact: *const InputPhoneContact,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .InputPhoneContact => { return self.InputPhoneContact.size(); },
        }
    }
};
const InputFileEnumID = enum(u32) {
    InputFile = 4113560191,
    InputFileBig = 4199484341,
    InputFileStoryDocument = 1658620744,
};
const IInputFile = union(InputFileEnumID) {
    InputFile: *const InputFile,
    InputFileBig: *const InputFileBig,
    InputFileStoryDocument: *const InputFileStoryDocument,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .InputFile => { return self.InputFile.size(); },
                .InputFileBig => { return self.InputFileBig.size(); },
                .InputFileStoryDocument => { return self.InputFileStoryDocument.size(); },
        }
    }
};
const InputMediaEnumID = enum(u32) {
    InputMediaEmpty = 2523198847,
    InputMediaUploadedPhoto = 505969924,
    InputMediaPhoto = 3015312949,
    InputMediaGeoPoint = 4190388548,
    InputMediaContact = 4171988475,
    InputMediaUploadedDocument = 1530447553,
    InputMediaDocument = 860303448,
    InputMediaVenue = 3242007569,
    InputMediaPhotoExternal = 3854302746,
    InputMediaDocumentExternal = 4216511641,
    InputMediaGame = 3544138739,
    InputMediaInvoice = 1080028941,
    InputMediaGeoLive = 2535434307,
    InputMediaPoll = 261416433,
    InputMediaDice = 3866083195,
    InputMediaStory = 2315114360,
    InputMediaWebPage = 3256584265,
    InputMediaPaidMedia = 3289396102,
};
const IInputMedia = union(InputMediaEnumID) {
    InputMediaEmpty: *const InputMediaEmpty,
    InputMediaUploadedPhoto: *const InputMediaUploadedPhoto,
    InputMediaPhoto: *const InputMediaPhoto,
    InputMediaGeoPoint: *const InputMediaGeoPoint,
    InputMediaContact: *const InputMediaContact,
    InputMediaUploadedDocument: *const InputMediaUploadedDocument,
    InputMediaDocument: *const InputMediaDocument,
    InputMediaVenue: *const InputMediaVenue,
    InputMediaPhotoExternal: *const InputMediaPhotoExternal,
    InputMediaDocumentExternal: *const InputMediaDocumentExternal,
    InputMediaGame: *const InputMediaGame,
    InputMediaInvoice: *const InputMediaInvoice,
    InputMediaGeoLive: *const InputMediaGeoLive,
    InputMediaPoll: *const InputMediaPoll,
    InputMediaDice: *const InputMediaDice,
    InputMediaStory: *const InputMediaStory,
    InputMediaWebPage: *const InputMediaWebPage,
    InputMediaPaidMedia: *const InputMediaPaidMedia,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .InputMediaEmpty => { return self.InputMediaEmpty.size(); },
                .InputMediaUploadedPhoto => { return self.InputMediaUploadedPhoto.size(); },
                .InputMediaPhoto => { return self.InputMediaPhoto.size(); },
                .InputMediaGeoPoint => { return self.InputMediaGeoPoint.size(); },
                .InputMediaContact => { return self.InputMediaContact.size(); },
                .InputMediaUploadedDocument => { return self.InputMediaUploadedDocument.size(); },
                .InputMediaDocument => { return self.InputMediaDocument.size(); },
                .InputMediaVenue => { return self.InputMediaVenue.size(); },
                .InputMediaPhotoExternal => { return self.InputMediaPhotoExternal.size(); },
                .InputMediaDocumentExternal => { return self.InputMediaDocumentExternal.size(); },
                .InputMediaGame => { return self.InputMediaGame.size(); },
                .InputMediaInvoice => { return self.InputMediaInvoice.size(); },
                .InputMediaGeoLive => { return self.InputMediaGeoLive.size(); },
                .InputMediaPoll => { return self.InputMediaPoll.size(); },
                .InputMediaDice => { return self.InputMediaDice.size(); },
                .InputMediaStory => { return self.InputMediaStory.size(); },
                .InputMediaWebPage => { return self.InputMediaWebPage.size(); },
                .InputMediaPaidMedia => { return self.InputMediaPaidMedia.size(); },
        }
    }
};
const InputChatPhotoEnumID = enum(u32) {
    InputChatPhotoEmpty = 480546647,
    InputChatUploadedPhoto = 3184373440,
    InputChatPhoto = 2303962423,
};
const IInputChatPhoto = union(InputChatPhotoEnumID) {
    InputChatPhotoEmpty: *const InputChatPhotoEmpty,
    InputChatUploadedPhoto: *const InputChatUploadedPhoto,
    InputChatPhoto: *const InputChatPhoto,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .InputChatPhotoEmpty => { return self.InputChatPhotoEmpty.size(); },
                .InputChatUploadedPhoto => { return self.InputChatUploadedPhoto.size(); },
                .InputChatPhoto => { return self.InputChatPhoto.size(); },
        }
    }
};
const InputGeoPointEnumID = enum(u32) {
    InputGeoPointEmpty = 3837862870,
    InputGeoPoint = 1210199983,
};
const IInputGeoPoint = union(InputGeoPointEnumID) {
    InputGeoPointEmpty: *const InputGeoPointEmpty,
    InputGeoPoint: *const InputGeoPoint,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .InputGeoPointEmpty => { return self.InputGeoPointEmpty.size(); },
                .InputGeoPoint => { return self.InputGeoPoint.size(); },
        }
    }
};
const InputPhotoEnumID = enum(u32) {
    InputPhotoEmpty = 483901197,
    InputPhoto = 1001634122,
};
const IInputPhoto = union(InputPhotoEnumID) {
    InputPhotoEmpty: *const InputPhotoEmpty,
    InputPhoto: *const InputPhoto,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .InputPhotoEmpty => { return self.InputPhotoEmpty.size(); },
                .InputPhoto => { return self.InputPhoto.size(); },
        }
    }
};
const InputFileLocationEnumID = enum(u32) {
    InputFileLocation = 3755650017,
    InputEncryptedFileLocation = 4112735573,
    InputDocumentFileLocation = 3134223748,
    InputSecureFileLocation = 3418877480,
    InputTakeoutFileLocation = 700340377,
    InputPhotoFileLocation = 1075322878,
    InputPhotoLegacyFileLocation = 3627312883,
    InputPeerPhotoFileLocation = 925204121,
    InputStickerSetThumb = 2642736091,
    InputGroupCallStream = 93890858,
};
const IInputFileLocation = union(InputFileLocationEnumID) {
    InputFileLocation: *const InputFileLocation,
    InputEncryptedFileLocation: *const InputEncryptedFileLocation,
    InputDocumentFileLocation: *const InputDocumentFileLocation,
    InputSecureFileLocation: *const InputSecureFileLocation,
    InputTakeoutFileLocation: *const InputTakeoutFileLocation,
    InputPhotoFileLocation: *const InputPhotoFileLocation,
    InputPhotoLegacyFileLocation: *const InputPhotoLegacyFileLocation,
    InputPeerPhotoFileLocation: *const InputPeerPhotoFileLocation,
    InputStickerSetThumb: *const InputStickerSetThumb,
    InputGroupCallStream: *const InputGroupCallStream,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .InputFileLocation => { return self.InputFileLocation.size(); },
                .InputEncryptedFileLocation => { return self.InputEncryptedFileLocation.size(); },
                .InputDocumentFileLocation => { return self.InputDocumentFileLocation.size(); },
                .InputSecureFileLocation => { return self.InputSecureFileLocation.size(); },
                .InputTakeoutFileLocation => { return self.InputTakeoutFileLocation.size(); },
                .InputPhotoFileLocation => { return self.InputPhotoFileLocation.size(); },
                .InputPhotoLegacyFileLocation => { return self.InputPhotoLegacyFileLocation.size(); },
                .InputPeerPhotoFileLocation => { return self.InputPeerPhotoFileLocation.size(); },
                .InputStickerSetThumb => { return self.InputStickerSetThumb.size(); },
                .InputGroupCallStream => { return self.InputGroupCallStream.size(); },
        }
    }
};
const PeerEnumID = enum(u32) {
    PeerUser = 1498486562,
    PeerChat = 918946202,
    PeerChannel = 2728736542,
};
const IPeer = union(PeerEnumID) {
    PeerUser: *const PeerUser,
    PeerChat: *const PeerChat,
    PeerChannel: *const PeerChannel,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .PeerUser => { return self.PeerUser.size(); },
                .PeerChat => { return self.PeerChat.size(); },
                .PeerChannel => { return self.PeerChannel.size(); },
        }
    }
};
const StorageFileTypeEnumID = enum(u32) {
    StorageFileUnknown = 2861972229,
    StorageFilePartial = 1086091090,
    StorageFileJpeg = 8322574,
    StorageFileGif = 3403786975,
    StorageFilePng = 172975040,
    StorageFilePdf = 2921222285,
    StorageFileMp3 = 1384777335,
    StorageFileMov = 1258941372,
    StorageFileMp4 = 3016663268,
    StorageFileWebp = 276907596,
};
const IStorageFileType = union(StorageFileTypeEnumID) {
    StorageFileUnknown: *const StorageFileUnknown,
    StorageFilePartial: *const StorageFilePartial,
    StorageFileJpeg: *const StorageFileJpeg,
    StorageFileGif: *const StorageFileGif,
    StorageFilePng: *const StorageFilePng,
    StorageFilePdf: *const StorageFilePdf,
    StorageFileMp3: *const StorageFileMp3,
    StorageFileMov: *const StorageFileMov,
    StorageFileMp4: *const StorageFileMp4,
    StorageFileWebp: *const StorageFileWebp,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .StorageFileUnknown => { return self.StorageFileUnknown.size(); },
                .StorageFilePartial => { return self.StorageFilePartial.size(); },
                .StorageFileJpeg => { return self.StorageFileJpeg.size(); },
                .StorageFileGif => { return self.StorageFileGif.size(); },
                .StorageFilePng => { return self.StorageFilePng.size(); },
                .StorageFilePdf => { return self.StorageFilePdf.size(); },
                .StorageFileMp3 => { return self.StorageFileMp3.size(); },
                .StorageFileMov => { return self.StorageFileMov.size(); },
                .StorageFileMp4 => { return self.StorageFileMp4.size(); },
                .StorageFileWebp => { return self.StorageFileWebp.size(); },
        }
    }
};
const UserEnumID = enum(u32) {
    UserEmpty = 3552332666,
    User = 2201046986,
};
const IUser = union(UserEnumID) {
    UserEmpty: *const UserEmpty,
    User: *const User,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .UserEmpty => { return self.UserEmpty.size(); },
                .User => { return self.User.size(); },
        }
    }
};
const UserProfilePhotoEnumID = enum(u32) {
    UserProfilePhotoEmpty = 1326562017,
    UserProfilePhoto = 2194798342,
};
const IUserProfilePhoto = union(UserProfilePhotoEnumID) {
    UserProfilePhotoEmpty: *const UserProfilePhotoEmpty,
    UserProfilePhoto: *const UserProfilePhoto,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .UserProfilePhotoEmpty => { return self.UserProfilePhotoEmpty.size(); },
                .UserProfilePhoto => { return self.UserProfilePhoto.size(); },
        }
    }
};
const UserStatusEnumID = enum(u32) {
    UserStatusEmpty = 164646985,
    UserStatusOnline = 3988339017,
    UserStatusOffline = 9203775,
    UserStatusRecently = 2065268168,
    UserStatusLastWeek = 1410997530,
    UserStatusLastMonth = 1703516023,
};
const IUserStatus = union(UserStatusEnumID) {
    UserStatusEmpty: *const UserStatusEmpty,
    UserStatusOnline: *const UserStatusOnline,
    UserStatusOffline: *const UserStatusOffline,
    UserStatusRecently: *const UserStatusRecently,
    UserStatusLastWeek: *const UserStatusLastWeek,
    UserStatusLastMonth: *const UserStatusLastMonth,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .UserStatusEmpty => { return self.UserStatusEmpty.size(); },
                .UserStatusOnline => { return self.UserStatusOnline.size(); },
                .UserStatusOffline => { return self.UserStatusOffline.size(); },
                .UserStatusRecently => { return self.UserStatusRecently.size(); },
                .UserStatusLastWeek => { return self.UserStatusLastWeek.size(); },
                .UserStatusLastMonth => { return self.UserStatusLastMonth.size(); },
        }
    }
};
const ChatEnumID = enum(u32) {
    ChatEmpty = 693512293,
    Chat = 1103884886,
    ChatForbidden = 1704108455,
    Channel = 4265900221,
    ChannelForbidden = 399807445,
};
const IChat = union(ChatEnumID) {
    ChatEmpty: *const ChatEmpty,
    Chat: *const Chat,
    ChatForbidden: *const ChatForbidden,
    Channel: *const Channel,
    ChannelForbidden: *const ChannelForbidden,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .ChatEmpty => { return self.ChatEmpty.size(); },
                .Chat => { return self.Chat.size(); },
                .ChatForbidden => { return self.ChatForbidden.size(); },
                .Channel => { return self.Channel.size(); },
                .ChannelForbidden => { return self.ChannelForbidden.size(); },
        }
    }
};
const ChatFullEnumID = enum(u32) {
    ChatFull = 640893467,
    ChannelFull = 3148559501,
};
const IChatFull = union(ChatFullEnumID) {
    ChatFull: *const ChatFull,
    ChannelFull: *const ChannelFull,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .ChatFull => { return self.ChatFull.size(); },
                .ChannelFull => { return self.ChannelFull.size(); },
        }
    }
};
const ChatParticipantEnumID = enum(u32) {
    ChatParticipant = 3224190983,
    ChatParticipantCreator = 3832270564,
    ChatParticipantAdmin = 2694004571,
};
const IChatParticipant = union(ChatParticipantEnumID) {
    ChatParticipant: *const ChatParticipant,
    ChatParticipantCreator: *const ChatParticipantCreator,
    ChatParticipantAdmin: *const ChatParticipantAdmin,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .ChatParticipant => { return self.ChatParticipant.size(); },
                .ChatParticipantCreator => { return self.ChatParticipantCreator.size(); },
                .ChatParticipantAdmin => { return self.ChatParticipantAdmin.size(); },
        }
    }
};
const ChatParticipantsEnumID = enum(u32) {
    ChatParticipantsForbidden = 2271466465,
    ChatParticipants = 1018991608,
};
const IChatParticipants = union(ChatParticipantsEnumID) {
    ChatParticipantsForbidden: *const ChatParticipantsForbidden,
    ChatParticipants: *const ChatParticipants,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .ChatParticipantsForbidden => { return self.ChatParticipantsForbidden.size(); },
                .ChatParticipants => { return self.ChatParticipants.size(); },
        }
    }
};
const ChatPhotoEnumID = enum(u32) {
    ChatPhotoEmpty = 935395612,
    ChatPhoto = 476978193,
};
const IChatPhoto = union(ChatPhotoEnumID) {
    ChatPhotoEmpty: *const ChatPhotoEmpty,
    ChatPhoto: *const ChatPhoto,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .ChatPhotoEmpty => { return self.ChatPhotoEmpty.size(); },
                .ChatPhoto => { return self.ChatPhoto.size(); },
        }
    }
};
const MessageEnumID = enum(u32) {
    MessageEmpty = 2426849924,
    Message = 2486456898,
    MessageService = 721967202,
};
const IMessage = union(MessageEnumID) {
    MessageEmpty: *const MessageEmpty,
    Message: *const Message,
    MessageService: *const MessageService,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .MessageEmpty => { return self.MessageEmpty.size(); },
                .Message => { return self.Message.size(); },
                .MessageService => { return self.MessageService.size(); },
        }
    }
};
const MessageMediaEnumID = enum(u32) {
    MessageMediaEmpty = 1038967584,
    MessageMediaPhoto = 1766936791,
    MessageMediaGeo = 1457575028,
    MessageMediaContact = 1882335561,
    MessageMediaUnsupported = 2676290718,
    MessageMediaDocument = 3713469397,
    MessageMediaWebPage = 3723562043,
    MessageMediaVenue = 784356159,
    MessageMediaGame = 4256272392,
    MessageMediaInvoice = 4138027219,
    MessageMediaGeoLive = 3108030054,
    MessageMediaPoll = 1272375192,
    MessageMediaDice = 1065280907,
    MessageMediaStory = 1758159491,
    MessageMediaGiveaway = 2852600811,
    MessageMediaGiveawayResults = 3467263649,
    MessageMediaPaidMedia = 2827297937,
};
const IMessageMedia = union(MessageMediaEnumID) {
    MessageMediaEmpty: *const MessageMediaEmpty,
    MessageMediaPhoto: *const MessageMediaPhoto,
    MessageMediaGeo: *const MessageMediaGeo,
    MessageMediaContact: *const MessageMediaContact,
    MessageMediaUnsupported: *const MessageMediaUnsupported,
    MessageMediaDocument: *const MessageMediaDocument,
    MessageMediaWebPage: *const MessageMediaWebPage,
    MessageMediaVenue: *const MessageMediaVenue,
    MessageMediaGame: *const MessageMediaGame,
    MessageMediaInvoice: *const MessageMediaInvoice,
    MessageMediaGeoLive: *const MessageMediaGeoLive,
    MessageMediaPoll: *const MessageMediaPoll,
    MessageMediaDice: *const MessageMediaDice,
    MessageMediaStory: *const MessageMediaStory,
    MessageMediaGiveaway: *const MessageMediaGiveaway,
    MessageMediaGiveawayResults: *const MessageMediaGiveawayResults,
    MessageMediaPaidMedia: *const MessageMediaPaidMedia,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .MessageMediaEmpty => { return self.MessageMediaEmpty.size(); },
                .MessageMediaPhoto => { return self.MessageMediaPhoto.size(); },
                .MessageMediaGeo => { return self.MessageMediaGeo.size(); },
                .MessageMediaContact => { return self.MessageMediaContact.size(); },
                .MessageMediaUnsupported => { return self.MessageMediaUnsupported.size(); },
                .MessageMediaDocument => { return self.MessageMediaDocument.size(); },
                .MessageMediaWebPage => { return self.MessageMediaWebPage.size(); },
                .MessageMediaVenue => { return self.MessageMediaVenue.size(); },
                .MessageMediaGame => { return self.MessageMediaGame.size(); },
                .MessageMediaInvoice => { return self.MessageMediaInvoice.size(); },
                .MessageMediaGeoLive => { return self.MessageMediaGeoLive.size(); },
                .MessageMediaPoll => { return self.MessageMediaPoll.size(); },
                .MessageMediaDice => { return self.MessageMediaDice.size(); },
                .MessageMediaStory => { return self.MessageMediaStory.size(); },
                .MessageMediaGiveaway => { return self.MessageMediaGiveaway.size(); },
                .MessageMediaGiveawayResults => { return self.MessageMediaGiveawayResults.size(); },
                .MessageMediaPaidMedia => { return self.MessageMediaPaidMedia.size(); },
        }
    }
};
const MessageActionEnumID = enum(u32) {
    MessageActionEmpty = 3064919984,
    MessageActionChatCreate = 3175599021,
    MessageActionChatEditTitle = 3047280218,
    MessageActionChatEditPhoto = 2144015272,
    MessageActionChatDeletePhoto = 2514746351,
    MessageActionChatAddUser = 365886720,
    MessageActionChatDeleteUser = 2755604684,
    MessageActionChatJoinedByLink = 51520707,
    MessageActionChannelCreate = 2513611922,
    MessageActionChatMigrateTo = 3775102866,
    MessageActionChannelMigrateFrom = 3929622761,
    MessageActionPinMessage = 2495428845,
    MessageActionHistoryClear = 2679813636,
    MessageActionGameScore = 2460428406,
    MessageActionPaymentSentMe = 2402399015,
    MessageActionPaymentSent = 2518040406,
    MessageActionPhoneCall = 2162236031,
    MessageActionScreenshotTaken = 1200788123,
    MessageActionCustomAction = 4209418070,
    MessageActionBotAllowed = 3306608249,
    MessageActionSecureValuesSentMe = 455635795,
    MessageActionSecureValuesSent = 3646710100,
    MessageActionContactSignUp = 4092747638,
    MessageActionGeoProximityReached = 2564871831,
    MessageActionGroupCall = 2047704898,
    MessageActionInviteToGroupCall = 1345295095,
    MessageActionSetMessagesTTL = 1007897979,
    MessageActionGroupCallScheduled = 3013637729,
    MessageActionSetChatTheme = 2860016453,
    MessageActionChatJoinedByRequest = 3955008459,
    MessageActionWebViewDataSentMe = 1205698681,
    MessageActionWebViewDataSent = 3032714421,
    MessageActionGiftPremium = 3359468268,
    MessageActionTopicCreate = 228168278,
    MessageActionTopicEdit = 3230943264,
    MessageActionSuggestProfilePhoto = 1474192222,
    MessageActionRequestedPeer = 827428507,
    MessageActionSetChatWallPaper = 1348510708,
    MessageActionGiftCode = 1737240073,
    MessageActionGiveawayLaunch = 2819576292,
    MessageActionGiveawayResults = 2279797077,
    MessageActionBoostApply = 3422726765,
    MessageActionRequestedPeerSentMe = 2477987912,
    MessageActionPaymentRefunded = 1102307842,
    MessageActionGiftStars = 1171632161,
    MessageActionPrizeStars = 2953594786,
    MessageActionStarGift = 2612260676,
};
const IMessageAction = union(MessageActionEnumID) {
    MessageActionEmpty: *const MessageActionEmpty,
    MessageActionChatCreate: *const MessageActionChatCreate,
    MessageActionChatEditTitle: *const MessageActionChatEditTitle,
    MessageActionChatEditPhoto: *const MessageActionChatEditPhoto,
    MessageActionChatDeletePhoto: *const MessageActionChatDeletePhoto,
    MessageActionChatAddUser: *const MessageActionChatAddUser,
    MessageActionChatDeleteUser: *const MessageActionChatDeleteUser,
    MessageActionChatJoinedByLink: *const MessageActionChatJoinedByLink,
    MessageActionChannelCreate: *const MessageActionChannelCreate,
    MessageActionChatMigrateTo: *const MessageActionChatMigrateTo,
    MessageActionChannelMigrateFrom: *const MessageActionChannelMigrateFrom,
    MessageActionPinMessage: *const MessageActionPinMessage,
    MessageActionHistoryClear: *const MessageActionHistoryClear,
    MessageActionGameScore: *const MessageActionGameScore,
    MessageActionPaymentSentMe: *const MessageActionPaymentSentMe,
    MessageActionPaymentSent: *const MessageActionPaymentSent,
    MessageActionPhoneCall: *const MessageActionPhoneCall,
    MessageActionScreenshotTaken: *const MessageActionScreenshotTaken,
    MessageActionCustomAction: *const MessageActionCustomAction,
    MessageActionBotAllowed: *const MessageActionBotAllowed,
    MessageActionSecureValuesSentMe: *const MessageActionSecureValuesSentMe,
    MessageActionSecureValuesSent: *const MessageActionSecureValuesSent,
    MessageActionContactSignUp: *const MessageActionContactSignUp,
    MessageActionGeoProximityReached: *const MessageActionGeoProximityReached,
    MessageActionGroupCall: *const MessageActionGroupCall,
    MessageActionInviteToGroupCall: *const MessageActionInviteToGroupCall,
    MessageActionSetMessagesTTL: *const MessageActionSetMessagesTTL,
    MessageActionGroupCallScheduled: *const MessageActionGroupCallScheduled,
    MessageActionSetChatTheme: *const MessageActionSetChatTheme,
    MessageActionChatJoinedByRequest: *const MessageActionChatJoinedByRequest,
    MessageActionWebViewDataSentMe: *const MessageActionWebViewDataSentMe,
    MessageActionWebViewDataSent: *const MessageActionWebViewDataSent,
    MessageActionGiftPremium: *const MessageActionGiftPremium,
    MessageActionTopicCreate: *const MessageActionTopicCreate,
    MessageActionTopicEdit: *const MessageActionTopicEdit,
    MessageActionSuggestProfilePhoto: *const MessageActionSuggestProfilePhoto,
    MessageActionRequestedPeer: *const MessageActionRequestedPeer,
    MessageActionSetChatWallPaper: *const MessageActionSetChatWallPaper,
    MessageActionGiftCode: *const MessageActionGiftCode,
    MessageActionGiveawayLaunch: *const MessageActionGiveawayLaunch,
    MessageActionGiveawayResults: *const MessageActionGiveawayResults,
    MessageActionBoostApply: *const MessageActionBoostApply,
    MessageActionRequestedPeerSentMe: *const MessageActionRequestedPeerSentMe,
    MessageActionPaymentRefunded: *const MessageActionPaymentRefunded,
    MessageActionGiftStars: *const MessageActionGiftStars,
    MessageActionPrizeStars: *const MessageActionPrizeStars,
    MessageActionStarGift: *const MessageActionStarGift,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .MessageActionEmpty => { return self.MessageActionEmpty.size(); },
                .MessageActionChatCreate => { return self.MessageActionChatCreate.size(); },
                .MessageActionChatEditTitle => { return self.MessageActionChatEditTitle.size(); },
                .MessageActionChatEditPhoto => { return self.MessageActionChatEditPhoto.size(); },
                .MessageActionChatDeletePhoto => { return self.MessageActionChatDeletePhoto.size(); },
                .MessageActionChatAddUser => { return self.MessageActionChatAddUser.size(); },
                .MessageActionChatDeleteUser => { return self.MessageActionChatDeleteUser.size(); },
                .MessageActionChatJoinedByLink => { return self.MessageActionChatJoinedByLink.size(); },
                .MessageActionChannelCreate => { return self.MessageActionChannelCreate.size(); },
                .MessageActionChatMigrateTo => { return self.MessageActionChatMigrateTo.size(); },
                .MessageActionChannelMigrateFrom => { return self.MessageActionChannelMigrateFrom.size(); },
                .MessageActionPinMessage => { return self.MessageActionPinMessage.size(); },
                .MessageActionHistoryClear => { return self.MessageActionHistoryClear.size(); },
                .MessageActionGameScore => { return self.MessageActionGameScore.size(); },
                .MessageActionPaymentSentMe => { return self.MessageActionPaymentSentMe.size(); },
                .MessageActionPaymentSent => { return self.MessageActionPaymentSent.size(); },
                .MessageActionPhoneCall => { return self.MessageActionPhoneCall.size(); },
                .MessageActionScreenshotTaken => { return self.MessageActionScreenshotTaken.size(); },
                .MessageActionCustomAction => { return self.MessageActionCustomAction.size(); },
                .MessageActionBotAllowed => { return self.MessageActionBotAllowed.size(); },
                .MessageActionSecureValuesSentMe => { return self.MessageActionSecureValuesSentMe.size(); },
                .MessageActionSecureValuesSent => { return self.MessageActionSecureValuesSent.size(); },
                .MessageActionContactSignUp => { return self.MessageActionContactSignUp.size(); },
                .MessageActionGeoProximityReached => { return self.MessageActionGeoProximityReached.size(); },
                .MessageActionGroupCall => { return self.MessageActionGroupCall.size(); },
                .MessageActionInviteToGroupCall => { return self.MessageActionInviteToGroupCall.size(); },
                .MessageActionSetMessagesTTL => { return self.MessageActionSetMessagesTTL.size(); },
                .MessageActionGroupCallScheduled => { return self.MessageActionGroupCallScheduled.size(); },
                .MessageActionSetChatTheme => { return self.MessageActionSetChatTheme.size(); },
                .MessageActionChatJoinedByRequest => { return self.MessageActionChatJoinedByRequest.size(); },
                .MessageActionWebViewDataSentMe => { return self.MessageActionWebViewDataSentMe.size(); },
                .MessageActionWebViewDataSent => { return self.MessageActionWebViewDataSent.size(); },
                .MessageActionGiftPremium => { return self.MessageActionGiftPremium.size(); },
                .MessageActionTopicCreate => { return self.MessageActionTopicCreate.size(); },
                .MessageActionTopicEdit => { return self.MessageActionTopicEdit.size(); },
                .MessageActionSuggestProfilePhoto => { return self.MessageActionSuggestProfilePhoto.size(); },
                .MessageActionRequestedPeer => { return self.MessageActionRequestedPeer.size(); },
                .MessageActionSetChatWallPaper => { return self.MessageActionSetChatWallPaper.size(); },
                .MessageActionGiftCode => { return self.MessageActionGiftCode.size(); },
                .MessageActionGiveawayLaunch => { return self.MessageActionGiveawayLaunch.size(); },
                .MessageActionGiveawayResults => { return self.MessageActionGiveawayResults.size(); },
                .MessageActionBoostApply => { return self.MessageActionBoostApply.size(); },
                .MessageActionRequestedPeerSentMe => { return self.MessageActionRequestedPeerSentMe.size(); },
                .MessageActionPaymentRefunded => { return self.MessageActionPaymentRefunded.size(); },
                .MessageActionGiftStars => { return self.MessageActionGiftStars.size(); },
                .MessageActionPrizeStars => { return self.MessageActionPrizeStars.size(); },
                .MessageActionStarGift => { return self.MessageActionStarGift.size(); },
        }
    }
};
const DialogEnumID = enum(u32) {
    Dialog = 3582593222,
    DialogFolder = 1908216652,
};
const IDialog = union(DialogEnumID) {
    Dialog: *const Dialog,
    DialogFolder: *const DialogFolder,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .Dialog => { return self.Dialog.size(); },
                .DialogFolder => { return self.DialogFolder.size(); },
        }
    }
};
const PhotoEnumID = enum(u32) {
    PhotoEmpty = 590459437,
    Photo = 4212750949,
};
const IPhoto = union(PhotoEnumID) {
    PhotoEmpty: *const PhotoEmpty,
    Photo: *const Photo,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .PhotoEmpty => { return self.PhotoEmpty.size(); },
                .Photo => { return self.Photo.size(); },
        }
    }
};
const PhotoSizeEnumID = enum(u32) {
    PhotoSizeEmpty = 236446268,
    PhotoSize = 1976012384,
    PhotoCachedSize = 35527382,
    PhotoStrippedSize = 3769678894,
    PhotoSizeProgressive = 4198431637,
    PhotoPathSize = 3626061121,
};
const IPhotoSize = union(PhotoSizeEnumID) {
    PhotoSizeEmpty: *const PhotoSizeEmpty,
    PhotoSize: *const PhotoSize,
    PhotoCachedSize: *const PhotoCachedSize,
    PhotoStrippedSize: *const PhotoStrippedSize,
    PhotoSizeProgressive: *const PhotoSizeProgressive,
    PhotoPathSize: *const PhotoPathSize,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .PhotoSizeEmpty => { return self.PhotoSizeEmpty.size(); },
                .PhotoSize => { return self.PhotoSize.size(); },
                .PhotoCachedSize => { return self.PhotoCachedSize.size(); },
                .PhotoStrippedSize => { return self.PhotoStrippedSize.size(); },
                .PhotoSizeProgressive => { return self.PhotoSizeProgressive.size(); },
                .PhotoPathSize => { return self.PhotoPathSize.size(); },
        }
    }
};
const GeoPointEnumID = enum(u32) {
    GeoPointEmpty = 286776671,
    GeoPoint = 2997024355,
};
const IGeoPoint = union(GeoPointEnumID) {
    GeoPointEmpty: *const GeoPointEmpty,
    GeoPoint: *const GeoPoint,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .GeoPointEmpty => { return self.GeoPointEmpty.size(); },
                .GeoPoint => { return self.GeoPoint.size(); },
        }
    }
};
const AuthSentCodeEnumID = enum(u32) {
    AuthSentCode = 1577067778,
    AuthSentCodeSuccess = 596704836,
};
const IAuthSentCode = union(AuthSentCodeEnumID) {
    AuthSentCode: *const AuthSentCode,
    AuthSentCodeSuccess: *const AuthSentCodeSuccess,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .AuthSentCode => { return self.AuthSentCode.size(); },
                .AuthSentCodeSuccess => { return self.AuthSentCodeSuccess.size(); },
        }
    }
};
const AuthAuthorizationEnumID = enum(u32) {
    AuthAuthorization = 782418132,
    AuthAuthorizationSignUpRequired = 1148485274,
};
const IAuthAuthorization = union(AuthAuthorizationEnumID) {
    AuthAuthorization: *const AuthAuthorization,
    AuthAuthorizationSignUpRequired: *const AuthAuthorizationSignUpRequired,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .AuthAuthorization => { return self.AuthAuthorization.size(); },
                .AuthAuthorizationSignUpRequired => { return self.AuthAuthorizationSignUpRequired.size(); },
        }
    }
};
const AuthExportedAuthorizationEnumID = enum(u32) {
    AuthExportedAuthorization = 3023364792,
};
const IAuthExportedAuthorization = union(AuthExportedAuthorizationEnumID) {
    AuthExportedAuthorization: *const AuthExportedAuthorization,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .AuthExportedAuthorization => { return self.AuthExportedAuthorization.size(); },
        }
    }
};
const InputNotifyPeerEnumID = enum(u32) {
    InputNotifyPeer = 3099351820,
    InputNotifyUsers = 423314455,
    InputNotifyChats = 1251338318,
    InputNotifyBroadcasts = 2983951486,
    InputNotifyForumTopic = 1548122514,
};
const IInputNotifyPeer = union(InputNotifyPeerEnumID) {
    InputNotifyPeer: *const InputNotifyPeer,
    InputNotifyUsers: *const InputNotifyUsers,
    InputNotifyChats: *const InputNotifyChats,
    InputNotifyBroadcasts: *const InputNotifyBroadcasts,
    InputNotifyForumTopic: *const InputNotifyForumTopic,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .InputNotifyPeer => { return self.InputNotifyPeer.size(); },
                .InputNotifyUsers => { return self.InputNotifyUsers.size(); },
                .InputNotifyChats => { return self.InputNotifyChats.size(); },
                .InputNotifyBroadcasts => { return self.InputNotifyBroadcasts.size(); },
                .InputNotifyForumTopic => { return self.InputNotifyForumTopic.size(); },
        }
    }
};
const InputPeerNotifySettingsEnumID = enum(u32) {
    InputPeerNotifySettings = 3402328802,
};
const IInputPeerNotifySettings = union(InputPeerNotifySettingsEnumID) {
    InputPeerNotifySettings: *const InputPeerNotifySettings,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .InputPeerNotifySettings => { return self.InputPeerNotifySettings.size(); },
        }
    }
};
const PeerNotifySettingsEnumID = enum(u32) {
    PeerNotifySettings = 2573347852,
};
const IPeerNotifySettings = union(PeerNotifySettingsEnumID) {
    PeerNotifySettings: *const PeerNotifySettings,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .PeerNotifySettings => { return self.PeerNotifySettings.size(); },
        }
    }
};
const PeerSettingsEnumID = enum(u32) {
    PeerSettings = 2899733598,
};
const IPeerSettings = union(PeerSettingsEnumID) {
    PeerSettings: *const PeerSettings,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .PeerSettings => { return self.PeerSettings.size(); },
        }
    }
};
const WallPaperEnumID = enum(u32) {
    WallPaper = 2755118061,
    WallPaperNoFile = 3766501654,
};
const IWallPaper = union(WallPaperEnumID) {
    WallPaper: *const WallPaper,
    WallPaperNoFile: *const WallPaperNoFile,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .WallPaper => { return self.WallPaper.size(); },
                .WallPaperNoFile => { return self.WallPaperNoFile.size(); },
        }
    }
};
const ReportReasonEnumID = enum(u32) {
    InputReportReasonSpam = 1490799288,
    InputReportReasonViolence = 505595789,
    InputReportReasonPornography = 777640226,
    InputReportReasonChildAbuse = 2918469347,
    InputReportReasonOther = 3252986545,
    InputReportReasonCopyright = 2609510714,
    InputReportReasonGeoIrrelevant = 3688169197,
    InputReportReasonFake = 4124956391,
    InputReportReasonIllegalDrugs = 177124030,
    InputReportReasonPersonalDetails = 2663876157,
};
const IReportReason = union(ReportReasonEnumID) {
    InputReportReasonSpam: *const InputReportReasonSpam,
    InputReportReasonViolence: *const InputReportReasonViolence,
    InputReportReasonPornography: *const InputReportReasonPornography,
    InputReportReasonChildAbuse: *const InputReportReasonChildAbuse,
    InputReportReasonOther: *const InputReportReasonOther,
    InputReportReasonCopyright: *const InputReportReasonCopyright,
    InputReportReasonGeoIrrelevant: *const InputReportReasonGeoIrrelevant,
    InputReportReasonFake: *const InputReportReasonFake,
    InputReportReasonIllegalDrugs: *const InputReportReasonIllegalDrugs,
    InputReportReasonPersonalDetails: *const InputReportReasonPersonalDetails,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .InputReportReasonSpam => { return self.InputReportReasonSpam.size(); },
                .InputReportReasonViolence => { return self.InputReportReasonViolence.size(); },
                .InputReportReasonPornography => { return self.InputReportReasonPornography.size(); },
                .InputReportReasonChildAbuse => { return self.InputReportReasonChildAbuse.size(); },
                .InputReportReasonOther => { return self.InputReportReasonOther.size(); },
                .InputReportReasonCopyright => { return self.InputReportReasonCopyright.size(); },
                .InputReportReasonGeoIrrelevant => { return self.InputReportReasonGeoIrrelevant.size(); },
                .InputReportReasonFake => { return self.InputReportReasonFake.size(); },
                .InputReportReasonIllegalDrugs => { return self.InputReportReasonIllegalDrugs.size(); },
                .InputReportReasonPersonalDetails => { return self.InputReportReasonPersonalDetails.size(); },
        }
    }
};
const UserFullEnumID = enum(u32) {
    UserFull = 525919081,
};
const IUserFull = union(UserFullEnumID) {
    UserFull: *const UserFull,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .UserFull => { return self.UserFull.size(); },
        }
    }
};
const ContactEnumID = enum(u32) {
    Contact = 341499403,
};
const IContact = union(ContactEnumID) {
    Contact: *const Contact,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .Contact => { return self.Contact.size(); },
        }
    }
};
const ImportedContactEnumID = enum(u32) {
    ImportedContact = 3242081360,
};
const IImportedContact = union(ImportedContactEnumID) {
    ImportedContact: *const ImportedContact,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .ImportedContact => { return self.ImportedContact.size(); },
        }
    }
};
const ContactStatusEnumID = enum(u32) {
    ContactStatus = 383348795,
};
const IContactStatus = union(ContactStatusEnumID) {
    ContactStatus: *const ContactStatus,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .ContactStatus => { return self.ContactStatus.size(); },
        }
    }
};
const ContactsContactsEnumID = enum(u32) {
    ContactsContactsNotModified = 3075189202,
    ContactsContacts = 3941105218,
};
const IContactsContacts = union(ContactsContactsEnumID) {
    ContactsContactsNotModified: *const ContactsContactsNotModified,
    ContactsContacts: *const ContactsContacts,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .ContactsContactsNotModified => { return self.ContactsContactsNotModified.size(); },
                .ContactsContacts => { return self.ContactsContacts.size(); },
        }
    }
};
const ContactsImportedContactsEnumID = enum(u32) {
    ContactsImportedContacts = 2010127419,
};
const IContactsImportedContacts = union(ContactsImportedContactsEnumID) {
    ContactsImportedContacts: *const ContactsImportedContacts,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .ContactsImportedContacts => { return self.ContactsImportedContacts.size(); },
        }
    }
};
const ContactsBlockedEnumID = enum(u32) {
    ContactsBlocked = 182326673,
    ContactsBlockedSlice = 3781575060,
};
const IContactsBlocked = union(ContactsBlockedEnumID) {
    ContactsBlocked: *const ContactsBlocked,
    ContactsBlockedSlice: *const ContactsBlockedSlice,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .ContactsBlocked => { return self.ContactsBlocked.size(); },
                .ContactsBlockedSlice => { return self.ContactsBlockedSlice.size(); },
        }
    }
};
const MessagesDialogsEnumID = enum(u32) {
    MessagesDialogs = 364538944,
    MessagesDialogsSlice = 1910543603,
    MessagesDialogsNotModified = 4041467286,
};
const IMessagesDialogs = union(MessagesDialogsEnumID) {
    MessagesDialogs: *const MessagesDialogs,
    MessagesDialogsSlice: *const MessagesDialogsSlice,
    MessagesDialogsNotModified: *const MessagesDialogsNotModified,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .MessagesDialogs => { return self.MessagesDialogs.size(); },
                .MessagesDialogsSlice => { return self.MessagesDialogsSlice.size(); },
                .MessagesDialogsNotModified => { return self.MessagesDialogsNotModified.size(); },
        }
    }
};
const MessagesMessagesEnumID = enum(u32) {
    MessagesMessages = 2356252295,
    MessagesMessagesSlice = 978610270,
    MessagesChannelMessages = 3346446926,
    MessagesMessagesNotModified = 1951620897,
};
const IMessagesMessages = union(MessagesMessagesEnumID) {
    MessagesMessages: *const MessagesMessages,
    MessagesMessagesSlice: *const MessagesMessagesSlice,
    MessagesChannelMessages: *const MessagesChannelMessages,
    MessagesMessagesNotModified: *const MessagesMessagesNotModified,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .MessagesMessages => { return self.MessagesMessages.size(); },
                .MessagesMessagesSlice => { return self.MessagesMessagesSlice.size(); },
                .MessagesChannelMessages => { return self.MessagesChannelMessages.size(); },
                .MessagesMessagesNotModified => { return self.MessagesMessagesNotModified.size(); },
        }
    }
};
const MessagesChatsEnumID = enum(u32) {
    MessagesChats = 1694474197,
    MessagesChatsSlice = 2631405892,
};
const IMessagesChats = union(MessagesChatsEnumID) {
    MessagesChats: *const MessagesChats,
    MessagesChatsSlice: *const MessagesChatsSlice,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .MessagesChats => { return self.MessagesChats.size(); },
                .MessagesChatsSlice => { return self.MessagesChatsSlice.size(); },
        }
    }
};
const MessagesChatFullEnumID = enum(u32) {
    MessagesChatFull = 3856126364,
};
const IMessagesChatFull = union(MessagesChatFullEnumID) {
    MessagesChatFull: *const MessagesChatFull,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .MessagesChatFull => { return self.MessagesChatFull.size(); },
        }
    }
};
const MessagesAffectedHistoryEnumID = enum(u32) {
    MessagesAffectedHistory = 3025955281,
};
const IMessagesAffectedHistory = union(MessagesAffectedHistoryEnumID) {
    MessagesAffectedHistory: *const MessagesAffectedHistory,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .MessagesAffectedHistory => { return self.MessagesAffectedHistory.size(); },
        }
    }
};
const MessagesFilterEnumID = enum(u32) {
    InputMessagesFilterEmpty = 1474492012,
    InputMessagesFilterPhotos = 2517214492,
    InputMessagesFilterVideo = 2680163941,
    InputMessagesFilterPhotoVideo = 1458172132,
    InputMessagesFilterDocument = 2665345416,
    InputMessagesFilterUrl = 2129714567,
    InputMessagesFilterGif = 4291323271,
    InputMessagesFilterVoice = 1358283666,
    InputMessagesFilterMusic = 928101534,
    InputMessagesFilterChatPhotos = 975236280,
    InputMessagesFilterPhoneCalls = 2160695144,
    InputMessagesFilterRoundVoice = 2054952868,
    InputMessagesFilterRoundVideo = 3041516115,
    InputMessagesFilterMyMentions = 3254314650,
    InputMessagesFilterGeo = 3875695885,
    InputMessagesFilterContacts = 3764575107,
    InputMessagesFilterPinned = 464520273,
};
const IMessagesFilter = union(MessagesFilterEnumID) {
    InputMessagesFilterEmpty: *const InputMessagesFilterEmpty,
    InputMessagesFilterPhotos: *const InputMessagesFilterPhotos,
    InputMessagesFilterVideo: *const InputMessagesFilterVideo,
    InputMessagesFilterPhotoVideo: *const InputMessagesFilterPhotoVideo,
    InputMessagesFilterDocument: *const InputMessagesFilterDocument,
    InputMessagesFilterUrl: *const InputMessagesFilterUrl,
    InputMessagesFilterGif: *const InputMessagesFilterGif,
    InputMessagesFilterVoice: *const InputMessagesFilterVoice,
    InputMessagesFilterMusic: *const InputMessagesFilterMusic,
    InputMessagesFilterChatPhotos: *const InputMessagesFilterChatPhotos,
    InputMessagesFilterPhoneCalls: *const InputMessagesFilterPhoneCalls,
    InputMessagesFilterRoundVoice: *const InputMessagesFilterRoundVoice,
    InputMessagesFilterRoundVideo: *const InputMessagesFilterRoundVideo,
    InputMessagesFilterMyMentions: *const InputMessagesFilterMyMentions,
    InputMessagesFilterGeo: *const InputMessagesFilterGeo,
    InputMessagesFilterContacts: *const InputMessagesFilterContacts,
    InputMessagesFilterPinned: *const InputMessagesFilterPinned,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .InputMessagesFilterEmpty => { return self.InputMessagesFilterEmpty.size(); },
                .InputMessagesFilterPhotos => { return self.InputMessagesFilterPhotos.size(); },
                .InputMessagesFilterVideo => { return self.InputMessagesFilterVideo.size(); },
                .InputMessagesFilterPhotoVideo => { return self.InputMessagesFilterPhotoVideo.size(); },
                .InputMessagesFilterDocument => { return self.InputMessagesFilterDocument.size(); },
                .InputMessagesFilterUrl => { return self.InputMessagesFilterUrl.size(); },
                .InputMessagesFilterGif => { return self.InputMessagesFilterGif.size(); },
                .InputMessagesFilterVoice => { return self.InputMessagesFilterVoice.size(); },
                .InputMessagesFilterMusic => { return self.InputMessagesFilterMusic.size(); },
                .InputMessagesFilterChatPhotos => { return self.InputMessagesFilterChatPhotos.size(); },
                .InputMessagesFilterPhoneCalls => { return self.InputMessagesFilterPhoneCalls.size(); },
                .InputMessagesFilterRoundVoice => { return self.InputMessagesFilterRoundVoice.size(); },
                .InputMessagesFilterRoundVideo => { return self.InputMessagesFilterRoundVideo.size(); },
                .InputMessagesFilterMyMentions => { return self.InputMessagesFilterMyMentions.size(); },
                .InputMessagesFilterGeo => { return self.InputMessagesFilterGeo.size(); },
                .InputMessagesFilterContacts => { return self.InputMessagesFilterContacts.size(); },
                .InputMessagesFilterPinned => { return self.InputMessagesFilterPinned.size(); },
        }
    }
};
const UpdateEnumID = enum(u32) {
    UpdateNewMessage = 522914557,
    UpdateMessageID = 1318109142,
    UpdateDeleteMessages = 2718806245,
    UpdateUserTyping = 3223225727,
    UpdateChatUserTyping = 2202565360,
    UpdateChatParticipants = 125178264,
    UpdateUserStatus = 3854432478,
    UpdateUserName = 2810480932,
    UpdateNewAuthorization = 2303831023,
    UpdateNewEncryptedMessage = 314359194,
    UpdateEncryptedChatTyping = 386986326,
    UpdateEncryption = 3030575245,
    UpdateEncryptedMessagesRead = 956179895,
    UpdateChatParticipantAdd = 1037718609,
    UpdateChatParticipantDelete = 3811523959,
    UpdateDcOptions = 2388564083,
    UpdateNotifySettings = 3200411887,
    UpdateServiceNotification = 3957614617,
    UpdatePrivacy = 3996854058,
    UpdateUserPhone = 88680979,
    UpdateReadHistoryInbox = 2627162079,
    UpdateReadHistoryOutbox = 791617983,
    UpdateWebPage = 2139689491,
    UpdateReadMessagesContents = 4163006849,
    UpdateChannelTooLong = 277713951,
    UpdateChannel = 1666927625,
    UpdateNewChannelMessage = 1656358105,
    UpdateReadChannelInbox = 2452516368,
    UpdateDeleteChannelMessages = 3274529554,
    UpdateChannelMessageViews = 4062620680,
    UpdateChatParticipantAdmin = 3620364706,
    UpdateNewStickerSet = 1753886890,
    UpdateStickerSetsOrder = 196268545,
    UpdateStickerSets = 834816008,
    UpdateSavedGifs = 2473931806,
    UpdateBotInlineQuery = 1232025500,
    UpdateBotInlineSend = 317794823,
    UpdateEditChannelMessage = 457133559,
    UpdateBotCallbackQuery = 3117401229,
    UpdateEditMessage = 3825430691,
    UpdateInlineBotCallbackQuery = 1763610706,
    UpdateReadChannelOutbox = 3076495785,
    UpdateDraftMessage = 457829485,
    UpdateReadFeaturedStickers = 1461528386,
    UpdateRecentStickers = 2588027936,
    UpdateConfig = 2720652550,
    UpdatePtsChanged = 861169551,
    UpdateChannelWebPage = 791390623,
    UpdateDialogPinned = 1852826908,
    UpdatePinnedDialogs = 4195302562,
    UpdateBotWebhookJSON = 2199371971,
    UpdateBotWebhookJSONQuery = 2610053286,
    UpdateBotShippingQuery = 3048144253,
    UpdateBotPrecheckoutQuery = 2359990934,
    UpdatePhoneCall = 2869914398,
    UpdateLangPackTooLong = 1180041828,
    UpdateLangPack = 1442983757,
    UpdateFavedStickers = 3843135853,
    UpdateChannelReadMessagesContents = 3928556893,
    UpdateContactsReset = 1887741886,
    UpdateChannelAvailableMessages = 2990524056,
    UpdateDialogUnreadMark = 3781450179,
    UpdateMessagePoll = 2896258427,
    UpdateChatDefaultBannedRights = 1421875280,
    UpdateFolderPeers = 422972864,
    UpdatePeerSettings = 1786671974,
    UpdatePeerLocated = 3031420848,
    UpdateNewScheduledMessage = 967122427,
    UpdateDeleteScheduledMessages = 2424728814,
    UpdateTheme = 2182544291,
    UpdateGeoLiveViewed = 2267003193,
    UpdateLoginToken = 1448076945,
    UpdateMessagePollVote = 619974263,
    UpdateDialogFilter = 654302845,
    UpdateDialogFilterOrder = 2782339333,
    UpdateDialogFilters = 889491791,
    UpdatePhoneCallSignalingData = 643940105,
    UpdateChannelMessageForwards = 3533318132,
    UpdateReadChannelDiscussionInbox = 3601962310,
    UpdateReadChannelDiscussionOutbox = 1767677564,
    UpdatePeerBlocked = 3957356370,
    UpdateChannelUserTyping = 2357774627,
    UpdatePinnedMessages = 3984976565,
    UpdatePinnedChannelMessages = 1538885128,
    UpdateChat = 4170869326,
    UpdateGroupCallParticipants = 4075543374,
    UpdateGroupCall = 347227392,
    UpdatePeerHistoryTTL = 3147544997,
    UpdateChatParticipant = 3498534458,
    UpdateChannelParticipant = 2556246715,
    UpdateBotStopped = 3297184329,
    UpdateGroupCallConnection = 192428418,
    UpdateBotCommands = 1299263278,
    UpdatePendingJoinRequests = 1885586395,
    UpdateBotChatInviteRequester = 299870598,
    UpdateMessageReactions = 1578843320,
    UpdateAttachMenuBots = 397910539,
    UpdateWebViewResultSent = 361936797,
    UpdateBotMenuButton = 347625491,
    UpdateSavedRingtones = 1960361625,
    UpdateTranscribedAudio = 8703322,
    UpdateReadFeaturedEmojiStickers = 4216080748,
    UpdateUserEmojiStatus = 674706841,
    UpdateRecentEmojiStatuses = 821314523,
    UpdateRecentReactions = 1870160884,
    UpdateMoveStickerSetToTop = 2264715141,
    UpdateMessageExtendedMedia = 3584300836,
    UpdateChannelPinnedTopic = 422509539,
    UpdateChannelPinnedTopics = 4263085570,
    UpdateUser = 542282808,
    UpdateAutoSaveSettings = 3959795863,
    UpdateStory = 1974712216,
    UpdateReadStories = 4149121835,
    UpdateStoryID = 468923833,
    UpdateStoriesStealthMode = 738741697,
    UpdateSentStoryReaction = 2103604867,
    UpdateBotChatBoost = 2421019804,
    UpdateChannelViewForumAsMessages = 129403168,
    UpdatePeerWallpaper = 2923368477,
    UpdateBotMessageReaction = 2887898062,
    UpdateBotMessageReactions = 164329305,
    UpdateSavedDialogPinned = 2930744948,
    UpdatePinnedSavedDialogs = 1751942566,
    UpdateSavedReactionTags = 969307186,
    UpdateSmsJob = 4049758676,
    UpdateQuickReplies = 4182182578,
    UpdateNewQuickReply = 4114458391,
    UpdateDeleteQuickReply = 1407644140,
    UpdateQuickReplyMessage = 1040518415,
    UpdateDeleteQuickReplyMessages = 1450174413,
    UpdateBotBusinessConnect = 2330315130,
    UpdateBotNewBusinessMessage = 2648388732,
    UpdateBotEditBusinessMessage = 132077692,
    UpdateBotDeleteBusinessMessage = 2687146030,
    UpdateNewStoryReaction = 405070859,
    UpdateBroadcastRevenueTransactions = 3755565557,
    UpdateStarsBalance = 263737752,
    UpdateBusinessBotCallbackQuery = 513998247,
    UpdateStarsRevenueStatus = 2776936473,
    UpdateBotPurchasedPaidMedia = 675009298,
    UpdatePaidReactionPrivacy = 1372224236,
};
const IUpdate = union(UpdateEnumID) {
    UpdateNewMessage: *const UpdateNewMessage,
    UpdateMessageID: *const UpdateMessageID,
    UpdateDeleteMessages: *const UpdateDeleteMessages,
    UpdateUserTyping: *const UpdateUserTyping,
    UpdateChatUserTyping: *const UpdateChatUserTyping,
    UpdateChatParticipants: *const UpdateChatParticipants,
    UpdateUserStatus: *const UpdateUserStatus,
    UpdateUserName: *const UpdateUserName,
    UpdateNewAuthorization: *const UpdateNewAuthorization,
    UpdateNewEncryptedMessage: *const UpdateNewEncryptedMessage,
    UpdateEncryptedChatTyping: *const UpdateEncryptedChatTyping,
    UpdateEncryption: *const UpdateEncryption,
    UpdateEncryptedMessagesRead: *const UpdateEncryptedMessagesRead,
    UpdateChatParticipantAdd: *const UpdateChatParticipantAdd,
    UpdateChatParticipantDelete: *const UpdateChatParticipantDelete,
    UpdateDcOptions: *const UpdateDcOptions,
    UpdateNotifySettings: *const UpdateNotifySettings,
    UpdateServiceNotification: *const UpdateServiceNotification,
    UpdatePrivacy: *const UpdatePrivacy,
    UpdateUserPhone: *const UpdateUserPhone,
    UpdateReadHistoryInbox: *const UpdateReadHistoryInbox,
    UpdateReadHistoryOutbox: *const UpdateReadHistoryOutbox,
    UpdateWebPage: *const UpdateWebPage,
    UpdateReadMessagesContents: *const UpdateReadMessagesContents,
    UpdateChannelTooLong: *const UpdateChannelTooLong,
    UpdateChannel: *const UpdateChannel,
    UpdateNewChannelMessage: *const UpdateNewChannelMessage,
    UpdateReadChannelInbox: *const UpdateReadChannelInbox,
    UpdateDeleteChannelMessages: *const UpdateDeleteChannelMessages,
    UpdateChannelMessageViews: *const UpdateChannelMessageViews,
    UpdateChatParticipantAdmin: *const UpdateChatParticipantAdmin,
    UpdateNewStickerSet: *const UpdateNewStickerSet,
    UpdateStickerSetsOrder: *const UpdateStickerSetsOrder,
    UpdateStickerSets: *const UpdateStickerSets,
    UpdateSavedGifs: *const UpdateSavedGifs,
    UpdateBotInlineQuery: *const UpdateBotInlineQuery,
    UpdateBotInlineSend: *const UpdateBotInlineSend,
    UpdateEditChannelMessage: *const UpdateEditChannelMessage,
    UpdateBotCallbackQuery: *const UpdateBotCallbackQuery,
    UpdateEditMessage: *const UpdateEditMessage,
    UpdateInlineBotCallbackQuery: *const UpdateInlineBotCallbackQuery,
    UpdateReadChannelOutbox: *const UpdateReadChannelOutbox,
    UpdateDraftMessage: *const UpdateDraftMessage,
    UpdateReadFeaturedStickers: *const UpdateReadFeaturedStickers,
    UpdateRecentStickers: *const UpdateRecentStickers,
    UpdateConfig: *const UpdateConfig,
    UpdatePtsChanged: *const UpdatePtsChanged,
    UpdateChannelWebPage: *const UpdateChannelWebPage,
    UpdateDialogPinned: *const UpdateDialogPinned,
    UpdatePinnedDialogs: *const UpdatePinnedDialogs,
    UpdateBotWebhookJSON: *const UpdateBotWebhookJSON,
    UpdateBotWebhookJSONQuery: *const UpdateBotWebhookJSONQuery,
    UpdateBotShippingQuery: *const UpdateBotShippingQuery,
    UpdateBotPrecheckoutQuery: *const UpdateBotPrecheckoutQuery,
    UpdatePhoneCall: *const UpdatePhoneCall,
    UpdateLangPackTooLong: *const UpdateLangPackTooLong,
    UpdateLangPack: *const UpdateLangPack,
    UpdateFavedStickers: *const UpdateFavedStickers,
    UpdateChannelReadMessagesContents: *const UpdateChannelReadMessagesContents,
    UpdateContactsReset: *const UpdateContactsReset,
    UpdateChannelAvailableMessages: *const UpdateChannelAvailableMessages,
    UpdateDialogUnreadMark: *const UpdateDialogUnreadMark,
    UpdateMessagePoll: *const UpdateMessagePoll,
    UpdateChatDefaultBannedRights: *const UpdateChatDefaultBannedRights,
    UpdateFolderPeers: *const UpdateFolderPeers,
    UpdatePeerSettings: *const UpdatePeerSettings,
    UpdatePeerLocated: *const UpdatePeerLocated,
    UpdateNewScheduledMessage: *const UpdateNewScheduledMessage,
    UpdateDeleteScheduledMessages: *const UpdateDeleteScheduledMessages,
    UpdateTheme: *const UpdateTheme,
    UpdateGeoLiveViewed: *const UpdateGeoLiveViewed,
    UpdateLoginToken: *const UpdateLoginToken,
    UpdateMessagePollVote: *const UpdateMessagePollVote,
    UpdateDialogFilter: *const UpdateDialogFilter,
    UpdateDialogFilterOrder: *const UpdateDialogFilterOrder,
    UpdateDialogFilters: *const UpdateDialogFilters,
    UpdatePhoneCallSignalingData: *const UpdatePhoneCallSignalingData,
    UpdateChannelMessageForwards: *const UpdateChannelMessageForwards,
    UpdateReadChannelDiscussionInbox: *const UpdateReadChannelDiscussionInbox,
    UpdateReadChannelDiscussionOutbox: *const UpdateReadChannelDiscussionOutbox,
    UpdatePeerBlocked: *const UpdatePeerBlocked,
    UpdateChannelUserTyping: *const UpdateChannelUserTyping,
    UpdatePinnedMessages: *const UpdatePinnedMessages,
    UpdatePinnedChannelMessages: *const UpdatePinnedChannelMessages,
    UpdateChat: *const UpdateChat,
    UpdateGroupCallParticipants: *const UpdateGroupCallParticipants,
    UpdateGroupCall: *const UpdateGroupCall,
    UpdatePeerHistoryTTL: *const UpdatePeerHistoryTTL,
    UpdateChatParticipant: *const UpdateChatParticipant,
    UpdateChannelParticipant: *const UpdateChannelParticipant,
    UpdateBotStopped: *const UpdateBotStopped,
    UpdateGroupCallConnection: *const UpdateGroupCallConnection,
    UpdateBotCommands: *const UpdateBotCommands,
    UpdatePendingJoinRequests: *const UpdatePendingJoinRequests,
    UpdateBotChatInviteRequester: *const UpdateBotChatInviteRequester,
    UpdateMessageReactions: *const UpdateMessageReactions,
    UpdateAttachMenuBots: *const UpdateAttachMenuBots,
    UpdateWebViewResultSent: *const UpdateWebViewResultSent,
    UpdateBotMenuButton: *const UpdateBotMenuButton,
    UpdateSavedRingtones: *const UpdateSavedRingtones,
    UpdateTranscribedAudio: *const UpdateTranscribedAudio,
    UpdateReadFeaturedEmojiStickers: *const UpdateReadFeaturedEmojiStickers,
    UpdateUserEmojiStatus: *const UpdateUserEmojiStatus,
    UpdateRecentEmojiStatuses: *const UpdateRecentEmojiStatuses,
    UpdateRecentReactions: *const UpdateRecentReactions,
    UpdateMoveStickerSetToTop: *const UpdateMoveStickerSetToTop,
    UpdateMessageExtendedMedia: *const UpdateMessageExtendedMedia,
    UpdateChannelPinnedTopic: *const UpdateChannelPinnedTopic,
    UpdateChannelPinnedTopics: *const UpdateChannelPinnedTopics,
    UpdateUser: *const UpdateUser,
    UpdateAutoSaveSettings: *const UpdateAutoSaveSettings,
    UpdateStory: *const UpdateStory,
    UpdateReadStories: *const UpdateReadStories,
    UpdateStoryID: *const UpdateStoryID,
    UpdateStoriesStealthMode: *const UpdateStoriesStealthMode,
    UpdateSentStoryReaction: *const UpdateSentStoryReaction,
    UpdateBotChatBoost: *const UpdateBotChatBoost,
    UpdateChannelViewForumAsMessages: *const UpdateChannelViewForumAsMessages,
    UpdatePeerWallpaper: *const UpdatePeerWallpaper,
    UpdateBotMessageReaction: *const UpdateBotMessageReaction,
    UpdateBotMessageReactions: *const UpdateBotMessageReactions,
    UpdateSavedDialogPinned: *const UpdateSavedDialogPinned,
    UpdatePinnedSavedDialogs: *const UpdatePinnedSavedDialogs,
    UpdateSavedReactionTags: *const UpdateSavedReactionTags,
    UpdateSmsJob: *const UpdateSmsJob,
    UpdateQuickReplies: *const UpdateQuickReplies,
    UpdateNewQuickReply: *const UpdateNewQuickReply,
    UpdateDeleteQuickReply: *const UpdateDeleteQuickReply,
    UpdateQuickReplyMessage: *const UpdateQuickReplyMessage,
    UpdateDeleteQuickReplyMessages: *const UpdateDeleteQuickReplyMessages,
    UpdateBotBusinessConnect: *const UpdateBotBusinessConnect,
    UpdateBotNewBusinessMessage: *const UpdateBotNewBusinessMessage,
    UpdateBotEditBusinessMessage: *const UpdateBotEditBusinessMessage,
    UpdateBotDeleteBusinessMessage: *const UpdateBotDeleteBusinessMessage,
    UpdateNewStoryReaction: *const UpdateNewStoryReaction,
    UpdateBroadcastRevenueTransactions: *const UpdateBroadcastRevenueTransactions,
    UpdateStarsBalance: *const UpdateStarsBalance,
    UpdateBusinessBotCallbackQuery: *const UpdateBusinessBotCallbackQuery,
    UpdateStarsRevenueStatus: *const UpdateStarsRevenueStatus,
    UpdateBotPurchasedPaidMedia: *const UpdateBotPurchasedPaidMedia,
    UpdatePaidReactionPrivacy: *const UpdatePaidReactionPrivacy,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .UpdateNewMessage => { return self.UpdateNewMessage.size(); },
                .UpdateMessageID => { return self.UpdateMessageID.size(); },
                .UpdateDeleteMessages => { return self.UpdateDeleteMessages.size(); },
                .UpdateUserTyping => { return self.UpdateUserTyping.size(); },
                .UpdateChatUserTyping => { return self.UpdateChatUserTyping.size(); },
                .UpdateChatParticipants => { return self.UpdateChatParticipants.size(); },
                .UpdateUserStatus => { return self.UpdateUserStatus.size(); },
                .UpdateUserName => { return self.UpdateUserName.size(); },
                .UpdateNewAuthorization => { return self.UpdateNewAuthorization.size(); },
                .UpdateNewEncryptedMessage => { return self.UpdateNewEncryptedMessage.size(); },
                .UpdateEncryptedChatTyping => { return self.UpdateEncryptedChatTyping.size(); },
                .UpdateEncryption => { return self.UpdateEncryption.size(); },
                .UpdateEncryptedMessagesRead => { return self.UpdateEncryptedMessagesRead.size(); },
                .UpdateChatParticipantAdd => { return self.UpdateChatParticipantAdd.size(); },
                .UpdateChatParticipantDelete => { return self.UpdateChatParticipantDelete.size(); },
                .UpdateDcOptions => { return self.UpdateDcOptions.size(); },
                .UpdateNotifySettings => { return self.UpdateNotifySettings.size(); },
                .UpdateServiceNotification => { return self.UpdateServiceNotification.size(); },
                .UpdatePrivacy => { return self.UpdatePrivacy.size(); },
                .UpdateUserPhone => { return self.UpdateUserPhone.size(); },
                .UpdateReadHistoryInbox => { return self.UpdateReadHistoryInbox.size(); },
                .UpdateReadHistoryOutbox => { return self.UpdateReadHistoryOutbox.size(); },
                .UpdateWebPage => { return self.UpdateWebPage.size(); },
                .UpdateReadMessagesContents => { return self.UpdateReadMessagesContents.size(); },
                .UpdateChannelTooLong => { return self.UpdateChannelTooLong.size(); },
                .UpdateChannel => { return self.UpdateChannel.size(); },
                .UpdateNewChannelMessage => { return self.UpdateNewChannelMessage.size(); },
                .UpdateReadChannelInbox => { return self.UpdateReadChannelInbox.size(); },
                .UpdateDeleteChannelMessages => { return self.UpdateDeleteChannelMessages.size(); },
                .UpdateChannelMessageViews => { return self.UpdateChannelMessageViews.size(); },
                .UpdateChatParticipantAdmin => { return self.UpdateChatParticipantAdmin.size(); },
                .UpdateNewStickerSet => { return self.UpdateNewStickerSet.size(); },
                .UpdateStickerSetsOrder => { return self.UpdateStickerSetsOrder.size(); },
                .UpdateStickerSets => { return self.UpdateStickerSets.size(); },
                .UpdateSavedGifs => { return self.UpdateSavedGifs.size(); },
                .UpdateBotInlineQuery => { return self.UpdateBotInlineQuery.size(); },
                .UpdateBotInlineSend => { return self.UpdateBotInlineSend.size(); },
                .UpdateEditChannelMessage => { return self.UpdateEditChannelMessage.size(); },
                .UpdateBotCallbackQuery => { return self.UpdateBotCallbackQuery.size(); },
                .UpdateEditMessage => { return self.UpdateEditMessage.size(); },
                .UpdateInlineBotCallbackQuery => { return self.UpdateInlineBotCallbackQuery.size(); },
                .UpdateReadChannelOutbox => { return self.UpdateReadChannelOutbox.size(); },
                .UpdateDraftMessage => { return self.UpdateDraftMessage.size(); },
                .UpdateReadFeaturedStickers => { return self.UpdateReadFeaturedStickers.size(); },
                .UpdateRecentStickers => { return self.UpdateRecentStickers.size(); },
                .UpdateConfig => { return self.UpdateConfig.size(); },
                .UpdatePtsChanged => { return self.UpdatePtsChanged.size(); },
                .UpdateChannelWebPage => { return self.UpdateChannelWebPage.size(); },
                .UpdateDialogPinned => { return self.UpdateDialogPinned.size(); },
                .UpdatePinnedDialogs => { return self.UpdatePinnedDialogs.size(); },
                .UpdateBotWebhookJSON => { return self.UpdateBotWebhookJSON.size(); },
                .UpdateBotWebhookJSONQuery => { return self.UpdateBotWebhookJSONQuery.size(); },
                .UpdateBotShippingQuery => { return self.UpdateBotShippingQuery.size(); },
                .UpdateBotPrecheckoutQuery => { return self.UpdateBotPrecheckoutQuery.size(); },
                .UpdatePhoneCall => { return self.UpdatePhoneCall.size(); },
                .UpdateLangPackTooLong => { return self.UpdateLangPackTooLong.size(); },
                .UpdateLangPack => { return self.UpdateLangPack.size(); },
                .UpdateFavedStickers => { return self.UpdateFavedStickers.size(); },
                .UpdateChannelReadMessagesContents => { return self.UpdateChannelReadMessagesContents.size(); },
                .UpdateContactsReset => { return self.UpdateContactsReset.size(); },
                .UpdateChannelAvailableMessages => { return self.UpdateChannelAvailableMessages.size(); },
                .UpdateDialogUnreadMark => { return self.UpdateDialogUnreadMark.size(); },
                .UpdateMessagePoll => { return self.UpdateMessagePoll.size(); },
                .UpdateChatDefaultBannedRights => { return self.UpdateChatDefaultBannedRights.size(); },
                .UpdateFolderPeers => { return self.UpdateFolderPeers.size(); },
                .UpdatePeerSettings => { return self.UpdatePeerSettings.size(); },
                .UpdatePeerLocated => { return self.UpdatePeerLocated.size(); },
                .UpdateNewScheduledMessage => { return self.UpdateNewScheduledMessage.size(); },
                .UpdateDeleteScheduledMessages => { return self.UpdateDeleteScheduledMessages.size(); },
                .UpdateTheme => { return self.UpdateTheme.size(); },
                .UpdateGeoLiveViewed => { return self.UpdateGeoLiveViewed.size(); },
                .UpdateLoginToken => { return self.UpdateLoginToken.size(); },
                .UpdateMessagePollVote => { return self.UpdateMessagePollVote.size(); },
                .UpdateDialogFilter => { return self.UpdateDialogFilter.size(); },
                .UpdateDialogFilterOrder => { return self.UpdateDialogFilterOrder.size(); },
                .UpdateDialogFilters => { return self.UpdateDialogFilters.size(); },
                .UpdatePhoneCallSignalingData => { return self.UpdatePhoneCallSignalingData.size(); },
                .UpdateChannelMessageForwards => { return self.UpdateChannelMessageForwards.size(); },
                .UpdateReadChannelDiscussionInbox => { return self.UpdateReadChannelDiscussionInbox.size(); },
                .UpdateReadChannelDiscussionOutbox => { return self.UpdateReadChannelDiscussionOutbox.size(); },
                .UpdatePeerBlocked => { return self.UpdatePeerBlocked.size(); },
                .UpdateChannelUserTyping => { return self.UpdateChannelUserTyping.size(); },
                .UpdatePinnedMessages => { return self.UpdatePinnedMessages.size(); },
                .UpdatePinnedChannelMessages => { return self.UpdatePinnedChannelMessages.size(); },
                .UpdateChat => { return self.UpdateChat.size(); },
                .UpdateGroupCallParticipants => { return self.UpdateGroupCallParticipants.size(); },
                .UpdateGroupCall => { return self.UpdateGroupCall.size(); },
                .UpdatePeerHistoryTTL => { return self.UpdatePeerHistoryTTL.size(); },
                .UpdateChatParticipant => { return self.UpdateChatParticipant.size(); },
                .UpdateChannelParticipant => { return self.UpdateChannelParticipant.size(); },
                .UpdateBotStopped => { return self.UpdateBotStopped.size(); },
                .UpdateGroupCallConnection => { return self.UpdateGroupCallConnection.size(); },
                .UpdateBotCommands => { return self.UpdateBotCommands.size(); },
                .UpdatePendingJoinRequests => { return self.UpdatePendingJoinRequests.size(); },
                .UpdateBotChatInviteRequester => { return self.UpdateBotChatInviteRequester.size(); },
                .UpdateMessageReactions => { return self.UpdateMessageReactions.size(); },
                .UpdateAttachMenuBots => { return self.UpdateAttachMenuBots.size(); },
                .UpdateWebViewResultSent => { return self.UpdateWebViewResultSent.size(); },
                .UpdateBotMenuButton => { return self.UpdateBotMenuButton.size(); },
                .UpdateSavedRingtones => { return self.UpdateSavedRingtones.size(); },
                .UpdateTranscribedAudio => { return self.UpdateTranscribedAudio.size(); },
                .UpdateReadFeaturedEmojiStickers => { return self.UpdateReadFeaturedEmojiStickers.size(); },
                .UpdateUserEmojiStatus => { return self.UpdateUserEmojiStatus.size(); },
                .UpdateRecentEmojiStatuses => { return self.UpdateRecentEmojiStatuses.size(); },
                .UpdateRecentReactions => { return self.UpdateRecentReactions.size(); },
                .UpdateMoveStickerSetToTop => { return self.UpdateMoveStickerSetToTop.size(); },
                .UpdateMessageExtendedMedia => { return self.UpdateMessageExtendedMedia.size(); },
                .UpdateChannelPinnedTopic => { return self.UpdateChannelPinnedTopic.size(); },
                .UpdateChannelPinnedTopics => { return self.UpdateChannelPinnedTopics.size(); },
                .UpdateUser => { return self.UpdateUser.size(); },
                .UpdateAutoSaveSettings => { return self.UpdateAutoSaveSettings.size(); },
                .UpdateStory => { return self.UpdateStory.size(); },
                .UpdateReadStories => { return self.UpdateReadStories.size(); },
                .UpdateStoryID => { return self.UpdateStoryID.size(); },
                .UpdateStoriesStealthMode => { return self.UpdateStoriesStealthMode.size(); },
                .UpdateSentStoryReaction => { return self.UpdateSentStoryReaction.size(); },
                .UpdateBotChatBoost => { return self.UpdateBotChatBoost.size(); },
                .UpdateChannelViewForumAsMessages => { return self.UpdateChannelViewForumAsMessages.size(); },
                .UpdatePeerWallpaper => { return self.UpdatePeerWallpaper.size(); },
                .UpdateBotMessageReaction => { return self.UpdateBotMessageReaction.size(); },
                .UpdateBotMessageReactions => { return self.UpdateBotMessageReactions.size(); },
                .UpdateSavedDialogPinned => { return self.UpdateSavedDialogPinned.size(); },
                .UpdatePinnedSavedDialogs => { return self.UpdatePinnedSavedDialogs.size(); },
                .UpdateSavedReactionTags => { return self.UpdateSavedReactionTags.size(); },
                .UpdateSmsJob => { return self.UpdateSmsJob.size(); },
                .UpdateQuickReplies => { return self.UpdateQuickReplies.size(); },
                .UpdateNewQuickReply => { return self.UpdateNewQuickReply.size(); },
                .UpdateDeleteQuickReply => { return self.UpdateDeleteQuickReply.size(); },
                .UpdateQuickReplyMessage => { return self.UpdateQuickReplyMessage.size(); },
                .UpdateDeleteQuickReplyMessages => { return self.UpdateDeleteQuickReplyMessages.size(); },
                .UpdateBotBusinessConnect => { return self.UpdateBotBusinessConnect.size(); },
                .UpdateBotNewBusinessMessage => { return self.UpdateBotNewBusinessMessage.size(); },
                .UpdateBotEditBusinessMessage => { return self.UpdateBotEditBusinessMessage.size(); },
                .UpdateBotDeleteBusinessMessage => { return self.UpdateBotDeleteBusinessMessage.size(); },
                .UpdateNewStoryReaction => { return self.UpdateNewStoryReaction.size(); },
                .UpdateBroadcastRevenueTransactions => { return self.UpdateBroadcastRevenueTransactions.size(); },
                .UpdateStarsBalance => { return self.UpdateStarsBalance.size(); },
                .UpdateBusinessBotCallbackQuery => { return self.UpdateBusinessBotCallbackQuery.size(); },
                .UpdateStarsRevenueStatus => { return self.UpdateStarsRevenueStatus.size(); },
                .UpdateBotPurchasedPaidMedia => { return self.UpdateBotPurchasedPaidMedia.size(); },
                .UpdatePaidReactionPrivacy => { return self.UpdatePaidReactionPrivacy.size(); },
        }
    }
};
const UpdatesStateEnumID = enum(u32) {
    UpdatesState = 2775329342,
};
const IUpdatesState = union(UpdatesStateEnumID) {
    UpdatesState: *const UpdatesState,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .UpdatesState => { return self.UpdatesState.size(); },
        }
    }
};
const UpdatesDifferenceEnumID = enum(u32) {
    UpdatesDifferenceEmpty = 1567990072,
    UpdatesDifference = 16030880,
    UpdatesDifferenceSlice = 2835028353,
    UpdatesDifferenceTooLong = 1258196845,
};
const IUpdatesDifference = union(UpdatesDifferenceEnumID) {
    UpdatesDifferenceEmpty: *const UpdatesDifferenceEmpty,
    UpdatesDifference: *const UpdatesDifference,
    UpdatesDifferenceSlice: *const UpdatesDifferenceSlice,
    UpdatesDifferenceTooLong: *const UpdatesDifferenceTooLong,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .UpdatesDifferenceEmpty => { return self.UpdatesDifferenceEmpty.size(); },
                .UpdatesDifference => { return self.UpdatesDifference.size(); },
                .UpdatesDifferenceSlice => { return self.UpdatesDifferenceSlice.size(); },
                .UpdatesDifferenceTooLong => { return self.UpdatesDifferenceTooLong.size(); },
        }
    }
};
const UpdatesEnumID = enum(u32) {
    UpdatesTooLong = 3809980286,
    UpdateShortMessage = 826001400,
    UpdateShortChatMessage = 1299050149,
    UpdateShort = 2027216577,
    UpdatesCombined = 1918567619,
    Updates = 1957577280,
    UpdateShortSentMessage = 2417352961,
};
const IUpdates = union(UpdatesEnumID) {
    UpdatesTooLong: *const UpdatesTooLong,
    UpdateShortMessage: *const UpdateShortMessage,
    UpdateShortChatMessage: *const UpdateShortChatMessage,
    UpdateShort: *const UpdateShort,
    UpdatesCombined: *const UpdatesCombined,
    Updates: *const Updates,
    UpdateShortSentMessage: *const UpdateShortSentMessage,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .UpdatesTooLong => { return self.UpdatesTooLong.size(); },
                .UpdateShortMessage => { return self.UpdateShortMessage.size(); },
                .UpdateShortChatMessage => { return self.UpdateShortChatMessage.size(); },
                .UpdateShort => { return self.UpdateShort.size(); },
                .UpdatesCombined => { return self.UpdatesCombined.size(); },
                .Updates => { return self.Updates.size(); },
                .UpdateShortSentMessage => { return self.UpdateShortSentMessage.size(); },
        }
    }
};
const PhotosPhotosEnumID = enum(u32) {
    PhotosPhotos = 2378853029,
    PhotosPhotosSlice = 352657236,
};
const IPhotosPhotos = union(PhotosPhotosEnumID) {
    PhotosPhotos: *const PhotosPhotos,
    PhotosPhotosSlice: *const PhotosPhotosSlice,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .PhotosPhotos => { return self.PhotosPhotos.size(); },
                .PhotosPhotosSlice => { return self.PhotosPhotosSlice.size(); },
        }
    }
};
const PhotosPhotoEnumID = enum(u32) {
    PhotosPhoto = 539045032,
};
const IPhotosPhoto = union(PhotosPhotoEnumID) {
    PhotosPhoto: *const PhotosPhoto,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .PhotosPhoto => { return self.PhotosPhoto.size(); },
        }
    }
};
const UploadFileEnumID = enum(u32) {
    UploadFile = 157948117,
    UploadFileCdnRedirect = 4052539972,
};
const IUploadFile = union(UploadFileEnumID) {
    UploadFile: *const UploadFile,
    UploadFileCdnRedirect: *const UploadFileCdnRedirect,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .UploadFile => { return self.UploadFile.size(); },
                .UploadFileCdnRedirect => { return self.UploadFileCdnRedirect.size(); },
        }
    }
};
const DcOptionEnumID = enum(u32) {
    DcOption = 414687501,
};
const IDcOption = union(DcOptionEnumID) {
    DcOption: *const DcOption,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .DcOption => { return self.DcOption.size(); },
        }
    }
};
const ConfigEnumID = enum(u32) {
    Config = 3424265246,
};
const IConfig = union(ConfigEnumID) {
    Config: *const Config,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .Config => { return self.Config.size(); },
        }
    }
};
const NearestDcEnumID = enum(u32) {
    NearestDc = 2384074613,
};
const INearestDc = union(NearestDcEnumID) {
    NearestDc: *const NearestDc,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .NearestDc => { return self.NearestDc.size(); },
        }
    }
};
const HelpAppUpdateEnumID = enum(u32) {
    HelpAppUpdate = 3434860080,
    HelpNoAppUpdate = 3294258486,
};
const IHelpAppUpdate = union(HelpAppUpdateEnumID) {
    HelpAppUpdate: *const HelpAppUpdate,
    HelpNoAppUpdate: *const HelpNoAppUpdate,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .HelpAppUpdate => { return self.HelpAppUpdate.size(); },
                .HelpNoAppUpdate => { return self.HelpNoAppUpdate.size(); },
        }
    }
};
const HelpInviteTextEnumID = enum(u32) {
    HelpInviteText = 415997816,
};
const IHelpInviteText = union(HelpInviteTextEnumID) {
    HelpInviteText: *const HelpInviteText,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .HelpInviteText => { return self.HelpInviteText.size(); },
        }
    }
};
const EncryptedChatEnumID = enum(u32) {
    EncryptedChatEmpty = 2877210784,
    EncryptedChatWaiting = 1722964307,
    EncryptedChatRequested = 1223809356,
    EncryptedChat = 1643173063,
    EncryptedChatDiscarded = 505183301,
};
const IEncryptedChat = union(EncryptedChatEnumID) {
    EncryptedChatEmpty: *const EncryptedChatEmpty,
    EncryptedChatWaiting: *const EncryptedChatWaiting,
    EncryptedChatRequested: *const EncryptedChatRequested,
    EncryptedChat: *const EncryptedChat,
    EncryptedChatDiscarded: *const EncryptedChatDiscarded,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .EncryptedChatEmpty => { return self.EncryptedChatEmpty.size(); },
                .EncryptedChatWaiting => { return self.EncryptedChatWaiting.size(); },
                .EncryptedChatRequested => { return self.EncryptedChatRequested.size(); },
                .EncryptedChat => { return self.EncryptedChat.size(); },
                .EncryptedChatDiscarded => { return self.EncryptedChatDiscarded.size(); },
        }
    }
};
const InputEncryptedChatEnumID = enum(u32) {
    InputEncryptedChat = 4047615457,
};
const IInputEncryptedChat = union(InputEncryptedChatEnumID) {
    InputEncryptedChat: *const InputEncryptedChat,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .InputEncryptedChat => { return self.InputEncryptedChat.size(); },
        }
    }
};
const EncryptedFileEnumID = enum(u32) {
    EncryptedFileEmpty = 3256830334,
    EncryptedFile = 2818608344,
};
const IEncryptedFile = union(EncryptedFileEnumID) {
    EncryptedFileEmpty: *const EncryptedFileEmpty,
    EncryptedFile: *const EncryptedFile,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .EncryptedFileEmpty => { return self.EncryptedFileEmpty.size(); },
                .EncryptedFile => { return self.EncryptedFile.size(); },
        }
    }
};
const InputEncryptedFileEnumID = enum(u32) {
    InputEncryptedFileEmpty = 406307684,
    InputEncryptedFileUploaded = 1690108678,
    InputEncryptedFile = 1511503333,
    InputEncryptedFileBigUploaded = 767652808,
};
const IInputEncryptedFile = union(InputEncryptedFileEnumID) {
    InputEncryptedFileEmpty: *const InputEncryptedFileEmpty,
    InputEncryptedFileUploaded: *const InputEncryptedFileUploaded,
    InputEncryptedFile: *const InputEncryptedFile,
    InputEncryptedFileBigUploaded: *const InputEncryptedFileBigUploaded,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .InputEncryptedFileEmpty => { return self.InputEncryptedFileEmpty.size(); },
                .InputEncryptedFileUploaded => { return self.InputEncryptedFileUploaded.size(); },
                .InputEncryptedFile => { return self.InputEncryptedFile.size(); },
                .InputEncryptedFileBigUploaded => { return self.InputEncryptedFileBigUploaded.size(); },
        }
    }
};
const EncryptedMessageEnumID = enum(u32) {
    EncryptedMessage = 3977822488,
    EncryptedMessageService = 594758406,
};
const IEncryptedMessage = union(EncryptedMessageEnumID) {
    EncryptedMessage: *const EncryptedMessage,
    EncryptedMessageService: *const EncryptedMessageService,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .EncryptedMessage => { return self.EncryptedMessage.size(); },
                .EncryptedMessageService => { return self.EncryptedMessageService.size(); },
        }
    }
};
const MessagesDhConfigEnumID = enum(u32) {
    MessagesDhConfigNotModified = 3236054581,
    MessagesDhConfig = 740433629,
};
const IMessagesDhConfig = union(MessagesDhConfigEnumID) {
    MessagesDhConfigNotModified: *const MessagesDhConfigNotModified,
    MessagesDhConfig: *const MessagesDhConfig,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .MessagesDhConfigNotModified => { return self.MessagesDhConfigNotModified.size(); },
                .MessagesDhConfig => { return self.MessagesDhConfig.size(); },
        }
    }
};
const MessagesSentEncryptedMessageEnumID = enum(u32) {
    MessagesSentEncryptedMessage = 1443858741,
    MessagesSentEncryptedFile = 2492727090,
};
const IMessagesSentEncryptedMessage = union(MessagesSentEncryptedMessageEnumID) {
    MessagesSentEncryptedMessage: *const MessagesSentEncryptedMessage,
    MessagesSentEncryptedFile: *const MessagesSentEncryptedFile,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .MessagesSentEncryptedMessage => { return self.MessagesSentEncryptedMessage.size(); },
                .MessagesSentEncryptedFile => { return self.MessagesSentEncryptedFile.size(); },
        }
    }
};
const InputDocumentEnumID = enum(u32) {
    InputDocumentEmpty = 1928391342,
    InputDocument = 448771445,
};
const IInputDocument = union(InputDocumentEnumID) {
    InputDocumentEmpty: *const InputDocumentEmpty,
    InputDocument: *const InputDocument,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .InputDocumentEmpty => { return self.InputDocumentEmpty.size(); },
                .InputDocument => { return self.InputDocument.size(); },
        }
    }
};
const DocumentEnumID = enum(u32) {
    DocumentEmpty = 922273905,
    Document = 2413085912,
};
const IDocument = union(DocumentEnumID) {
    DocumentEmpty: *const DocumentEmpty,
    Document: *const Document,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .DocumentEmpty => { return self.DocumentEmpty.size(); },
                .Document => { return self.Document.size(); },
        }
    }
};
const HelpSupportEnumID = enum(u32) {
    HelpSupport = 398898678,
};
const IHelpSupport = union(HelpSupportEnumID) {
    HelpSupport: *const HelpSupport,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .HelpSupport => { return self.HelpSupport.size(); },
        }
    }
};
const NotifyPeerEnumID = enum(u32) {
    NotifyPeer = 2681474008,
    NotifyUsers = 3033021260,
    NotifyChats = 3221737155,
    NotifyBroadcasts = 3591563503,
    NotifyForumTopic = 577659656,
};
const INotifyPeer = union(NotifyPeerEnumID) {
    NotifyPeer: *const NotifyPeer,
    NotifyUsers: *const NotifyUsers,
    NotifyChats: *const NotifyChats,
    NotifyBroadcasts: *const NotifyBroadcasts,
    NotifyForumTopic: *const NotifyForumTopic,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .NotifyPeer => { return self.NotifyPeer.size(); },
                .NotifyUsers => { return self.NotifyUsers.size(); },
                .NotifyChats => { return self.NotifyChats.size(); },
                .NotifyBroadcasts => { return self.NotifyBroadcasts.size(); },
                .NotifyForumTopic => { return self.NotifyForumTopic.size(); },
        }
    }
};
const SendMessageActionEnumID = enum(u32) {
    SendMessageTypingAction = 381645902,
    SendMessageCancelAction = 4250847477,
    SendMessageRecordVideoAction = 2710034031,
    SendMessageUploadVideoAction = 3916839660,
    SendMessageRecordAudioAction = 3576656887,
    SendMessageUploadAudioAction = 4082227115,
    SendMessageUploadPhotoAction = 3520285222,
    SendMessageUploadDocumentAction = 2852968932,
    SendMessageGeoLocationAction = 393186209,
    SendMessageChooseContactAction = 1653390447,
    SendMessageGamePlayAction = 3714748232,
    SendMessageRecordRoundAction = 2297593788,
    SendMessageUploadRoundAction = 608050278,
    SpeakingInGroupCallAction = 3643548293,
    SendMessageHistoryImportAction = 3688534598,
    SendMessageChooseStickerAction = 2958739121,
    SendMessageEmojiInteraction = 630664139,
    SendMessageEmojiInteractionSeen = 3060109358,
};
const ISendMessageAction = union(SendMessageActionEnumID) {
    SendMessageTypingAction: *const SendMessageTypingAction,
    SendMessageCancelAction: *const SendMessageCancelAction,
    SendMessageRecordVideoAction: *const SendMessageRecordVideoAction,
    SendMessageUploadVideoAction: *const SendMessageUploadVideoAction,
    SendMessageRecordAudioAction: *const SendMessageRecordAudioAction,
    SendMessageUploadAudioAction: *const SendMessageUploadAudioAction,
    SendMessageUploadPhotoAction: *const SendMessageUploadPhotoAction,
    SendMessageUploadDocumentAction: *const SendMessageUploadDocumentAction,
    SendMessageGeoLocationAction: *const SendMessageGeoLocationAction,
    SendMessageChooseContactAction: *const SendMessageChooseContactAction,
    SendMessageGamePlayAction: *const SendMessageGamePlayAction,
    SendMessageRecordRoundAction: *const SendMessageRecordRoundAction,
    SendMessageUploadRoundAction: *const SendMessageUploadRoundAction,
    SpeakingInGroupCallAction: *const SpeakingInGroupCallAction,
    SendMessageHistoryImportAction: *const SendMessageHistoryImportAction,
    SendMessageChooseStickerAction: *const SendMessageChooseStickerAction,
    SendMessageEmojiInteraction: *const SendMessageEmojiInteraction,
    SendMessageEmojiInteractionSeen: *const SendMessageEmojiInteractionSeen,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .SendMessageTypingAction => { return self.SendMessageTypingAction.size(); },
                .SendMessageCancelAction => { return self.SendMessageCancelAction.size(); },
                .SendMessageRecordVideoAction => { return self.SendMessageRecordVideoAction.size(); },
                .SendMessageUploadVideoAction => { return self.SendMessageUploadVideoAction.size(); },
                .SendMessageRecordAudioAction => { return self.SendMessageRecordAudioAction.size(); },
                .SendMessageUploadAudioAction => { return self.SendMessageUploadAudioAction.size(); },
                .SendMessageUploadPhotoAction => { return self.SendMessageUploadPhotoAction.size(); },
                .SendMessageUploadDocumentAction => { return self.SendMessageUploadDocumentAction.size(); },
                .SendMessageGeoLocationAction => { return self.SendMessageGeoLocationAction.size(); },
                .SendMessageChooseContactAction => { return self.SendMessageChooseContactAction.size(); },
                .SendMessageGamePlayAction => { return self.SendMessageGamePlayAction.size(); },
                .SendMessageRecordRoundAction => { return self.SendMessageRecordRoundAction.size(); },
                .SendMessageUploadRoundAction => { return self.SendMessageUploadRoundAction.size(); },
                .SpeakingInGroupCallAction => { return self.SpeakingInGroupCallAction.size(); },
                .SendMessageHistoryImportAction => { return self.SendMessageHistoryImportAction.size(); },
                .SendMessageChooseStickerAction => { return self.SendMessageChooseStickerAction.size(); },
                .SendMessageEmojiInteraction => { return self.SendMessageEmojiInteraction.size(); },
                .SendMessageEmojiInteractionSeen => { return self.SendMessageEmojiInteractionSeen.size(); },
        }
    }
};
const ContactsFoundEnumID = enum(u32) {
    ContactsFound = 3004386717,
};
const IContactsFound = union(ContactsFoundEnumID) {
    ContactsFound: *const ContactsFound,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .ContactsFound => { return self.ContactsFound.size(); },
        }
    }
};
const InputPrivacyKeyEnumID = enum(u32) {
    InputPrivacyKeyStatusTimestamp = 1335282456,
    InputPrivacyKeyChatInvite = 3187344422,
    InputPrivacyKeyPhoneCall = 4206550111,
    InputPrivacyKeyPhoneP2P = 3684593874,
    InputPrivacyKeyForwards = 2765966344,
    InputPrivacyKeyProfilePhoto = 1461304012,
    InputPrivacyKeyPhoneNumber = 55761658,
    InputPrivacyKeyAddedByPhone = 3508640733,
    InputPrivacyKeyVoiceMessages = 2934349160,
    InputPrivacyKeyAbout = 941870144,
    InputPrivacyKeyBirthday = 3596227020,
};
const IInputPrivacyKey = union(InputPrivacyKeyEnumID) {
    InputPrivacyKeyStatusTimestamp: *const InputPrivacyKeyStatusTimestamp,
    InputPrivacyKeyChatInvite: *const InputPrivacyKeyChatInvite,
    InputPrivacyKeyPhoneCall: *const InputPrivacyKeyPhoneCall,
    InputPrivacyKeyPhoneP2P: *const InputPrivacyKeyPhoneP2P,
    InputPrivacyKeyForwards: *const InputPrivacyKeyForwards,
    InputPrivacyKeyProfilePhoto: *const InputPrivacyKeyProfilePhoto,
    InputPrivacyKeyPhoneNumber: *const InputPrivacyKeyPhoneNumber,
    InputPrivacyKeyAddedByPhone: *const InputPrivacyKeyAddedByPhone,
    InputPrivacyKeyVoiceMessages: *const InputPrivacyKeyVoiceMessages,
    InputPrivacyKeyAbout: *const InputPrivacyKeyAbout,
    InputPrivacyKeyBirthday: *const InputPrivacyKeyBirthday,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .InputPrivacyKeyStatusTimestamp => { return self.InputPrivacyKeyStatusTimestamp.size(); },
                .InputPrivacyKeyChatInvite => { return self.InputPrivacyKeyChatInvite.size(); },
                .InputPrivacyKeyPhoneCall => { return self.InputPrivacyKeyPhoneCall.size(); },
                .InputPrivacyKeyPhoneP2P => { return self.InputPrivacyKeyPhoneP2P.size(); },
                .InputPrivacyKeyForwards => { return self.InputPrivacyKeyForwards.size(); },
                .InputPrivacyKeyProfilePhoto => { return self.InputPrivacyKeyProfilePhoto.size(); },
                .InputPrivacyKeyPhoneNumber => { return self.InputPrivacyKeyPhoneNumber.size(); },
                .InputPrivacyKeyAddedByPhone => { return self.InputPrivacyKeyAddedByPhone.size(); },
                .InputPrivacyKeyVoiceMessages => { return self.InputPrivacyKeyVoiceMessages.size(); },
                .InputPrivacyKeyAbout => { return self.InputPrivacyKeyAbout.size(); },
                .InputPrivacyKeyBirthday => { return self.InputPrivacyKeyBirthday.size(); },
        }
    }
};
const PrivacyKeyEnumID = enum(u32) {
    PrivacyKeyStatusTimestamp = 3157175088,
    PrivacyKeyChatInvite = 1343122938,
    PrivacyKeyPhoneCall = 1030105979,
    PrivacyKeyPhoneP2P = 961092808,
    PrivacyKeyForwards = 1777096355,
    PrivacyKeyProfilePhoto = 2517966829,
    PrivacyKeyPhoneNumber = 3516589165,
    PrivacyKeyAddedByPhone = 1124062251,
    PrivacyKeyVoiceMessages = 110621716,
    PrivacyKeyAbout = 2760292193,
    PrivacyKeyBirthday = 536913176,
};
const IPrivacyKey = union(PrivacyKeyEnumID) {
    PrivacyKeyStatusTimestamp: *const PrivacyKeyStatusTimestamp,
    PrivacyKeyChatInvite: *const PrivacyKeyChatInvite,
    PrivacyKeyPhoneCall: *const PrivacyKeyPhoneCall,
    PrivacyKeyPhoneP2P: *const PrivacyKeyPhoneP2P,
    PrivacyKeyForwards: *const PrivacyKeyForwards,
    PrivacyKeyProfilePhoto: *const PrivacyKeyProfilePhoto,
    PrivacyKeyPhoneNumber: *const PrivacyKeyPhoneNumber,
    PrivacyKeyAddedByPhone: *const PrivacyKeyAddedByPhone,
    PrivacyKeyVoiceMessages: *const PrivacyKeyVoiceMessages,
    PrivacyKeyAbout: *const PrivacyKeyAbout,
    PrivacyKeyBirthday: *const PrivacyKeyBirthday,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .PrivacyKeyStatusTimestamp => { return self.PrivacyKeyStatusTimestamp.size(); },
                .PrivacyKeyChatInvite => { return self.PrivacyKeyChatInvite.size(); },
                .PrivacyKeyPhoneCall => { return self.PrivacyKeyPhoneCall.size(); },
                .PrivacyKeyPhoneP2P => { return self.PrivacyKeyPhoneP2P.size(); },
                .PrivacyKeyForwards => { return self.PrivacyKeyForwards.size(); },
                .PrivacyKeyProfilePhoto => { return self.PrivacyKeyProfilePhoto.size(); },
                .PrivacyKeyPhoneNumber => { return self.PrivacyKeyPhoneNumber.size(); },
                .PrivacyKeyAddedByPhone => { return self.PrivacyKeyAddedByPhone.size(); },
                .PrivacyKeyVoiceMessages => { return self.PrivacyKeyVoiceMessages.size(); },
                .PrivacyKeyAbout => { return self.PrivacyKeyAbout.size(); },
                .PrivacyKeyBirthday => { return self.PrivacyKeyBirthday.size(); },
        }
    }
};
const InputPrivacyRuleEnumID = enum(u32) {
    InputPrivacyValueAllowContacts = 218751099,
    InputPrivacyValueAllowAll = 407582158,
    InputPrivacyValueAllowUsers = 320652927,
    InputPrivacyValueDisallowContacts = 195371015,
    InputPrivacyValueDisallowAll = 3597362889,
    InputPrivacyValueDisallowUsers = 2417034343,
    InputPrivacyValueAllowChatParticipants = 2215004623,
    InputPrivacyValueDisallowChatParticipants = 3914272646,
    InputPrivacyValueAllowCloseFriends = 793067081,
    InputPrivacyValueAllowPremium = 2009975281,
};
const IInputPrivacyRule = union(InputPrivacyRuleEnumID) {
    InputPrivacyValueAllowContacts: *const InputPrivacyValueAllowContacts,
    InputPrivacyValueAllowAll: *const InputPrivacyValueAllowAll,
    InputPrivacyValueAllowUsers: *const InputPrivacyValueAllowUsers,
    InputPrivacyValueDisallowContacts: *const InputPrivacyValueDisallowContacts,
    InputPrivacyValueDisallowAll: *const InputPrivacyValueDisallowAll,
    InputPrivacyValueDisallowUsers: *const InputPrivacyValueDisallowUsers,
    InputPrivacyValueAllowChatParticipants: *const InputPrivacyValueAllowChatParticipants,
    InputPrivacyValueDisallowChatParticipants: *const InputPrivacyValueDisallowChatParticipants,
    InputPrivacyValueAllowCloseFriends: *const InputPrivacyValueAllowCloseFriends,
    InputPrivacyValueAllowPremium: *const InputPrivacyValueAllowPremium,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .InputPrivacyValueAllowContacts => { return self.InputPrivacyValueAllowContacts.size(); },
                .InputPrivacyValueAllowAll => { return self.InputPrivacyValueAllowAll.size(); },
                .InputPrivacyValueAllowUsers => { return self.InputPrivacyValueAllowUsers.size(); },
                .InputPrivacyValueDisallowContacts => { return self.InputPrivacyValueDisallowContacts.size(); },
                .InputPrivacyValueDisallowAll => { return self.InputPrivacyValueDisallowAll.size(); },
                .InputPrivacyValueDisallowUsers => { return self.InputPrivacyValueDisallowUsers.size(); },
                .InputPrivacyValueAllowChatParticipants => { return self.InputPrivacyValueAllowChatParticipants.size(); },
                .InputPrivacyValueDisallowChatParticipants => { return self.InputPrivacyValueDisallowChatParticipants.size(); },
                .InputPrivacyValueAllowCloseFriends => { return self.InputPrivacyValueAllowCloseFriends.size(); },
                .InputPrivacyValueAllowPremium => { return self.InputPrivacyValueAllowPremium.size(); },
        }
    }
};
const PrivacyRuleEnumID = enum(u32) {
    PrivacyValueAllowContacts = 4294843308,
    PrivacyValueAllowAll = 1698855810,
    PrivacyValueAllowUsers = 3096469426,
    PrivacyValueDisallowContacts = 4169726490,
    PrivacyValueDisallowAll = 2339628899,
    PrivacyValueDisallowUsers = 3831632193,
    PrivacyValueAllowChatParticipants = 1796427406,
    PrivacyValueDisallowChatParticipants = 1103656293,
    PrivacyValueAllowCloseFriends = 4159232155,
    PrivacyValueAllowPremium = 3974725963,
};
const IPrivacyRule = union(PrivacyRuleEnumID) {
    PrivacyValueAllowContacts: *const PrivacyValueAllowContacts,
    PrivacyValueAllowAll: *const PrivacyValueAllowAll,
    PrivacyValueAllowUsers: *const PrivacyValueAllowUsers,
    PrivacyValueDisallowContacts: *const PrivacyValueDisallowContacts,
    PrivacyValueDisallowAll: *const PrivacyValueDisallowAll,
    PrivacyValueDisallowUsers: *const PrivacyValueDisallowUsers,
    PrivacyValueAllowChatParticipants: *const PrivacyValueAllowChatParticipants,
    PrivacyValueDisallowChatParticipants: *const PrivacyValueDisallowChatParticipants,
    PrivacyValueAllowCloseFriends: *const PrivacyValueAllowCloseFriends,
    PrivacyValueAllowPremium: *const PrivacyValueAllowPremium,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .PrivacyValueAllowContacts => { return self.PrivacyValueAllowContacts.size(); },
                .PrivacyValueAllowAll => { return self.PrivacyValueAllowAll.size(); },
                .PrivacyValueAllowUsers => { return self.PrivacyValueAllowUsers.size(); },
                .PrivacyValueDisallowContacts => { return self.PrivacyValueDisallowContacts.size(); },
                .PrivacyValueDisallowAll => { return self.PrivacyValueDisallowAll.size(); },
                .PrivacyValueDisallowUsers => { return self.PrivacyValueDisallowUsers.size(); },
                .PrivacyValueAllowChatParticipants => { return self.PrivacyValueAllowChatParticipants.size(); },
                .PrivacyValueDisallowChatParticipants => { return self.PrivacyValueDisallowChatParticipants.size(); },
                .PrivacyValueAllowCloseFriends => { return self.PrivacyValueAllowCloseFriends.size(); },
                .PrivacyValueAllowPremium => { return self.PrivacyValueAllowPremium.size(); },
        }
    }
};
const AccountPrivacyRulesEnumID = enum(u32) {
    AccountPrivacyRules = 1352683077,
};
const IAccountPrivacyRules = union(AccountPrivacyRulesEnumID) {
    AccountPrivacyRules: *const AccountPrivacyRules,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .AccountPrivacyRules => { return self.AccountPrivacyRules.size(); },
        }
    }
};
const AccountDaysTTLEnumID = enum(u32) {
    AccountDaysTTL = 3100684255,
};
const IAccountDaysTTL = union(AccountDaysTTLEnumID) {
    AccountDaysTTL: *const AccountDaysTTL,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .AccountDaysTTL => { return self.AccountDaysTTL.size(); },
        }
    }
};
const DocumentAttributeEnumID = enum(u32) {
    DocumentAttributeImageSize = 1815593308,
    DocumentAttributeAnimated = 297109817,
    DocumentAttributeSticker = 1662637586,
    DocumentAttributeVideo = 1137015880,
    DocumentAttributeAudio = 2555574726,
    DocumentAttributeFilename = 358154344,
    DocumentAttributeHasStickers = 2550256375,
    DocumentAttributeCustomEmoji = 4245985433,
};
const IDocumentAttribute = union(DocumentAttributeEnumID) {
    DocumentAttributeImageSize: *const DocumentAttributeImageSize,
    DocumentAttributeAnimated: *const DocumentAttributeAnimated,
    DocumentAttributeSticker: *const DocumentAttributeSticker,
    DocumentAttributeVideo: *const DocumentAttributeVideo,
    DocumentAttributeAudio: *const DocumentAttributeAudio,
    DocumentAttributeFilename: *const DocumentAttributeFilename,
    DocumentAttributeHasStickers: *const DocumentAttributeHasStickers,
    DocumentAttributeCustomEmoji: *const DocumentAttributeCustomEmoji,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .DocumentAttributeImageSize => { return self.DocumentAttributeImageSize.size(); },
                .DocumentAttributeAnimated => { return self.DocumentAttributeAnimated.size(); },
                .DocumentAttributeSticker => { return self.DocumentAttributeSticker.size(); },
                .DocumentAttributeVideo => { return self.DocumentAttributeVideo.size(); },
                .DocumentAttributeAudio => { return self.DocumentAttributeAudio.size(); },
                .DocumentAttributeFilename => { return self.DocumentAttributeFilename.size(); },
                .DocumentAttributeHasStickers => { return self.DocumentAttributeHasStickers.size(); },
                .DocumentAttributeCustomEmoji => { return self.DocumentAttributeCustomEmoji.size(); },
        }
    }
};
const MessagesStickersEnumID = enum(u32) {
    MessagesStickersNotModified = 4050950690,
    MessagesStickers = 816245886,
};
const IMessagesStickers = union(MessagesStickersEnumID) {
    MessagesStickersNotModified: *const MessagesStickersNotModified,
    MessagesStickers: *const MessagesStickers,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .MessagesStickersNotModified => { return self.MessagesStickersNotModified.size(); },
                .MessagesStickers => { return self.MessagesStickers.size(); },
        }
    }
};
const StickerPackEnumID = enum(u32) {
    StickerPack = 313694676,
};
const IStickerPack = union(StickerPackEnumID) {
    StickerPack: *const StickerPack,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .StickerPack => { return self.StickerPack.size(); },
        }
    }
};
const MessagesAllStickersEnumID = enum(u32) {
    MessagesAllStickersNotModified = 3898999491,
    MessagesAllStickers = 3451637435,
};
const IMessagesAllStickers = union(MessagesAllStickersEnumID) {
    MessagesAllStickersNotModified: *const MessagesAllStickersNotModified,
    MessagesAllStickers: *const MessagesAllStickers,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .MessagesAllStickersNotModified => { return self.MessagesAllStickersNotModified.size(); },
                .MessagesAllStickers => { return self.MessagesAllStickers.size(); },
        }
    }
};
const MessagesAffectedMessagesEnumID = enum(u32) {
    MessagesAffectedMessages = 2228326789,
};
const IMessagesAffectedMessages = union(MessagesAffectedMessagesEnumID) {
    MessagesAffectedMessages: *const MessagesAffectedMessages,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .MessagesAffectedMessages => { return self.MessagesAffectedMessages.size(); },
        }
    }
};
const WebPageEnumID = enum(u32) {
    WebPageEmpty = 555358088,
    WebPagePending = 2966502983,
    WebPage = 3902555570,
    WebPageNotModified = 1930545681,
};
const IWebPage = union(WebPageEnumID) {
    WebPageEmpty: *const WebPageEmpty,
    WebPagePending: *const WebPagePending,
    WebPage: *const WebPage,
    WebPageNotModified: *const WebPageNotModified,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .WebPageEmpty => { return self.WebPageEmpty.size(); },
                .WebPagePending => { return self.WebPagePending.size(); },
                .WebPage => { return self.WebPage.size(); },
                .WebPageNotModified => { return self.WebPageNotModified.size(); },
        }
    }
};
const AuthorizationEnumID = enum(u32) {
    Authorization = 2902578717,
};
const IAuthorization = union(AuthorizationEnumID) {
    Authorization: *const Authorization,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .Authorization => { return self.Authorization.size(); },
        }
    }
};
const AccountAuthorizationsEnumID = enum(u32) {
    AccountAuthorizations = 1275039392,
};
const IAccountAuthorizations = union(AccountAuthorizationsEnumID) {
    AccountAuthorizations: *const AccountAuthorizations,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .AccountAuthorizations => { return self.AccountAuthorizations.size(); },
        }
    }
};
const AccountPasswordEnumID = enum(u32) {
    AccountPassword = 2507886843,
};
const IAccountPassword = union(AccountPasswordEnumID) {
    AccountPassword: *const AccountPassword,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .AccountPassword => { return self.AccountPassword.size(); },
        }
    }
};
const AccountPasswordSettingsEnumID = enum(u32) {
    AccountPasswordSettings = 2589733861,
};
const IAccountPasswordSettings = union(AccountPasswordSettingsEnumID) {
    AccountPasswordSettings: *const AccountPasswordSettings,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .AccountPasswordSettings => { return self.AccountPasswordSettings.size(); },
        }
    }
};
const AccountPasswordInputSettingsEnumID = enum(u32) {
    AccountPasswordInputSettings = 3258394569,
};
const IAccountPasswordInputSettings = union(AccountPasswordInputSettingsEnumID) {
    AccountPasswordInputSettings: *const AccountPasswordInputSettings,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .AccountPasswordInputSettings => { return self.AccountPasswordInputSettings.size(); },
        }
    }
};
const AuthPasswordRecoveryEnumID = enum(u32) {
    AuthPasswordRecovery = 326715557,
};
const IAuthPasswordRecovery = union(AuthPasswordRecoveryEnumID) {
    AuthPasswordRecovery: *const AuthPasswordRecovery,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .AuthPasswordRecovery => { return self.AuthPasswordRecovery.size(); },
        }
    }
};
const ReceivedNotifyMessageEnumID = enum(u32) {
    ReceivedNotifyMessage = 2743383929,
};
const IReceivedNotifyMessage = union(ReceivedNotifyMessageEnumID) {
    ReceivedNotifyMessage: *const ReceivedNotifyMessage,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .ReceivedNotifyMessage => { return self.ReceivedNotifyMessage.size(); },
        }
    }
};
const ExportedChatInviteEnumID = enum(u32) {
    ChatInviteExported = 2720841110,
    ChatInvitePublicJoinRequests = 3977280183,
};
const IExportedChatInvite = union(ExportedChatInviteEnumID) {
    ChatInviteExported: *const ChatInviteExported,
    ChatInvitePublicJoinRequests: *const ChatInvitePublicJoinRequests,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .ChatInviteExported => { return self.ChatInviteExported.size(); },
                .ChatInvitePublicJoinRequests => { return self.ChatInvitePublicJoinRequests.size(); },
        }
    }
};
const ChatInviteEnumID = enum(u32) {
    ChatInviteAlready = 1516793212,
    ChatInvite = 4268046493,
    ChatInvitePeek = 1634294960,
};
const IChatInvite = union(ChatInviteEnumID) {
    ChatInviteAlready: *const ChatInviteAlready,
    ChatInvite: *const ChatInvite,
    ChatInvitePeek: *const ChatInvitePeek,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .ChatInviteAlready => { return self.ChatInviteAlready.size(); },
                .ChatInvite => { return self.ChatInvite.size(); },
                .ChatInvitePeek => { return self.ChatInvitePeek.size(); },
        }
    }
};
const InputStickerSetEnumID = enum(u32) {
    InputStickerSetEmpty = 4290128789,
    InputStickerSetID = 2649203305,
    InputStickerSetShortName = 2250033312,
    InputStickerSetAnimatedEmoji = 42402760,
    InputStickerSetDice = 3867103758,
    InputStickerSetAnimatedEmojiAnimations = 215889721,
    InputStickerSetPremiumGifts = 3364567810,
    InputStickerSetEmojiGenericAnimations = 80008398,
    InputStickerSetEmojiDefaultStatuses = 701560302,
    InputStickerSetEmojiDefaultTopicIcons = 1153562857,
    InputStickerSetEmojiChannelDefaultStatuses = 1232373075,
};
const IInputStickerSet = union(InputStickerSetEnumID) {
    InputStickerSetEmpty: *const InputStickerSetEmpty,
    InputStickerSetID: *const InputStickerSetID,
    InputStickerSetShortName: *const InputStickerSetShortName,
    InputStickerSetAnimatedEmoji: *const InputStickerSetAnimatedEmoji,
    InputStickerSetDice: *const InputStickerSetDice,
    InputStickerSetAnimatedEmojiAnimations: *const InputStickerSetAnimatedEmojiAnimations,
    InputStickerSetPremiumGifts: *const InputStickerSetPremiumGifts,
    InputStickerSetEmojiGenericAnimations: *const InputStickerSetEmojiGenericAnimations,
    InputStickerSetEmojiDefaultStatuses: *const InputStickerSetEmojiDefaultStatuses,
    InputStickerSetEmojiDefaultTopicIcons: *const InputStickerSetEmojiDefaultTopicIcons,
    InputStickerSetEmojiChannelDefaultStatuses: *const InputStickerSetEmojiChannelDefaultStatuses,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .InputStickerSetEmpty => { return self.InputStickerSetEmpty.size(); },
                .InputStickerSetID => { return self.InputStickerSetID.size(); },
                .InputStickerSetShortName => { return self.InputStickerSetShortName.size(); },
                .InputStickerSetAnimatedEmoji => { return self.InputStickerSetAnimatedEmoji.size(); },
                .InputStickerSetDice => { return self.InputStickerSetDice.size(); },
                .InputStickerSetAnimatedEmojiAnimations => { return self.InputStickerSetAnimatedEmojiAnimations.size(); },
                .InputStickerSetPremiumGifts => { return self.InputStickerSetPremiumGifts.size(); },
                .InputStickerSetEmojiGenericAnimations => { return self.InputStickerSetEmojiGenericAnimations.size(); },
                .InputStickerSetEmojiDefaultStatuses => { return self.InputStickerSetEmojiDefaultStatuses.size(); },
                .InputStickerSetEmojiDefaultTopicIcons => { return self.InputStickerSetEmojiDefaultTopicIcons.size(); },
                .InputStickerSetEmojiChannelDefaultStatuses => { return self.InputStickerSetEmojiChannelDefaultStatuses.size(); },
        }
    }
};
const StickerSetEnumID = enum(u32) {
    StickerSet = 768691932,
};
const IStickerSet = union(StickerSetEnumID) {
    StickerSet: *const StickerSet,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .StickerSet => { return self.StickerSet.size(); },
        }
    }
};
const MessagesStickerSetEnumID = enum(u32) {
    MessagesStickerSet = 1846886166,
    MessagesStickerSetNotModified = 3556320491,
};
const IMessagesStickerSet = union(MessagesStickerSetEnumID) {
    MessagesStickerSet: *const MessagesStickerSet,
    MessagesStickerSetNotModified: *const MessagesStickerSetNotModified,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .MessagesStickerSet => { return self.MessagesStickerSet.size(); },
                .MessagesStickerSetNotModified => { return self.MessagesStickerSetNotModified.size(); },
        }
    }
};
const BotCommandEnumID = enum(u32) {
    BotCommand = 3262826695,
};
const IBotCommand = union(BotCommandEnumID) {
    BotCommand: *const BotCommand,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .BotCommand => { return self.BotCommand.size(); },
        }
    }
};
const BotInfoEnumID = enum(u32) {
    BotInfo = 2185461364,
};
const IBotInfo = union(BotInfoEnumID) {
    BotInfo: *const BotInfo,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .BotInfo => { return self.BotInfo.size(); },
        }
    }
};
const KeyboardButtonEnumID = enum(u32) {
    KeyboardButton = 2734311552,
    KeyboardButtonUrl = 629866245,
    KeyboardButtonCallback = 901503851,
    KeyboardButtonRequestPhone = 2976541737,
    KeyboardButtonRequestGeoLocation = 4235815743,
    KeyboardButtonSwitchInline = 2478439349,
    KeyboardButtonGame = 1358175439,
    KeyboardButtonBuy = 2950250427,
    KeyboardButtonUrlAuth = 280464681,
    InputKeyboardButtonUrlAuth = 3492708308,
    KeyboardButtonRequestPoll = 3150401885,
    InputKeyboardButtonUserProfile = 3918005115,
    KeyboardButtonUserProfile = 814112961,
    KeyboardButtonWebView = 326529584,
    KeyboardButtonSimpleWebView = 2696958044,
    KeyboardButtonRequestPeer = 1406648280,
    InputKeyboardButtonRequestPeer = 3378916613,
    KeyboardButtonCopy = 1976723854,
};
const IKeyboardButton = union(KeyboardButtonEnumID) {
    KeyboardButton: *const KeyboardButton,
    KeyboardButtonUrl: *const KeyboardButtonUrl,
    KeyboardButtonCallback: *const KeyboardButtonCallback,
    KeyboardButtonRequestPhone: *const KeyboardButtonRequestPhone,
    KeyboardButtonRequestGeoLocation: *const KeyboardButtonRequestGeoLocation,
    KeyboardButtonSwitchInline: *const KeyboardButtonSwitchInline,
    KeyboardButtonGame: *const KeyboardButtonGame,
    KeyboardButtonBuy: *const KeyboardButtonBuy,
    KeyboardButtonUrlAuth: *const KeyboardButtonUrlAuth,
    InputKeyboardButtonUrlAuth: *const InputKeyboardButtonUrlAuth,
    KeyboardButtonRequestPoll: *const KeyboardButtonRequestPoll,
    InputKeyboardButtonUserProfile: *const InputKeyboardButtonUserProfile,
    KeyboardButtonUserProfile: *const KeyboardButtonUserProfile,
    KeyboardButtonWebView: *const KeyboardButtonWebView,
    KeyboardButtonSimpleWebView: *const KeyboardButtonSimpleWebView,
    KeyboardButtonRequestPeer: *const KeyboardButtonRequestPeer,
    InputKeyboardButtonRequestPeer: *const InputKeyboardButtonRequestPeer,
    KeyboardButtonCopy: *const KeyboardButtonCopy,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .KeyboardButton => { return self.KeyboardButton.size(); },
                .KeyboardButtonUrl => { return self.KeyboardButtonUrl.size(); },
                .KeyboardButtonCallback => { return self.KeyboardButtonCallback.size(); },
                .KeyboardButtonRequestPhone => { return self.KeyboardButtonRequestPhone.size(); },
                .KeyboardButtonRequestGeoLocation => { return self.KeyboardButtonRequestGeoLocation.size(); },
                .KeyboardButtonSwitchInline => { return self.KeyboardButtonSwitchInline.size(); },
                .KeyboardButtonGame => { return self.KeyboardButtonGame.size(); },
                .KeyboardButtonBuy => { return self.KeyboardButtonBuy.size(); },
                .KeyboardButtonUrlAuth => { return self.KeyboardButtonUrlAuth.size(); },
                .InputKeyboardButtonUrlAuth => { return self.InputKeyboardButtonUrlAuth.size(); },
                .KeyboardButtonRequestPoll => { return self.KeyboardButtonRequestPoll.size(); },
                .InputKeyboardButtonUserProfile => { return self.InputKeyboardButtonUserProfile.size(); },
                .KeyboardButtonUserProfile => { return self.KeyboardButtonUserProfile.size(); },
                .KeyboardButtonWebView => { return self.KeyboardButtonWebView.size(); },
                .KeyboardButtonSimpleWebView => { return self.KeyboardButtonSimpleWebView.size(); },
                .KeyboardButtonRequestPeer => { return self.KeyboardButtonRequestPeer.size(); },
                .InputKeyboardButtonRequestPeer => { return self.InputKeyboardButtonRequestPeer.size(); },
                .KeyboardButtonCopy => { return self.KeyboardButtonCopy.size(); },
        }
    }
};
const KeyboardButtonRowEnumID = enum(u32) {
    KeyboardButtonRow = 2002815875,
};
const IKeyboardButtonRow = union(KeyboardButtonRowEnumID) {
    KeyboardButtonRow: *const KeyboardButtonRow,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .KeyboardButtonRow => { return self.KeyboardButtonRow.size(); },
        }
    }
};
const ReplyMarkupEnumID = enum(u32) {
    ReplyKeyboardHide = 2688441221,
    ReplyKeyboardForceReply = 2259946248,
    ReplyKeyboardMarkup = 2245892561,
    ReplyInlineMarkup = 1218642516,
};
const IReplyMarkup = union(ReplyMarkupEnumID) {
    ReplyKeyboardHide: *const ReplyKeyboardHide,
    ReplyKeyboardForceReply: *const ReplyKeyboardForceReply,
    ReplyKeyboardMarkup: *const ReplyKeyboardMarkup,
    ReplyInlineMarkup: *const ReplyInlineMarkup,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .ReplyKeyboardHide => { return self.ReplyKeyboardHide.size(); },
                .ReplyKeyboardForceReply => { return self.ReplyKeyboardForceReply.size(); },
                .ReplyKeyboardMarkup => { return self.ReplyKeyboardMarkup.size(); },
                .ReplyInlineMarkup => { return self.ReplyInlineMarkup.size(); },
        }
    }
};
const MessageEntityEnumID = enum(u32) {
    MessageEntityUnknown = 3146955413,
    MessageEntityMention = 4194588573,
    MessageEntityHashtag = 1868782349,
    MessageEntityBotCommand = 1827637959,
    MessageEntityUrl = 1859134776,
    MessageEntityEmail = 1692693954,
    MessageEntityBold = 3177253833,
    MessageEntityItalic = 2188348256,
    MessageEntityCode = 681706865,
    MessageEntityPre = 1938967520,
    MessageEntityTextUrl = 1990644519,
    MessageEntityMentionName = 3699052864,
    InputMessageEntityMentionName = 546203849,
    MessageEntityPhone = 2607407947,
    MessageEntityCashtag = 1280209983,
    MessageEntityUnderline = 2622389899,
    MessageEntityStrike = 3204879316,
    MessageEntityBankCard = 1981704948,
    MessageEntitySpoiler = 852137487,
    MessageEntityCustomEmoji = 3369010680,
    MessageEntityBlockquote = 4056722092,
};
const IMessageEntity = union(MessageEntityEnumID) {
    MessageEntityUnknown: *const MessageEntityUnknown,
    MessageEntityMention: *const MessageEntityMention,
    MessageEntityHashtag: *const MessageEntityHashtag,
    MessageEntityBotCommand: *const MessageEntityBotCommand,
    MessageEntityUrl: *const MessageEntityUrl,
    MessageEntityEmail: *const MessageEntityEmail,
    MessageEntityBold: *const MessageEntityBold,
    MessageEntityItalic: *const MessageEntityItalic,
    MessageEntityCode: *const MessageEntityCode,
    MessageEntityPre: *const MessageEntityPre,
    MessageEntityTextUrl: *const MessageEntityTextUrl,
    MessageEntityMentionName: *const MessageEntityMentionName,
    InputMessageEntityMentionName: *const InputMessageEntityMentionName,
    MessageEntityPhone: *const MessageEntityPhone,
    MessageEntityCashtag: *const MessageEntityCashtag,
    MessageEntityUnderline: *const MessageEntityUnderline,
    MessageEntityStrike: *const MessageEntityStrike,
    MessageEntityBankCard: *const MessageEntityBankCard,
    MessageEntitySpoiler: *const MessageEntitySpoiler,
    MessageEntityCustomEmoji: *const MessageEntityCustomEmoji,
    MessageEntityBlockquote: *const MessageEntityBlockquote,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .MessageEntityUnknown => { return self.MessageEntityUnknown.size(); },
                .MessageEntityMention => { return self.MessageEntityMention.size(); },
                .MessageEntityHashtag => { return self.MessageEntityHashtag.size(); },
                .MessageEntityBotCommand => { return self.MessageEntityBotCommand.size(); },
                .MessageEntityUrl => { return self.MessageEntityUrl.size(); },
                .MessageEntityEmail => { return self.MessageEntityEmail.size(); },
                .MessageEntityBold => { return self.MessageEntityBold.size(); },
                .MessageEntityItalic => { return self.MessageEntityItalic.size(); },
                .MessageEntityCode => { return self.MessageEntityCode.size(); },
                .MessageEntityPre => { return self.MessageEntityPre.size(); },
                .MessageEntityTextUrl => { return self.MessageEntityTextUrl.size(); },
                .MessageEntityMentionName => { return self.MessageEntityMentionName.size(); },
                .InputMessageEntityMentionName => { return self.InputMessageEntityMentionName.size(); },
                .MessageEntityPhone => { return self.MessageEntityPhone.size(); },
                .MessageEntityCashtag => { return self.MessageEntityCashtag.size(); },
                .MessageEntityUnderline => { return self.MessageEntityUnderline.size(); },
                .MessageEntityStrike => { return self.MessageEntityStrike.size(); },
                .MessageEntityBankCard => { return self.MessageEntityBankCard.size(); },
                .MessageEntitySpoiler => { return self.MessageEntitySpoiler.size(); },
                .MessageEntityCustomEmoji => { return self.MessageEntityCustomEmoji.size(); },
                .MessageEntityBlockquote => { return self.MessageEntityBlockquote.size(); },
        }
    }
};
const InputChannelEnumID = enum(u32) {
    InputChannelEmpty = 4002160262,
    InputChannel = 4082822184,
    InputChannelFromMessage = 1536380829,
};
const IInputChannel = union(InputChannelEnumID) {
    InputChannelEmpty: *const InputChannelEmpty,
    InputChannel: *const InputChannel,
    InputChannelFromMessage: *const InputChannelFromMessage,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .InputChannelEmpty => { return self.InputChannelEmpty.size(); },
                .InputChannel => { return self.InputChannel.size(); },
                .InputChannelFromMessage => { return self.InputChannelFromMessage.size(); },
        }
    }
};
const ContactsResolvedPeerEnumID = enum(u32) {
    ContactsResolvedPeer = 2131196633,
};
const IContactsResolvedPeer = union(ContactsResolvedPeerEnumID) {
    ContactsResolvedPeer: *const ContactsResolvedPeer,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .ContactsResolvedPeer => { return self.ContactsResolvedPeer.size(); },
        }
    }
};
const MessageRangeEnumID = enum(u32) {
    MessageRange = 182649427,
};
const IMessageRange = union(MessageRangeEnumID) {
    MessageRange: *const MessageRange,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .MessageRange => { return self.MessageRange.size(); },
        }
    }
};
const UpdatesChannelDifferenceEnumID = enum(u32) {
    UpdatesChannelDifferenceEmpty = 1041346555,
    UpdatesChannelDifferenceTooLong = 2763835134,
    UpdatesChannelDifference = 543450958,
};
const IUpdatesChannelDifference = union(UpdatesChannelDifferenceEnumID) {
    UpdatesChannelDifferenceEmpty: *const UpdatesChannelDifferenceEmpty,
    UpdatesChannelDifferenceTooLong: *const UpdatesChannelDifferenceTooLong,
    UpdatesChannelDifference: *const UpdatesChannelDifference,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .UpdatesChannelDifferenceEmpty => { return self.UpdatesChannelDifferenceEmpty.size(); },
                .UpdatesChannelDifferenceTooLong => { return self.UpdatesChannelDifferenceTooLong.size(); },
                .UpdatesChannelDifference => { return self.UpdatesChannelDifference.size(); },
        }
    }
};
const ChannelMessagesFilterEnumID = enum(u32) {
    ChannelMessagesFilterEmpty = 2496933607,
    ChannelMessagesFilter = 3447183703,
};
const IChannelMessagesFilter = union(ChannelMessagesFilterEnumID) {
    ChannelMessagesFilterEmpty: *const ChannelMessagesFilterEmpty,
    ChannelMessagesFilter: *const ChannelMessagesFilter,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .ChannelMessagesFilterEmpty => { return self.ChannelMessagesFilterEmpty.size(); },
                .ChannelMessagesFilter => { return self.ChannelMessagesFilter.size(); },
        }
    }
};
const ChannelParticipantEnumID = enum(u32) {
    ChannelParticipant = 3409540633,
    ChannelParticipantSelf = 1331723247,
    ChannelParticipantCreator = 803602899,
    ChannelParticipantAdmin = 885242707,
    ChannelParticipantBanned = 1844969806,
    ChannelParticipantLeft = 453242886,
};
const IChannelParticipant = union(ChannelParticipantEnumID) {
    ChannelParticipant: *const ChannelParticipant,
    ChannelParticipantSelf: *const ChannelParticipantSelf,
    ChannelParticipantCreator: *const ChannelParticipantCreator,
    ChannelParticipantAdmin: *const ChannelParticipantAdmin,
    ChannelParticipantBanned: *const ChannelParticipantBanned,
    ChannelParticipantLeft: *const ChannelParticipantLeft,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .ChannelParticipant => { return self.ChannelParticipant.size(); },
                .ChannelParticipantSelf => { return self.ChannelParticipantSelf.size(); },
                .ChannelParticipantCreator => { return self.ChannelParticipantCreator.size(); },
                .ChannelParticipantAdmin => { return self.ChannelParticipantAdmin.size(); },
                .ChannelParticipantBanned => { return self.ChannelParticipantBanned.size(); },
                .ChannelParticipantLeft => { return self.ChannelParticipantLeft.size(); },
        }
    }
};
const ChannelParticipantsFilterEnumID = enum(u32) {
    ChannelParticipantsRecent = 3728686201,
    ChannelParticipantsAdmins = 3026225513,
    ChannelParticipantsKicked = 2746567045,
    ChannelParticipantsBots = 2966521435,
    ChannelParticipantsBanned = 338142689,
    ChannelParticipantsSearch = 106343499,
    ChannelParticipantsContacts = 3144345741,
    ChannelParticipantsMentions = 3763035371,
};
const IChannelParticipantsFilter = union(ChannelParticipantsFilterEnumID) {
    ChannelParticipantsRecent: *const ChannelParticipantsRecent,
    ChannelParticipantsAdmins: *const ChannelParticipantsAdmins,
    ChannelParticipantsKicked: *const ChannelParticipantsKicked,
    ChannelParticipantsBots: *const ChannelParticipantsBots,
    ChannelParticipantsBanned: *const ChannelParticipantsBanned,
    ChannelParticipantsSearch: *const ChannelParticipantsSearch,
    ChannelParticipantsContacts: *const ChannelParticipantsContacts,
    ChannelParticipantsMentions: *const ChannelParticipantsMentions,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .ChannelParticipantsRecent => { return self.ChannelParticipantsRecent.size(); },
                .ChannelParticipantsAdmins => { return self.ChannelParticipantsAdmins.size(); },
                .ChannelParticipantsKicked => { return self.ChannelParticipantsKicked.size(); },
                .ChannelParticipantsBots => { return self.ChannelParticipantsBots.size(); },
                .ChannelParticipantsBanned => { return self.ChannelParticipantsBanned.size(); },
                .ChannelParticipantsSearch => { return self.ChannelParticipantsSearch.size(); },
                .ChannelParticipantsContacts => { return self.ChannelParticipantsContacts.size(); },
                .ChannelParticipantsMentions => { return self.ChannelParticipantsMentions.size(); },
        }
    }
};
const ChannelsChannelParticipantsEnumID = enum(u32) {
    ChannelsChannelParticipants = 2595290799,
    ChannelsChannelParticipantsNotModified = 4028055529,
};
const IChannelsChannelParticipants = union(ChannelsChannelParticipantsEnumID) {
    ChannelsChannelParticipants: *const ChannelsChannelParticipants,
    ChannelsChannelParticipantsNotModified: *const ChannelsChannelParticipantsNotModified,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .ChannelsChannelParticipants => { return self.ChannelsChannelParticipants.size(); },
                .ChannelsChannelParticipantsNotModified => { return self.ChannelsChannelParticipantsNotModified.size(); },
        }
    }
};
const ChannelsChannelParticipantEnumID = enum(u32) {
    ChannelsChannelParticipant = 3753378583,
};
const IChannelsChannelParticipant = union(ChannelsChannelParticipantEnumID) {
    ChannelsChannelParticipant: *const ChannelsChannelParticipant,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .ChannelsChannelParticipant => { return self.ChannelsChannelParticipant.size(); },
        }
    }
};
const HelpTermsOfServiceEnumID = enum(u32) {
    HelpTermsOfService = 2013922064,
};
const IHelpTermsOfService = union(HelpTermsOfServiceEnumID) {
    HelpTermsOfService: *const HelpTermsOfService,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .HelpTermsOfService => { return self.HelpTermsOfService.size(); },
        }
    }
};
const MessagesSavedGifsEnumID = enum(u32) {
    MessagesSavedGifsNotModified = 3892468898,
    MessagesSavedGifs = 2225089037,
};
const IMessagesSavedGifs = union(MessagesSavedGifsEnumID) {
    MessagesSavedGifsNotModified: *const MessagesSavedGifsNotModified,
    MessagesSavedGifs: *const MessagesSavedGifs,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .MessagesSavedGifsNotModified => { return self.MessagesSavedGifsNotModified.size(); },
                .MessagesSavedGifs => { return self.MessagesSavedGifs.size(); },
        }
    }
};
const InputBotInlineMessageEnumID = enum(u32) {
    InputBotInlineMessageMediaAuto = 864077702,
    InputBotInlineMessageText = 1036876423,
    InputBotInlineMessageMediaGeo = 2526190213,
    InputBotInlineMessageMediaVenue = 1098628881,
    InputBotInlineMessageMediaContact = 2800599037,
    InputBotInlineMessageGame = 1262639204,
    InputBotInlineMessageMediaInvoice = 3622273573,
    InputBotInlineMessageMediaWebPage = 3185362192,
};
const IInputBotInlineMessage = union(InputBotInlineMessageEnumID) {
    InputBotInlineMessageMediaAuto: *const InputBotInlineMessageMediaAuto,
    InputBotInlineMessageText: *const InputBotInlineMessageText,
    InputBotInlineMessageMediaGeo: *const InputBotInlineMessageMediaGeo,
    InputBotInlineMessageMediaVenue: *const InputBotInlineMessageMediaVenue,
    InputBotInlineMessageMediaContact: *const InputBotInlineMessageMediaContact,
    InputBotInlineMessageGame: *const InputBotInlineMessageGame,
    InputBotInlineMessageMediaInvoice: *const InputBotInlineMessageMediaInvoice,
    InputBotInlineMessageMediaWebPage: *const InputBotInlineMessageMediaWebPage,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .InputBotInlineMessageMediaAuto => { return self.InputBotInlineMessageMediaAuto.size(); },
                .InputBotInlineMessageText => { return self.InputBotInlineMessageText.size(); },
                .InputBotInlineMessageMediaGeo => { return self.InputBotInlineMessageMediaGeo.size(); },
                .InputBotInlineMessageMediaVenue => { return self.InputBotInlineMessageMediaVenue.size(); },
                .InputBotInlineMessageMediaContact => { return self.InputBotInlineMessageMediaContact.size(); },
                .InputBotInlineMessageGame => { return self.InputBotInlineMessageGame.size(); },
                .InputBotInlineMessageMediaInvoice => { return self.InputBotInlineMessageMediaInvoice.size(); },
                .InputBotInlineMessageMediaWebPage => { return self.InputBotInlineMessageMediaWebPage.size(); },
        }
    }
};
const InputBotInlineResultEnumID = enum(u32) {
    InputBotInlineResult = 2294256409,
    InputBotInlineResultPhoto = 2832753831,
    InputBotInlineResultDocument = 4294507972,
    InputBotInlineResultGame = 1336154098,
};
const IInputBotInlineResult = union(InputBotInlineResultEnumID) {
    InputBotInlineResult: *const InputBotInlineResult,
    InputBotInlineResultPhoto: *const InputBotInlineResultPhoto,
    InputBotInlineResultDocument: *const InputBotInlineResultDocument,
    InputBotInlineResultGame: *const InputBotInlineResultGame,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .InputBotInlineResult => { return self.InputBotInlineResult.size(); },
                .InputBotInlineResultPhoto => { return self.InputBotInlineResultPhoto.size(); },
                .InputBotInlineResultDocument => { return self.InputBotInlineResultDocument.size(); },
                .InputBotInlineResultGame => { return self.InputBotInlineResultGame.size(); },
        }
    }
};
const BotInlineMessageEnumID = enum(u32) {
    BotInlineMessageMediaAuto = 1984755728,
    BotInlineMessageText = 2357159394,
    BotInlineMessageMediaGeo = 85477117,
    BotInlineMessageMediaVenue = 2324063644,
    BotInlineMessageMediaContact = 416402882,
    BotInlineMessageMediaInvoice = 894081801,
    BotInlineMessageMediaWebPage = 2157631910,
};
const IBotInlineMessage = union(BotInlineMessageEnumID) {
    BotInlineMessageMediaAuto: *const BotInlineMessageMediaAuto,
    BotInlineMessageText: *const BotInlineMessageText,
    BotInlineMessageMediaGeo: *const BotInlineMessageMediaGeo,
    BotInlineMessageMediaVenue: *const BotInlineMessageMediaVenue,
    BotInlineMessageMediaContact: *const BotInlineMessageMediaContact,
    BotInlineMessageMediaInvoice: *const BotInlineMessageMediaInvoice,
    BotInlineMessageMediaWebPage: *const BotInlineMessageMediaWebPage,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .BotInlineMessageMediaAuto => { return self.BotInlineMessageMediaAuto.size(); },
                .BotInlineMessageText => { return self.BotInlineMessageText.size(); },
                .BotInlineMessageMediaGeo => { return self.BotInlineMessageMediaGeo.size(); },
                .BotInlineMessageMediaVenue => { return self.BotInlineMessageMediaVenue.size(); },
                .BotInlineMessageMediaContact => { return self.BotInlineMessageMediaContact.size(); },
                .BotInlineMessageMediaInvoice => { return self.BotInlineMessageMediaInvoice.size(); },
                .BotInlineMessageMediaWebPage => { return self.BotInlineMessageMediaWebPage.size(); },
        }
    }
};
const BotInlineResultEnumID = enum(u32) {
    BotInlineResult = 295067450,
    BotInlineMediaResult = 400266251,
};
const IBotInlineResult = union(BotInlineResultEnumID) {
    BotInlineResult: *const BotInlineResult,
    BotInlineMediaResult: *const BotInlineMediaResult,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .BotInlineResult => { return self.BotInlineResult.size(); },
                .BotInlineMediaResult => { return self.BotInlineMediaResult.size(); },
        }
    }
};
const MessagesBotResultsEnumID = enum(u32) {
    MessagesBotResults = 3760321270,
};
const IMessagesBotResults = union(MessagesBotResultsEnumID) {
    MessagesBotResults: *const MessagesBotResults,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .MessagesBotResults => { return self.MessagesBotResults.size(); },
        }
    }
};
const ExportedMessageLinkEnumID = enum(u32) {
    ExportedMessageLink = 1571494644,
};
const IExportedMessageLink = union(ExportedMessageLinkEnumID) {
    ExportedMessageLink: *const ExportedMessageLink,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .ExportedMessageLink => { return self.ExportedMessageLink.size(); },
        }
    }
};
const MessageFwdHeaderEnumID = enum(u32) {
    MessageFwdHeader = 1313731771,
};
const IMessageFwdHeader = union(MessageFwdHeaderEnumID) {
    MessageFwdHeader: *const MessageFwdHeader,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .MessageFwdHeader => { return self.MessageFwdHeader.size(); },
        }
    }
};
const AuthCodeTypeEnumID = enum(u32) {
    AuthCodeTypeSms = 1923290508,
    AuthCodeTypeCall = 1948046307,
    AuthCodeTypeFlashCall = 577556219,
    AuthCodeTypeMissedCall = 3592083182,
    AuthCodeTypeFragmentSms = 116234636,
};
const IAuthCodeType = union(AuthCodeTypeEnumID) {
    AuthCodeTypeSms: *const AuthCodeTypeSms,
    AuthCodeTypeCall: *const AuthCodeTypeCall,
    AuthCodeTypeFlashCall: *const AuthCodeTypeFlashCall,
    AuthCodeTypeMissedCall: *const AuthCodeTypeMissedCall,
    AuthCodeTypeFragmentSms: *const AuthCodeTypeFragmentSms,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .AuthCodeTypeSms => { return self.AuthCodeTypeSms.size(); },
                .AuthCodeTypeCall => { return self.AuthCodeTypeCall.size(); },
                .AuthCodeTypeFlashCall => { return self.AuthCodeTypeFlashCall.size(); },
                .AuthCodeTypeMissedCall => { return self.AuthCodeTypeMissedCall.size(); },
                .AuthCodeTypeFragmentSms => { return self.AuthCodeTypeFragmentSms.size(); },
        }
    }
};
const AuthSentCodeTypeEnumID = enum(u32) {
    AuthSentCodeTypeApp = 1035688326,
    AuthSentCodeTypeSms = 3221273506,
    AuthSentCodeTypeCall = 1398007207,
    AuthSentCodeTypeFlashCall = 2869151449,
    AuthSentCodeTypeMissedCall = 2181063812,
    AuthSentCodeTypeEmailCode = 4098946459,
    AuthSentCodeTypeSetUpEmailRequired = 2773032426,
    AuthSentCodeTypeFragmentSms = 3646315577,
    AuthSentCodeTypeFirebaseSms = 10475318,
    AuthSentCodeTypeSmsWord = 2752949377,
    AuthSentCodeTypeSmsPhrase = 3010958511,
};
const IAuthSentCodeType = union(AuthSentCodeTypeEnumID) {
    AuthSentCodeTypeApp: *const AuthSentCodeTypeApp,
    AuthSentCodeTypeSms: *const AuthSentCodeTypeSms,
    AuthSentCodeTypeCall: *const AuthSentCodeTypeCall,
    AuthSentCodeTypeFlashCall: *const AuthSentCodeTypeFlashCall,
    AuthSentCodeTypeMissedCall: *const AuthSentCodeTypeMissedCall,
    AuthSentCodeTypeEmailCode: *const AuthSentCodeTypeEmailCode,
    AuthSentCodeTypeSetUpEmailRequired: *const AuthSentCodeTypeSetUpEmailRequired,
    AuthSentCodeTypeFragmentSms: *const AuthSentCodeTypeFragmentSms,
    AuthSentCodeTypeFirebaseSms: *const AuthSentCodeTypeFirebaseSms,
    AuthSentCodeTypeSmsWord: *const AuthSentCodeTypeSmsWord,
    AuthSentCodeTypeSmsPhrase: *const AuthSentCodeTypeSmsPhrase,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .AuthSentCodeTypeApp => { return self.AuthSentCodeTypeApp.size(); },
                .AuthSentCodeTypeSms => { return self.AuthSentCodeTypeSms.size(); },
                .AuthSentCodeTypeCall => { return self.AuthSentCodeTypeCall.size(); },
                .AuthSentCodeTypeFlashCall => { return self.AuthSentCodeTypeFlashCall.size(); },
                .AuthSentCodeTypeMissedCall => { return self.AuthSentCodeTypeMissedCall.size(); },
                .AuthSentCodeTypeEmailCode => { return self.AuthSentCodeTypeEmailCode.size(); },
                .AuthSentCodeTypeSetUpEmailRequired => { return self.AuthSentCodeTypeSetUpEmailRequired.size(); },
                .AuthSentCodeTypeFragmentSms => { return self.AuthSentCodeTypeFragmentSms.size(); },
                .AuthSentCodeTypeFirebaseSms => { return self.AuthSentCodeTypeFirebaseSms.size(); },
                .AuthSentCodeTypeSmsWord => { return self.AuthSentCodeTypeSmsWord.size(); },
                .AuthSentCodeTypeSmsPhrase => { return self.AuthSentCodeTypeSmsPhrase.size(); },
        }
    }
};
const MessagesBotCallbackAnswerEnumID = enum(u32) {
    MessagesBotCallbackAnswer = 911761060,
};
const IMessagesBotCallbackAnswer = union(MessagesBotCallbackAnswerEnumID) {
    MessagesBotCallbackAnswer: *const MessagesBotCallbackAnswer,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .MessagesBotCallbackAnswer => { return self.MessagesBotCallbackAnswer.size(); },
        }
    }
};
const MessagesMessageEditDataEnumID = enum(u32) {
    MessagesMessageEditData = 649453030,
};
const IMessagesMessageEditData = union(MessagesMessageEditDataEnumID) {
    MessagesMessageEditData: *const MessagesMessageEditData,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .MessagesMessageEditData => { return self.MessagesMessageEditData.size(); },
        }
    }
};
const InputBotInlineMessageIDEnumID = enum(u32) {
    InputBotInlineMessageID = 2299280777,
    InputBotInlineMessageID64 = 3067680215,
};
const IInputBotInlineMessageID = union(InputBotInlineMessageIDEnumID) {
    InputBotInlineMessageID: *const InputBotInlineMessageID,
    InputBotInlineMessageID64: *const InputBotInlineMessageID64,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .InputBotInlineMessageID => { return self.InputBotInlineMessageID.size(); },
                .InputBotInlineMessageID64 => { return self.InputBotInlineMessageID64.size(); },
        }
    }
};
const InlineBotSwitchPMEnumID = enum(u32) {
    InlineBotSwitchPM = 1008755359,
};
const IInlineBotSwitchPM = union(InlineBotSwitchPMEnumID) {
    InlineBotSwitchPM: *const InlineBotSwitchPM,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .InlineBotSwitchPM => { return self.InlineBotSwitchPM.size(); },
        }
    }
};
const MessagesPeerDialogsEnumID = enum(u32) {
    MessagesPeerDialogs = 863093588,
};
const IMessagesPeerDialogs = union(MessagesPeerDialogsEnumID) {
    MessagesPeerDialogs: *const MessagesPeerDialogs,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .MessagesPeerDialogs => { return self.MessagesPeerDialogs.size(); },
        }
    }
};
const TopPeerEnumID = enum(u32) {
    TopPeer = 3989684315,
};
const ITopPeer = union(TopPeerEnumID) {
    TopPeer: *const TopPeer,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .TopPeer => { return self.TopPeer.size(); },
        }
    }
};
const TopPeerCategoryEnumID = enum(u32) {
    TopPeerCategoryBotsPM = 2875595611,
    TopPeerCategoryBotsInline = 344356834,
    TopPeerCategoryCorrespondents = 104314861,
    TopPeerCategoryGroups = 3172442442,
    TopPeerCategoryChannels = 371037736,
    TopPeerCategoryPhoneCalls = 511092620,
    TopPeerCategoryForwardUsers = 2822794409,
    TopPeerCategoryForwardChats = 4226728176,
    TopPeerCategoryBotsApp = 4255022060,
};
const ITopPeerCategory = union(TopPeerCategoryEnumID) {
    TopPeerCategoryBotsPM: *const TopPeerCategoryBotsPM,
    TopPeerCategoryBotsInline: *const TopPeerCategoryBotsInline,
    TopPeerCategoryCorrespondents: *const TopPeerCategoryCorrespondents,
    TopPeerCategoryGroups: *const TopPeerCategoryGroups,
    TopPeerCategoryChannels: *const TopPeerCategoryChannels,
    TopPeerCategoryPhoneCalls: *const TopPeerCategoryPhoneCalls,
    TopPeerCategoryForwardUsers: *const TopPeerCategoryForwardUsers,
    TopPeerCategoryForwardChats: *const TopPeerCategoryForwardChats,
    TopPeerCategoryBotsApp: *const TopPeerCategoryBotsApp,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .TopPeerCategoryBotsPM => { return self.TopPeerCategoryBotsPM.size(); },
                .TopPeerCategoryBotsInline => { return self.TopPeerCategoryBotsInline.size(); },
                .TopPeerCategoryCorrespondents => { return self.TopPeerCategoryCorrespondents.size(); },
                .TopPeerCategoryGroups => { return self.TopPeerCategoryGroups.size(); },
                .TopPeerCategoryChannels => { return self.TopPeerCategoryChannels.size(); },
                .TopPeerCategoryPhoneCalls => { return self.TopPeerCategoryPhoneCalls.size(); },
                .TopPeerCategoryForwardUsers => { return self.TopPeerCategoryForwardUsers.size(); },
                .TopPeerCategoryForwardChats => { return self.TopPeerCategoryForwardChats.size(); },
                .TopPeerCategoryBotsApp => { return self.TopPeerCategoryBotsApp.size(); },
        }
    }
};
const TopPeerCategoryPeersEnumID = enum(u32) {
    TopPeerCategoryPeers = 4219683473,
};
const ITopPeerCategoryPeers = union(TopPeerCategoryPeersEnumID) {
    TopPeerCategoryPeers: *const TopPeerCategoryPeers,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .TopPeerCategoryPeers => { return self.TopPeerCategoryPeers.size(); },
        }
    }
};
const ContactsTopPeersEnumID = enum(u32) {
    ContactsTopPeersNotModified = 3727060725,
    ContactsTopPeers = 1891070632,
    ContactsTopPeersDisabled = 3039597469,
};
const IContactsTopPeers = union(ContactsTopPeersEnumID) {
    ContactsTopPeersNotModified: *const ContactsTopPeersNotModified,
    ContactsTopPeers: *const ContactsTopPeers,
    ContactsTopPeersDisabled: *const ContactsTopPeersDisabled,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .ContactsTopPeersNotModified => { return self.ContactsTopPeersNotModified.size(); },
                .ContactsTopPeers => { return self.ContactsTopPeers.size(); },
                .ContactsTopPeersDisabled => { return self.ContactsTopPeersDisabled.size(); },
        }
    }
};
const DraftMessageEnumID = enum(u32) {
    DraftMessageEmpty = 453805082,
    DraftMessage = 761606687,
};
const IDraftMessage = union(DraftMessageEnumID) {
    DraftMessageEmpty: *const DraftMessageEmpty,
    DraftMessage: *const DraftMessage,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .DraftMessageEmpty => { return self.DraftMessageEmpty.size(); },
                .DraftMessage => { return self.DraftMessage.size(); },
        }
    }
};
const MessagesFeaturedStickersEnumID = enum(u32) {
    MessagesFeaturedStickersNotModified = 3336309862,
    MessagesFeaturedStickers = 3191351558,
};
const IMessagesFeaturedStickers = union(MessagesFeaturedStickersEnumID) {
    MessagesFeaturedStickersNotModified: *const MessagesFeaturedStickersNotModified,
    MessagesFeaturedStickers: *const MessagesFeaturedStickers,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .MessagesFeaturedStickersNotModified => { return self.MessagesFeaturedStickersNotModified.size(); },
                .MessagesFeaturedStickers => { return self.MessagesFeaturedStickers.size(); },
        }
    }
};
const MessagesRecentStickersEnumID = enum(u32) {
    MessagesRecentStickersNotModified = 186120336,
    MessagesRecentStickers = 2295561302,
};
const IMessagesRecentStickers = union(MessagesRecentStickersEnumID) {
    MessagesRecentStickersNotModified: *const MessagesRecentStickersNotModified,
    MessagesRecentStickers: *const MessagesRecentStickers,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .MessagesRecentStickersNotModified => { return self.MessagesRecentStickersNotModified.size(); },
                .MessagesRecentStickers => { return self.MessagesRecentStickers.size(); },
        }
    }
};
const MessagesArchivedStickersEnumID = enum(u32) {
    MessagesArchivedStickers = 1338747336,
};
const IMessagesArchivedStickers = union(MessagesArchivedStickersEnumID) {
    MessagesArchivedStickers: *const MessagesArchivedStickers,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .MessagesArchivedStickers => { return self.MessagesArchivedStickers.size(); },
        }
    }
};
const MessagesStickerSetInstallResultEnumID = enum(u32) {
    MessagesStickerSetInstallResultSuccess = 946083368,
    MessagesStickerSetInstallResultArchive = 904138920,
};
const IMessagesStickerSetInstallResult = union(MessagesStickerSetInstallResultEnumID) {
    MessagesStickerSetInstallResultSuccess: *const MessagesStickerSetInstallResultSuccess,
    MessagesStickerSetInstallResultArchive: *const MessagesStickerSetInstallResultArchive,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .MessagesStickerSetInstallResultSuccess => { return self.MessagesStickerSetInstallResultSuccess.size(); },
                .MessagesStickerSetInstallResultArchive => { return self.MessagesStickerSetInstallResultArchive.size(); },
        }
    }
};
const StickerSetCoveredEnumID = enum(u32) {
    StickerSetCovered = 1678812626,
    StickerSetMultiCovered = 872932635,
    StickerSetFullCovered = 1087454222,
    StickerSetNoCovered = 2008112412,
};
const IStickerSetCovered = union(StickerSetCoveredEnumID) {
    StickerSetCovered: *const StickerSetCovered,
    StickerSetMultiCovered: *const StickerSetMultiCovered,
    StickerSetFullCovered: *const StickerSetFullCovered,
    StickerSetNoCovered: *const StickerSetNoCovered,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .StickerSetCovered => { return self.StickerSetCovered.size(); },
                .StickerSetMultiCovered => { return self.StickerSetMultiCovered.size(); },
                .StickerSetFullCovered => { return self.StickerSetFullCovered.size(); },
                .StickerSetNoCovered => { return self.StickerSetNoCovered.size(); },
        }
    }
};
const MaskCoordsEnumID = enum(u32) {
    MaskCoords = 2933316530,
};
const IMaskCoords = union(MaskCoordsEnumID) {
    MaskCoords: *const MaskCoords,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .MaskCoords => { return self.MaskCoords.size(); },
        }
    }
};
const InputStickeredMediaEnumID = enum(u32) {
    InputStickeredMediaPhoto = 1251549527,
    InputStickeredMediaDocument = 70813275,
};
const IInputStickeredMedia = union(InputStickeredMediaEnumID) {
    InputStickeredMediaPhoto: *const InputStickeredMediaPhoto,
    InputStickeredMediaDocument: *const InputStickeredMediaDocument,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .InputStickeredMediaPhoto => { return self.InputStickeredMediaPhoto.size(); },
                .InputStickeredMediaDocument => { return self.InputStickeredMediaDocument.size(); },
        }
    }
};
const GameEnumID = enum(u32) {
    Game = 3187238203,
};
const IGame = union(GameEnumID) {
    Game: *const Game,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .Game => { return self.Game.size(); },
        }
    }
};
const InputGameEnumID = enum(u32) {
    InputGameID = 53231223,
    InputGameShortName = 3274827786,
};
const IInputGame = union(InputGameEnumID) {
    InputGameID: *const InputGameID,
    InputGameShortName: *const InputGameShortName,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .InputGameID => { return self.InputGameID.size(); },
                .InputGameShortName => { return self.InputGameShortName.size(); },
        }
    }
};
const HighScoreEnumID = enum(u32) {
    HighScore = 1940093419,
};
const IHighScore = union(HighScoreEnumID) {
    HighScore: *const HighScore,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .HighScore => { return self.HighScore.size(); },
        }
    }
};
const MessagesHighScoresEnumID = enum(u32) {
    MessagesHighScores = 2587622809,
};
const IMessagesHighScores = union(MessagesHighScoresEnumID) {
    MessagesHighScores: *const MessagesHighScores,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .MessagesHighScores => { return self.MessagesHighScores.size(); },
        }
    }
};
const RichTextEnumID = enum(u32) {
    TextEmpty = 3695018575,
    TextPlain = 1950782688,
    TextBold = 1730456516,
    TextItalic = 3641877916,
    TextUnderline = 3240501956,
    TextStrike = 2616769429,
    TextFixed = 1816074681,
    TextUrl = 1009288385,
    TextEmail = 3730443734,
    TextConcat = 2120376535,
    TextSubscript = 3983181060,
    TextSuperscript = 3355139585,
    TextMarked = 55281185,
    TextPhone = 483104362,
    TextImage = 136105807,
    TextAnchor = 894777186,
};
const IRichText = union(RichTextEnumID) {
    TextEmpty: *const TextEmpty,
    TextPlain: *const TextPlain,
    TextBold: *const TextBold,
    TextItalic: *const TextItalic,
    TextUnderline: *const TextUnderline,
    TextStrike: *const TextStrike,
    TextFixed: *const TextFixed,
    TextUrl: *const TextUrl,
    TextEmail: *const TextEmail,
    TextConcat: *const TextConcat,
    TextSubscript: *const TextSubscript,
    TextSuperscript: *const TextSuperscript,
    TextMarked: *const TextMarked,
    TextPhone: *const TextPhone,
    TextImage: *const TextImage,
    TextAnchor: *const TextAnchor,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .TextEmpty => { return self.TextEmpty.size(); },
                .TextPlain => { return self.TextPlain.size(); },
                .TextBold => { return self.TextBold.size(); },
                .TextItalic => { return self.TextItalic.size(); },
                .TextUnderline => { return self.TextUnderline.size(); },
                .TextStrike => { return self.TextStrike.size(); },
                .TextFixed => { return self.TextFixed.size(); },
                .TextUrl => { return self.TextUrl.size(); },
                .TextEmail => { return self.TextEmail.size(); },
                .TextConcat => { return self.TextConcat.size(); },
                .TextSubscript => { return self.TextSubscript.size(); },
                .TextSuperscript => { return self.TextSuperscript.size(); },
                .TextMarked => { return self.TextMarked.size(); },
                .TextPhone => { return self.TextPhone.size(); },
                .TextImage => { return self.TextImage.size(); },
                .TextAnchor => { return self.TextAnchor.size(); },
        }
    }
};
const PageBlockEnumID = enum(u32) {
    PageBlockUnsupported = 324435594,
    PageBlockTitle = 1890305021,
    PageBlockSubtitle = 2415565343,
    PageBlockAuthorDate = 3132089824,
    PageBlockHeader = 3218105580,
    PageBlockSubheader = 4046173921,
    PageBlockParagraph = 1182402406,
    PageBlockPreformatted = 3228621118,
    PageBlockFooter = 1216809369,
    PageBlockDivider = 3676352904,
    PageBlockAnchor = 3456972720,
    PageBlockList = 3840442385,
    PageBlockBlockquote = 641563686,
    PageBlockPullquote = 1329878739,
    PageBlockPhoto = 391759200,
    PageBlockVideo = 2089805750,
    PageBlockCover = 972174080,
    PageBlockEmbed = 2826014149,
    PageBlockEmbedPost = 4065961995,
    PageBlockCollage = 1705048653,
    PageBlockSlideshow = 52401552,
    PageBlockChannel = 4011282869,
    PageBlockAudio = 2151899626,
    PageBlockKicker = 504660880,
    PageBlockTable = 3209554562,
    PageBlockOrderedList = 2592793057,
    PageBlockDetails = 1987480557,
    PageBlockRelatedArticles = 370236054,
    PageBlockMap = 2756656886,
};
const IPageBlock = union(PageBlockEnumID) {
    PageBlockUnsupported: *const PageBlockUnsupported,
    PageBlockTitle: *const PageBlockTitle,
    PageBlockSubtitle: *const PageBlockSubtitle,
    PageBlockAuthorDate: *const PageBlockAuthorDate,
    PageBlockHeader: *const PageBlockHeader,
    PageBlockSubheader: *const PageBlockSubheader,
    PageBlockParagraph: *const PageBlockParagraph,
    PageBlockPreformatted: *const PageBlockPreformatted,
    PageBlockFooter: *const PageBlockFooter,
    PageBlockDivider: *const PageBlockDivider,
    PageBlockAnchor: *const PageBlockAnchor,
    PageBlockList: *const PageBlockList,
    PageBlockBlockquote: *const PageBlockBlockquote,
    PageBlockPullquote: *const PageBlockPullquote,
    PageBlockPhoto: *const PageBlockPhoto,
    PageBlockVideo: *const PageBlockVideo,
    PageBlockCover: *const PageBlockCover,
    PageBlockEmbed: *const PageBlockEmbed,
    PageBlockEmbedPost: *const PageBlockEmbedPost,
    PageBlockCollage: *const PageBlockCollage,
    PageBlockSlideshow: *const PageBlockSlideshow,
    PageBlockChannel: *const PageBlockChannel,
    PageBlockAudio: *const PageBlockAudio,
    PageBlockKicker: *const PageBlockKicker,
    PageBlockTable: *const PageBlockTable,
    PageBlockOrderedList: *const PageBlockOrderedList,
    PageBlockDetails: *const PageBlockDetails,
    PageBlockRelatedArticles: *const PageBlockRelatedArticles,
    PageBlockMap: *const PageBlockMap,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .PageBlockUnsupported => { return self.PageBlockUnsupported.size(); },
                .PageBlockTitle => { return self.PageBlockTitle.size(); },
                .PageBlockSubtitle => { return self.PageBlockSubtitle.size(); },
                .PageBlockAuthorDate => { return self.PageBlockAuthorDate.size(); },
                .PageBlockHeader => { return self.PageBlockHeader.size(); },
                .PageBlockSubheader => { return self.PageBlockSubheader.size(); },
                .PageBlockParagraph => { return self.PageBlockParagraph.size(); },
                .PageBlockPreformatted => { return self.PageBlockPreformatted.size(); },
                .PageBlockFooter => { return self.PageBlockFooter.size(); },
                .PageBlockDivider => { return self.PageBlockDivider.size(); },
                .PageBlockAnchor => { return self.PageBlockAnchor.size(); },
                .PageBlockList => { return self.PageBlockList.size(); },
                .PageBlockBlockquote => { return self.PageBlockBlockquote.size(); },
                .PageBlockPullquote => { return self.PageBlockPullquote.size(); },
                .PageBlockPhoto => { return self.PageBlockPhoto.size(); },
                .PageBlockVideo => { return self.PageBlockVideo.size(); },
                .PageBlockCover => { return self.PageBlockCover.size(); },
                .PageBlockEmbed => { return self.PageBlockEmbed.size(); },
                .PageBlockEmbedPost => { return self.PageBlockEmbedPost.size(); },
                .PageBlockCollage => { return self.PageBlockCollage.size(); },
                .PageBlockSlideshow => { return self.PageBlockSlideshow.size(); },
                .PageBlockChannel => { return self.PageBlockChannel.size(); },
                .PageBlockAudio => { return self.PageBlockAudio.size(); },
                .PageBlockKicker => { return self.PageBlockKicker.size(); },
                .PageBlockTable => { return self.PageBlockTable.size(); },
                .PageBlockOrderedList => { return self.PageBlockOrderedList.size(); },
                .PageBlockDetails => { return self.PageBlockDetails.size(); },
                .PageBlockRelatedArticles => { return self.PageBlockRelatedArticles.size(); },
                .PageBlockMap => { return self.PageBlockMap.size(); },
        }
    }
};
const PhoneCallDiscardReasonEnumID = enum(u32) {
    PhoneCallDiscardReasonMissed = 2246320897,
    PhoneCallDiscardReasonDisconnect = 3767910816,
    PhoneCallDiscardReasonHangup = 1471006352,
    PhoneCallDiscardReasonBusy = 4210550985,
};
const IPhoneCallDiscardReason = union(PhoneCallDiscardReasonEnumID) {
    PhoneCallDiscardReasonMissed: *const PhoneCallDiscardReasonMissed,
    PhoneCallDiscardReasonDisconnect: *const PhoneCallDiscardReasonDisconnect,
    PhoneCallDiscardReasonHangup: *const PhoneCallDiscardReasonHangup,
    PhoneCallDiscardReasonBusy: *const PhoneCallDiscardReasonBusy,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .PhoneCallDiscardReasonMissed => { return self.PhoneCallDiscardReasonMissed.size(); },
                .PhoneCallDiscardReasonDisconnect => { return self.PhoneCallDiscardReasonDisconnect.size(); },
                .PhoneCallDiscardReasonHangup => { return self.PhoneCallDiscardReasonHangup.size(); },
                .PhoneCallDiscardReasonBusy => { return self.PhoneCallDiscardReasonBusy.size(); },
        }
    }
};
const DataJSONEnumID = enum(u32) {
    DataJSON = 2104790276,
};
const IDataJSON = union(DataJSONEnumID) {
    DataJSON: *const DataJSON,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .DataJSON => { return self.DataJSON.size(); },
        }
    }
};
const LabeledPriceEnumID = enum(u32) {
    LabeledPrice = 3408489464,
};
const ILabeledPrice = union(LabeledPriceEnumID) {
    LabeledPrice: *const LabeledPrice,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .LabeledPrice => { return self.LabeledPrice.size(); },
        }
    }
};
const InvoiceEnumID = enum(u32) {
    Invoice = 1572428309,
};
const IInvoice = union(InvoiceEnumID) {
    Invoice: *const Invoice,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .Invoice => { return self.Invoice.size(); },
        }
    }
};
const PaymentChargeEnumID = enum(u32) {
    PaymentCharge = 3926049406,
};
const IPaymentCharge = union(PaymentChargeEnumID) {
    PaymentCharge: *const PaymentCharge,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .PaymentCharge => { return self.PaymentCharge.size(); },
        }
    }
};
const PostAddressEnumID = enum(u32) {
    PostAddress = 512535275,
};
const IPostAddress = union(PostAddressEnumID) {
    PostAddress: *const PostAddress,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .PostAddress => { return self.PostAddress.size(); },
        }
    }
};
const PaymentRequestedInfoEnumID = enum(u32) {
    PaymentRequestedInfo = 2426158996,
};
const IPaymentRequestedInfo = union(PaymentRequestedInfoEnumID) {
    PaymentRequestedInfo: *const PaymentRequestedInfo,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .PaymentRequestedInfo => { return self.PaymentRequestedInfo.size(); },
        }
    }
};
const PaymentSavedCredentialsEnumID = enum(u32) {
    PaymentSavedCredentialsCard = 3452074527,
};
const IPaymentSavedCredentials = union(PaymentSavedCredentialsEnumID) {
    PaymentSavedCredentialsCard: *const PaymentSavedCredentialsCard,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .PaymentSavedCredentialsCard => { return self.PaymentSavedCredentialsCard.size(); },
        }
    }
};
const WebDocumentEnumID = enum(u32) {
    WebDocument = 475467473,
    WebDocumentNoProxy = 4190682310,
};
const IWebDocument = union(WebDocumentEnumID) {
    WebDocument: *const WebDocument,
    WebDocumentNoProxy: *const WebDocumentNoProxy,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .WebDocument => { return self.WebDocument.size(); },
                .WebDocumentNoProxy => { return self.WebDocumentNoProxy.size(); },
        }
    }
};
const InputWebDocumentEnumID = enum(u32) {
    InputWebDocument = 2616017741,
};
const IInputWebDocument = union(InputWebDocumentEnumID) {
    InputWebDocument: *const InputWebDocument,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .InputWebDocument => { return self.InputWebDocument.size(); },
        }
    }
};
const InputWebFileLocationEnumID = enum(u32) {
    InputWebFileLocation = 3258570374,
    InputWebFileGeoPointLocation = 2669814217,
    InputWebFileAudioAlbumThumbLocation = 4100974884,
};
const IInputWebFileLocation = union(InputWebFileLocationEnumID) {
    InputWebFileLocation: *const InputWebFileLocation,
    InputWebFileGeoPointLocation: *const InputWebFileGeoPointLocation,
    InputWebFileAudioAlbumThumbLocation: *const InputWebFileAudioAlbumThumbLocation,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .InputWebFileLocation => { return self.InputWebFileLocation.size(); },
                .InputWebFileGeoPointLocation => { return self.InputWebFileGeoPointLocation.size(); },
                .InputWebFileAudioAlbumThumbLocation => { return self.InputWebFileAudioAlbumThumbLocation.size(); },
        }
    }
};
const UploadWebFileEnumID = enum(u32) {
    UploadWebFile = 568808380,
};
const IUploadWebFile = union(UploadWebFileEnumID) {
    UploadWebFile: *const UploadWebFile,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .UploadWebFile => { return self.UploadWebFile.size(); },
        }
    }
};
const PaymentsPaymentFormEnumID = enum(u32) {
    PaymentsPaymentForm = 2684716881,
    PaymentsPaymentFormStars = 2079764828,
    PaymentsPaymentFormStarGift = 3022376929,
};
const IPaymentsPaymentForm = union(PaymentsPaymentFormEnumID) {
    PaymentsPaymentForm: *const PaymentsPaymentForm,
    PaymentsPaymentFormStars: *const PaymentsPaymentFormStars,
    PaymentsPaymentFormStarGift: *const PaymentsPaymentFormStarGift,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .PaymentsPaymentForm => { return self.PaymentsPaymentForm.size(); },
                .PaymentsPaymentFormStars => { return self.PaymentsPaymentFormStars.size(); },
                .PaymentsPaymentFormStarGift => { return self.PaymentsPaymentFormStarGift.size(); },
        }
    }
};
const PaymentsValidatedRequestedInfoEnumID = enum(u32) {
    PaymentsValidatedRequestedInfo = 3510966403,
};
const IPaymentsValidatedRequestedInfo = union(PaymentsValidatedRequestedInfoEnumID) {
    PaymentsValidatedRequestedInfo: *const PaymentsValidatedRequestedInfo,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .PaymentsValidatedRequestedInfo => { return self.PaymentsValidatedRequestedInfo.size(); },
        }
    }
};
const PaymentsPaymentResultEnumID = enum(u32) {
    PaymentsPaymentResult = 1314881805,
    PaymentsPaymentVerificationNeeded = 3628142905,
};
const IPaymentsPaymentResult = union(PaymentsPaymentResultEnumID) {
    PaymentsPaymentResult: *const PaymentsPaymentResult,
    PaymentsPaymentVerificationNeeded: *const PaymentsPaymentVerificationNeeded,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .PaymentsPaymentResult => { return self.PaymentsPaymentResult.size(); },
                .PaymentsPaymentVerificationNeeded => { return self.PaymentsPaymentVerificationNeeded.size(); },
        }
    }
};
const PaymentsPaymentReceiptEnumID = enum(u32) {
    PaymentsPaymentReceipt = 1891958275,
    PaymentsPaymentReceiptStars = 3669751866,
};
const IPaymentsPaymentReceipt = union(PaymentsPaymentReceiptEnumID) {
    PaymentsPaymentReceipt: *const PaymentsPaymentReceipt,
    PaymentsPaymentReceiptStars: *const PaymentsPaymentReceiptStars,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .PaymentsPaymentReceipt => { return self.PaymentsPaymentReceipt.size(); },
                .PaymentsPaymentReceiptStars => { return self.PaymentsPaymentReceiptStars.size(); },
        }
    }
};
const PaymentsSavedInfoEnumID = enum(u32) {
    PaymentsSavedInfo = 4220511292,
};
const IPaymentsSavedInfo = union(PaymentsSavedInfoEnumID) {
    PaymentsSavedInfo: *const PaymentsSavedInfo,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .PaymentsSavedInfo => { return self.PaymentsSavedInfo.size(); },
        }
    }
};
const InputPaymentCredentialsEnumID = enum(u32) {
    InputPaymentCredentialsSaved = 3238965967,
    InputPaymentCredentials = 873977640,
    InputPaymentCredentialsApplePay = 178373535,
    InputPaymentCredentialsGooglePay = 2328045569,
};
const IInputPaymentCredentials = union(InputPaymentCredentialsEnumID) {
    InputPaymentCredentialsSaved: *const InputPaymentCredentialsSaved,
    InputPaymentCredentials: *const InputPaymentCredentials,
    InputPaymentCredentialsApplePay: *const InputPaymentCredentialsApplePay,
    InputPaymentCredentialsGooglePay: *const InputPaymentCredentialsGooglePay,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .InputPaymentCredentialsSaved => { return self.InputPaymentCredentialsSaved.size(); },
                .InputPaymentCredentials => { return self.InputPaymentCredentials.size(); },
                .InputPaymentCredentialsApplePay => { return self.InputPaymentCredentialsApplePay.size(); },
                .InputPaymentCredentialsGooglePay => { return self.InputPaymentCredentialsGooglePay.size(); },
        }
    }
};
const AccountTmpPasswordEnumID = enum(u32) {
    AccountTmpPassword = 3680828724,
};
const IAccountTmpPassword = union(AccountTmpPasswordEnumID) {
    AccountTmpPassword: *const AccountTmpPassword,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .AccountTmpPassword => { return self.AccountTmpPassword.size(); },
        }
    }
};
const ShippingOptionEnumID = enum(u32) {
    ShippingOption = 3055631583,
};
const IShippingOption = union(ShippingOptionEnumID) {
    ShippingOption: *const ShippingOption,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .ShippingOption => { return self.ShippingOption.size(); },
        }
    }
};
const InputStickerSetItemEnumID = enum(u32) {
    InputStickerSetItem = 853188252,
};
const IInputStickerSetItem = union(InputStickerSetItemEnumID) {
    InputStickerSetItem: *const InputStickerSetItem,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .InputStickerSetItem => { return self.InputStickerSetItem.size(); },
        }
    }
};
const InputPhoneCallEnumID = enum(u32) {
    InputPhoneCall = 506920429,
};
const IInputPhoneCall = union(InputPhoneCallEnumID) {
    InputPhoneCall: *const InputPhoneCall,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .InputPhoneCall => { return self.InputPhoneCall.size(); },
        }
    }
};
const PhoneCallEnumID = enum(u32) {
    PhoneCallEmpty = 1399245077,
    PhoneCallWaiting = 3307368215,
    PhoneCallRequested = 347139340,
    PhoneCallAccepted = 912311057,
    PhoneCall = 810769141,
    PhoneCallDiscarded = 1355435489,
};
const IPhoneCall = union(PhoneCallEnumID) {
    PhoneCallEmpty: *const PhoneCallEmpty,
    PhoneCallWaiting: *const PhoneCallWaiting,
    PhoneCallRequested: *const PhoneCallRequested,
    PhoneCallAccepted: *const PhoneCallAccepted,
    PhoneCall: *const PhoneCall,
    PhoneCallDiscarded: *const PhoneCallDiscarded,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .PhoneCallEmpty => { return self.PhoneCallEmpty.size(); },
                .PhoneCallWaiting => { return self.PhoneCallWaiting.size(); },
                .PhoneCallRequested => { return self.PhoneCallRequested.size(); },
                .PhoneCallAccepted => { return self.PhoneCallAccepted.size(); },
                .PhoneCall => { return self.PhoneCall.size(); },
                .PhoneCallDiscarded => { return self.PhoneCallDiscarded.size(); },
        }
    }
};
const PhoneConnectionEnumID = enum(u32) {
    PhoneConnection = 2629903303,
    PhoneConnectionWebrtc = 1667228533,
};
const IPhoneConnection = union(PhoneConnectionEnumID) {
    PhoneConnection: *const PhoneConnection,
    PhoneConnectionWebrtc: *const PhoneConnectionWebrtc,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .PhoneConnection => { return self.PhoneConnection.size(); },
                .PhoneConnectionWebrtc => { return self.PhoneConnectionWebrtc.size(); },
        }
    }
};
const PhoneCallProtocolEnumID = enum(u32) {
    PhoneCallProtocol = 4236742600,
};
const IPhoneCallProtocol = union(PhoneCallProtocolEnumID) {
    PhoneCallProtocol: *const PhoneCallProtocol,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .PhoneCallProtocol => { return self.PhoneCallProtocol.size(); },
        }
    }
};
const PhonePhoneCallEnumID = enum(u32) {
    PhonePhoneCall = 3968000320,
};
const IPhonePhoneCall = union(PhonePhoneCallEnumID) {
    PhonePhoneCall: *const PhonePhoneCall,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .PhonePhoneCall => { return self.PhonePhoneCall.size(); },
        }
    }
};
const UploadCdnFileEnumID = enum(u32) {
    UploadCdnFileReuploadNeeded = 4004045934,
    UploadCdnFile = 2845821519,
};
const IUploadCdnFile = union(UploadCdnFileEnumID) {
    UploadCdnFileReuploadNeeded: *const UploadCdnFileReuploadNeeded,
    UploadCdnFile: *const UploadCdnFile,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .UploadCdnFileReuploadNeeded => { return self.UploadCdnFileReuploadNeeded.size(); },
                .UploadCdnFile => { return self.UploadCdnFile.size(); },
        }
    }
};
const CdnPublicKeyEnumID = enum(u32) {
    CdnPublicKey = 3380800186,
};
const ICdnPublicKey = union(CdnPublicKeyEnumID) {
    CdnPublicKey: *const CdnPublicKey,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .CdnPublicKey => { return self.CdnPublicKey.size(); },
        }
    }
};
const CdnConfigEnumID = enum(u32) {
    CdnConfig = 1462101002,
};
const ICdnConfig = union(CdnConfigEnumID) {
    CdnConfig: *const CdnConfig,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .CdnConfig => { return self.CdnConfig.size(); },
        }
    }
};
const LangPackStringEnumID = enum(u32) {
    LangPackString = 3402727926,
    LangPackStringPluralized = 1816636575,
    LangPackStringDeleted = 695856818,
};
const ILangPackString = union(LangPackStringEnumID) {
    LangPackString: *const LangPackString,
    LangPackStringPluralized: *const LangPackStringPluralized,
    LangPackStringDeleted: *const LangPackStringDeleted,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .LangPackString => { return self.LangPackString.size(); },
                .LangPackStringPluralized => { return self.LangPackStringPluralized.size(); },
                .LangPackStringDeleted => { return self.LangPackStringDeleted.size(); },
        }
    }
};
const LangPackDifferenceEnumID = enum(u32) {
    LangPackDifference = 4085629430,
};
const ILangPackDifference = union(LangPackDifferenceEnumID) {
    LangPackDifference: *const LangPackDifference,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .LangPackDifference => { return self.LangPackDifference.size(); },
        }
    }
};
const LangPackLanguageEnumID = enum(u32) {
    LangPackLanguage = 4006239459,
};
const ILangPackLanguage = union(LangPackLanguageEnumID) {
    LangPackLanguage: *const LangPackLanguage,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .LangPackLanguage => { return self.LangPackLanguage.size(); },
        }
    }
};
const ChannelAdminLogEventActionEnumID = enum(u32) {
    ChannelAdminLogEventActionChangeTitle = 3873421349,
    ChannelAdminLogEventActionChangeAbout = 1427671598,
    ChannelAdminLogEventActionChangeUsername = 1783299128,
    ChannelAdminLogEventActionChangePhoto = 1129042607,
    ChannelAdminLogEventActionToggleInvites = 460916654,
    ChannelAdminLogEventActionToggleSignatures = 648939889,
    ChannelAdminLogEventActionUpdatePinned = 3924306968,
    ChannelAdminLogEventActionEditMessage = 1889215493,
    ChannelAdminLogEventActionDeleteMessage = 1121994683,
    ChannelAdminLogEventActionParticipantJoin = 405815507,
    ChannelAdminLogEventActionParticipantLeave = 4170676210,
    ChannelAdminLogEventActionParticipantInvite = 3810276568,
    ChannelAdminLogEventActionParticipantToggleBan = 3872931198,
    ChannelAdminLogEventActionParticipantToggleAdmin = 3580323600,
    ChannelAdminLogEventActionChangeStickerSet = 2982398631,
    ChannelAdminLogEventActionTogglePreHistoryHidden = 1599903217,
    ChannelAdminLogEventActionDefaultBannedRights = 771095562,
    ChannelAdminLogEventActionStopPoll = 2399639107,
    ChannelAdminLogEventActionChangeLinkedChat = 84703944,
    ChannelAdminLogEventActionChangeLocation = 241923758,
    ChannelAdminLogEventActionToggleSlowMode = 1401984889,
    ChannelAdminLogEventActionStartGroupCall = 589338437,
    ChannelAdminLogEventActionDiscardGroupCall = 3684667712,
    ChannelAdminLogEventActionParticipantMute = 4179895506,
    ChannelAdminLogEventActionParticipantUnmute = 3863226816,
    ChannelAdminLogEventActionToggleGroupCallSetting = 1456906823,
    ChannelAdminLogEventActionParticipantJoinByInvite = 4271882584,
    ChannelAdminLogEventActionExportedInviteDelete = 1515256996,
    ChannelAdminLogEventActionExportedInviteRevoke = 1091179342,
    ChannelAdminLogEventActionExportedInviteEdit = 3910056793,
    ChannelAdminLogEventActionParticipantVolume = 1048537159,
    ChannelAdminLogEventActionChangeHistoryTTL = 1855199800,
    ChannelAdminLogEventActionParticipantJoinByRequest = 2947945546,
    ChannelAdminLogEventActionToggleNoForwards = 3408578406,
    ChannelAdminLogEventActionSendMessage = 663693416,
    ChannelAdminLogEventActionChangeAvailableReactions = 3192786680,
    ChannelAdminLogEventActionChangeUsernames = 4031755177,
    ChannelAdminLogEventActionToggleForum = 46949251,
    ChannelAdminLogEventActionCreateTopic = 1483767080,
    ChannelAdminLogEventActionEditTopic = 4033864200,
    ChannelAdminLogEventActionDeleteTopic = 2920712457,
    ChannelAdminLogEventActionPinTopic = 1569535291,
    ChannelAdminLogEventActionToggleAntiSpam = 1693675004,
    ChannelAdminLogEventActionChangePeerColor = 1469507456,
    ChannelAdminLogEventActionChangeProfilePeerColor = 1581742885,
    ChannelAdminLogEventActionChangeWallpaper = 834362706,
    ChannelAdminLogEventActionChangeEmojiStatus = 1051328177,
    ChannelAdminLogEventActionChangeEmojiStickerSet = 1188577451,
    ChannelAdminLogEventActionToggleSignatureProfiles = 1621597305,
    ChannelAdminLogEventActionParticipantSubExtend = 1684286899,
};
const IChannelAdminLogEventAction = union(ChannelAdminLogEventActionEnumID) {
    ChannelAdminLogEventActionChangeTitle: *const ChannelAdminLogEventActionChangeTitle,
    ChannelAdminLogEventActionChangeAbout: *const ChannelAdminLogEventActionChangeAbout,
    ChannelAdminLogEventActionChangeUsername: *const ChannelAdminLogEventActionChangeUsername,
    ChannelAdminLogEventActionChangePhoto: *const ChannelAdminLogEventActionChangePhoto,
    ChannelAdminLogEventActionToggleInvites: *const ChannelAdminLogEventActionToggleInvites,
    ChannelAdminLogEventActionToggleSignatures: *const ChannelAdminLogEventActionToggleSignatures,
    ChannelAdminLogEventActionUpdatePinned: *const ChannelAdminLogEventActionUpdatePinned,
    ChannelAdminLogEventActionEditMessage: *const ChannelAdminLogEventActionEditMessage,
    ChannelAdminLogEventActionDeleteMessage: *const ChannelAdminLogEventActionDeleteMessage,
    ChannelAdminLogEventActionParticipantJoin: *const ChannelAdminLogEventActionParticipantJoin,
    ChannelAdminLogEventActionParticipantLeave: *const ChannelAdminLogEventActionParticipantLeave,
    ChannelAdminLogEventActionParticipantInvite: *const ChannelAdminLogEventActionParticipantInvite,
    ChannelAdminLogEventActionParticipantToggleBan: *const ChannelAdminLogEventActionParticipantToggleBan,
    ChannelAdminLogEventActionParticipantToggleAdmin: *const ChannelAdminLogEventActionParticipantToggleAdmin,
    ChannelAdminLogEventActionChangeStickerSet: *const ChannelAdminLogEventActionChangeStickerSet,
    ChannelAdminLogEventActionTogglePreHistoryHidden: *const ChannelAdminLogEventActionTogglePreHistoryHidden,
    ChannelAdminLogEventActionDefaultBannedRights: *const ChannelAdminLogEventActionDefaultBannedRights,
    ChannelAdminLogEventActionStopPoll: *const ChannelAdminLogEventActionStopPoll,
    ChannelAdminLogEventActionChangeLinkedChat: *const ChannelAdminLogEventActionChangeLinkedChat,
    ChannelAdminLogEventActionChangeLocation: *const ChannelAdminLogEventActionChangeLocation,
    ChannelAdminLogEventActionToggleSlowMode: *const ChannelAdminLogEventActionToggleSlowMode,
    ChannelAdminLogEventActionStartGroupCall: *const ChannelAdminLogEventActionStartGroupCall,
    ChannelAdminLogEventActionDiscardGroupCall: *const ChannelAdminLogEventActionDiscardGroupCall,
    ChannelAdminLogEventActionParticipantMute: *const ChannelAdminLogEventActionParticipantMute,
    ChannelAdminLogEventActionParticipantUnmute: *const ChannelAdminLogEventActionParticipantUnmute,
    ChannelAdminLogEventActionToggleGroupCallSetting: *const ChannelAdminLogEventActionToggleGroupCallSetting,
    ChannelAdminLogEventActionParticipantJoinByInvite: *const ChannelAdminLogEventActionParticipantJoinByInvite,
    ChannelAdminLogEventActionExportedInviteDelete: *const ChannelAdminLogEventActionExportedInviteDelete,
    ChannelAdminLogEventActionExportedInviteRevoke: *const ChannelAdminLogEventActionExportedInviteRevoke,
    ChannelAdminLogEventActionExportedInviteEdit: *const ChannelAdminLogEventActionExportedInviteEdit,
    ChannelAdminLogEventActionParticipantVolume: *const ChannelAdminLogEventActionParticipantVolume,
    ChannelAdminLogEventActionChangeHistoryTTL: *const ChannelAdminLogEventActionChangeHistoryTTL,
    ChannelAdminLogEventActionParticipantJoinByRequest: *const ChannelAdminLogEventActionParticipantJoinByRequest,
    ChannelAdminLogEventActionToggleNoForwards: *const ChannelAdminLogEventActionToggleNoForwards,
    ChannelAdminLogEventActionSendMessage: *const ChannelAdminLogEventActionSendMessage,
    ChannelAdminLogEventActionChangeAvailableReactions: *const ChannelAdminLogEventActionChangeAvailableReactions,
    ChannelAdminLogEventActionChangeUsernames: *const ChannelAdminLogEventActionChangeUsernames,
    ChannelAdminLogEventActionToggleForum: *const ChannelAdminLogEventActionToggleForum,
    ChannelAdminLogEventActionCreateTopic: *const ChannelAdminLogEventActionCreateTopic,
    ChannelAdminLogEventActionEditTopic: *const ChannelAdminLogEventActionEditTopic,
    ChannelAdminLogEventActionDeleteTopic: *const ChannelAdminLogEventActionDeleteTopic,
    ChannelAdminLogEventActionPinTopic: *const ChannelAdminLogEventActionPinTopic,
    ChannelAdminLogEventActionToggleAntiSpam: *const ChannelAdminLogEventActionToggleAntiSpam,
    ChannelAdminLogEventActionChangePeerColor: *const ChannelAdminLogEventActionChangePeerColor,
    ChannelAdminLogEventActionChangeProfilePeerColor: *const ChannelAdminLogEventActionChangeProfilePeerColor,
    ChannelAdminLogEventActionChangeWallpaper: *const ChannelAdminLogEventActionChangeWallpaper,
    ChannelAdminLogEventActionChangeEmojiStatus: *const ChannelAdminLogEventActionChangeEmojiStatus,
    ChannelAdminLogEventActionChangeEmojiStickerSet: *const ChannelAdminLogEventActionChangeEmojiStickerSet,
    ChannelAdminLogEventActionToggleSignatureProfiles: *const ChannelAdminLogEventActionToggleSignatureProfiles,
    ChannelAdminLogEventActionParticipantSubExtend: *const ChannelAdminLogEventActionParticipantSubExtend,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .ChannelAdminLogEventActionChangeTitle => { return self.ChannelAdminLogEventActionChangeTitle.size(); },
                .ChannelAdminLogEventActionChangeAbout => { return self.ChannelAdminLogEventActionChangeAbout.size(); },
                .ChannelAdminLogEventActionChangeUsername => { return self.ChannelAdminLogEventActionChangeUsername.size(); },
                .ChannelAdminLogEventActionChangePhoto => { return self.ChannelAdminLogEventActionChangePhoto.size(); },
                .ChannelAdminLogEventActionToggleInvites => { return self.ChannelAdminLogEventActionToggleInvites.size(); },
                .ChannelAdminLogEventActionToggleSignatures => { return self.ChannelAdminLogEventActionToggleSignatures.size(); },
                .ChannelAdminLogEventActionUpdatePinned => { return self.ChannelAdminLogEventActionUpdatePinned.size(); },
                .ChannelAdminLogEventActionEditMessage => { return self.ChannelAdminLogEventActionEditMessage.size(); },
                .ChannelAdminLogEventActionDeleteMessage => { return self.ChannelAdminLogEventActionDeleteMessage.size(); },
                .ChannelAdminLogEventActionParticipantJoin => { return self.ChannelAdminLogEventActionParticipantJoin.size(); },
                .ChannelAdminLogEventActionParticipantLeave => { return self.ChannelAdminLogEventActionParticipantLeave.size(); },
                .ChannelAdminLogEventActionParticipantInvite => { return self.ChannelAdminLogEventActionParticipantInvite.size(); },
                .ChannelAdminLogEventActionParticipantToggleBan => { return self.ChannelAdminLogEventActionParticipantToggleBan.size(); },
                .ChannelAdminLogEventActionParticipantToggleAdmin => { return self.ChannelAdminLogEventActionParticipantToggleAdmin.size(); },
                .ChannelAdminLogEventActionChangeStickerSet => { return self.ChannelAdminLogEventActionChangeStickerSet.size(); },
                .ChannelAdminLogEventActionTogglePreHistoryHidden => { return self.ChannelAdminLogEventActionTogglePreHistoryHidden.size(); },
                .ChannelAdminLogEventActionDefaultBannedRights => { return self.ChannelAdminLogEventActionDefaultBannedRights.size(); },
                .ChannelAdminLogEventActionStopPoll => { return self.ChannelAdminLogEventActionStopPoll.size(); },
                .ChannelAdminLogEventActionChangeLinkedChat => { return self.ChannelAdminLogEventActionChangeLinkedChat.size(); },
                .ChannelAdminLogEventActionChangeLocation => { return self.ChannelAdminLogEventActionChangeLocation.size(); },
                .ChannelAdminLogEventActionToggleSlowMode => { return self.ChannelAdminLogEventActionToggleSlowMode.size(); },
                .ChannelAdminLogEventActionStartGroupCall => { return self.ChannelAdminLogEventActionStartGroupCall.size(); },
                .ChannelAdminLogEventActionDiscardGroupCall => { return self.ChannelAdminLogEventActionDiscardGroupCall.size(); },
                .ChannelAdminLogEventActionParticipantMute => { return self.ChannelAdminLogEventActionParticipantMute.size(); },
                .ChannelAdminLogEventActionParticipantUnmute => { return self.ChannelAdminLogEventActionParticipantUnmute.size(); },
                .ChannelAdminLogEventActionToggleGroupCallSetting => { return self.ChannelAdminLogEventActionToggleGroupCallSetting.size(); },
                .ChannelAdminLogEventActionParticipantJoinByInvite => { return self.ChannelAdminLogEventActionParticipantJoinByInvite.size(); },
                .ChannelAdminLogEventActionExportedInviteDelete => { return self.ChannelAdminLogEventActionExportedInviteDelete.size(); },
                .ChannelAdminLogEventActionExportedInviteRevoke => { return self.ChannelAdminLogEventActionExportedInviteRevoke.size(); },
                .ChannelAdminLogEventActionExportedInviteEdit => { return self.ChannelAdminLogEventActionExportedInviteEdit.size(); },
                .ChannelAdminLogEventActionParticipantVolume => { return self.ChannelAdminLogEventActionParticipantVolume.size(); },
                .ChannelAdminLogEventActionChangeHistoryTTL => { return self.ChannelAdminLogEventActionChangeHistoryTTL.size(); },
                .ChannelAdminLogEventActionParticipantJoinByRequest => { return self.ChannelAdminLogEventActionParticipantJoinByRequest.size(); },
                .ChannelAdminLogEventActionToggleNoForwards => { return self.ChannelAdminLogEventActionToggleNoForwards.size(); },
                .ChannelAdminLogEventActionSendMessage => { return self.ChannelAdminLogEventActionSendMessage.size(); },
                .ChannelAdminLogEventActionChangeAvailableReactions => { return self.ChannelAdminLogEventActionChangeAvailableReactions.size(); },
                .ChannelAdminLogEventActionChangeUsernames => { return self.ChannelAdminLogEventActionChangeUsernames.size(); },
                .ChannelAdminLogEventActionToggleForum => { return self.ChannelAdminLogEventActionToggleForum.size(); },
                .ChannelAdminLogEventActionCreateTopic => { return self.ChannelAdminLogEventActionCreateTopic.size(); },
                .ChannelAdminLogEventActionEditTopic => { return self.ChannelAdminLogEventActionEditTopic.size(); },
                .ChannelAdminLogEventActionDeleteTopic => { return self.ChannelAdminLogEventActionDeleteTopic.size(); },
                .ChannelAdminLogEventActionPinTopic => { return self.ChannelAdminLogEventActionPinTopic.size(); },
                .ChannelAdminLogEventActionToggleAntiSpam => { return self.ChannelAdminLogEventActionToggleAntiSpam.size(); },
                .ChannelAdminLogEventActionChangePeerColor => { return self.ChannelAdminLogEventActionChangePeerColor.size(); },
                .ChannelAdminLogEventActionChangeProfilePeerColor => { return self.ChannelAdminLogEventActionChangeProfilePeerColor.size(); },
                .ChannelAdminLogEventActionChangeWallpaper => { return self.ChannelAdminLogEventActionChangeWallpaper.size(); },
                .ChannelAdminLogEventActionChangeEmojiStatus => { return self.ChannelAdminLogEventActionChangeEmojiStatus.size(); },
                .ChannelAdminLogEventActionChangeEmojiStickerSet => { return self.ChannelAdminLogEventActionChangeEmojiStickerSet.size(); },
                .ChannelAdminLogEventActionToggleSignatureProfiles => { return self.ChannelAdminLogEventActionToggleSignatureProfiles.size(); },
                .ChannelAdminLogEventActionParticipantSubExtend => { return self.ChannelAdminLogEventActionParticipantSubExtend.size(); },
        }
    }
};
const ChannelAdminLogEventEnumID = enum(u32) {
    ChannelAdminLogEvent = 531458253,
};
const IChannelAdminLogEvent = union(ChannelAdminLogEventEnumID) {
    ChannelAdminLogEvent: *const ChannelAdminLogEvent,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .ChannelAdminLogEvent => { return self.ChannelAdminLogEvent.size(); },
        }
    }
};
const ChannelsAdminLogResultsEnumID = enum(u32) {
    ChannelsAdminLogResults = 3985307469,
};
const IChannelsAdminLogResults = union(ChannelsAdminLogResultsEnumID) {
    ChannelsAdminLogResults: *const ChannelsAdminLogResults,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .ChannelsAdminLogResults => { return self.ChannelsAdminLogResults.size(); },
        }
    }
};
const ChannelAdminLogEventsFilterEnumID = enum(u32) {
    ChannelAdminLogEventsFilter = 3926948580,
};
const IChannelAdminLogEventsFilter = union(ChannelAdminLogEventsFilterEnumID) {
    ChannelAdminLogEventsFilter: *const ChannelAdminLogEventsFilter,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .ChannelAdminLogEventsFilter => { return self.ChannelAdminLogEventsFilter.size(); },
        }
    }
};
const PopularContactEnumID = enum(u32) {
    PopularContact = 1558266229,
};
const IPopularContact = union(PopularContactEnumID) {
    PopularContact: *const PopularContact,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .PopularContact => { return self.PopularContact.size(); },
        }
    }
};
const MessagesFavedStickersEnumID = enum(u32) {
    MessagesFavedStickersNotModified = 2660214483,
    MessagesFavedStickers = 750063767,
};
const IMessagesFavedStickers = union(MessagesFavedStickersEnumID) {
    MessagesFavedStickersNotModified: *const MessagesFavedStickersNotModified,
    MessagesFavedStickers: *const MessagesFavedStickers,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .MessagesFavedStickersNotModified => { return self.MessagesFavedStickersNotModified.size(); },
                .MessagesFavedStickers => { return self.MessagesFavedStickers.size(); },
        }
    }
};
const RecentMeUrlEnumID = enum(u32) {
    RecentMeUrlUnknown = 1189204285,
    RecentMeUrlUser = 3106671074,
    RecentMeUrlChat = 3000660434,
    RecentMeUrlChatInvite = 3947431965,
    RecentMeUrlStickerSet = 3154794460,
};
const IRecentMeUrl = union(RecentMeUrlEnumID) {
    RecentMeUrlUnknown: *const RecentMeUrlUnknown,
    RecentMeUrlUser: *const RecentMeUrlUser,
    RecentMeUrlChat: *const RecentMeUrlChat,
    RecentMeUrlChatInvite: *const RecentMeUrlChatInvite,
    RecentMeUrlStickerSet: *const RecentMeUrlStickerSet,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .RecentMeUrlUnknown => { return self.RecentMeUrlUnknown.size(); },
                .RecentMeUrlUser => { return self.RecentMeUrlUser.size(); },
                .RecentMeUrlChat => { return self.RecentMeUrlChat.size(); },
                .RecentMeUrlChatInvite => { return self.RecentMeUrlChatInvite.size(); },
                .RecentMeUrlStickerSet => { return self.RecentMeUrlStickerSet.size(); },
        }
    }
};
const HelpRecentMeUrlsEnumID = enum(u32) {
    HelpRecentMeUrls = 235081943,
};
const IHelpRecentMeUrls = union(HelpRecentMeUrlsEnumID) {
    HelpRecentMeUrls: *const HelpRecentMeUrls,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .HelpRecentMeUrls => { return self.HelpRecentMeUrls.size(); },
        }
    }
};
const InputSingleMediaEnumID = enum(u32) {
    InputSingleMedia = 482797855,
};
const IInputSingleMedia = union(InputSingleMediaEnumID) {
    InputSingleMedia: *const InputSingleMedia,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .InputSingleMedia => { return self.InputSingleMedia.size(); },
        }
    }
};
const WebAuthorizationEnumID = enum(u32) {
    WebAuthorization = 2801333330,
};
const IWebAuthorization = union(WebAuthorizationEnumID) {
    WebAuthorization: *const WebAuthorization,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .WebAuthorization => { return self.WebAuthorization.size(); },
        }
    }
};
const AccountWebAuthorizationsEnumID = enum(u32) {
    AccountWebAuthorizations = 3981887996,
};
const IAccountWebAuthorizations = union(AccountWebAuthorizationsEnumID) {
    AccountWebAuthorizations: *const AccountWebAuthorizations,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .AccountWebAuthorizations => { return self.AccountWebAuthorizations.size(); },
        }
    }
};
const InputMessageEnumID = enum(u32) {
    InputMessageID = 2792792866,
    InputMessageReplyTo = 3134751637,
    InputMessagePinned = 2257003832,
    InputMessageCallbackQuery = 2902071934,
};
const IInputMessage = union(InputMessageEnumID) {
    InputMessageID: *const InputMessageID,
    InputMessageReplyTo: *const InputMessageReplyTo,
    InputMessagePinned: *const InputMessagePinned,
    InputMessageCallbackQuery: *const InputMessageCallbackQuery,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .InputMessageID => { return self.InputMessageID.size(); },
                .InputMessageReplyTo => { return self.InputMessageReplyTo.size(); },
                .InputMessagePinned => { return self.InputMessagePinned.size(); },
                .InputMessageCallbackQuery => { return self.InputMessageCallbackQuery.size(); },
        }
    }
};
const InputDialogPeerEnumID = enum(u32) {
    InputDialogPeer = 4239064759,
    InputDialogPeerFolder = 1684014375,
};
const IInputDialogPeer = union(InputDialogPeerEnumID) {
    InputDialogPeer: *const InputDialogPeer,
    InputDialogPeerFolder: *const InputDialogPeerFolder,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .InputDialogPeer => { return self.InputDialogPeer.size(); },
                .InputDialogPeerFolder => { return self.InputDialogPeerFolder.size(); },
        }
    }
};
const DialogPeerEnumID = enum(u32) {
    DialogPeer = 3849174789,
    DialogPeerFolder = 1363483106,
};
const IDialogPeer = union(DialogPeerEnumID) {
    DialogPeer: *const DialogPeer,
    DialogPeerFolder: *const DialogPeerFolder,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .DialogPeer => { return self.DialogPeer.size(); },
                .DialogPeerFolder => { return self.DialogPeerFolder.size(); },
        }
    }
};
const MessagesFoundStickerSetsEnumID = enum(u32) {
    MessagesFoundStickerSetsNotModified = 223655517,
    MessagesFoundStickerSets = 2331024850,
};
const IMessagesFoundStickerSets = union(MessagesFoundStickerSetsEnumID) {
    MessagesFoundStickerSetsNotModified: *const MessagesFoundStickerSetsNotModified,
    MessagesFoundStickerSets: *const MessagesFoundStickerSets,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .MessagesFoundStickerSetsNotModified => { return self.MessagesFoundStickerSetsNotModified.size(); },
                .MessagesFoundStickerSets => { return self.MessagesFoundStickerSets.size(); },
        }
    }
};
const FileHashEnumID = enum(u32) {
    FileHash = 4087022428,
};
const IFileHash = union(FileHashEnumID) {
    FileHash: *const FileHash,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .FileHash => { return self.FileHash.size(); },
        }
    }
};
const InputClientProxyEnumID = enum(u32) {
    InputClientProxy = 1968737087,
};
const IInputClientProxy = union(InputClientProxyEnumID) {
    InputClientProxy: *const InputClientProxy,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .InputClientProxy => { return self.InputClientProxy.size(); },
        }
    }
};
const HelpTermsOfServiceUpdateEnumID = enum(u32) {
    HelpTermsOfServiceUpdateEmpty = 3811614591,
    HelpTermsOfServiceUpdate = 686618977,
};
const IHelpTermsOfServiceUpdate = union(HelpTermsOfServiceUpdateEnumID) {
    HelpTermsOfServiceUpdateEmpty: *const HelpTermsOfServiceUpdateEmpty,
    HelpTermsOfServiceUpdate: *const HelpTermsOfServiceUpdate,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .HelpTermsOfServiceUpdateEmpty => { return self.HelpTermsOfServiceUpdateEmpty.size(); },
                .HelpTermsOfServiceUpdate => { return self.HelpTermsOfServiceUpdate.size(); },
        }
    }
};
const InputSecureFileEnumID = enum(u32) {
    InputSecureFileUploaded = 859091184,
    InputSecureFile = 1399317950,
};
const IInputSecureFile = union(InputSecureFileEnumID) {
    InputSecureFileUploaded: *const InputSecureFileUploaded,
    InputSecureFile: *const InputSecureFile,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .InputSecureFileUploaded => { return self.InputSecureFileUploaded.size(); },
                .InputSecureFile => { return self.InputSecureFile.size(); },
        }
    }
};
const SecureFileEnumID = enum(u32) {
    SecureFileEmpty = 1679398724,
    SecureFile = 2097791614,
};
const ISecureFile = union(SecureFileEnumID) {
    SecureFileEmpty: *const SecureFileEmpty,
    SecureFile: *const SecureFile,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .SecureFileEmpty => { return self.SecureFileEmpty.size(); },
                .SecureFile => { return self.SecureFile.size(); },
        }
    }
};
const SecureDataEnumID = enum(u32) {
    SecureData = 2330640067,
};
const ISecureData = union(SecureDataEnumID) {
    SecureData: *const SecureData,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .SecureData => { return self.SecureData.size(); },
        }
    }
};
const SecurePlainDataEnumID = enum(u32) {
    SecurePlainPhone = 2103482845,
    SecurePlainEmail = 569137759,
};
const ISecurePlainData = union(SecurePlainDataEnumID) {
    SecurePlainPhone: *const SecurePlainPhone,
    SecurePlainEmail: *const SecurePlainEmail,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .SecurePlainPhone => { return self.SecurePlainPhone.size(); },
                .SecurePlainEmail => { return self.SecurePlainEmail.size(); },
        }
    }
};
const SecureValueTypeEnumID = enum(u32) {
    SecureValueTypePersonalDetails = 2636808675,
    SecureValueTypePassport = 1034709504,
    SecureValueTypeDriverLicense = 115615172,
    SecureValueTypeIdentityCard = 2698015819,
    SecureValueTypeInternalPassport = 2577698595,
    SecureValueTypeAddress = 3420659238,
    SecureValueTypeUtilityBill = 4231435598,
    SecureValueTypeBankStatement = 2299755533,
    SecureValueTypeRentalAgreement = 2340959368,
    SecureValueTypePassportRegistration = 2581823594,
    SecureValueTypeTemporaryRegistration = 3926060083,
    SecureValueTypePhone = 3005262555,
    SecureValueTypeEmail = 2386339822,
};
const ISecureValueType = union(SecureValueTypeEnumID) {
    SecureValueTypePersonalDetails: *const SecureValueTypePersonalDetails,
    SecureValueTypePassport: *const SecureValueTypePassport,
    SecureValueTypeDriverLicense: *const SecureValueTypeDriverLicense,
    SecureValueTypeIdentityCard: *const SecureValueTypeIdentityCard,
    SecureValueTypeInternalPassport: *const SecureValueTypeInternalPassport,
    SecureValueTypeAddress: *const SecureValueTypeAddress,
    SecureValueTypeUtilityBill: *const SecureValueTypeUtilityBill,
    SecureValueTypeBankStatement: *const SecureValueTypeBankStatement,
    SecureValueTypeRentalAgreement: *const SecureValueTypeRentalAgreement,
    SecureValueTypePassportRegistration: *const SecureValueTypePassportRegistration,
    SecureValueTypeTemporaryRegistration: *const SecureValueTypeTemporaryRegistration,
    SecureValueTypePhone: *const SecureValueTypePhone,
    SecureValueTypeEmail: *const SecureValueTypeEmail,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .SecureValueTypePersonalDetails => { return self.SecureValueTypePersonalDetails.size(); },
                .SecureValueTypePassport => { return self.SecureValueTypePassport.size(); },
                .SecureValueTypeDriverLicense => { return self.SecureValueTypeDriverLicense.size(); },
                .SecureValueTypeIdentityCard => { return self.SecureValueTypeIdentityCard.size(); },
                .SecureValueTypeInternalPassport => { return self.SecureValueTypeInternalPassport.size(); },
                .SecureValueTypeAddress => { return self.SecureValueTypeAddress.size(); },
                .SecureValueTypeUtilityBill => { return self.SecureValueTypeUtilityBill.size(); },
                .SecureValueTypeBankStatement => { return self.SecureValueTypeBankStatement.size(); },
                .SecureValueTypeRentalAgreement => { return self.SecureValueTypeRentalAgreement.size(); },
                .SecureValueTypePassportRegistration => { return self.SecureValueTypePassportRegistration.size(); },
                .SecureValueTypeTemporaryRegistration => { return self.SecureValueTypeTemporaryRegistration.size(); },
                .SecureValueTypePhone => { return self.SecureValueTypePhone.size(); },
                .SecureValueTypeEmail => { return self.SecureValueTypeEmail.size(); },
        }
    }
};
const SecureValueEnumID = enum(u32) {
    SecureValue = 411017418,
};
const ISecureValue = union(SecureValueEnumID) {
    SecureValue: *const SecureValue,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .SecureValue => { return self.SecureValue.size(); },
        }
    }
};
const InputSecureValueEnumID = enum(u32) {
    InputSecureValue = 3676426407,
};
const IInputSecureValue = union(InputSecureValueEnumID) {
    InputSecureValue: *const InputSecureValue,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .InputSecureValue => { return self.InputSecureValue.size(); },
        }
    }
};
const SecureValueHashEnumID = enum(u32) {
    SecureValueHash = 3978218928,
};
const ISecureValueHash = union(SecureValueHashEnumID) {
    SecureValueHash: *const SecureValueHash,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .SecureValueHash => { return self.SecureValueHash.size(); },
        }
    }
};
const SecureValueErrorEnumID = enum(u32) {
    SecureValueErrorData = 3903065049,
    SecureValueErrorFrontSide = 12467706,
    SecureValueErrorReverseSide = 2257201829,
    SecureValueErrorSelfie = 3845639894,
    SecureValueErrorFile = 2054162547,
    SecureValueErrorFiles = 1717706985,
    SecureValueError = 2258466191,
    SecureValueErrorTranslationFile = 2702460784,
    SecureValueErrorTranslationFiles = 878931416,
};
const ISecureValueError = union(SecureValueErrorEnumID) {
    SecureValueErrorData: *const SecureValueErrorData,
    SecureValueErrorFrontSide: *const SecureValueErrorFrontSide,
    SecureValueErrorReverseSide: *const SecureValueErrorReverseSide,
    SecureValueErrorSelfie: *const SecureValueErrorSelfie,
    SecureValueErrorFile: *const SecureValueErrorFile,
    SecureValueErrorFiles: *const SecureValueErrorFiles,
    SecureValueError: *const SecureValueError,
    SecureValueErrorTranslationFile: *const SecureValueErrorTranslationFile,
    SecureValueErrorTranslationFiles: *const SecureValueErrorTranslationFiles,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .SecureValueErrorData => { return self.SecureValueErrorData.size(); },
                .SecureValueErrorFrontSide => { return self.SecureValueErrorFrontSide.size(); },
                .SecureValueErrorReverseSide => { return self.SecureValueErrorReverseSide.size(); },
                .SecureValueErrorSelfie => { return self.SecureValueErrorSelfie.size(); },
                .SecureValueErrorFile => { return self.SecureValueErrorFile.size(); },
                .SecureValueErrorFiles => { return self.SecureValueErrorFiles.size(); },
                .SecureValueError => { return self.SecureValueError.size(); },
                .SecureValueErrorTranslationFile => { return self.SecureValueErrorTranslationFile.size(); },
                .SecureValueErrorTranslationFiles => { return self.SecureValueErrorTranslationFiles.size(); },
        }
    }
};
const SecureCredentialsEncryptedEnumID = enum(u32) {
    SecureCredentialsEncrypted = 871426631,
};
const ISecureCredentialsEncrypted = union(SecureCredentialsEncryptedEnumID) {
    SecureCredentialsEncrypted: *const SecureCredentialsEncrypted,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .SecureCredentialsEncrypted => { return self.SecureCredentialsEncrypted.size(); },
        }
    }
};
const AccountAuthorizationFormEnumID = enum(u32) {
    AccountAuthorizationForm = 2905480408,
};
const IAccountAuthorizationForm = union(AccountAuthorizationFormEnumID) {
    AccountAuthorizationForm: *const AccountAuthorizationForm,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .AccountAuthorizationForm => { return self.AccountAuthorizationForm.size(); },
        }
    }
};
const AccountSentEmailCodeEnumID = enum(u32) {
    AccountSentEmailCode = 2166326607,
};
const IAccountSentEmailCode = union(AccountSentEmailCodeEnumID) {
    AccountSentEmailCode: *const AccountSentEmailCode,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .AccountSentEmailCode => { return self.AccountSentEmailCode.size(); },
        }
    }
};
const HelpDeepLinkInfoEnumID = enum(u32) {
    HelpDeepLinkInfoEmpty = 1722786150,
    HelpDeepLinkInfo = 1783556146,
};
const IHelpDeepLinkInfo = union(HelpDeepLinkInfoEnumID) {
    HelpDeepLinkInfoEmpty: *const HelpDeepLinkInfoEmpty,
    HelpDeepLinkInfo: *const HelpDeepLinkInfo,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .HelpDeepLinkInfoEmpty => { return self.HelpDeepLinkInfoEmpty.size(); },
                .HelpDeepLinkInfo => { return self.HelpDeepLinkInfo.size(); },
        }
    }
};
const SavedContactEnumID = enum(u32) {
    SavedPhoneContact = 289586518,
};
const ISavedContact = union(SavedContactEnumID) {
    SavedPhoneContact: *const SavedPhoneContact,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .SavedPhoneContact => { return self.SavedPhoneContact.size(); },
        }
    }
};
const AccountTakeoutEnumID = enum(u32) {
    AccountTakeout = 1304052993,
};
const IAccountTakeout = union(AccountTakeoutEnumID) {
    AccountTakeout: *const AccountTakeout,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .AccountTakeout => { return self.AccountTakeout.size(); },
        }
    }
};
const PasswordKdfAlgoEnumID = enum(u32) {
    PasswordKdfAlgoUnknown = 3562713238,
    PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow = 982592842,
};
const IPasswordKdfAlgo = union(PasswordKdfAlgoEnumID) {
    PasswordKdfAlgoUnknown: *const PasswordKdfAlgoUnknown,
    PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow: *const PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .PasswordKdfAlgoUnknown => { return self.PasswordKdfAlgoUnknown.size(); },
                .PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow => { return self.PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow.size(); },
        }
    }
};
const SecurePasswordKdfAlgoEnumID = enum(u32) {
    SecurePasswordKdfAlgoUnknown = 4883767,
    SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000 = 3153255840,
    SecurePasswordKdfAlgoSHA512 = 2252807570,
};
const ISecurePasswordKdfAlgo = union(SecurePasswordKdfAlgoEnumID) {
    SecurePasswordKdfAlgoUnknown: *const SecurePasswordKdfAlgoUnknown,
    SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000: *const SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000,
    SecurePasswordKdfAlgoSHA512: *const SecurePasswordKdfAlgoSHA512,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .SecurePasswordKdfAlgoUnknown => { return self.SecurePasswordKdfAlgoUnknown.size(); },
                .SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000 => { return self.SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000.size(); },
                .SecurePasswordKdfAlgoSHA512 => { return self.SecurePasswordKdfAlgoSHA512.size(); },
        }
    }
};
const SecureSecretSettingsEnumID = enum(u32) {
    SecureSecretSettings = 354925740,
};
const ISecureSecretSettings = union(SecureSecretSettingsEnumID) {
    SecureSecretSettings: *const SecureSecretSettings,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .SecureSecretSettings => { return self.SecureSecretSettings.size(); },
        }
    }
};
const InputCheckPasswordSRPEnumID = enum(u32) {
    InputCheckPasswordEmpty = 2558588504,
    InputCheckPasswordSRP = 3531600002,
};
const IInputCheckPasswordSRP = union(InputCheckPasswordSRPEnumID) {
    InputCheckPasswordEmpty: *const InputCheckPasswordEmpty,
    InputCheckPasswordSRP: *const InputCheckPasswordSRP,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .InputCheckPasswordEmpty => { return self.InputCheckPasswordEmpty.size(); },
                .InputCheckPasswordSRP => { return self.InputCheckPasswordSRP.size(); },
        }
    }
};
const SecureRequiredTypeEnumID = enum(u32) {
    SecureRequiredType = 2191366618,
    SecureRequiredTypeOneOf = 41187252,
};
const ISecureRequiredType = union(SecureRequiredTypeEnumID) {
    SecureRequiredType: *const SecureRequiredType,
    SecureRequiredTypeOneOf: *const SecureRequiredTypeOneOf,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .SecureRequiredType => { return self.SecureRequiredType.size(); },
                .SecureRequiredTypeOneOf => { return self.SecureRequiredTypeOneOf.size(); },
        }
    }
};
const HelpPassportConfigEnumID = enum(u32) {
    HelpPassportConfigNotModified = 3216634967,
    HelpPassportConfig = 2694370991,
};
const IHelpPassportConfig = union(HelpPassportConfigEnumID) {
    HelpPassportConfigNotModified: *const HelpPassportConfigNotModified,
    HelpPassportConfig: *const HelpPassportConfig,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .HelpPassportConfigNotModified => { return self.HelpPassportConfigNotModified.size(); },
                .HelpPassportConfig => { return self.HelpPassportConfig.size(); },
        }
    }
};
const InputAppEventEnumID = enum(u32) {
    InputAppEvent = 488313413,
};
const IInputAppEvent = union(InputAppEventEnumID) {
    InputAppEvent: *const InputAppEvent,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .InputAppEvent => { return self.InputAppEvent.size(); },
        }
    }
};
const JSONObjectValueEnumID = enum(u32) {
    JsonObjectValue = 3235781593,
};
const IJSONObjectValue = union(JSONObjectValueEnumID) {
    JsonObjectValue: *const JsonObjectValue,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .JsonObjectValue => { return self.JsonObjectValue.size(); },
        }
    }
};
const JSONValueEnumID = enum(u32) {
    JsonNull = 1064139624,
    JsonBool = 3342098026,
    JsonNumber = 736157604,
    JsonString = 3072226938,
    JsonArray = 4148447075,
    JsonObject = 2579616925,
};
const IJSONValue = union(JSONValueEnumID) {
    JsonNull: *const JsonNull,
    JsonBool: *const JsonBool,
    JsonNumber: *const JsonNumber,
    JsonString: *const JsonString,
    JsonArray: *const JsonArray,
    JsonObject: *const JsonObject,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .JsonNull => { return self.JsonNull.size(); },
                .JsonBool => { return self.JsonBool.size(); },
                .JsonNumber => { return self.JsonNumber.size(); },
                .JsonString => { return self.JsonString.size(); },
                .JsonArray => { return self.JsonArray.size(); },
                .JsonObject => { return self.JsonObject.size(); },
        }
    }
};
const PageTableCellEnumID = enum(u32) {
    PageTableCell = 878078826,
};
const IPageTableCell = union(PageTableCellEnumID) {
    PageTableCell: *const PageTableCell,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .PageTableCell => { return self.PageTableCell.size(); },
        }
    }
};
const PageTableRowEnumID = enum(u32) {
    PageTableRow = 3770729957,
};
const IPageTableRow = union(PageTableRowEnumID) {
    PageTableRow: *const PageTableRow,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .PageTableRow => { return self.PageTableRow.size(); },
        }
    }
};
const PageCaptionEnumID = enum(u32) {
    PageCaption = 1869903447,
};
const IPageCaption = union(PageCaptionEnumID) {
    PageCaption: *const PageCaption,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .PageCaption => { return self.PageCaption.size(); },
        }
    }
};
const PageListItemEnumID = enum(u32) {
    PageListItemText = 3106911949,
    PageListItemBlocks = 635466748,
};
const IPageListItem = union(PageListItemEnumID) {
    PageListItemText: *const PageListItemText,
    PageListItemBlocks: *const PageListItemBlocks,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .PageListItemText => { return self.PageListItemText.size(); },
                .PageListItemBlocks => { return self.PageListItemBlocks.size(); },
        }
    }
};
const PageListOrderedItemEnumID = enum(u32) {
    PageListOrderedItemText = 1577484359,
    PageListOrderedItemBlocks = 2564655414,
};
const IPageListOrderedItem = union(PageListOrderedItemEnumID) {
    PageListOrderedItemText: *const PageListOrderedItemText,
    PageListOrderedItemBlocks: *const PageListOrderedItemBlocks,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .PageListOrderedItemText => { return self.PageListOrderedItemText.size(); },
                .PageListOrderedItemBlocks => { return self.PageListOrderedItemBlocks.size(); },
        }
    }
};
const PageRelatedArticleEnumID = enum(u32) {
    PageRelatedArticle = 3012615176,
};
const IPageRelatedArticle = union(PageRelatedArticleEnumID) {
    PageRelatedArticle: *const PageRelatedArticle,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .PageRelatedArticle => { return self.PageRelatedArticle.size(); },
        }
    }
};
const PageEnumID = enum(u32) {
    Page = 2556788493,
};
const IPage = union(PageEnumID) {
    Page: *const Page,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .Page => { return self.Page.size(); },
        }
    }
};
const HelpSupportNameEnumID = enum(u32) {
    HelpSupportName = 2349199817,
};
const IHelpSupportName = union(HelpSupportNameEnumID) {
    HelpSupportName: *const HelpSupportName,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .HelpSupportName => { return self.HelpSupportName.size(); },
        }
    }
};
const HelpUserInfoEnumID = enum(u32) {
    HelpUserInfoEmpty = 4088278765,
    HelpUserInfo = 32192344,
};
const IHelpUserInfo = union(HelpUserInfoEnumID) {
    HelpUserInfoEmpty: *const HelpUserInfoEmpty,
    HelpUserInfo: *const HelpUserInfo,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .HelpUserInfoEmpty => { return self.HelpUserInfoEmpty.size(); },
                .HelpUserInfo => { return self.HelpUserInfo.size(); },
        }
    }
};
const PollAnswerEnumID = enum(u32) {
    PollAnswer = 4279689930,
};
const IPollAnswer = union(PollAnswerEnumID) {
    PollAnswer: *const PollAnswer,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .PollAnswer => { return self.PollAnswer.size(); },
        }
    }
};
const PollEnumID = enum(u32) {
    Poll = 1484026161,
};
const IPoll = union(PollEnumID) {
    Poll: *const Poll,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .Poll => { return self.Poll.size(); },
        }
    }
};
const PollAnswerVotersEnumID = enum(u32) {
    PollAnswerVoters = 997055186,
};
const IPollAnswerVoters = union(PollAnswerVotersEnumID) {
    PollAnswerVoters: *const PollAnswerVoters,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .PollAnswerVoters => { return self.PollAnswerVoters.size(); },
        }
    }
};
const PollResultsEnumID = enum(u32) {
    PollResults = 2061444128,
};
const IPollResults = union(PollResultsEnumID) {
    PollResults: *const PollResults,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .PollResults => { return self.PollResults.size(); },
        }
    }
};
const ChatOnlinesEnumID = enum(u32) {
    ChatOnlines = 4030849616,
};
const IChatOnlines = union(ChatOnlinesEnumID) {
    ChatOnlines: *const ChatOnlines,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .ChatOnlines => { return self.ChatOnlines.size(); },
        }
    }
};
const StatsURLEnumID = enum(u32) {
    StatsURL = 1202287072,
};
const IStatsURL = union(StatsURLEnumID) {
    StatsURL: *const StatsURL,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .StatsURL => { return self.StatsURL.size(); },
        }
    }
};
const ChatAdminRightsEnumID = enum(u32) {
    ChatAdminRights = 1605510357,
};
const IChatAdminRights = union(ChatAdminRightsEnumID) {
    ChatAdminRights: *const ChatAdminRights,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .ChatAdminRights => { return self.ChatAdminRights.size(); },
        }
    }
};
const ChatBannedRightsEnumID = enum(u32) {
    ChatBannedRights = 2668758040,
};
const IChatBannedRights = union(ChatBannedRightsEnumID) {
    ChatBannedRights: *const ChatBannedRights,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .ChatBannedRights => { return self.ChatBannedRights.size(); },
        }
    }
};
const InputWallPaperEnumID = enum(u32) {
    InputWallPaper = 3861952889,
    InputWallPaperSlug = 1913199744,
    InputWallPaperNoFile = 2524595758,
};
const IInputWallPaper = union(InputWallPaperEnumID) {
    InputWallPaper: *const InputWallPaper,
    InputWallPaperSlug: *const InputWallPaperSlug,
    InputWallPaperNoFile: *const InputWallPaperNoFile,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .InputWallPaper => { return self.InputWallPaper.size(); },
                .InputWallPaperSlug => { return self.InputWallPaperSlug.size(); },
                .InputWallPaperNoFile => { return self.InputWallPaperNoFile.size(); },
        }
    }
};
const AccountWallPapersEnumID = enum(u32) {
    AccountWallPapersNotModified = 471437699,
    AccountWallPapers = 3452142988,
};
const IAccountWallPapers = union(AccountWallPapersEnumID) {
    AccountWallPapersNotModified: *const AccountWallPapersNotModified,
    AccountWallPapers: *const AccountWallPapers,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .AccountWallPapersNotModified => { return self.AccountWallPapersNotModified.size(); },
                .AccountWallPapers => { return self.AccountWallPapers.size(); },
        }
    }
};
const CodeSettingsEnumID = enum(u32) {
    CodeSettings = 2904898936,
};
const ICodeSettings = union(CodeSettingsEnumID) {
    CodeSettings: *const CodeSettings,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .CodeSettings => { return self.CodeSettings.size(); },
        }
    }
};
const WallPaperSettingsEnumID = enum(u32) {
    WallPaperSettings = 925826256,
};
const IWallPaperSettings = union(WallPaperSettingsEnumID) {
    WallPaperSettings: *const WallPaperSettings,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .WallPaperSettings => { return self.WallPaperSettings.size(); },
        }
    }
};
const AutoDownloadSettingsEnumID = enum(u32) {
    AutoDownloadSettings = 3131405864,
};
const IAutoDownloadSettings = union(AutoDownloadSettingsEnumID) {
    AutoDownloadSettings: *const AutoDownloadSettings,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .AutoDownloadSettings => { return self.AutoDownloadSettings.size(); },
        }
    }
};
const AccountAutoDownloadSettingsEnumID = enum(u32) {
    AccountAutoDownloadSettings = 1674235686,
};
const IAccountAutoDownloadSettings = union(AccountAutoDownloadSettingsEnumID) {
    AccountAutoDownloadSettings: *const AccountAutoDownloadSettings,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .AccountAutoDownloadSettings => { return self.AccountAutoDownloadSettings.size(); },
        }
    }
};
const EmojiKeywordEnumID = enum(u32) {
    EmojiKeyword = 3585325561,
    EmojiKeywordDeleted = 594408994,
};
const IEmojiKeyword = union(EmojiKeywordEnumID) {
    EmojiKeyword: *const EmojiKeyword,
    EmojiKeywordDeleted: *const EmojiKeywordDeleted,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .EmojiKeyword => { return self.EmojiKeyword.size(); },
                .EmojiKeywordDeleted => { return self.EmojiKeywordDeleted.size(); },
        }
    }
};
const EmojiKeywordsDifferenceEnumID = enum(u32) {
    EmojiKeywordsDifference = 1556570557,
};
const IEmojiKeywordsDifference = union(EmojiKeywordsDifferenceEnumID) {
    EmojiKeywordsDifference: *const EmojiKeywordsDifference,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .EmojiKeywordsDifference => { return self.EmojiKeywordsDifference.size(); },
        }
    }
};
const EmojiURLEnumID = enum(u32) {
    EmojiURL = 2775937949,
};
const IEmojiURL = union(EmojiURLEnumID) {
    EmojiURL: *const EmojiURL,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .EmojiURL => { return self.EmojiURL.size(); },
        }
    }
};
const EmojiLanguageEnumID = enum(u32) {
    EmojiLanguage = 3019592545,
};
const IEmojiLanguage = union(EmojiLanguageEnumID) {
    EmojiLanguage: *const EmojiLanguage,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .EmojiLanguage => { return self.EmojiLanguage.size(); },
        }
    }
};
const FolderEnumID = enum(u32) {
    Folder = 4283715173,
};
const IFolder = union(FolderEnumID) {
    Folder: *const Folder,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .Folder => { return self.Folder.size(); },
        }
    }
};
const InputFolderPeerEnumID = enum(u32) {
    InputFolderPeer = 4224893590,
};
const IInputFolderPeer = union(InputFolderPeerEnumID) {
    InputFolderPeer: *const InputFolderPeer,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .InputFolderPeer => { return self.InputFolderPeer.size(); },
        }
    }
};
const FolderPeerEnumID = enum(u32) {
    FolderPeer = 3921323624,
};
const IFolderPeer = union(FolderPeerEnumID) {
    FolderPeer: *const FolderPeer,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .FolderPeer => { return self.FolderPeer.size(); },
        }
    }
};
const MessagesSearchCounterEnumID = enum(u32) {
    MessagesSearchCounter = 3896830975,
};
const IMessagesSearchCounter = union(MessagesSearchCounterEnumID) {
    MessagesSearchCounter: *const MessagesSearchCounter,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .MessagesSearchCounter => { return self.MessagesSearchCounter.size(); },
        }
    }
};
const UrlAuthResultEnumID = enum(u32) {
    UrlAuthResultRequest = 2463316494,
    UrlAuthResultAccepted = 2408320590,
    UrlAuthResultDefault = 2849430303,
};
const IUrlAuthResult = union(UrlAuthResultEnumID) {
    UrlAuthResultRequest: *const UrlAuthResultRequest,
    UrlAuthResultAccepted: *const UrlAuthResultAccepted,
    UrlAuthResultDefault: *const UrlAuthResultDefault,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .UrlAuthResultRequest => { return self.UrlAuthResultRequest.size(); },
                .UrlAuthResultAccepted => { return self.UrlAuthResultAccepted.size(); },
                .UrlAuthResultDefault => { return self.UrlAuthResultDefault.size(); },
        }
    }
};
const ChannelLocationEnumID = enum(u32) {
    ChannelLocationEmpty = 3216354699,
    ChannelLocation = 547062491,
};
const IChannelLocation = union(ChannelLocationEnumID) {
    ChannelLocationEmpty: *const ChannelLocationEmpty,
    ChannelLocation: *const ChannelLocation,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .ChannelLocationEmpty => { return self.ChannelLocationEmpty.size(); },
                .ChannelLocation => { return self.ChannelLocation.size(); },
        }
    }
};
const PeerLocatedEnumID = enum(u32) {
    PeerLocated = 3393592157,
    PeerSelfLocated = 4176226379,
};
const IPeerLocated = union(PeerLocatedEnumID) {
    PeerLocated: *const PeerLocated,
    PeerSelfLocated: *const PeerSelfLocated,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .PeerLocated => { return self.PeerLocated.size(); },
                .PeerSelfLocated => { return self.PeerSelfLocated.size(); },
        }
    }
};
const RestrictionReasonEnumID = enum(u32) {
    RestrictionReason = 3497176244,
};
const IRestrictionReason = union(RestrictionReasonEnumID) {
    RestrictionReason: *const RestrictionReason,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .RestrictionReason => { return self.RestrictionReason.size(); },
        }
    }
};
const InputThemeEnumID = enum(u32) {
    InputTheme = 1012306921,
    InputThemeSlug = 4119399921,
};
const IInputTheme = union(InputThemeEnumID) {
    InputTheme: *const InputTheme,
    InputThemeSlug: *const InputThemeSlug,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .InputTheme => { return self.InputTheme.size(); },
                .InputThemeSlug => { return self.InputThemeSlug.size(); },
        }
    }
};
const ThemeEnumID = enum(u32) {
    Theme = 2685298646,
};
const ITheme = union(ThemeEnumID) {
    Theme: *const Theme,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .Theme => { return self.Theme.size(); },
        }
    }
};
const AccountThemesEnumID = enum(u32) {
    AccountThemesNotModified = 4095653410,
    AccountThemes = 2587724909,
};
const IAccountThemes = union(AccountThemesEnumID) {
    AccountThemesNotModified: *const AccountThemesNotModified,
    AccountThemes: *const AccountThemes,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .AccountThemesNotModified => { return self.AccountThemesNotModified.size(); },
                .AccountThemes => { return self.AccountThemes.size(); },
        }
    }
};
const AuthLoginTokenEnumID = enum(u32) {
    AuthLoginToken = 1654593920,
    AuthLoginTokenMigrateTo = 110008598,
    AuthLoginTokenSuccess = 957176926,
};
const IAuthLoginToken = union(AuthLoginTokenEnumID) {
    AuthLoginToken: *const AuthLoginToken,
    AuthLoginTokenMigrateTo: *const AuthLoginTokenMigrateTo,
    AuthLoginTokenSuccess: *const AuthLoginTokenSuccess,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .AuthLoginToken => { return self.AuthLoginToken.size(); },
                .AuthLoginTokenMigrateTo => { return self.AuthLoginTokenMigrateTo.size(); },
                .AuthLoginTokenSuccess => { return self.AuthLoginTokenSuccess.size(); },
        }
    }
};
const AccountContentSettingsEnumID = enum(u32) {
    AccountContentSettings = 1474462241,
};
const IAccountContentSettings = union(AccountContentSettingsEnumID) {
    AccountContentSettings: *const AccountContentSettings,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .AccountContentSettings => { return self.AccountContentSettings.size(); },
        }
    }
};
const MessagesInactiveChatsEnumID = enum(u32) {
    MessagesInactiveChats = 2837970629,
};
const IMessagesInactiveChats = union(MessagesInactiveChatsEnumID) {
    MessagesInactiveChats: *const MessagesInactiveChats,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .MessagesInactiveChats => { return self.MessagesInactiveChats.size(); },
        }
    }
};
const BaseThemeEnumID = enum(u32) {
    BaseThemeClassic = 3282117730,
    BaseThemeDay = 4225242760,
    BaseThemeNight = 3081969320,
    BaseThemeTinted = 1834973166,
    BaseThemeArctic = 1527845466,
};
const IBaseTheme = union(BaseThemeEnumID) {
    BaseThemeClassic: *const BaseThemeClassic,
    BaseThemeDay: *const BaseThemeDay,
    BaseThemeNight: *const BaseThemeNight,
    BaseThemeTinted: *const BaseThemeTinted,
    BaseThemeArctic: *const BaseThemeArctic,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .BaseThemeClassic => { return self.BaseThemeClassic.size(); },
                .BaseThemeDay => { return self.BaseThemeDay.size(); },
                .BaseThemeNight => { return self.BaseThemeNight.size(); },
                .BaseThemeTinted => { return self.BaseThemeTinted.size(); },
                .BaseThemeArctic => { return self.BaseThemeArctic.size(); },
        }
    }
};
const InputThemeSettingsEnumID = enum(u32) {
    InputThemeSettings = 2413711439,
};
const IInputThemeSettings = union(InputThemeSettingsEnumID) {
    InputThemeSettings: *const InputThemeSettings,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .InputThemeSettings => { return self.InputThemeSettings.size(); },
        }
    }
};
const ThemeSettingsEnumID = enum(u32) {
    ThemeSettings = 4200117972,
};
const IThemeSettings = union(ThemeSettingsEnumID) {
    ThemeSettings: *const ThemeSettings,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .ThemeSettings => { return self.ThemeSettings.size(); },
        }
    }
};
const WebPageAttributeEnumID = enum(u32) {
    WebPageAttributeTheme = 1421174295,
    WebPageAttributeStory = 781501415,
    WebPageAttributeStickerSet = 1355547603,
};
const IWebPageAttribute = union(WebPageAttributeEnumID) {
    WebPageAttributeTheme: *const WebPageAttributeTheme,
    WebPageAttributeStory: *const WebPageAttributeStory,
    WebPageAttributeStickerSet: *const WebPageAttributeStickerSet,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .WebPageAttributeTheme => { return self.WebPageAttributeTheme.size(); },
                .WebPageAttributeStory => { return self.WebPageAttributeStory.size(); },
                .WebPageAttributeStickerSet => { return self.WebPageAttributeStickerSet.size(); },
        }
    }
};
const MessagesVotesListEnumID = enum(u32) {
    MessagesVotesList = 1218005070,
};
const IMessagesVotesList = union(MessagesVotesListEnumID) {
    MessagesVotesList: *const MessagesVotesList,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .MessagesVotesList => { return self.MessagesVotesList.size(); },
        }
    }
};
const BankCardOpenUrlEnumID = enum(u32) {
    BankCardOpenUrl = 4117234314,
};
const IBankCardOpenUrl = union(BankCardOpenUrlEnumID) {
    BankCardOpenUrl: *const BankCardOpenUrl,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .BankCardOpenUrl => { return self.BankCardOpenUrl.size(); },
        }
    }
};
const PaymentsBankCardDataEnumID = enum(u32) {
    PaymentsBankCardData = 1042605427,
};
const IPaymentsBankCardData = union(PaymentsBankCardDataEnumID) {
    PaymentsBankCardData: *const PaymentsBankCardData,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .PaymentsBankCardData => { return self.PaymentsBankCardData.size(); },
        }
    }
};
const DialogFilterEnumID = enum(u32) {
    DialogFilter = 1605718587,
    DialogFilterDefault = 909284270,
    DialogFilterChatlist = 2682424996,
};
const IDialogFilter = union(DialogFilterEnumID) {
    DialogFilter: *const DialogFilter,
    DialogFilterDefault: *const DialogFilterDefault,
    DialogFilterChatlist: *const DialogFilterChatlist,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .DialogFilter => { return self.DialogFilter.size(); },
                .DialogFilterDefault => { return self.DialogFilterDefault.size(); },
                .DialogFilterChatlist => { return self.DialogFilterChatlist.size(); },
        }
    }
};
const DialogFilterSuggestedEnumID = enum(u32) {
    DialogFilterSuggested = 2004110666,
};
const IDialogFilterSuggested = union(DialogFilterSuggestedEnumID) {
    DialogFilterSuggested: *const DialogFilterSuggested,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .DialogFilterSuggested => { return self.DialogFilterSuggested.size(); },
        }
    }
};
const StatsDateRangeDaysEnumID = enum(u32) {
    StatsDateRangeDays = 3057118639,
};
const IStatsDateRangeDays = union(StatsDateRangeDaysEnumID) {
    StatsDateRangeDays: *const StatsDateRangeDays,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .StatsDateRangeDays => { return self.StatsDateRangeDays.size(); },
        }
    }
};
const StatsAbsValueAndPrevEnumID = enum(u32) {
    StatsAbsValueAndPrev = 3410210014,
};
const IStatsAbsValueAndPrev = union(StatsAbsValueAndPrevEnumID) {
    StatsAbsValueAndPrev: *const StatsAbsValueAndPrev,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .StatsAbsValueAndPrev => { return self.StatsAbsValueAndPrev.size(); },
        }
    }
};
const StatsPercentValueEnumID = enum(u32) {
    StatsPercentValue = 3419287520,
};
const IStatsPercentValue = union(StatsPercentValueEnumID) {
    StatsPercentValue: *const StatsPercentValue,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .StatsPercentValue => { return self.StatsPercentValue.size(); },
        }
    }
};
const StatsGraphEnumID = enum(u32) {
    StatsGraphAsync = 1244130093,
    StatsGraphError = 3202127906,
    StatsGraph = 2393138358,
};
const IStatsGraph = union(StatsGraphEnumID) {
    StatsGraphAsync: *const StatsGraphAsync,
    StatsGraphError: *const StatsGraphError,
    StatsGraph: *const StatsGraph,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .StatsGraphAsync => { return self.StatsGraphAsync.size(); },
                .StatsGraphError => { return self.StatsGraphError.size(); },
                .StatsGraph => { return self.StatsGraph.size(); },
        }
    }
};
const StatsBroadcastStatsEnumID = enum(u32) {
    StatsBroadcastStats = 963421692,
};
const IStatsBroadcastStats = union(StatsBroadcastStatsEnumID) {
    StatsBroadcastStats: *const StatsBroadcastStats,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .StatsBroadcastStats => { return self.StatsBroadcastStats.size(); },
        }
    }
};
const HelpPromoDataEnumID = enum(u32) {
    HelpPromoDataEmpty = 2566302837,
    HelpPromoData = 2352576831,
};
const IHelpPromoData = union(HelpPromoDataEnumID) {
    HelpPromoDataEmpty: *const HelpPromoDataEmpty,
    HelpPromoData: *const HelpPromoData,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .HelpPromoDataEmpty => { return self.HelpPromoDataEmpty.size(); },
                .HelpPromoData => { return self.HelpPromoData.size(); },
        }
    }
};
const VideoSizeEnumID = enum(u32) {
    VideoSize = 3727929492,
    VideoSizeEmojiMarkup = 4166795580,
    VideoSizeStickerMarkup = 228623102,
};
const IVideoSize = union(VideoSizeEnumID) {
    VideoSize: *const VideoSize,
    VideoSizeEmojiMarkup: *const VideoSizeEmojiMarkup,
    VideoSizeStickerMarkup: *const VideoSizeStickerMarkup,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .VideoSize => { return self.VideoSize.size(); },
                .VideoSizeEmojiMarkup => { return self.VideoSizeEmojiMarkup.size(); },
                .VideoSizeStickerMarkup => { return self.VideoSizeStickerMarkup.size(); },
        }
    }
};
const StatsGroupTopPosterEnumID = enum(u32) {
    StatsGroupTopPoster = 2634330011,
};
const IStatsGroupTopPoster = union(StatsGroupTopPosterEnumID) {
    StatsGroupTopPoster: *const StatsGroupTopPoster,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .StatsGroupTopPoster => { return self.StatsGroupTopPoster.size(); },
        }
    }
};
const StatsGroupTopAdminEnumID = enum(u32) {
    StatsGroupTopAdmin = 3612888199,
};
const IStatsGroupTopAdmin = union(StatsGroupTopAdminEnumID) {
    StatsGroupTopAdmin: *const StatsGroupTopAdmin,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .StatsGroupTopAdmin => { return self.StatsGroupTopAdmin.size(); },
        }
    }
};
const StatsGroupTopInviterEnumID = enum(u32) {
    StatsGroupTopInviter = 1398765469,
};
const IStatsGroupTopInviter = union(StatsGroupTopInviterEnumID) {
    StatsGroupTopInviter: *const StatsGroupTopInviter,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .StatsGroupTopInviter => { return self.StatsGroupTopInviter.size(); },
        }
    }
};
const StatsMegagroupStatsEnumID = enum(u32) {
    StatsMegagroupStats = 4018141462,
};
const IStatsMegagroupStats = union(StatsMegagroupStatsEnumID) {
    StatsMegagroupStats: *const StatsMegagroupStats,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .StatsMegagroupStats => { return self.StatsMegagroupStats.size(); },
        }
    }
};
const GlobalPrivacySettingsEnumID = enum(u32) {
    GlobalPrivacySettings = 1934380235,
};
const IGlobalPrivacySettings = union(GlobalPrivacySettingsEnumID) {
    GlobalPrivacySettings: *const GlobalPrivacySettings,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .GlobalPrivacySettings => { return self.GlobalPrivacySettings.size(); },
        }
    }
};
const HelpCountryCodeEnumID = enum(u32) {
    HelpCountryCode = 1107543535,
};
const IHelpCountryCode = union(HelpCountryCodeEnumID) {
    HelpCountryCode: *const HelpCountryCode,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .HelpCountryCode => { return self.HelpCountryCode.size(); },
        }
    }
};
const HelpCountryEnumID = enum(u32) {
    HelpCountry = 3280440867,
};
const IHelpCountry = union(HelpCountryEnumID) {
    HelpCountry: *const HelpCountry,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .HelpCountry => { return self.HelpCountry.size(); },
        }
    }
};
const HelpCountriesListEnumID = enum(u32) {
    HelpCountriesListNotModified = 2479628082,
    HelpCountriesList = 2278585758,
};
const IHelpCountriesList = union(HelpCountriesListEnumID) {
    HelpCountriesListNotModified: *const HelpCountriesListNotModified,
    HelpCountriesList: *const HelpCountriesList,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .HelpCountriesListNotModified => { return self.HelpCountriesListNotModified.size(); },
                .HelpCountriesList => { return self.HelpCountriesList.size(); },
        }
    }
};
const MessageViewsEnumID = enum(u32) {
    MessageViews = 1163625789,
};
const IMessageViews = union(MessageViewsEnumID) {
    MessageViews: *const MessageViews,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .MessageViews => { return self.MessageViews.size(); },
        }
    }
};
const MessagesMessageViewsEnumID = enum(u32) {
    MessagesMessageViews = 3066361155,
};
const IMessagesMessageViews = union(MessagesMessageViewsEnumID) {
    MessagesMessageViews: *const MessagesMessageViews,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .MessagesMessageViews => { return self.MessagesMessageViews.size(); },
        }
    }
};
const MessagesDiscussionMessageEnumID = enum(u32) {
    MessagesDiscussionMessage = 2788431746,
};
const IMessagesDiscussionMessage = union(MessagesDiscussionMessageEnumID) {
    MessagesDiscussionMessage: *const MessagesDiscussionMessage,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .MessagesDiscussionMessage => { return self.MessagesDiscussionMessage.size(); },
        }
    }
};
const MessageReplyHeaderEnumID = enum(u32) {
    MessageReplyHeader = 2948336091,
    MessageReplyStoryHeader = 240843065,
};
const IMessageReplyHeader = union(MessageReplyHeaderEnumID) {
    MessageReplyHeader: *const MessageReplyHeader,
    MessageReplyStoryHeader: *const MessageReplyStoryHeader,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .MessageReplyHeader => { return self.MessageReplyHeader.size(); },
                .MessageReplyStoryHeader => { return self.MessageReplyStoryHeader.size(); },
        }
    }
};
const MessageRepliesEnumID = enum(u32) {
    MessageReplies = 2211844034,
};
const IMessageReplies = union(MessageRepliesEnumID) {
    MessageReplies: *const MessageReplies,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .MessageReplies => { return self.MessageReplies.size(); },
        }
    }
};
const PeerBlockedEnumID = enum(u32) {
    PeerBlocked = 3908927508,
};
const IPeerBlocked = union(PeerBlockedEnumID) {
    PeerBlocked: *const PeerBlocked,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .PeerBlocked => { return self.PeerBlocked.size(); },
        }
    }
};
const StatsMessageStatsEnumID = enum(u32) {
    StatsMessageStats = 2145983508,
};
const IStatsMessageStats = union(StatsMessageStatsEnumID) {
    StatsMessageStats: *const StatsMessageStats,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .StatsMessageStats => { return self.StatsMessageStats.size(); },
        }
    }
};
const GroupCallEnumID = enum(u32) {
    GroupCallDiscarded = 2004925620,
    GroupCall = 3583468812,
};
const IGroupCall = union(GroupCallEnumID) {
    GroupCallDiscarded: *const GroupCallDiscarded,
    GroupCall: *const GroupCall,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .GroupCallDiscarded => { return self.GroupCallDiscarded.size(); },
                .GroupCall => { return self.GroupCall.size(); },
        }
    }
};
const InputGroupCallEnumID = enum(u32) {
    InputGroupCall = 3635053583,
};
const IInputGroupCall = union(InputGroupCallEnumID) {
    InputGroupCall: *const InputGroupCall,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .InputGroupCall => { return self.InputGroupCall.size(); },
        }
    }
};
const GroupCallParticipantEnumID = enum(u32) {
    GroupCallParticipant = 3953538814,
};
const IGroupCallParticipant = union(GroupCallParticipantEnumID) {
    GroupCallParticipant: *const GroupCallParticipant,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .GroupCallParticipant => { return self.GroupCallParticipant.size(); },
        }
    }
};
const PhoneGroupCallEnumID = enum(u32) {
    PhoneGroupCall = 2658302637,
};
const IPhoneGroupCall = union(PhoneGroupCallEnumID) {
    PhoneGroupCall: *const PhoneGroupCall,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .PhoneGroupCall => { return self.PhoneGroupCall.size(); },
        }
    }
};
const PhoneGroupParticipantsEnumID = enum(u32) {
    PhoneGroupParticipants = 4101460406,
};
const IPhoneGroupParticipants = union(PhoneGroupParticipantsEnumID) {
    PhoneGroupParticipants: *const PhoneGroupParticipants,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .PhoneGroupParticipants => { return self.PhoneGroupParticipants.size(); },
        }
    }
};
const InlineQueryPeerTypeEnumID = enum(u32) {
    InlineQueryPeerTypeSameBotPM = 813821341,
    InlineQueryPeerTypePM = 2201751468,
    InlineQueryPeerTypeChat = 3613836554,
    InlineQueryPeerTypeMegagroup = 1589952067,
    InlineQueryPeerTypeBroadcast = 1664413338,
    InlineQueryPeerTypeBotPM = 238759180,
};
const IInlineQueryPeerType = union(InlineQueryPeerTypeEnumID) {
    InlineQueryPeerTypeSameBotPM: *const InlineQueryPeerTypeSameBotPM,
    InlineQueryPeerTypePM: *const InlineQueryPeerTypePM,
    InlineQueryPeerTypeChat: *const InlineQueryPeerTypeChat,
    InlineQueryPeerTypeMegagroup: *const InlineQueryPeerTypeMegagroup,
    InlineQueryPeerTypeBroadcast: *const InlineQueryPeerTypeBroadcast,
    InlineQueryPeerTypeBotPM: *const InlineQueryPeerTypeBotPM,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .InlineQueryPeerTypeSameBotPM => { return self.InlineQueryPeerTypeSameBotPM.size(); },
                .InlineQueryPeerTypePM => { return self.InlineQueryPeerTypePM.size(); },
                .InlineQueryPeerTypeChat => { return self.InlineQueryPeerTypeChat.size(); },
                .InlineQueryPeerTypeMegagroup => { return self.InlineQueryPeerTypeMegagroup.size(); },
                .InlineQueryPeerTypeBroadcast => { return self.InlineQueryPeerTypeBroadcast.size(); },
                .InlineQueryPeerTypeBotPM => { return self.InlineQueryPeerTypeBotPM.size(); },
        }
    }
};
const MessagesHistoryImportEnumID = enum(u32) {
    MessagesHistoryImport = 375566091,
};
const IMessagesHistoryImport = union(MessagesHistoryImportEnumID) {
    MessagesHistoryImport: *const MessagesHistoryImport,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .MessagesHistoryImport => { return self.MessagesHistoryImport.size(); },
        }
    }
};
const MessagesHistoryImportParsedEnumID = enum(u32) {
    MessagesHistoryImportParsed = 1578088377,
};
const IMessagesHistoryImportParsed = union(MessagesHistoryImportParsedEnumID) {
    MessagesHistoryImportParsed: *const MessagesHistoryImportParsed,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .MessagesHistoryImportParsed => { return self.MessagesHistoryImportParsed.size(); },
        }
    }
};
const MessagesAffectedFoundMessagesEnumID = enum(u32) {
    MessagesAffectedFoundMessages = 4019011180,
};
const IMessagesAffectedFoundMessages = union(MessagesAffectedFoundMessagesEnumID) {
    MessagesAffectedFoundMessages: *const MessagesAffectedFoundMessages,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .MessagesAffectedFoundMessages => { return self.MessagesAffectedFoundMessages.size(); },
        }
    }
};
const ChatInviteImporterEnumID = enum(u32) {
    ChatInviteImporter = 2354765785,
};
const IChatInviteImporter = union(ChatInviteImporterEnumID) {
    ChatInviteImporter: *const ChatInviteImporter,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .ChatInviteImporter => { return self.ChatInviteImporter.size(); },
        }
    }
};
const MessagesExportedChatInvitesEnumID = enum(u32) {
    MessagesExportedChatInvites = 3183881676,
};
const IMessagesExportedChatInvites = union(MessagesExportedChatInvitesEnumID) {
    MessagesExportedChatInvites: *const MessagesExportedChatInvites,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .MessagesExportedChatInvites => { return self.MessagesExportedChatInvites.size(); },
        }
    }
};
const MessagesExportedChatInviteEnumID = enum(u32) {
    MessagesExportedChatInvite = 410107472,
    MessagesExportedChatInviteReplaced = 572915951,
};
const IMessagesExportedChatInvite = union(MessagesExportedChatInviteEnumID) {
    MessagesExportedChatInvite: *const MessagesExportedChatInvite,
    MessagesExportedChatInviteReplaced: *const MessagesExportedChatInviteReplaced,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .MessagesExportedChatInvite => { return self.MessagesExportedChatInvite.size(); },
                .MessagesExportedChatInviteReplaced => { return self.MessagesExportedChatInviteReplaced.size(); },
        }
    }
};
const MessagesChatInviteImportersEnumID = enum(u32) {
    MessagesChatInviteImporters = 2176233482,
};
const IMessagesChatInviteImporters = union(MessagesChatInviteImportersEnumID) {
    MessagesChatInviteImporters: *const MessagesChatInviteImporters,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .MessagesChatInviteImporters => { return self.MessagesChatInviteImporters.size(); },
        }
    }
};
const ChatAdminWithInvitesEnumID = enum(u32) {
    ChatAdminWithInvites = 4075613987,
};
const IChatAdminWithInvites = union(ChatAdminWithInvitesEnumID) {
    ChatAdminWithInvites: *const ChatAdminWithInvites,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .ChatAdminWithInvites => { return self.ChatAdminWithInvites.size(); },
        }
    }
};
const MessagesChatAdminsWithInvitesEnumID = enum(u32) {
    MessagesChatAdminsWithInvites = 3063640791,
};
const IMessagesChatAdminsWithInvites = union(MessagesChatAdminsWithInvitesEnumID) {
    MessagesChatAdminsWithInvites: *const MessagesChatAdminsWithInvites,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .MessagesChatAdminsWithInvites => { return self.MessagesChatAdminsWithInvites.size(); },
        }
    }
};
const MessagesCheckedHistoryImportPeerEnumID = enum(u32) {
    MessagesCheckedHistoryImportPeer = 2723014423,
};
const IMessagesCheckedHistoryImportPeer = union(MessagesCheckedHistoryImportPeerEnumID) {
    MessagesCheckedHistoryImportPeer: *const MessagesCheckedHistoryImportPeer,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .MessagesCheckedHistoryImportPeer => { return self.MessagesCheckedHistoryImportPeer.size(); },
        }
    }
};
const PhoneJoinAsPeersEnumID = enum(u32) {
    PhoneJoinAsPeers = 2951045695,
};
const IPhoneJoinAsPeers = union(PhoneJoinAsPeersEnumID) {
    PhoneJoinAsPeers: *const PhoneJoinAsPeers,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .PhoneJoinAsPeers => { return self.PhoneJoinAsPeers.size(); },
        }
    }
};
const PhoneExportedGroupCallInviteEnumID = enum(u32) {
    PhoneExportedGroupCallInvite = 541839704,
};
const IPhoneExportedGroupCallInvite = union(PhoneExportedGroupCallInviteEnumID) {
    PhoneExportedGroupCallInvite: *const PhoneExportedGroupCallInvite,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .PhoneExportedGroupCallInvite => { return self.PhoneExportedGroupCallInvite.size(); },
        }
    }
};
const GroupCallParticipantVideoSourceGroupEnumID = enum(u32) {
    GroupCallParticipantVideoSourceGroup = 3702593719,
};
const IGroupCallParticipantVideoSourceGroup = union(GroupCallParticipantVideoSourceGroupEnumID) {
    GroupCallParticipantVideoSourceGroup: *const GroupCallParticipantVideoSourceGroup,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .GroupCallParticipantVideoSourceGroup => { return self.GroupCallParticipantVideoSourceGroup.size(); },
        }
    }
};
const GroupCallParticipantVideoEnumID = enum(u32) {
    GroupCallParticipantVideo = 1735736008,
};
const IGroupCallParticipantVideo = union(GroupCallParticipantVideoEnumID) {
    GroupCallParticipantVideo: *const GroupCallParticipantVideo,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .GroupCallParticipantVideo => { return self.GroupCallParticipantVideo.size(); },
        }
    }
};
const StickersSuggestedShortNameEnumID = enum(u32) {
    StickersSuggestedShortName = 2248056895,
};
const IStickersSuggestedShortName = union(StickersSuggestedShortNameEnumID) {
    StickersSuggestedShortName: *const StickersSuggestedShortName,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .StickersSuggestedShortName => { return self.StickersSuggestedShortName.size(); },
        }
    }
};
const BotCommandScopeEnumID = enum(u32) {
    BotCommandScopeDefault = 795652779,
    BotCommandScopeUsers = 1011811544,
    BotCommandScopeChats = 1877059713,
    BotCommandScopeChatAdmins = 3114950762,
    BotCommandScopePeer = 3684534653,
    BotCommandScopePeerAdmins = 1071145937,
    BotCommandScopePeerUser = 169026035,
};
const IBotCommandScope = union(BotCommandScopeEnumID) {
    BotCommandScopeDefault: *const BotCommandScopeDefault,
    BotCommandScopeUsers: *const BotCommandScopeUsers,
    BotCommandScopeChats: *const BotCommandScopeChats,
    BotCommandScopeChatAdmins: *const BotCommandScopeChatAdmins,
    BotCommandScopePeer: *const BotCommandScopePeer,
    BotCommandScopePeerAdmins: *const BotCommandScopePeerAdmins,
    BotCommandScopePeerUser: *const BotCommandScopePeerUser,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .BotCommandScopeDefault => { return self.BotCommandScopeDefault.size(); },
                .BotCommandScopeUsers => { return self.BotCommandScopeUsers.size(); },
                .BotCommandScopeChats => { return self.BotCommandScopeChats.size(); },
                .BotCommandScopeChatAdmins => { return self.BotCommandScopeChatAdmins.size(); },
                .BotCommandScopePeer => { return self.BotCommandScopePeer.size(); },
                .BotCommandScopePeerAdmins => { return self.BotCommandScopePeerAdmins.size(); },
                .BotCommandScopePeerUser => { return self.BotCommandScopePeerUser.size(); },
        }
    }
};
const AccountResetPasswordResultEnumID = enum(u32) {
    AccountResetPasswordFailedWait = 3816265825,
    AccountResetPasswordRequestedWait = 3924819069,
    AccountResetPasswordOk = 3911636542,
};
const IAccountResetPasswordResult = union(AccountResetPasswordResultEnumID) {
    AccountResetPasswordFailedWait: *const AccountResetPasswordFailedWait,
    AccountResetPasswordRequestedWait: *const AccountResetPasswordRequestedWait,
    AccountResetPasswordOk: *const AccountResetPasswordOk,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .AccountResetPasswordFailedWait => { return self.AccountResetPasswordFailedWait.size(); },
                .AccountResetPasswordRequestedWait => { return self.AccountResetPasswordRequestedWait.size(); },
                .AccountResetPasswordOk => { return self.AccountResetPasswordOk.size(); },
        }
    }
};
const SponsoredMessageEnumID = enum(u32) {
    SponsoredMessage = 1301522832,
};
const ISponsoredMessage = union(SponsoredMessageEnumID) {
    SponsoredMessage: *const SponsoredMessage,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .SponsoredMessage => { return self.SponsoredMessage.size(); },
        }
    }
};
const MessagesSponsoredMessagesEnumID = enum(u32) {
    MessagesSponsoredMessages = 3387825543,
    MessagesSponsoredMessagesEmpty = 406407439,
};
const IMessagesSponsoredMessages = union(MessagesSponsoredMessagesEnumID) {
    MessagesSponsoredMessages: *const MessagesSponsoredMessages,
    MessagesSponsoredMessagesEmpty: *const MessagesSponsoredMessagesEmpty,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .MessagesSponsoredMessages => { return self.MessagesSponsoredMessages.size(); },
                .MessagesSponsoredMessagesEmpty => { return self.MessagesSponsoredMessagesEmpty.size(); },
        }
    }
};
const SearchResultsCalendarPeriodEnumID = enum(u32) {
    SearchResultsCalendarPeriod = 3383776159,
};
const ISearchResultsCalendarPeriod = union(SearchResultsCalendarPeriodEnumID) {
    SearchResultsCalendarPeriod: *const SearchResultsCalendarPeriod,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .SearchResultsCalendarPeriod => { return self.SearchResultsCalendarPeriod.size(); },
        }
    }
};
const MessagesSearchResultsCalendarEnumID = enum(u32) {
    MessagesSearchResultsCalendar = 343859772,
};
const IMessagesSearchResultsCalendar = union(MessagesSearchResultsCalendarEnumID) {
    MessagesSearchResultsCalendar: *const MessagesSearchResultsCalendar,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .MessagesSearchResultsCalendar => { return self.MessagesSearchResultsCalendar.size(); },
        }
    }
};
const SearchResultsPositionEnumID = enum(u32) {
    SearchResultPosition = 2137295719,
};
const ISearchResultsPosition = union(SearchResultsPositionEnumID) {
    SearchResultPosition: *const SearchResultPosition,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .SearchResultPosition => { return self.SearchResultPosition.size(); },
        }
    }
};
const MessagesSearchResultsPositionsEnumID = enum(u32) {
    MessagesSearchResultsPositions = 1404185519,
};
const IMessagesSearchResultsPositions = union(MessagesSearchResultsPositionsEnumID) {
    MessagesSearchResultsPositions: *const MessagesSearchResultsPositions,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .MessagesSearchResultsPositions => { return self.MessagesSearchResultsPositions.size(); },
        }
    }
};
const ChannelsSendAsPeersEnumID = enum(u32) {
    ChannelsSendAsPeers = 4103516358,
};
const IChannelsSendAsPeers = union(ChannelsSendAsPeersEnumID) {
    ChannelsSendAsPeers: *const ChannelsSendAsPeers,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .ChannelsSendAsPeers => { return self.ChannelsSendAsPeers.size(); },
        }
    }
};
const UsersUserFullEnumID = enum(u32) {
    UsersUserFull = 997004590,
};
const IUsersUserFull = union(UsersUserFullEnumID) {
    UsersUserFull: *const UsersUserFull,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .UsersUserFull => { return self.UsersUserFull.size(); },
        }
    }
};
const MessagesPeerSettingsEnumID = enum(u32) {
    MessagesPeerSettings = 1753266509,
};
const IMessagesPeerSettings = union(MessagesPeerSettingsEnumID) {
    MessagesPeerSettings: *const MessagesPeerSettings,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .MessagesPeerSettings => { return self.MessagesPeerSettings.size(); },
        }
    }
};
const AuthLoggedOutEnumID = enum(u32) {
    AuthLoggedOut = 3282207583,
};
const IAuthLoggedOut = union(AuthLoggedOutEnumID) {
    AuthLoggedOut: *const AuthLoggedOut,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .AuthLoggedOut => { return self.AuthLoggedOut.size(); },
        }
    }
};
const ReactionCountEnumID = enum(u32) {
    ReactionCount = 2748435328,
};
const IReactionCount = union(ReactionCountEnumID) {
    ReactionCount: *const ReactionCount,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .ReactionCount => { return self.ReactionCount.size(); },
        }
    }
};
const MessageReactionsEnumID = enum(u32) {
    MessageReactions = 171155211,
};
const IMessageReactions = union(MessageReactionsEnumID) {
    MessageReactions: *const MessageReactions,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .MessageReactions => { return self.MessageReactions.size(); },
        }
    }
};
const MessagesMessageReactionsListEnumID = enum(u32) {
    MessagesMessageReactionsList = 834488621,
};
const IMessagesMessageReactionsList = union(MessagesMessageReactionsListEnumID) {
    MessagesMessageReactionsList: *const MessagesMessageReactionsList,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .MessagesMessageReactionsList => { return self.MessagesMessageReactionsList.size(); },
        }
    }
};
const AvailableReactionEnumID = enum(u32) {
    AvailableReaction = 3229084673,
};
const IAvailableReaction = union(AvailableReactionEnumID) {
    AvailableReaction: *const AvailableReaction,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .AvailableReaction => { return self.AvailableReaction.size(); },
        }
    }
};
const MessagesAvailableReactionsEnumID = enum(u32) {
    MessagesAvailableReactionsNotModified = 2668042583,
    MessagesAvailableReactions = 1989032621,
};
const IMessagesAvailableReactions = union(MessagesAvailableReactionsEnumID) {
    MessagesAvailableReactionsNotModified: *const MessagesAvailableReactionsNotModified,
    MessagesAvailableReactions: *const MessagesAvailableReactions,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .MessagesAvailableReactionsNotModified => { return self.MessagesAvailableReactionsNotModified.size(); },
                .MessagesAvailableReactions => { return self.MessagesAvailableReactions.size(); },
        }
    }
};
const MessagePeerReactionEnumID = enum(u32) {
    MessagePeerReaction = 2356786748,
};
const IMessagePeerReaction = union(MessagePeerReactionEnumID) {
    MessagePeerReaction: *const MessagePeerReaction,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .MessagePeerReaction => { return self.MessagePeerReaction.size(); },
        }
    }
};
const GroupCallStreamChannelEnumID = enum(u32) {
    GroupCallStreamChannel = 2162903215,
};
const IGroupCallStreamChannel = union(GroupCallStreamChannelEnumID) {
    GroupCallStreamChannel: *const GroupCallStreamChannel,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .GroupCallStreamChannel => { return self.GroupCallStreamChannel.size(); },
        }
    }
};
const PhoneGroupCallStreamChannelsEnumID = enum(u32) {
    PhoneGroupCallStreamChannels = 3504636594,
};
const IPhoneGroupCallStreamChannels = union(PhoneGroupCallStreamChannelsEnumID) {
    PhoneGroupCallStreamChannels: *const PhoneGroupCallStreamChannels,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .PhoneGroupCallStreamChannels => { return self.PhoneGroupCallStreamChannels.size(); },
        }
    }
};
const PhoneGroupCallStreamRtmpUrlEnumID = enum(u32) {
    PhoneGroupCallStreamRtmpUrl = 767505458,
};
const IPhoneGroupCallStreamRtmpUrl = union(PhoneGroupCallStreamRtmpUrlEnumID) {
    PhoneGroupCallStreamRtmpUrl: *const PhoneGroupCallStreamRtmpUrl,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .PhoneGroupCallStreamRtmpUrl => { return self.PhoneGroupCallStreamRtmpUrl.size(); },
        }
    }
};
const AttachMenuBotIconColorEnumID = enum(u32) {
    AttachMenuBotIconColor = 1165423600,
};
const IAttachMenuBotIconColor = union(AttachMenuBotIconColorEnumID) {
    AttachMenuBotIconColor: *const AttachMenuBotIconColor,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .AttachMenuBotIconColor => { return self.AttachMenuBotIconColor.size(); },
        }
    }
};
const AttachMenuBotIconEnumID = enum(u32) {
    AttachMenuBotIcon = 2997303403,
};
const IAttachMenuBotIcon = union(AttachMenuBotIconEnumID) {
    AttachMenuBotIcon: *const AttachMenuBotIcon,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .AttachMenuBotIcon => { return self.AttachMenuBotIcon.size(); },
        }
    }
};
const AttachMenuBotEnumID = enum(u32) {
    AttachMenuBot = 3641544190,
};
const IAttachMenuBot = union(AttachMenuBotEnumID) {
    AttachMenuBot: *const AttachMenuBot,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .AttachMenuBot => { return self.AttachMenuBot.size(); },
        }
    }
};
const AttachMenuBotsEnumID = enum(u32) {
    AttachMenuBotsNotModified = 4057500252,
    AttachMenuBots = 1011024320,
};
const IAttachMenuBots = union(AttachMenuBotsEnumID) {
    AttachMenuBotsNotModified: *const AttachMenuBotsNotModified,
    AttachMenuBots: *const AttachMenuBots,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .AttachMenuBotsNotModified => { return self.AttachMenuBotsNotModified.size(); },
                .AttachMenuBots => { return self.AttachMenuBots.size(); },
        }
    }
};
const AttachMenuBotsBotEnumID = enum(u32) {
    AttachMenuBotsBot = 2478794367,
};
const IAttachMenuBotsBot = union(AttachMenuBotsBotEnumID) {
    AttachMenuBotsBot: *const AttachMenuBotsBot,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .AttachMenuBotsBot => { return self.AttachMenuBotsBot.size(); },
        }
    }
};
const WebViewResultEnumID = enum(u32) {
    WebViewResultUrl = 1294139288,
};
const IWebViewResult = union(WebViewResultEnumID) {
    WebViewResultUrl: *const WebViewResultUrl,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .WebViewResultUrl => { return self.WebViewResultUrl.size(); },
        }
    }
};
const WebViewMessageSentEnumID = enum(u32) {
    WebViewMessageSent = 211046684,
};
const IWebViewMessageSent = union(WebViewMessageSentEnumID) {
    WebViewMessageSent: *const WebViewMessageSent,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .WebViewMessageSent => { return self.WebViewMessageSent.size(); },
        }
    }
};
const BotMenuButtonEnumID = enum(u32) {
    BotMenuButtonDefault = 1966318984,
    BotMenuButtonCommands = 1113113093,
    BotMenuButton = 3350559974,
};
const IBotMenuButton = union(BotMenuButtonEnumID) {
    BotMenuButtonDefault: *const BotMenuButtonDefault,
    BotMenuButtonCommands: *const BotMenuButtonCommands,
    BotMenuButton: *const BotMenuButton,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .BotMenuButtonDefault => { return self.BotMenuButtonDefault.size(); },
                .BotMenuButtonCommands => { return self.BotMenuButtonCommands.size(); },
                .BotMenuButton => { return self.BotMenuButton.size(); },
        }
    }
};
const AccountSavedRingtonesEnumID = enum(u32) {
    AccountSavedRingtonesNotModified = 4227262641,
    AccountSavedRingtones = 3253284037,
};
const IAccountSavedRingtones = union(AccountSavedRingtonesEnumID) {
    AccountSavedRingtonesNotModified: *const AccountSavedRingtonesNotModified,
    AccountSavedRingtones: *const AccountSavedRingtones,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .AccountSavedRingtonesNotModified => { return self.AccountSavedRingtonesNotModified.size(); },
                .AccountSavedRingtones => { return self.AccountSavedRingtones.size(); },
        }
    }
};
const NotificationSoundEnumID = enum(u32) {
    NotificationSoundDefault = 2548612798,
    NotificationSoundNone = 1863070943,
    NotificationSoundLocal = 2198575844,
    NotificationSoundRingtone = 4285300809,
};
const INotificationSound = union(NotificationSoundEnumID) {
    NotificationSoundDefault: *const NotificationSoundDefault,
    NotificationSoundNone: *const NotificationSoundNone,
    NotificationSoundLocal: *const NotificationSoundLocal,
    NotificationSoundRingtone: *const NotificationSoundRingtone,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .NotificationSoundDefault => { return self.NotificationSoundDefault.size(); },
                .NotificationSoundNone => { return self.NotificationSoundNone.size(); },
                .NotificationSoundLocal => { return self.NotificationSoundLocal.size(); },
                .NotificationSoundRingtone => { return self.NotificationSoundRingtone.size(); },
        }
    }
};
const AccountSavedRingtoneEnumID = enum(u32) {
    AccountSavedRingtone = 3072737133,
    AccountSavedRingtoneConverted = 523271863,
};
const IAccountSavedRingtone = union(AccountSavedRingtoneEnumID) {
    AccountSavedRingtone: *const AccountSavedRingtone,
    AccountSavedRingtoneConverted: *const AccountSavedRingtoneConverted,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .AccountSavedRingtone => { return self.AccountSavedRingtone.size(); },
                .AccountSavedRingtoneConverted => { return self.AccountSavedRingtoneConverted.size(); },
        }
    }
};
const AttachMenuPeerTypeEnumID = enum(u32) {
    AttachMenuPeerTypeSameBotPM = 2104224014,
    AttachMenuPeerTypeBotPM = 3274439194,
    AttachMenuPeerTypePM = 4047950623,
    AttachMenuPeerTypeChat = 84480319,
    AttachMenuPeerTypeBroadcast = 2080104188,
};
const IAttachMenuPeerType = union(AttachMenuPeerTypeEnumID) {
    AttachMenuPeerTypeSameBotPM: *const AttachMenuPeerTypeSameBotPM,
    AttachMenuPeerTypeBotPM: *const AttachMenuPeerTypeBotPM,
    AttachMenuPeerTypePM: *const AttachMenuPeerTypePM,
    AttachMenuPeerTypeChat: *const AttachMenuPeerTypeChat,
    AttachMenuPeerTypeBroadcast: *const AttachMenuPeerTypeBroadcast,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .AttachMenuPeerTypeSameBotPM => { return self.AttachMenuPeerTypeSameBotPM.size(); },
                .AttachMenuPeerTypeBotPM => { return self.AttachMenuPeerTypeBotPM.size(); },
                .AttachMenuPeerTypePM => { return self.AttachMenuPeerTypePM.size(); },
                .AttachMenuPeerTypeChat => { return self.AttachMenuPeerTypeChat.size(); },
                .AttachMenuPeerTypeBroadcast => { return self.AttachMenuPeerTypeBroadcast.size(); },
        }
    }
};
const InputInvoiceEnumID = enum(u32) {
    InputInvoiceMessage = 3317000281,
    InputInvoiceSlug = 3274099439,
    InputInvoicePremiumGiftCode = 2560125965,
    InputInvoiceStars = 1710230755,
    InputInvoiceChatInviteSubscription = 887591921,
    InputInvoiceStarGift = 634962392,
};
const IInputInvoice = union(InputInvoiceEnumID) {
    InputInvoiceMessage: *const InputInvoiceMessage,
    InputInvoiceSlug: *const InputInvoiceSlug,
    InputInvoicePremiumGiftCode: *const InputInvoicePremiumGiftCode,
    InputInvoiceStars: *const InputInvoiceStars,
    InputInvoiceChatInviteSubscription: *const InputInvoiceChatInviteSubscription,
    InputInvoiceStarGift: *const InputInvoiceStarGift,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .InputInvoiceMessage => { return self.InputInvoiceMessage.size(); },
                .InputInvoiceSlug => { return self.InputInvoiceSlug.size(); },
                .InputInvoicePremiumGiftCode => { return self.InputInvoicePremiumGiftCode.size(); },
                .InputInvoiceStars => { return self.InputInvoiceStars.size(); },
                .InputInvoiceChatInviteSubscription => { return self.InputInvoiceChatInviteSubscription.size(); },
                .InputInvoiceStarGift => { return self.InputInvoiceStarGift.size(); },
        }
    }
};
const PaymentsExportedInvoiceEnumID = enum(u32) {
    PaymentsExportedInvoice = 2932919257,
};
const IPaymentsExportedInvoice = union(PaymentsExportedInvoiceEnumID) {
    PaymentsExportedInvoice: *const PaymentsExportedInvoice,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .PaymentsExportedInvoice => { return self.PaymentsExportedInvoice.size(); },
        }
    }
};
const MessagesTranscribedAudioEnumID = enum(u32) {
    MessagesTranscribedAudio = 3485063511,
};
const IMessagesTranscribedAudio = union(MessagesTranscribedAudioEnumID) {
    MessagesTranscribedAudio: *const MessagesTranscribedAudio,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .MessagesTranscribedAudio => { return self.MessagesTranscribedAudio.size(); },
        }
    }
};
const HelpPremiumPromoEnumID = enum(u32) {
    HelpPremiumPromo = 1395946908,
};
const IHelpPremiumPromo = union(HelpPremiumPromoEnumID) {
    HelpPremiumPromo: *const HelpPremiumPromo,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .HelpPremiumPromo => { return self.HelpPremiumPromo.size(); },
        }
    }
};
const InputStorePaymentPurposeEnumID = enum(u32) {
    InputStorePaymentPremiumSubscription = 2792693350,
    InputStorePaymentGiftPremium = 1634697192,
    InputStorePaymentPremiumGiftCode = 2743099199,
    InputStorePaymentPremiumGiveaway = 369444042,
    InputStorePaymentStarsTopup = 3722252118,
    InputStorePaymentStarsGift = 494149367,
    InputStorePaymentStarsGiveaway = 1964968186,
};
const IInputStorePaymentPurpose = union(InputStorePaymentPurposeEnumID) {
    InputStorePaymentPremiumSubscription: *const InputStorePaymentPremiumSubscription,
    InputStorePaymentGiftPremium: *const InputStorePaymentGiftPremium,
    InputStorePaymentPremiumGiftCode: *const InputStorePaymentPremiumGiftCode,
    InputStorePaymentPremiumGiveaway: *const InputStorePaymentPremiumGiveaway,
    InputStorePaymentStarsTopup: *const InputStorePaymentStarsTopup,
    InputStorePaymentStarsGift: *const InputStorePaymentStarsGift,
    InputStorePaymentStarsGiveaway: *const InputStorePaymentStarsGiveaway,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .InputStorePaymentPremiumSubscription => { return self.InputStorePaymentPremiumSubscription.size(); },
                .InputStorePaymentGiftPremium => { return self.InputStorePaymentGiftPremium.size(); },
                .InputStorePaymentPremiumGiftCode => { return self.InputStorePaymentPremiumGiftCode.size(); },
                .InputStorePaymentPremiumGiveaway => { return self.InputStorePaymentPremiumGiveaway.size(); },
                .InputStorePaymentStarsTopup => { return self.InputStorePaymentStarsTopup.size(); },
                .InputStorePaymentStarsGift => { return self.InputStorePaymentStarsGift.size(); },
                .InputStorePaymentStarsGiveaway => { return self.InputStorePaymentStarsGiveaway.size(); },
        }
    }
};
const PremiumGiftOptionEnumID = enum(u32) {
    PremiumGiftOption = 1958953753,
};
const IPremiumGiftOption = union(PremiumGiftOptionEnumID) {
    PremiumGiftOption: *const PremiumGiftOption,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .PremiumGiftOption => { return self.PremiumGiftOption.size(); },
        }
    }
};
const PaymentFormMethodEnumID = enum(u32) {
    PaymentFormMethod = 2298016283,
};
const IPaymentFormMethod = union(PaymentFormMethodEnumID) {
    PaymentFormMethod: *const PaymentFormMethod,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .PaymentFormMethod => { return self.PaymentFormMethod.size(); },
        }
    }
};
const EmojiStatusEnumID = enum(u32) {
    EmojiStatusEmpty = 769727150,
    EmojiStatus = 2459656605,
    EmojiStatusUntil = 4197492935,
};
const IEmojiStatus = union(EmojiStatusEnumID) {
    EmojiStatusEmpty: *const EmojiStatusEmpty,
    EmojiStatus: *const EmojiStatus,
    EmojiStatusUntil: *const EmojiStatusUntil,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .EmojiStatusEmpty => { return self.EmojiStatusEmpty.size(); },
                .EmojiStatus => { return self.EmojiStatus.size(); },
                .EmojiStatusUntil => { return self.EmojiStatusUntil.size(); },
        }
    }
};
const AccountEmojiStatusesEnumID = enum(u32) {
    AccountEmojiStatusesNotModified = 3498894917,
    AccountEmojiStatuses = 2428790737,
};
const IAccountEmojiStatuses = union(AccountEmojiStatusesEnumID) {
    AccountEmojiStatusesNotModified: *const AccountEmojiStatusesNotModified,
    AccountEmojiStatuses: *const AccountEmojiStatuses,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .AccountEmojiStatusesNotModified => { return self.AccountEmojiStatusesNotModified.size(); },
                .AccountEmojiStatuses => { return self.AccountEmojiStatuses.size(); },
        }
    }
};
const ReactionEnumID = enum(u32) {
    ReactionEmpty = 2046153753,
    ReactionEmoji = 455247544,
    ReactionCustomEmoji = 2302016627,
    ReactionPaid = 1379771627,
};
const IReaction = union(ReactionEnumID) {
    ReactionEmpty: *const ReactionEmpty,
    ReactionEmoji: *const ReactionEmoji,
    ReactionCustomEmoji: *const ReactionCustomEmoji,
    ReactionPaid: *const ReactionPaid,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .ReactionEmpty => { return self.ReactionEmpty.size(); },
                .ReactionEmoji => { return self.ReactionEmoji.size(); },
                .ReactionCustomEmoji => { return self.ReactionCustomEmoji.size(); },
                .ReactionPaid => { return self.ReactionPaid.size(); },
        }
    }
};
const ChatReactionsEnumID = enum(u32) {
    ChatReactionsNone = 3942396604,
    ChatReactionsAll = 1385335754,
    ChatReactionsSome = 1713193015,
};
const IChatReactions = union(ChatReactionsEnumID) {
    ChatReactionsNone: *const ChatReactionsNone,
    ChatReactionsAll: *const ChatReactionsAll,
    ChatReactionsSome: *const ChatReactionsSome,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .ChatReactionsNone => { return self.ChatReactionsNone.size(); },
                .ChatReactionsAll => { return self.ChatReactionsAll.size(); },
                .ChatReactionsSome => { return self.ChatReactionsSome.size(); },
        }
    }
};
const MessagesReactionsEnumID = enum(u32) {
    MessagesReactionsNotModified = 2960120799,
    MessagesReactions = 3942512406,
};
const IMessagesReactions = union(MessagesReactionsEnumID) {
    MessagesReactionsNotModified: *const MessagesReactionsNotModified,
    MessagesReactions: *const MessagesReactions,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .MessagesReactionsNotModified => { return self.MessagesReactionsNotModified.size(); },
                .MessagesReactions => { return self.MessagesReactions.size(); },
        }
    }
};
const EmailVerifyPurposeEnumID = enum(u32) {
    EmailVerifyPurposeLoginSetup = 1128644211,
    EmailVerifyPurposeLoginChange = 1383932651,
    EmailVerifyPurposePassport = 3153401477,
};
const IEmailVerifyPurpose = union(EmailVerifyPurposeEnumID) {
    EmailVerifyPurposeLoginSetup: *const EmailVerifyPurposeLoginSetup,
    EmailVerifyPurposeLoginChange: *const EmailVerifyPurposeLoginChange,
    EmailVerifyPurposePassport: *const EmailVerifyPurposePassport,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .EmailVerifyPurposeLoginSetup => { return self.EmailVerifyPurposeLoginSetup.size(); },
                .EmailVerifyPurposeLoginChange => { return self.EmailVerifyPurposeLoginChange.size(); },
                .EmailVerifyPurposePassport => { return self.EmailVerifyPurposePassport.size(); },
        }
    }
};
const EmailVerificationEnumID = enum(u32) {
    EmailVerificationCode = 2452510121,
    EmailVerificationGoogle = 3683688130,
    EmailVerificationApple = 2530243837,
};
const IEmailVerification = union(EmailVerificationEnumID) {
    EmailVerificationCode: *const EmailVerificationCode,
    EmailVerificationGoogle: *const EmailVerificationGoogle,
    EmailVerificationApple: *const EmailVerificationApple,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .EmailVerificationCode => { return self.EmailVerificationCode.size(); },
                .EmailVerificationGoogle => { return self.EmailVerificationGoogle.size(); },
                .EmailVerificationApple => { return self.EmailVerificationApple.size(); },
        }
    }
};
const AccountEmailVerifiedEnumID = enum(u32) {
    AccountEmailVerified = 731303195,
    AccountEmailVerifiedLogin = 3787132257,
};
const IAccountEmailVerified = union(AccountEmailVerifiedEnumID) {
    AccountEmailVerified: *const AccountEmailVerified,
    AccountEmailVerifiedLogin: *const AccountEmailVerifiedLogin,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .AccountEmailVerified => { return self.AccountEmailVerified.size(); },
                .AccountEmailVerifiedLogin => { return self.AccountEmailVerifiedLogin.size(); },
        }
    }
};
const PremiumSubscriptionOptionEnumID = enum(u32) {
    PremiumSubscriptionOption = 1596792306,
};
const IPremiumSubscriptionOption = union(PremiumSubscriptionOptionEnumID) {
    PremiumSubscriptionOption: *const PremiumSubscriptionOption,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .PremiumSubscriptionOption => { return self.PremiumSubscriptionOption.size(); },
        }
    }
};
const SendAsPeerEnumID = enum(u32) {
    SendAsPeer = 3088871476,
};
const ISendAsPeer = union(SendAsPeerEnumID) {
    SendAsPeer: *const SendAsPeer,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .SendAsPeer => { return self.SendAsPeer.size(); },
        }
    }
};
const MessageExtendedMediaEnumID = enum(u32) {
    MessageExtendedMediaPreview = 2908916936,
    MessageExtendedMedia = 3997670500,
};
const IMessageExtendedMedia = union(MessageExtendedMediaEnumID) {
    MessageExtendedMediaPreview: *const MessageExtendedMediaPreview,
    MessageExtendedMedia: *const MessageExtendedMedia,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .MessageExtendedMediaPreview => { return self.MessageExtendedMediaPreview.size(); },
                .MessageExtendedMedia => { return self.MessageExtendedMedia.size(); },
        }
    }
};
const StickerKeywordEnumID = enum(u32) {
    StickerKeyword = 4244550300,
};
const IStickerKeyword = union(StickerKeywordEnumID) {
    StickerKeyword: *const StickerKeyword,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .StickerKeyword => { return self.StickerKeyword.size(); },
        }
    }
};
const UsernameEnumID = enum(u32) {
    Username = 3020371527,
};
const IUsername = union(UsernameEnumID) {
    Username: *const Username,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .Username => { return self.Username.size(); },
        }
    }
};
const ForumTopicEnumID = enum(u32) {
    ForumTopicDeleted = 37687451,
    ForumTopic = 1903173033,
};
const IForumTopic = union(ForumTopicEnumID) {
    ForumTopicDeleted: *const ForumTopicDeleted,
    ForumTopic: *const ForumTopic,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .ForumTopicDeleted => { return self.ForumTopicDeleted.size(); },
                .ForumTopic => { return self.ForumTopic.size(); },
        }
    }
};
const MessagesForumTopicsEnumID = enum(u32) {
    MessagesForumTopics = 913709011,
};
const IMessagesForumTopics = union(MessagesForumTopicsEnumID) {
    MessagesForumTopics: *const MessagesForumTopics,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .MessagesForumTopics => { return self.MessagesForumTopics.size(); },
        }
    }
};
const DefaultHistoryTTLEnumID = enum(u32) {
    DefaultHistoryTTL = 1135897376,
};
const IDefaultHistoryTTL = union(DefaultHistoryTTLEnumID) {
    DefaultHistoryTTL: *const DefaultHistoryTTL,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .DefaultHistoryTTL => { return self.DefaultHistoryTTL.size(); },
        }
    }
};
const ExportedContactTokenEnumID = enum(u32) {
    ExportedContactToken = 1103040667,
};
const IExportedContactToken = union(ExportedContactTokenEnumID) {
    ExportedContactToken: *const ExportedContactToken,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .ExportedContactToken => { return self.ExportedContactToken.size(); },
        }
    }
};
const RequestPeerTypeEnumID = enum(u32) {
    RequestPeerTypeUser = 1597737472,
    RequestPeerTypeChat = 3387977243,
    RequestPeerTypeBroadcast = 865857388,
};
const IRequestPeerType = union(RequestPeerTypeEnumID) {
    RequestPeerTypeUser: *const RequestPeerTypeUser,
    RequestPeerTypeChat: *const RequestPeerTypeChat,
    RequestPeerTypeBroadcast: *const RequestPeerTypeBroadcast,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .RequestPeerTypeUser => { return self.RequestPeerTypeUser.size(); },
                .RequestPeerTypeChat => { return self.RequestPeerTypeChat.size(); },
                .RequestPeerTypeBroadcast => { return self.RequestPeerTypeBroadcast.size(); },
        }
    }
};
const EmojiListEnumID = enum(u32) {
    EmojiListNotModified = 1209970170,
    EmojiList = 2048790993,
};
const IEmojiList = union(EmojiListEnumID) {
    EmojiListNotModified: *const EmojiListNotModified,
    EmojiList: *const EmojiList,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .EmojiListNotModified => { return self.EmojiListNotModified.size(); },
                .EmojiList => { return self.EmojiList.size(); },
        }
    }
};
const EmojiGroupEnumID = enum(u32) {
    EmojiGroup = 2056961449,
    EmojiGroupGreeting = 2161274055,
    EmojiGroupPremium = 154914612,
};
const IEmojiGroup = union(EmojiGroupEnumID) {
    EmojiGroup: *const EmojiGroup,
    EmojiGroupGreeting: *const EmojiGroupGreeting,
    EmojiGroupPremium: *const EmojiGroupPremium,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .EmojiGroup => { return self.EmojiGroup.size(); },
                .EmojiGroupGreeting => { return self.EmojiGroupGreeting.size(); },
                .EmojiGroupPremium => { return self.EmojiGroupPremium.size(); },
        }
    }
};
const MessagesEmojiGroupsEnumID = enum(u32) {
    MessagesEmojiGroupsNotModified = 1874111879,
    MessagesEmojiGroups = 2283780427,
};
const IMessagesEmojiGroups = union(MessagesEmojiGroupsEnumID) {
    MessagesEmojiGroupsNotModified: *const MessagesEmojiGroupsNotModified,
    MessagesEmojiGroups: *const MessagesEmojiGroups,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .MessagesEmojiGroupsNotModified => { return self.MessagesEmojiGroupsNotModified.size(); },
                .MessagesEmojiGroups => { return self.MessagesEmojiGroups.size(); },
        }
    }
};
const TextWithEntitiesEnumID = enum(u32) {
    TextWithEntities = 1964978502,
};
const ITextWithEntities = union(TextWithEntitiesEnumID) {
    TextWithEntities: *const TextWithEntities,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .TextWithEntities => { return self.TextWithEntities.size(); },
        }
    }
};
const MessagesTranslatedTextEnumID = enum(u32) {
    MessagesTranslateResult = 870003448,
};
const IMessagesTranslatedText = union(MessagesTranslatedTextEnumID) {
    MessagesTranslateResult: *const MessagesTranslateResult,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .MessagesTranslateResult => { return self.MessagesTranslateResult.size(); },
        }
    }
};
const AutoSaveSettingsEnumID = enum(u32) {
    AutoSaveSettings = 3360175310,
};
const IAutoSaveSettings = union(AutoSaveSettingsEnumID) {
    AutoSaveSettings: *const AutoSaveSettings,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .AutoSaveSettings => { return self.AutoSaveSettings.size(); },
        }
    }
};
const AutoSaveExceptionEnumID = enum(u32) {
    AutoSaveException = 2170563911,
};
const IAutoSaveException = union(AutoSaveExceptionEnumID) {
    AutoSaveException: *const AutoSaveException,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .AutoSaveException => { return self.AutoSaveException.size(); },
        }
    }
};
const AccountAutoSaveSettingsEnumID = enum(u32) {
    AccountAutoSaveSettings = 1279133341,
};
const IAccountAutoSaveSettings = union(AccountAutoSaveSettingsEnumID) {
    AccountAutoSaveSettings: *const AccountAutoSaveSettings,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .AccountAutoSaveSettings => { return self.AccountAutoSaveSettings.size(); },
        }
    }
};
const HelpAppConfigEnumID = enum(u32) {
    HelpAppConfigNotModified = 2094949405,
    HelpAppConfig = 3709368366,
};
const IHelpAppConfig = union(HelpAppConfigEnumID) {
    HelpAppConfigNotModified: *const HelpAppConfigNotModified,
    HelpAppConfig: *const HelpAppConfig,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .HelpAppConfigNotModified => { return self.HelpAppConfigNotModified.size(); },
                .HelpAppConfig => { return self.HelpAppConfig.size(); },
        }
    }
};
const InputBotAppEnumID = enum(u32) {
    InputBotAppID = 2837495162,
    InputBotAppShortName = 2425095175,
};
const IInputBotApp = union(InputBotAppEnumID) {
    InputBotAppID: *const InputBotAppID,
    InputBotAppShortName: *const InputBotAppShortName,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .InputBotAppID => { return self.InputBotAppID.size(); },
                .InputBotAppShortName => { return self.InputBotAppShortName.size(); },
        }
    }
};
const BotAppEnumID = enum(u32) {
    BotAppNotModified = 1571189943,
    BotApp = 2516373974,
};
const IBotApp = union(BotAppEnumID) {
    BotAppNotModified: *const BotAppNotModified,
    BotApp: *const BotApp,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .BotAppNotModified => { return self.BotAppNotModified.size(); },
                .BotApp => { return self.BotApp.size(); },
        }
    }
};
const MessagesBotAppEnumID = enum(u32) {
    MessagesBotApp = 3947933173,
};
const IMessagesBotApp = union(MessagesBotAppEnumID) {
    MessagesBotApp: *const MessagesBotApp,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .MessagesBotApp => { return self.MessagesBotApp.size(); },
        }
    }
};
const InlineBotWebViewEnumID = enum(u32) {
    InlineBotWebView = 3044185557,
};
const IInlineBotWebView = union(InlineBotWebViewEnumID) {
    InlineBotWebView: *const InlineBotWebView,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .InlineBotWebView => { return self.InlineBotWebView.size(); },
        }
    }
};
const ReadParticipantDateEnumID = enum(u32) {
    ReadParticipantDate = 1246753138,
};
const IReadParticipantDate = union(ReadParticipantDateEnumID) {
    ReadParticipantDate: *const ReadParticipantDate,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .ReadParticipantDate => { return self.ReadParticipantDate.size(); },
        }
    }
};
const InputChatlistEnumID = enum(u32) {
    InputChatlistDialogFilter = 4091599411,
};
const IInputChatlist = union(InputChatlistEnumID) {
    InputChatlistDialogFilter: *const InputChatlistDialogFilter,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .InputChatlistDialogFilter => { return self.InputChatlistDialogFilter.size(); },
        }
    }
};
const ExportedChatlistInviteEnumID = enum(u32) {
    ExportedChatlistInvite = 206668204,
};
const IExportedChatlistInvite = union(ExportedChatlistInviteEnumID) {
    ExportedChatlistInvite: *const ExportedChatlistInvite,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .ExportedChatlistInvite => { return self.ExportedChatlistInvite.size(); },
        }
    }
};
const ChatlistsExportedChatlistInviteEnumID = enum(u32) {
    ChatlistsExportedChatlistInvite = 283567014,
};
const IChatlistsExportedChatlistInvite = union(ChatlistsExportedChatlistInviteEnumID) {
    ChatlistsExportedChatlistInvite: *const ChatlistsExportedChatlistInvite,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .ChatlistsExportedChatlistInvite => { return self.ChatlistsExportedChatlistInvite.size(); },
        }
    }
};
const ChatlistsExportedInvitesEnumID = enum(u32) {
    ChatlistsExportedInvites = 279670215,
};
const IChatlistsExportedInvites = union(ChatlistsExportedInvitesEnumID) {
    ChatlistsExportedInvites: *const ChatlistsExportedInvites,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .ChatlistsExportedInvites => { return self.ChatlistsExportedInvites.size(); },
        }
    }
};
const ChatlistsChatlistInviteEnumID = enum(u32) {
    ChatlistsChatlistInviteAlready = 4203214425,
    ChatlistsChatlistInvite = 500007837,
};
const IChatlistsChatlistInvite = union(ChatlistsChatlistInviteEnumID) {
    ChatlistsChatlistInviteAlready: *const ChatlistsChatlistInviteAlready,
    ChatlistsChatlistInvite: *const ChatlistsChatlistInvite,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .ChatlistsChatlistInviteAlready => { return self.ChatlistsChatlistInviteAlready.size(); },
                .ChatlistsChatlistInvite => { return self.ChatlistsChatlistInvite.size(); },
        }
    }
};
const ChatlistsChatlistUpdatesEnumID = enum(u32) {
    ChatlistsChatlistUpdates = 2478671757,
};
const IChatlistsChatlistUpdates = union(ChatlistsChatlistUpdatesEnumID) {
    ChatlistsChatlistUpdates: *const ChatlistsChatlistUpdates,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .ChatlistsChatlistUpdates => { return self.ChatlistsChatlistUpdates.size(); },
        }
    }
};
const BotsBotInfoEnumID = enum(u32) {
    BotsBotInfo = 3903288752,
};
const IBotsBotInfo = union(BotsBotInfoEnumID) {
    BotsBotInfo: *const BotsBotInfo,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .BotsBotInfo => { return self.BotsBotInfo.size(); },
        }
    }
};
const MessagePeerVoteEnumID = enum(u32) {
    MessagePeerVote = 3066834268,
    MessagePeerVoteInputOption = 1959634180,
    MessagePeerVoteMultiple = 1177089766,
};
const IMessagePeerVote = union(MessagePeerVoteEnumID) {
    MessagePeerVote: *const MessagePeerVote,
    MessagePeerVoteInputOption: *const MessagePeerVoteInputOption,
    MessagePeerVoteMultiple: *const MessagePeerVoteMultiple,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .MessagePeerVote => { return self.MessagePeerVote.size(); },
                .MessagePeerVoteInputOption => { return self.MessagePeerVoteInputOption.size(); },
                .MessagePeerVoteMultiple => { return self.MessagePeerVoteMultiple.size(); },
        }
    }
};
const StoryViewsEnumID = enum(u32) {
    StoryViews = 2371443926,
};
const IStoryViews = union(StoryViewsEnumID) {
    StoryViews: *const StoryViews,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .StoryViews => { return self.StoryViews.size(); },
        }
    }
};
const StoryItemEnumID = enum(u32) {
    StoryItemDeleted = 1374088783,
    StoryItemSkipped = 4289579283,
    StoryItem = 2041735716,
};
const IStoryItem = union(StoryItemEnumID) {
    StoryItemDeleted: *const StoryItemDeleted,
    StoryItemSkipped: *const StoryItemSkipped,
    StoryItem: *const StoryItem,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .StoryItemDeleted => { return self.StoryItemDeleted.size(); },
                .StoryItemSkipped => { return self.StoryItemSkipped.size(); },
                .StoryItem => { return self.StoryItem.size(); },
        }
    }
};
const StoriesAllStoriesEnumID = enum(u32) {
    StoriesAllStoriesNotModified = 291044926,
    StoriesAllStories = 1862033025,
};
const IStoriesAllStories = union(StoriesAllStoriesEnumID) {
    StoriesAllStoriesNotModified: *const StoriesAllStoriesNotModified,
    StoriesAllStories: *const StoriesAllStories,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .StoriesAllStoriesNotModified => { return self.StoriesAllStoriesNotModified.size(); },
                .StoriesAllStories => { return self.StoriesAllStories.size(); },
        }
    }
};
const StoriesStoriesEnumID = enum(u32) {
    StoriesStories = 1673780490,
};
const IStoriesStories = union(StoriesStoriesEnumID) {
    StoriesStories: *const StoriesStories,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .StoriesStories => { return self.StoriesStories.size(); },
        }
    }
};
const StoryViewEnumID = enum(u32) {
    StoryView = 2965236421,
    StoryViewPublicForward = 2424530699,
    StoryViewPublicRepost = 3178549065,
};
const IStoryView = union(StoryViewEnumID) {
    StoryView: *const StoryView,
    StoryViewPublicForward: *const StoryViewPublicForward,
    StoryViewPublicRepost: *const StoryViewPublicRepost,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .StoryView => { return self.StoryView.size(); },
                .StoryViewPublicForward => { return self.StoryViewPublicForward.size(); },
                .StoryViewPublicRepost => { return self.StoryViewPublicRepost.size(); },
        }
    }
};
const StoriesStoryViewsListEnumID = enum(u32) {
    StoriesStoryViewsList = 1507299269,
};
const IStoriesStoryViewsList = union(StoriesStoryViewsListEnumID) {
    StoriesStoryViewsList: *const StoriesStoryViewsList,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .StoriesStoryViewsList => { return self.StoriesStoryViewsList.size(); },
        }
    }
};
const StoriesStoryViewsEnumID = enum(u32) {
    StoriesStoryViews = 3734957341,
};
const IStoriesStoryViews = union(StoriesStoryViewsEnumID) {
    StoriesStoryViews: *const StoriesStoryViews,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .StoriesStoryViews => { return self.StoriesStoryViews.size(); },
        }
    }
};
const InputReplyToEnumID = enum(u32) {
    InputReplyToMessage = 583071445,
    InputReplyToStory = 1484862010,
};
const IInputReplyTo = union(InputReplyToEnumID) {
    InputReplyToMessage: *const InputReplyToMessage,
    InputReplyToStory: *const InputReplyToStory,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .InputReplyToMessage => { return self.InputReplyToMessage.size(); },
                .InputReplyToStory => { return self.InputReplyToStory.size(); },
        }
    }
};
const ExportedStoryLinkEnumID = enum(u32) {
    ExportedStoryLink = 1070138683,
};
const IExportedStoryLink = union(ExportedStoryLinkEnumID) {
    ExportedStoryLink: *const ExportedStoryLink,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .ExportedStoryLink => { return self.ExportedStoryLink.size(); },
        }
    }
};
const StoriesStealthModeEnumID = enum(u32) {
    StoriesStealthMode = 1898850301,
};
const IStoriesStealthMode = union(StoriesStealthModeEnumID) {
    StoriesStealthMode: *const StoriesStealthMode,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .StoriesStealthMode => { return self.StoriesStealthMode.size(); },
        }
    }
};
const MediaAreaCoordinatesEnumID = enum(u32) {
    MediaAreaCoordinates = 3486113794,
};
const IMediaAreaCoordinates = union(MediaAreaCoordinatesEnumID) {
    MediaAreaCoordinates: *const MediaAreaCoordinates,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .MediaAreaCoordinates => { return self.MediaAreaCoordinates.size(); },
        }
    }
};
const MediaAreaEnumID = enum(u32) {
    MediaAreaVenue = 3196246940,
    InputMediaAreaVenue = 2994872703,
    MediaAreaGeoPoint = 3402974509,
    MediaAreaSuggestedReaction = 340088945,
    MediaAreaChannelPost = 1996756655,
    InputMediaAreaChannelPost = 577893055,
    MediaAreaUrl = 926421125,
    MediaAreaWeather = 1235637404,
};
const IMediaArea = union(MediaAreaEnumID) {
    MediaAreaVenue: *const MediaAreaVenue,
    InputMediaAreaVenue: *const InputMediaAreaVenue,
    MediaAreaGeoPoint: *const MediaAreaGeoPoint,
    MediaAreaSuggestedReaction: *const MediaAreaSuggestedReaction,
    MediaAreaChannelPost: *const MediaAreaChannelPost,
    InputMediaAreaChannelPost: *const InputMediaAreaChannelPost,
    MediaAreaUrl: *const MediaAreaUrl,
    MediaAreaWeather: *const MediaAreaWeather,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .MediaAreaVenue => { return self.MediaAreaVenue.size(); },
                .InputMediaAreaVenue => { return self.InputMediaAreaVenue.size(); },
                .MediaAreaGeoPoint => { return self.MediaAreaGeoPoint.size(); },
                .MediaAreaSuggestedReaction => { return self.MediaAreaSuggestedReaction.size(); },
                .MediaAreaChannelPost => { return self.MediaAreaChannelPost.size(); },
                .InputMediaAreaChannelPost => { return self.InputMediaAreaChannelPost.size(); },
                .MediaAreaUrl => { return self.MediaAreaUrl.size(); },
                .MediaAreaWeather => { return self.MediaAreaWeather.size(); },
        }
    }
};
const PeerStoriesEnumID = enum(u32) {
    PeerStories = 2587224473,
};
const IPeerStories = union(PeerStoriesEnumID) {
    PeerStories: *const PeerStories,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .PeerStories => { return self.PeerStories.size(); },
        }
    }
};
const StoriesPeerStoriesEnumID = enum(u32) {
    StoriesPeerStories = 3404105576,
};
const IStoriesPeerStories = union(StoriesPeerStoriesEnumID) {
    StoriesPeerStories: *const StoriesPeerStories,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .StoriesPeerStories => { return self.StoriesPeerStories.size(); },
        }
    }
};
const MessagesWebPageEnumID = enum(u32) {
    MessagesWebPage = 4250800829,
};
const IMessagesWebPage = union(MessagesWebPageEnumID) {
    MessagesWebPage: *const MessagesWebPage,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .MessagesWebPage => { return self.MessagesWebPage.size(); },
        }
    }
};
const PremiumGiftCodeOptionEnumID = enum(u32) {
    PremiumGiftCodeOption = 629052971,
};
const IPremiumGiftCodeOption = union(PremiumGiftCodeOptionEnumID) {
    PremiumGiftCodeOption: *const PremiumGiftCodeOption,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .PremiumGiftCodeOption => { return self.PremiumGiftCodeOption.size(); },
        }
    }
};
const PaymentsCheckedGiftCodeEnumID = enum(u32) {
    PaymentsCheckedGiftCode = 675942550,
};
const IPaymentsCheckedGiftCode = union(PaymentsCheckedGiftCodeEnumID) {
    PaymentsCheckedGiftCode: *const PaymentsCheckedGiftCode,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .PaymentsCheckedGiftCode => { return self.PaymentsCheckedGiftCode.size(); },
        }
    }
};
const PaymentsGiveawayInfoEnumID = enum(u32) {
    PaymentsGiveawayInfo = 1130879648,
    PaymentsGiveawayInfoResults = 3782600303,
};
const IPaymentsGiveawayInfo = union(PaymentsGiveawayInfoEnumID) {
    PaymentsGiveawayInfo: *const PaymentsGiveawayInfo,
    PaymentsGiveawayInfoResults: *const PaymentsGiveawayInfoResults,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .PaymentsGiveawayInfo => { return self.PaymentsGiveawayInfo.size(); },
                .PaymentsGiveawayInfoResults => { return self.PaymentsGiveawayInfoResults.size(); },
        }
    }
};
const PrepaidGiveawayEnumID = enum(u32) {
    PrepaidGiveaway = 2991824212,
    PrepaidStarsGiveaway = 2594011104,
};
const IPrepaidGiveaway = union(PrepaidGiveawayEnumID) {
    PrepaidGiveaway: *const PrepaidGiveaway,
    PrepaidStarsGiveaway: *const PrepaidStarsGiveaway,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .PrepaidGiveaway => { return self.PrepaidGiveaway.size(); },
                .PrepaidStarsGiveaway => { return self.PrepaidStarsGiveaway.size(); },
        }
    }
};
const BoostEnumID = enum(u32) {
    Boost = 1262359766,
};
const IBoost = union(BoostEnumID) {
    Boost: *const Boost,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .Boost => { return self.Boost.size(); },
        }
    }
};
const PremiumBoostsListEnumID = enum(u32) {
    PremiumBoostsList = 2264424764,
};
const IPremiumBoostsList = union(PremiumBoostsListEnumID) {
    PremiumBoostsList: *const PremiumBoostsList,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .PremiumBoostsList => { return self.PremiumBoostsList.size(); },
        }
    }
};
const MyBoostEnumID = enum(u32) {
    MyBoost = 3293069660,
};
const IMyBoost = union(MyBoostEnumID) {
    MyBoost: *const MyBoost,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .MyBoost => { return self.MyBoost.size(); },
        }
    }
};
const PremiumMyBoostsEnumID = enum(u32) {
    PremiumMyBoosts = 2598512866,
};
const IPremiumMyBoosts = union(PremiumMyBoostsEnumID) {
    PremiumMyBoosts: *const PremiumMyBoosts,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .PremiumMyBoosts => { return self.PremiumMyBoosts.size(); },
        }
    }
};
const PremiumBoostsStatusEnumID = enum(u32) {
    PremiumBoostsStatus = 1230586490,
};
const IPremiumBoostsStatus = union(PremiumBoostsStatusEnumID) {
    PremiumBoostsStatus: *const PremiumBoostsStatus,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .PremiumBoostsStatus => { return self.PremiumBoostsStatus.size(); },
        }
    }
};
const StoryFwdHeaderEnumID = enum(u32) {
    StoryFwdHeader = 3089555792,
};
const IStoryFwdHeader = union(StoryFwdHeaderEnumID) {
    StoryFwdHeader: *const StoryFwdHeader,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .StoryFwdHeader => { return self.StoryFwdHeader.size(); },
        }
    }
};
const PostInteractionCountersEnumID = enum(u32) {
    PostInteractionCountersMessage = 3875901055,
    PostInteractionCountersStory = 2319978023,
};
const IPostInteractionCounters = union(PostInteractionCountersEnumID) {
    PostInteractionCountersMessage: *const PostInteractionCountersMessage,
    PostInteractionCountersStory: *const PostInteractionCountersStory,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .PostInteractionCountersMessage => { return self.PostInteractionCountersMessage.size(); },
                .PostInteractionCountersStory => { return self.PostInteractionCountersStory.size(); },
        }
    }
};
const StatsStoryStatsEnumID = enum(u32) {
    StatsStoryStats = 1355613820,
};
const IStatsStoryStats = union(StatsStoryStatsEnumID) {
    StatsStoryStats: *const StatsStoryStats,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .StatsStoryStats => { return self.StatsStoryStats.size(); },
        }
    }
};
const PublicForwardEnumID = enum(u32) {
    PublicForwardMessage = 32685898,
    PublicForwardStory = 3992169936,
};
const IPublicForward = union(PublicForwardEnumID) {
    PublicForwardMessage: *const PublicForwardMessage,
    PublicForwardStory: *const PublicForwardStory,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .PublicForwardMessage => { return self.PublicForwardMessage.size(); },
                .PublicForwardStory => { return self.PublicForwardStory.size(); },
        }
    }
};
const StatsPublicForwardsEnumID = enum(u32) {
    StatsPublicForwards = 2466479648,
};
const IStatsPublicForwards = union(StatsPublicForwardsEnumID) {
    StatsPublicForwards: *const StatsPublicForwards,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .StatsPublicForwards => { return self.StatsPublicForwards.size(); },
        }
    }
};
const PeerColorEnumID = enum(u32) {
    PeerColor = 3041614543,
};
const IPeerColor = union(PeerColorEnumID) {
    PeerColor: *const PeerColor,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .PeerColor => { return self.PeerColor.size(); },
        }
    }
};
const HelpPeerColorSetEnumID = enum(u32) {
    HelpPeerColorSet = 639736408,
    HelpPeerColorProfileSet = 1987928555,
};
const IHelpPeerColorSet = union(HelpPeerColorSetEnumID) {
    HelpPeerColorSet: *const HelpPeerColorSet,
    HelpPeerColorProfileSet: *const HelpPeerColorProfileSet,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .HelpPeerColorSet => { return self.HelpPeerColorSet.size(); },
                .HelpPeerColorProfileSet => { return self.HelpPeerColorProfileSet.size(); },
        }
    }
};
const HelpPeerColorOptionEnumID = enum(u32) {
    HelpPeerColorOption = 2917953214,
};
const IHelpPeerColorOption = union(HelpPeerColorOptionEnumID) {
    HelpPeerColorOption: *const HelpPeerColorOption,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .HelpPeerColorOption => { return self.HelpPeerColorOption.size(); },
        }
    }
};
const HelpPeerColorsEnumID = enum(u32) {
    HelpPeerColorsNotModified = 732034510,
    HelpPeerColors = 16313608,
};
const IHelpPeerColors = union(HelpPeerColorsEnumID) {
    HelpPeerColorsNotModified: *const HelpPeerColorsNotModified,
    HelpPeerColors: *const HelpPeerColors,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .HelpPeerColorsNotModified => { return self.HelpPeerColorsNotModified.size(); },
                .HelpPeerColors => { return self.HelpPeerColors.size(); },
        }
    }
};
const StoryReactionEnumID = enum(u32) {
    StoryReaction = 1620104917,
    StoryReactionPublicForward = 3148555843,
    StoryReactionPublicRepost = 3486322451,
};
const IStoryReaction = union(StoryReactionEnumID) {
    StoryReaction: *const StoryReaction,
    StoryReactionPublicForward: *const StoryReactionPublicForward,
    StoryReactionPublicRepost: *const StoryReactionPublicRepost,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .StoryReaction => { return self.StoryReaction.size(); },
                .StoryReactionPublicForward => { return self.StoryReactionPublicForward.size(); },
                .StoryReactionPublicRepost => { return self.StoryReactionPublicRepost.size(); },
        }
    }
};
const StoriesStoryReactionsListEnumID = enum(u32) {
    StoriesStoryReactionsList = 2858383516,
};
const IStoriesStoryReactionsList = union(StoriesStoryReactionsListEnumID) {
    StoriesStoryReactionsList: *const StoriesStoryReactionsList,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .StoriesStoryReactionsList => { return self.StoriesStoryReactionsList.size(); },
        }
    }
};
const SavedDialogEnumID = enum(u32) {
    SavedDialog = 3179793260,
};
const ISavedDialog = union(SavedDialogEnumID) {
    SavedDialog: *const SavedDialog,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .SavedDialog => { return self.SavedDialog.size(); },
        }
    }
};
const MessagesSavedDialogsEnumID = enum(u32) {
    MessagesSavedDialogs = 4164608545,
    MessagesSavedDialogsSlice = 1153080793,
    MessagesSavedDialogsNotModified = 3223285736,
};
const IMessagesSavedDialogs = union(MessagesSavedDialogsEnumID) {
    MessagesSavedDialogs: *const MessagesSavedDialogs,
    MessagesSavedDialogsSlice: *const MessagesSavedDialogsSlice,
    MessagesSavedDialogsNotModified: *const MessagesSavedDialogsNotModified,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .MessagesSavedDialogs => { return self.MessagesSavedDialogs.size(); },
                .MessagesSavedDialogsSlice => { return self.MessagesSavedDialogsSlice.size(); },
                .MessagesSavedDialogsNotModified => { return self.MessagesSavedDialogsNotModified.size(); },
        }
    }
};
const SavedReactionTagEnumID = enum(u32) {
    SavedReactionTag = 3413112872,
};
const ISavedReactionTag = union(SavedReactionTagEnumID) {
    SavedReactionTag: *const SavedReactionTag,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .SavedReactionTag => { return self.SavedReactionTag.size(); },
        }
    }
};
const MessagesSavedReactionTagsEnumID = enum(u32) {
    MessagesSavedReactionTagsNotModified = 2291882479,
    MessagesSavedReactionTags = 844731658,
};
const IMessagesSavedReactionTags = union(MessagesSavedReactionTagsEnumID) {
    MessagesSavedReactionTagsNotModified: *const MessagesSavedReactionTagsNotModified,
    MessagesSavedReactionTags: *const MessagesSavedReactionTags,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .MessagesSavedReactionTagsNotModified => { return self.MessagesSavedReactionTagsNotModified.size(); },
                .MessagesSavedReactionTags => { return self.MessagesSavedReactionTags.size(); },
        }
    }
};
const OutboxReadDateEnumID = enum(u32) {
    OutboxReadDate = 1001931436,
};
const IOutboxReadDate = union(OutboxReadDateEnumID) {
    OutboxReadDate: *const OutboxReadDate,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .OutboxReadDate => { return self.OutboxReadDate.size(); },
        }
    }
};
const SmsjobsEligibilityToJoinEnumID = enum(u32) {
    SmsjobsEligibleToJoin = 3700114639,
};
const ISmsjobsEligibilityToJoin = union(SmsjobsEligibilityToJoinEnumID) {
    SmsjobsEligibleToJoin: *const SmsjobsEligibleToJoin,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .SmsjobsEligibleToJoin => { return self.SmsjobsEligibleToJoin.size(); },
        }
    }
};
const SmsjobsStatusEnumID = enum(u32) {
    SmsjobsStatus = 720277905,
};
const ISmsjobsStatus = union(SmsjobsStatusEnumID) {
    SmsjobsStatus: *const SmsjobsStatus,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .SmsjobsStatus => { return self.SmsjobsStatus.size(); },
        }
    }
};
const SmsJobEnumID = enum(u32) {
    SmsJob = 3869372088,
};
const ISmsJob = union(SmsJobEnumID) {
    SmsJob: *const SmsJob,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .SmsJob => { return self.SmsJob.size(); },
        }
    }
};
const BusinessWeeklyOpenEnumID = enum(u32) {
    BusinessWeeklyOpen = 302717625,
};
const IBusinessWeeklyOpen = union(BusinessWeeklyOpenEnumID) {
    BusinessWeeklyOpen: *const BusinessWeeklyOpen,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .BusinessWeeklyOpen => { return self.BusinessWeeklyOpen.size(); },
        }
    }
};
const BusinessWorkHoursEnumID = enum(u32) {
    BusinessWorkHours = 2358423704,
};
const IBusinessWorkHours = union(BusinessWorkHoursEnumID) {
    BusinessWorkHours: *const BusinessWorkHours,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .BusinessWorkHours => { return self.BusinessWorkHours.size(); },
        }
    }
};
const BusinessLocationEnumID = enum(u32) {
    BusinessLocation = 2891717367,
};
const IBusinessLocation = union(BusinessLocationEnumID) {
    BusinessLocation: *const BusinessLocation,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .BusinessLocation => { return self.BusinessLocation.size(); },
        }
    }
};
const InputBusinessRecipientsEnumID = enum(u32) {
    InputBusinessRecipients = 1871393450,
};
const IInputBusinessRecipients = union(InputBusinessRecipientsEnumID) {
    InputBusinessRecipients: *const InputBusinessRecipients,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .InputBusinessRecipients => { return self.InputBusinessRecipients.size(); },
        }
    }
};
const BusinessRecipientsEnumID = enum(u32) {
    BusinessRecipients = 554733559,
};
const IBusinessRecipients = union(BusinessRecipientsEnumID) {
    BusinessRecipients: *const BusinessRecipients,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .BusinessRecipients => { return self.BusinessRecipients.size(); },
        }
    }
};
const BusinessAwayMessageScheduleEnumID = enum(u32) {
    BusinessAwayMessageScheduleAlways = 3384402617,
    BusinessAwayMessageScheduleOutsideWorkHours = 3287479553,
    BusinessAwayMessageScheduleCustom = 3427638988,
};
const IBusinessAwayMessageSchedule = union(BusinessAwayMessageScheduleEnumID) {
    BusinessAwayMessageScheduleAlways: *const BusinessAwayMessageScheduleAlways,
    BusinessAwayMessageScheduleOutsideWorkHours: *const BusinessAwayMessageScheduleOutsideWorkHours,
    BusinessAwayMessageScheduleCustom: *const BusinessAwayMessageScheduleCustom,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .BusinessAwayMessageScheduleAlways => { return self.BusinessAwayMessageScheduleAlways.size(); },
                .BusinessAwayMessageScheduleOutsideWorkHours => { return self.BusinessAwayMessageScheduleOutsideWorkHours.size(); },
                .BusinessAwayMessageScheduleCustom => { return self.BusinessAwayMessageScheduleCustom.size(); },
        }
    }
};
const InputBusinessGreetingMessageEnumID = enum(u32) {
    InputBusinessGreetingMessage = 26528571,
};
const IInputBusinessGreetingMessage = union(InputBusinessGreetingMessageEnumID) {
    InputBusinessGreetingMessage: *const InputBusinessGreetingMessage,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .InputBusinessGreetingMessage => { return self.InputBusinessGreetingMessage.size(); },
        }
    }
};
const BusinessGreetingMessageEnumID = enum(u32) {
    BusinessGreetingMessage = 3843664811,
};
const IBusinessGreetingMessage = union(BusinessGreetingMessageEnumID) {
    BusinessGreetingMessage: *const BusinessGreetingMessage,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .BusinessGreetingMessage => { return self.BusinessGreetingMessage.size(); },
        }
    }
};
const InputBusinessAwayMessageEnumID = enum(u32) {
    InputBusinessAwayMessage = 2200008160,
};
const IInputBusinessAwayMessage = union(InputBusinessAwayMessageEnumID) {
    InputBusinessAwayMessage: *const InputBusinessAwayMessage,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .InputBusinessAwayMessage => { return self.InputBusinessAwayMessage.size(); },
        }
    }
};
const BusinessAwayMessageEnumID = enum(u32) {
    BusinessAwayMessage = 4011158108,
};
const IBusinessAwayMessage = union(BusinessAwayMessageEnumID) {
    BusinessAwayMessage: *const BusinessAwayMessage,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .BusinessAwayMessage => { return self.BusinessAwayMessage.size(); },
        }
    }
};
const TimezoneEnumID = enum(u32) {
    Timezone = 4287793653,
};
const ITimezone = union(TimezoneEnumID) {
    Timezone: *const Timezone,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .Timezone => { return self.Timezone.size(); },
        }
    }
};
const HelpTimezonesListEnumID = enum(u32) {
    HelpTimezonesListNotModified = 2533820620,
    HelpTimezonesList = 2071260529,
};
const IHelpTimezonesList = union(HelpTimezonesListEnumID) {
    HelpTimezonesListNotModified: *const HelpTimezonesListNotModified,
    HelpTimezonesList: *const HelpTimezonesList,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .HelpTimezonesListNotModified => { return self.HelpTimezonesListNotModified.size(); },
                .HelpTimezonesList => { return self.HelpTimezonesList.size(); },
        }
    }
};
const QuickReplyEnumID = enum(u32) {
    QuickReply = 110563371,
};
const IQuickReply = union(QuickReplyEnumID) {
    QuickReply: *const QuickReply,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .QuickReply => { return self.QuickReply.size(); },
        }
    }
};
const InputQuickReplyShortcutEnumID = enum(u32) {
    InputQuickReplyShortcut = 609840449,
    InputQuickReplyShortcutId = 18418929,
};
const IInputQuickReplyShortcut = union(InputQuickReplyShortcutEnumID) {
    InputQuickReplyShortcut: *const InputQuickReplyShortcut,
    InputQuickReplyShortcutId: *const InputQuickReplyShortcutId,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .InputQuickReplyShortcut => { return self.InputQuickReplyShortcut.size(); },
                .InputQuickReplyShortcutId => { return self.InputQuickReplyShortcutId.size(); },
        }
    }
};
const MessagesQuickRepliesEnumID = enum(u32) {
    MessagesQuickReplies = 3331155605,
    MessagesQuickRepliesNotModified = 1603398491,
};
const IMessagesQuickReplies = union(MessagesQuickRepliesEnumID) {
    MessagesQuickReplies: *const MessagesQuickReplies,
    MessagesQuickRepliesNotModified: *const MessagesQuickRepliesNotModified,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .MessagesQuickReplies => { return self.MessagesQuickReplies.size(); },
                .MessagesQuickRepliesNotModified => { return self.MessagesQuickRepliesNotModified.size(); },
        }
    }
};
const ConnectedBotEnumID = enum(u32) {
    ConnectedBot = 3171321345,
};
const IConnectedBot = union(ConnectedBotEnumID) {
    ConnectedBot: *const ConnectedBot,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .ConnectedBot => { return self.ConnectedBot.size(); },
        }
    }
};
const AccountConnectedBotsEnumID = enum(u32) {
    AccountConnectedBots = 400029819,
};
const IAccountConnectedBots = union(AccountConnectedBotsEnumID) {
    AccountConnectedBots: *const AccountConnectedBots,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .AccountConnectedBots => { return self.AccountConnectedBots.size(); },
        }
    }
};
const MessagesDialogFiltersEnumID = enum(u32) {
    MessagesDialogFilters = 718878489,
};
const IMessagesDialogFilters = union(MessagesDialogFiltersEnumID) {
    MessagesDialogFilters: *const MessagesDialogFilters,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .MessagesDialogFilters => { return self.MessagesDialogFilters.size(); },
        }
    }
};
const BirthdayEnumID = enum(u32) {
    Birthday = 1821253126,
};
const IBirthday = union(BirthdayEnumID) {
    Birthday: *const Birthday,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .Birthday => { return self.Birthday.size(); },
        }
    }
};
const BotBusinessConnectionEnumID = enum(u32) {
    BotBusinessConnection = 2305045428,
};
const IBotBusinessConnection = union(BotBusinessConnectionEnumID) {
    BotBusinessConnection: *const BotBusinessConnection,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .BotBusinessConnection => { return self.BotBusinessConnection.size(); },
        }
    }
};
const InputBusinessIntroEnumID = enum(u32) {
    InputBusinessIntro = 163867085,
};
const IInputBusinessIntro = union(InputBusinessIntroEnumID) {
    InputBusinessIntro: *const InputBusinessIntro,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .InputBusinessIntro => { return self.InputBusinessIntro.size(); },
        }
    }
};
const BusinessIntroEnumID = enum(u32) {
    BusinessIntro = 1510606445,
};
const IBusinessIntro = union(BusinessIntroEnumID) {
    BusinessIntro: *const BusinessIntro,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .BusinessIntro => { return self.BusinessIntro.size(); },
        }
    }
};
const MessagesMyStickersEnumID = enum(u32) {
    MessagesMyStickers = 4211040925,
};
const IMessagesMyStickers = union(MessagesMyStickersEnumID) {
    MessagesMyStickers: *const MessagesMyStickers,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .MessagesMyStickers => { return self.MessagesMyStickers.size(); },
        }
    }
};
const InputCollectibleEnumID = enum(u32) {
    InputCollectibleUsername = 3818152105,
    InputCollectiblePhone = 2732725412,
};
const IInputCollectible = union(InputCollectibleEnumID) {
    InputCollectibleUsername: *const InputCollectibleUsername,
    InputCollectiblePhone: *const InputCollectiblePhone,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .InputCollectibleUsername => { return self.InputCollectibleUsername.size(); },
                .InputCollectiblePhone => { return self.InputCollectiblePhone.size(); },
        }
    }
};
const FragmentCollectibleInfoEnumID = enum(u32) {
    FragmentCollectibleInfo = 1857945489,
};
const IFragmentCollectibleInfo = union(FragmentCollectibleInfoEnumID) {
    FragmentCollectibleInfo: *const FragmentCollectibleInfo,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .FragmentCollectibleInfo => { return self.FragmentCollectibleInfo.size(); },
        }
    }
};
const InputBusinessBotRecipientsEnumID = enum(u32) {
    InputBusinessBotRecipients = 3303379486,
};
const IInputBusinessBotRecipients = union(InputBusinessBotRecipientsEnumID) {
    InputBusinessBotRecipients: *const InputBusinessBotRecipients,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .InputBusinessBotRecipients => { return self.InputBusinessBotRecipients.size(); },
        }
    }
};
const BusinessBotRecipientsEnumID = enum(u32) {
    BusinessBotRecipients = 3096245107,
};
const IBusinessBotRecipients = union(BusinessBotRecipientsEnumID) {
    BusinessBotRecipients: *const BusinessBotRecipients,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .BusinessBotRecipients => { return self.BusinessBotRecipients.size(); },
        }
    }
};
const ContactBirthdayEnumID = enum(u32) {
    ContactBirthday = 496600883,
};
const IContactBirthday = union(ContactBirthdayEnumID) {
    ContactBirthday: *const ContactBirthday,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .ContactBirthday => { return self.ContactBirthday.size(); },
        }
    }
};
const ContactsContactBirthdaysEnumID = enum(u32) {
    ContactsContactBirthdays = 290452237,
};
const IContactsContactBirthdays = union(ContactsContactBirthdaysEnumID) {
    ContactsContactBirthdays: *const ContactsContactBirthdays,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .ContactsContactBirthdays => { return self.ContactsContactBirthdays.size(); },
        }
    }
};
const MissingInviteeEnumID = enum(u32) {
    MissingInvitee = 1653379620,
};
const IMissingInvitee = union(MissingInviteeEnumID) {
    MissingInvitee: *const MissingInvitee,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .MissingInvitee => { return self.MissingInvitee.size(); },
        }
    }
};
const MessagesInvitedUsersEnumID = enum(u32) {
    MessagesInvitedUsers = 2136862630,
};
const IMessagesInvitedUsers = union(MessagesInvitedUsersEnumID) {
    MessagesInvitedUsers: *const MessagesInvitedUsers,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .MessagesInvitedUsers => { return self.MessagesInvitedUsers.size(); },
        }
    }
};
const InputBusinessChatLinkEnumID = enum(u32) {
    InputBusinessChatLink = 292003751,
};
const IInputBusinessChatLink = union(InputBusinessChatLinkEnumID) {
    InputBusinessChatLink: *const InputBusinessChatLink,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .InputBusinessChatLink => { return self.InputBusinessChatLink.size(); },
        }
    }
};
const BusinessChatLinkEnumID = enum(u32) {
    BusinessChatLink = 3031328367,
};
const IBusinessChatLink = union(BusinessChatLinkEnumID) {
    BusinessChatLink: *const BusinessChatLink,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .BusinessChatLink => { return self.BusinessChatLink.size(); },
        }
    }
};
const AccountBusinessChatLinksEnumID = enum(u32) {
    AccountBusinessChatLinks = 3963855569,
};
const IAccountBusinessChatLinks = union(AccountBusinessChatLinksEnumID) {
    AccountBusinessChatLinks: *const AccountBusinessChatLinks,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .AccountBusinessChatLinks => { return self.AccountBusinessChatLinks.size(); },
        }
    }
};
const AccountResolvedBusinessChatLinksEnumID = enum(u32) {
    AccountResolvedBusinessChatLinks = 2586029857,
};
const IAccountResolvedBusinessChatLinks = union(AccountResolvedBusinessChatLinksEnumID) {
    AccountResolvedBusinessChatLinks: *const AccountResolvedBusinessChatLinks,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .AccountResolvedBusinessChatLinks => { return self.AccountResolvedBusinessChatLinks.size(); },
        }
    }
};
const RequestedPeerEnumID = enum(u32) {
    RequestedPeerUser = 3593466986,
    RequestedPeerChat = 1929860175,
    RequestedPeerChannel = 2342781924,
};
const IRequestedPeer = union(RequestedPeerEnumID) {
    RequestedPeerUser: *const RequestedPeerUser,
    RequestedPeerChat: *const RequestedPeerChat,
    RequestedPeerChannel: *const RequestedPeerChannel,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .RequestedPeerUser => { return self.RequestedPeerUser.size(); },
                .RequestedPeerChat => { return self.RequestedPeerChat.size(); },
                .RequestedPeerChannel => { return self.RequestedPeerChannel.size(); },
        }
    }
};
const SponsoredMessageReportOptionEnumID = enum(u32) {
    SponsoredMessageReportOption = 1124938064,
};
const ISponsoredMessageReportOption = union(SponsoredMessageReportOptionEnumID) {
    SponsoredMessageReportOption: *const SponsoredMessageReportOption,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .SponsoredMessageReportOption => { return self.SponsoredMessageReportOption.size(); },
        }
    }
};
const ChannelsSponsoredMessageReportResultEnumID = enum(u32) {
    ChannelsSponsoredMessageReportResultChooseOption = 2221907522,
    ChannelsSponsoredMessageReportResultAdsHidden = 1044107055,
    ChannelsSponsoredMessageReportResultReported = 2910423113,
};
const IChannelsSponsoredMessageReportResult = union(ChannelsSponsoredMessageReportResultEnumID) {
    ChannelsSponsoredMessageReportResultChooseOption: *const ChannelsSponsoredMessageReportResultChooseOption,
    ChannelsSponsoredMessageReportResultAdsHidden: *const ChannelsSponsoredMessageReportResultAdsHidden,
    ChannelsSponsoredMessageReportResultReported: *const ChannelsSponsoredMessageReportResultReported,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .ChannelsSponsoredMessageReportResultChooseOption => { return self.ChannelsSponsoredMessageReportResultChooseOption.size(); },
                .ChannelsSponsoredMessageReportResultAdsHidden => { return self.ChannelsSponsoredMessageReportResultAdsHidden.size(); },
                .ChannelsSponsoredMessageReportResultReported => { return self.ChannelsSponsoredMessageReportResultReported.size(); },
        }
    }
};
const StatsBroadcastRevenueStatsEnumID = enum(u32) {
    StatsBroadcastRevenueStats = 1409802903,
};
const IStatsBroadcastRevenueStats = union(StatsBroadcastRevenueStatsEnumID) {
    StatsBroadcastRevenueStats: *const StatsBroadcastRevenueStats,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .StatsBroadcastRevenueStats => { return self.StatsBroadcastRevenueStats.size(); },
        }
    }
};
const StatsBroadcastRevenueWithdrawalUrlEnumID = enum(u32) {
    StatsBroadcastRevenueWithdrawalUrl = 3966080823,
};
const IStatsBroadcastRevenueWithdrawalUrl = union(StatsBroadcastRevenueWithdrawalUrlEnumID) {
    StatsBroadcastRevenueWithdrawalUrl: *const StatsBroadcastRevenueWithdrawalUrl,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .StatsBroadcastRevenueWithdrawalUrl => { return self.StatsBroadcastRevenueWithdrawalUrl.size(); },
        }
    }
};
const BroadcastRevenueTransactionEnumID = enum(u32) {
    BroadcastRevenueTransactionProceeds = 1434332356,
    BroadcastRevenueTransactionWithdrawal = 1515784568,
    BroadcastRevenueTransactionRefund = 1121127726,
};
const IBroadcastRevenueTransaction = union(BroadcastRevenueTransactionEnumID) {
    BroadcastRevenueTransactionProceeds: *const BroadcastRevenueTransactionProceeds,
    BroadcastRevenueTransactionWithdrawal: *const BroadcastRevenueTransactionWithdrawal,
    BroadcastRevenueTransactionRefund: *const BroadcastRevenueTransactionRefund,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .BroadcastRevenueTransactionProceeds => { return self.BroadcastRevenueTransactionProceeds.size(); },
                .BroadcastRevenueTransactionWithdrawal => { return self.BroadcastRevenueTransactionWithdrawal.size(); },
                .BroadcastRevenueTransactionRefund => { return self.BroadcastRevenueTransactionRefund.size(); },
        }
    }
};
const StatsBroadcastRevenueTransactionsEnumID = enum(u32) {
    StatsBroadcastRevenueTransactions = 2266334310,
};
const IStatsBroadcastRevenueTransactions = union(StatsBroadcastRevenueTransactionsEnumID) {
    StatsBroadcastRevenueTransactions: *const StatsBroadcastRevenueTransactions,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .StatsBroadcastRevenueTransactions => { return self.StatsBroadcastRevenueTransactions.size(); },
        }
    }
};
const ReactionNotificationsFromEnumID = enum(u32) {
    ReactionNotificationsFromContacts = 3133384218,
    ReactionNotificationsFromAll = 1268654752,
};
const IReactionNotificationsFrom = union(ReactionNotificationsFromEnumID) {
    ReactionNotificationsFromContacts: *const ReactionNotificationsFromContacts,
    ReactionNotificationsFromAll: *const ReactionNotificationsFromAll,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .ReactionNotificationsFromContacts => { return self.ReactionNotificationsFromContacts.size(); },
                .ReactionNotificationsFromAll => { return self.ReactionNotificationsFromAll.size(); },
        }
    }
};
const ReactionsNotifySettingsEnumID = enum(u32) {
    ReactionsNotifySettings = 1457736048,
};
const IReactionsNotifySettings = union(ReactionsNotifySettingsEnumID) {
    ReactionsNotifySettings: *const ReactionsNotifySettings,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .ReactionsNotifySettings => { return self.ReactionsNotifySettings.size(); },
        }
    }
};
const BroadcastRevenueBalancesEnumID = enum(u32) {
    BroadcastRevenueBalances = 3288297959,
};
const IBroadcastRevenueBalances = union(BroadcastRevenueBalancesEnumID) {
    BroadcastRevenueBalances: *const BroadcastRevenueBalances,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .BroadcastRevenueBalances => { return self.BroadcastRevenueBalances.size(); },
        }
    }
};
const AvailableEffectEnumID = enum(u32) {
    AvailableEffect = 2479088254,
};
const IAvailableEffect = union(AvailableEffectEnumID) {
    AvailableEffect: *const AvailableEffect,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .AvailableEffect => { return self.AvailableEffect.size(); },
        }
    }
};
const MessagesAvailableEffectsEnumID = enum(u32) {
    MessagesAvailableEffectsNotModified = 3522009691,
    MessagesAvailableEffects = 3185271150,
};
const IMessagesAvailableEffects = union(MessagesAvailableEffectsEnumID) {
    MessagesAvailableEffectsNotModified: *const MessagesAvailableEffectsNotModified,
    MessagesAvailableEffects: *const MessagesAvailableEffects,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .MessagesAvailableEffectsNotModified => { return self.MessagesAvailableEffectsNotModified.size(); },
                .MessagesAvailableEffects => { return self.MessagesAvailableEffects.size(); },
        }
    }
};
const FactCheckEnumID = enum(u32) {
    FactCheck = 3097230543,
};
const IFactCheck = union(FactCheckEnumID) {
    FactCheck: *const FactCheck,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .FactCheck => { return self.FactCheck.size(); },
        }
    }
};
const StarsTransactionPeerEnumID = enum(u32) {
    StarsTransactionPeerUnsupported = 2515714020,
    StarsTransactionPeerAppStore = 3025646453,
    StarsTransactionPeerPlayMarket = 2069236235,
    StarsTransactionPeerPremiumBot = 621656824,
    StarsTransactionPeerFragment = 3912227074,
    StarsTransactionPeer = 3624771933,
    StarsTransactionPeerAds = 1617438738,
};
const IStarsTransactionPeer = union(StarsTransactionPeerEnumID) {
    StarsTransactionPeerUnsupported: *const StarsTransactionPeerUnsupported,
    StarsTransactionPeerAppStore: *const StarsTransactionPeerAppStore,
    StarsTransactionPeerPlayMarket: *const StarsTransactionPeerPlayMarket,
    StarsTransactionPeerPremiumBot: *const StarsTransactionPeerPremiumBot,
    StarsTransactionPeerFragment: *const StarsTransactionPeerFragment,
    StarsTransactionPeer: *const StarsTransactionPeer,
    StarsTransactionPeerAds: *const StarsTransactionPeerAds,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .StarsTransactionPeerUnsupported => { return self.StarsTransactionPeerUnsupported.size(); },
                .StarsTransactionPeerAppStore => { return self.StarsTransactionPeerAppStore.size(); },
                .StarsTransactionPeerPlayMarket => { return self.StarsTransactionPeerPlayMarket.size(); },
                .StarsTransactionPeerPremiumBot => { return self.StarsTransactionPeerPremiumBot.size(); },
                .StarsTransactionPeerFragment => { return self.StarsTransactionPeerFragment.size(); },
                .StarsTransactionPeer => { return self.StarsTransactionPeer.size(); },
                .StarsTransactionPeerAds => { return self.StarsTransactionPeerAds.size(); },
        }
    }
};
const StarsTopupOptionEnumID = enum(u32) {
    StarsTopupOption = 198776256,
};
const IStarsTopupOption = union(StarsTopupOptionEnumID) {
    StarsTopupOption: *const StarsTopupOption,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .StarsTopupOption => { return self.StarsTopupOption.size(); },
        }
    }
};
const StarsTransactionEnumID = enum(u32) {
    StarsTransaction = 178185410,
};
const IStarsTransaction = union(StarsTransactionEnumID) {
    StarsTransaction: *const StarsTransaction,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .StarsTransaction => { return self.StarsTransaction.size(); },
        }
    }
};
const PaymentsStarsStatusEnumID = enum(u32) {
    PaymentsStarsStatus = 3153736044,
};
const IPaymentsStarsStatus = union(PaymentsStarsStatusEnumID) {
    PaymentsStarsStatus: *const PaymentsStarsStatus,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .PaymentsStarsStatus => { return self.PaymentsStarsStatus.size(); },
        }
    }
};
const FoundStoryEnumID = enum(u32) {
    FoundStory = 3900361664,
};
const IFoundStory = union(FoundStoryEnumID) {
    FoundStory: *const FoundStory,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .FoundStory => { return self.FoundStory.size(); },
        }
    }
};
const StoriesFoundStoriesEnumID = enum(u32) {
    StoriesFoundStories = 3806230327,
};
const IStoriesFoundStories = union(StoriesFoundStoriesEnumID) {
    StoriesFoundStories: *const StoriesFoundStories,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .StoriesFoundStories => { return self.StoriesFoundStories.size(); },
        }
    }
};
const GeoPointAddressEnumID = enum(u32) {
    GeoPointAddress = 3729546643,
};
const IGeoPointAddress = union(GeoPointAddressEnumID) {
    GeoPointAddress: *const GeoPointAddress,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .GeoPointAddress => { return self.GeoPointAddress.size(); },
        }
    }
};
const StarsRevenueStatusEnumID = enum(u32) {
    StarsRevenueStatus = 2033461574,
};
const IStarsRevenueStatus = union(StarsRevenueStatusEnumID) {
    StarsRevenueStatus: *const StarsRevenueStatus,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .StarsRevenueStatus => { return self.StarsRevenueStatus.size(); },
        }
    }
};
const PaymentsStarsRevenueStatsEnumID = enum(u32) {
    PaymentsStarsRevenueStats = 3375085371,
};
const IPaymentsStarsRevenueStats = union(PaymentsStarsRevenueStatsEnumID) {
    PaymentsStarsRevenueStats: *const PaymentsStarsRevenueStats,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .PaymentsStarsRevenueStats => { return self.PaymentsStarsRevenueStats.size(); },
        }
    }
};
const PaymentsStarsRevenueWithdrawalUrlEnumID = enum(u32) {
    PaymentsStarsRevenueWithdrawalUrl = 497778871,
};
const IPaymentsStarsRevenueWithdrawalUrl = union(PaymentsStarsRevenueWithdrawalUrlEnumID) {
    PaymentsStarsRevenueWithdrawalUrl: *const PaymentsStarsRevenueWithdrawalUrl,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .PaymentsStarsRevenueWithdrawalUrl => { return self.PaymentsStarsRevenueWithdrawalUrl.size(); },
        }
    }
};
const PaymentsStarsRevenueAdsAccountUrlEnumID = enum(u32) {
    PaymentsStarsRevenueAdsAccountUrl = 961445665,
};
const IPaymentsStarsRevenueAdsAccountUrl = union(PaymentsStarsRevenueAdsAccountUrlEnumID) {
    PaymentsStarsRevenueAdsAccountUrl: *const PaymentsStarsRevenueAdsAccountUrl,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .PaymentsStarsRevenueAdsAccountUrl => { return self.PaymentsStarsRevenueAdsAccountUrl.size(); },
        }
    }
};
const InputStarsTransactionEnumID = enum(u32) {
    InputStarsTransaction = 543876817,
};
const IInputStarsTransaction = union(InputStarsTransactionEnumID) {
    InputStarsTransaction: *const InputStarsTransaction,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .InputStarsTransaction => { return self.InputStarsTransaction.size(); },
        }
    }
};
const StarsGiftOptionEnumID = enum(u32) {
    StarsGiftOption = 1577421297,
};
const IStarsGiftOption = union(StarsGiftOptionEnumID) {
    StarsGiftOption: *const StarsGiftOption,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .StarsGiftOption => { return self.StarsGiftOption.size(); },
        }
    }
};
const BotsPopularAppBotsEnumID = enum(u32) {
    BotsPopularAppBots = 428978491,
};
const IBotsPopularAppBots = union(BotsPopularAppBotsEnumID) {
    BotsPopularAppBots: *const BotsPopularAppBots,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .BotsPopularAppBots => { return self.BotsPopularAppBots.size(); },
        }
    }
};
const BotPreviewMediaEnumID = enum(u32) {
    BotPreviewMedia = 602479523,
};
const IBotPreviewMedia = union(BotPreviewMediaEnumID) {
    BotPreviewMedia: *const BotPreviewMedia,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .BotPreviewMedia => { return self.BotPreviewMedia.size(); },
        }
    }
};
const BotsPreviewInfoEnumID = enum(u32) {
    BotsPreviewInfo = 212278628,
};
const IBotsPreviewInfo = union(BotsPreviewInfoEnumID) {
    BotsPreviewInfo: *const BotsPreviewInfo,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .BotsPreviewInfo => { return self.BotsPreviewInfo.size(); },
        }
    }
};
const StarsSubscriptionPricingEnumID = enum(u32) {
    StarsSubscriptionPricing = 88173912,
};
const IStarsSubscriptionPricing = union(StarsSubscriptionPricingEnumID) {
    StarsSubscriptionPricing: *const StarsSubscriptionPricing,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .StarsSubscriptionPricing => { return self.StarsSubscriptionPricing.size(); },
        }
    }
};
const StarsSubscriptionEnumID = enum(u32) {
    StarsSubscription = 1401868056,
};
const IStarsSubscription = union(StarsSubscriptionEnumID) {
    StarsSubscription: *const StarsSubscription,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .StarsSubscription => { return self.StarsSubscription.size(); },
        }
    }
};
const MessageReactorEnumID = enum(u32) {
    MessageReactor = 1269016922,
};
const IMessageReactor = union(MessageReactorEnumID) {
    MessageReactor: *const MessageReactor,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .MessageReactor => { return self.MessageReactor.size(); },
        }
    }
};
const StarsGiveawayOptionEnumID = enum(u32) {
    StarsGiveawayOption = 2496562474,
};
const IStarsGiveawayOption = union(StarsGiveawayOptionEnumID) {
    StarsGiveawayOption: *const StarsGiveawayOption,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .StarsGiveawayOption => { return self.StarsGiveawayOption.size(); },
        }
    }
};
const StarsGiveawayWinnersOptionEnumID = enum(u32) {
    StarsGiveawayWinnersOption = 1411605001,
};
const IStarsGiveawayWinnersOption = union(StarsGiveawayWinnersOptionEnumID) {
    StarsGiveawayWinnersOption: *const StarsGiveawayWinnersOption,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .StarsGiveawayWinnersOption => { return self.StarsGiveawayWinnersOption.size(); },
        }
    }
};
const StarGiftEnumID = enum(u32) {
    StarGift = 2929816814,
};
const IStarGift = union(StarGiftEnumID) {
    StarGift: *const StarGift,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .StarGift => { return self.StarGift.size(); },
        }
    }
};
const PaymentsStarGiftsEnumID = enum(u32) {
    PaymentsStarGiftsNotModified = 2743640936,
    PaymentsStarGifts = 2417396202,
};
const IPaymentsStarGifts = union(PaymentsStarGiftsEnumID) {
    PaymentsStarGiftsNotModified: *const PaymentsStarGiftsNotModified,
    PaymentsStarGifts: *const PaymentsStarGifts,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .PaymentsStarGiftsNotModified => { return self.PaymentsStarGiftsNotModified.size(); },
                .PaymentsStarGifts => { return self.PaymentsStarGifts.size(); },
        }
    }
};
const UserStarGiftEnumID = enum(u32) {
    UserStarGift = 4003764846,
};
const IUserStarGift = union(UserStarGiftEnumID) {
    UserStarGift: *const UserStarGift,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .UserStarGift => { return self.UserStarGift.size(); },
        }
    }
};
const PaymentsUserStarGiftsEnumID = enum(u32) {
    PaymentsUserStarGifts = 1801827607,
};
const IPaymentsUserStarGifts = union(PaymentsUserStarGiftsEnumID) {
    PaymentsUserStarGifts: *const PaymentsUserStarGifts,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .PaymentsUserStarGifts => { return self.PaymentsUserStarGifts.size(); },
        }
    }
};
const MessageReportOptionEnumID = enum(u32) {
    MessageReportOption = 2030298073,
};
const IMessageReportOption = union(MessageReportOptionEnumID) {
    MessageReportOption: *const MessageReportOption,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .MessageReportOption => { return self.MessageReportOption.size(); },
        }
    }
};
const ReportResultEnumID = enum(u32) {
    ReportResultChooseOption = 4041531574,
    ReportResultAddComment = 1862904881,
    ReportResultReported = 2377333835,
};
const IReportResult = union(ReportResultEnumID) {
    ReportResultChooseOption: *const ReportResultChooseOption,
    ReportResultAddComment: *const ReportResultAddComment,
    ReportResultReported: *const ReportResultReported,
    pub fn size(self: *const @This()) usize {
        switch (self.*) {
                .ReportResultChooseOption => { return self.ReportResultChooseOption.size(); },
                .ReportResultAddComment => { return self.ReportResultAddComment.size(); },
                .ReportResultReported => { return self.ReportResultReported.size(); },
        }
    }
};
